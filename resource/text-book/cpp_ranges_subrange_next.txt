std::ranges::subrange<I,S,K>::next

   From cppreference.com
   < cpp | ranges | subrange

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Ranges library
   Range access
   begin
   cbegin
   end
   cend
   rbegin
   crbegin
   rend
   crend
   size
   ssize
   data
   cdata
   empty
   Range conversions
   std::from_range_t
   std::from_range
   (C++23)(C++23)
   to
   (C++23)
   Range primitives
   range_size_trange_difference_trange_value_trange_reference_t
   iterator_tconst_iterator_tsentinel_tconst_sentinel_t
   (C++23)(C++23)
   range_const_reference_trange_rvalue_reference_trange_common_reference_t
   (C++23)
   elements_of
   (C++23)
   Dangling iterator handling
   dangling
   borrowed_iterator_t
   borrowed_subrange_t
   Range concepts
   range
   borrowed_range
   sized_range
   constant_range
   (C++23)
   common_range
   view
   viewable_range
   input_range
   output_range
   forward_range
   bidirectional_range
   random_access_range
   contiguous_range
   Views
   view_interface
   subrange
   Range factories
   empty_viewviews::empty
   single_viewviews::single
   iota_viewviews::iota
   repeat_viewviews::repeat
   (C++23)(C++23)
   basic_istream_viewviews::istream
   Range adaptors
   views::all_tviews::all
   ref_view
   owning_view
   as_rvalue_viewviews::as_rvalue
   (C++23)(C++23)
   filter_viewviews::filter
   transform_viewviews::transform
   take_viewviews::take
   take_while_viewviews::take_while
   concat_viewviews::concat
   (C++26)(C++26)
   drop_viewviews::drop
   drop_while_viewviews::drop_while
   join_viewviews::join
   join_with_viewviews::join_with
   (C++23)(C++23)
   lazy_split_viewviews::lazy_split
   split_viewviews::split
   views::counted
   common_viewviews::common
   reverse_viewviews::reverse
   as_const_viewviews::as_const
   (C++23)(C++23)
   elements_viewviews::elements
   keys_viewviews::keys
   values_viewviews::values
   enumerate_viewviews::enumerate
   (C++23)(C++23)
   zip_viewviews::zip
   (C++23)(C++23)
   zip_transform_viewviews::zip_transform
   (C++23)(C++23)
   adjacent_viewviews::adjacent
   (C++23)(C++23)
   views::pairwise
   (C++23)
   adjacent_transform_viewviews::adjacent_transform
   (C++23)(C++23)
   views::pairwise_transform
   (C++23)
   chunk_viewviews::chunk
   (C++23)(C++23)
   slide_viewviews::slide
   (C++23)(C++23)
   chunk_by_viewviews::chunk_by
   (C++23)(C++23)
   stride_viewviews::stride
   (C++23)(C++23)
   cartesian_product_viewviews::cartesian_product
   (C++23)(C++23)
   Range generators
   std::generator
   (C++23)
   Range adaptor objects
   Range adaptor closure objects
   range_adaptor_closure
   (C++23)
   Helper items
   copyable-box
   movable-box
   (until C++23)(C++23)
   simple-view
   non-propagating-cache

   std::ranges::subrange
   Member functions
   subrange::subrange
   subrange::operator PairLike
   Observers
   subrange::begin
   subrange::end
   subrange::empty
   subrange::size
   Iterator operations
   subrange::advance
   subrange::next
   subrange::prev
   Deduction guides
   Non-member functions
   get(std::ranges::subrange)
   Helper types
   subrange_kind
   tuple_size<std::ranges::subrange>
   tuple_element<std::ranges::subrange>

   [[nodiscard]] constexpr subrange next(std::iter_difference_t<I> n = 1)
   const&
       requires std::forward_iterator<I>;
   (1) (since C++20)
   [[nodiscard]] constexpr subrange next(std::iter_difference_t<I> n = 1)
   &&;
   (2) (since C++20)
   1) Obtains a subrange whose iterator is incremented by min(n, size())
   times or decremented by -n times respect to that of *this, when n >= 0
   or n < 0 respectively. Equivalent to auto tmp = *this; tmp.advance(n);
   return tmp;.
   2) Increments the stored iterator by min(n, size()) times or
   decremented it by -n times, when n >= 0 or n < 0 respectively, and then
   move-constructs the result from *this. Equivalent to advance(n); return
   std::move(*this);.

   The behavior is undefined if:
     * I does not model bidirectional_iterator and n < 0, or
     * the stored iterator is decremented after becoming a
       non-decrementable value.

Parameter

   n - number of maximal increments of the iterator

Return value

   A subrange whose iterator is incremented by min(n, size()) times or
   decremented by -n times respect to the original value of that of *this,
   when n >= 0 or n < 0 respectively.

Complexity

   Generally min(n, size()) increments or -n decrements on the iterator,
   when n >= 0 or n < 0 respectively.

   Constant if I models random_access_iterator, and either n < 0 or
   std::sized_sentinel_for<S, I> is modeled.

Notes

   A call to (2) may leave *this in a valid but unspecified state,
   depending on the behavior of the move constructor of I and S.

Example

   This section is incomplete
   Reason: no example

See also

   prev
   (C++20)
   obtains a copy of the subrange with its iterator decremented by a given
   distance
   (public member function)
   advance
   (C++20)
   advances the iterator by given distance
   (public member function)
   next
   (C++11)
   increment an iterator
   (function template)
   ranges::next
   (C++20)
   increment an iterator by a given distance or to a bound
   (niebloid)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/ranges/subrange/
   next&oldid=129339"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 4 June 2021, at 10:23.
     * This page has been accessed 5,205 times.
