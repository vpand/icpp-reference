std::semiregular

   From cppreference.com
   < cpp | concepts

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Concepts library
   Core language concepts
   same_as
   derived_from
   convertible_to
   common_reference_with

   common_with
   integral
   signed_integral
   unsigned_integral
   floating_point
   swappableswappable_with
   destructible
   constructible_from
   default_initializable
   move_constructible
   copy_constructible
   assignable_from
   Comparison concepts
   equality_comparableequality_comparable_with
   totally_orderedtotally_ordered_with
   Object concepts
   movable
   copyable
   semiregular
   regular
   Callable concepts
   invocableregular_invocable
   predicate
   relation
   equivalence_relation
   strict_weak_order
   Exposition-only concepts
   boolean-testable

   Defined in header <concepts>
   template< class T >
   concept semiregular = std::copyable<T> &&
   std::default_initializable<T>;
                               (since C++20)

   The semiregular concept specifies that a type is both copyable and
   default constructible. It is satisfied by types that behave similarly
   to built-in types like int, except that they need not support
   comparison with ==.

Example

   Run this code
#include <concepts>
#include <iostream>

template<std::semiregular T>
// Credit Alexander Stepanov
// concepts are requirements on T
// Requirement on T: T is semiregular
// T a(b); or T a = b; => copy constructor
// T a; => default constructor
// a = b; => assignment
struct Single
{
    T value;
    // Aggregation initialization for Single behaves like following constructor:
    // explicit Single(const T& x) : value(x) {}

    // Implicitly declared special member functions behave like following defini
tions,
    // except that they may have additional properties:
    // Single(const Single& x) : value(x.value) {}
    // Single() {}
    // ~Single() {}
    // Single& operator=(const Single& x) { value = x.value; return *this; }
    // comparison operator is not defined; it is not required by `semiregular` c
oncept
    // bool operator==(Single const& other) const = delete;
};

void print(std::semiregular auto x)
{
    std::cout << x.value << '\n';
}

int main()
{
    Single<int> myInt1{4};      // aggregate initialization: myInt1.value = 4
    Single<int> myInt2(myInt1); // copy constructor
    Single<int> myInt3;         // default constructor
    myInt3 = myInt2;            // copy assignment operator
//  myInt1 == myInt2;           // Error: operator== is not defined

    print(myInt1); // ok: Single<int> is a `semiregular` type
    print(myInt2);
    print(myInt3);

}   // Single<int> variables are destroyed here

   Output:
4
4
4

See also

   regular
   (C++20)
   specifies that a type is regular, that is, it is both semiregular and
   equality_comparable
   (concept)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/concepts/semireg
   ular&oldid=161759"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 30 October 2023, at 00:55.
     * This page has been accessed 37,353 times.
