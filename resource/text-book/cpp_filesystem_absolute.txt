std::filesystem::absolute

   From cppreference.com
   < cpp | filesystem

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Filesystem library
   Classes
   filesystem::path
   filesystem::filesystem_error
   filesystem::directory_entry
   filesystem::directory_iterator
   filesystem::recursive_directory_iterator

   filesystem::file_status
   filesystem::space_info
   filesystem::file_type
   filesystem::perms
   filesystem::perm_options
   filesystem::copy_options
   filesystem::directory_options
   filesystem::file_time_type
   Functions
   filesystem::absolute
   filesystem::canonicalfilesystem::weakly_canonical
   filesystem::relativefilesystem::proximate
   filesystem::copy
   filesystem::copy_file
   filesystem::copy_symlink
   filesystem::create_directory
   filesystem::create_directories
   filesystem::create_hard_link
   filesystem::create_symlink
   filesystem::create_directory_symlink
   filesystem::current_path
   filesystem::exists
   filesystem::equivalent
   filesystem::file_size
   filesystem::hard_link_count
   filesystem::last_write_time
   filesystem::permissions
   filesystem::read_symlink
   filesystem::remove
   filesystem::remove_all
   filesystem::rename
   filesystem::resize_file
   filesystem::space
   filesystem::status
   filesystem::symlink_status
   filesystem::temp_directory_path
   File types
   filesystem::is_block_file
   filesystem::is_character_file
   filesystem::is_directory
   filesystem::is_empty
   filesystem::status_known
   filesystem::is_fifo
   filesystem::is_other
   filesystem::is_regular_file
   filesystem::is_socket
   filesystem::is_symlink

   Defined in header <filesystem>
   path absolute( const std::filesystem::path& p );
   (1) (since C++17)
   path absolute( const std::filesystem::path& p, std::error_code& ec );
   (2) (since C++17)

   Returns a path referencing the same file system location as p, for
   which filesystem::path::is_absolute() is true.
   2) This non-throwing overload returns default-constructed path if an
   error occurs.

Parameters

   p  - path to convert to absolute form
   ec - out-parameter for error reporting in the non-throwing overload

Return value

   Returns an absolute (although not necessarily canonical) pathname
   referencing the same file as p.

Exceptions

   Any overload not marked noexcept may throw std::bad_alloc if memory
   allocation fails.
   1) Throws std::filesystem::filesystem_error on underlying OS API
   errors, constructed with p as the first path argument and the OS error
   code as the error code argument.
   2) Sets a std::error_code& parameter to the OS API error code if an OS
   API call fails, and executes ec.clear() if no errors occur.

Notes

   Implementations are encouraged to not consider p not existing to be an
   error.

   For POSIX-based operating systems, std::filesystem::absolute(p) is
   equivalent to std::filesystem::current_path() / p except for when p is
   the empty path.

   For Windows, std::filesystem::absolute may be implemented as a call to
   GetFullPathNameW.

Example

   Run this code
#include <filesystem>
#include <iostream>
namespace fs = std::filesystem;

int main()
{
    std::filesystem::path p = "foo.c";
    std::cout << "Current path is " << std::filesystem::current_path() << '\n';
    std::cout << "Absolute path for " << p << " is " << fs::absolute(p) << '\n';
}

   Possible output:
Current path is "/tmp/1666297965.0051296"
Absolute path for "foo.c" is "/tmp/1666297965.0051296/foo.c"

See also

   canonicalweakly_canonical
   (C++17)
   composes a canonical path
   (function)
   relativeproximate
   (C++17)
   composes a relative path
   (function)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/filesystem/absol
   ute&oldid=157936"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 4 September 2023, at 09:32.
     * This page has been accessed 165,033 times.
