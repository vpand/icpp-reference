std::logb, std::logbf, std::logbl

   From cppreference.com
   < cpp | numeric | math

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Numerics library
   Common mathematical functions
   Mathematical special functions (C++17)
   Mathematical constants (C++20)
   Basic linear algebra algorithms (C++26)
   Floating-point environment (C++11)
   Complex numbers
   Numeric arrays
   Pseudo-random number generation
   Factor operations
   gcd
   (C++17)
   lcm
   (C++17)
   Interpolations
   midpoint
   (C++20)
   lerp
   (C++20)
   Saturation arithmetic
   add_sat
   (C++26)
   sub_sat
   (C++26)
   saturate_cast
   (C++26)
   mul_sat
   (C++26)
   div_sat
   (C++26)
   Generic numeric operations
   iota
   (C++11)
   ranges::iota
   (C++23)
   accumulate
   inner_product
   adjacent_difference
   partial_sum
   reduce
   (C++17)
   transform_reduce
   (C++17)
   inclusive_scan
   (C++17)
   exclusive_scan
   (C++17)
   transform_inclusive_scan
   (C++17)
   transform_exclusive_scan
   (C++17)
   Bit operations
   has_single_bit
   (C++20)
   bit_cast
   (C++20)
   bit_ceil
   (C++20)
   bit_floor
   (C++20)
   bit_width
   (C++20)
   rotl
   (C++20)
   rotr
   (C++20)
   popcount
   (C++20)
   countl_zero
   (C++20)
   countl_one
   (C++20)
   countr_zero
   (C++20)
   countr_one
   (C++20)
   byteswap
   (C++23)
   endian
   (C++20)

   Common mathematical functions
   Functions
   Basic operations
   abs(int)labsllabsimaxabs
   (C++11)
   abs(float)fabs
   divldivlldivimaxdiv
   (C++11)
   fmod
   remainder
   (C++11)
   remquo
   (C++11)
   fma
   (C++11)
   fmax
   (C++11)
   fmin
   (C++11)
   fdim
   (C++11)
   nannanfnanl
   (C++11)(C++11)(C++11)
   Exponential functions
   exp
   exp2
   (C++11)
   expm1
   (C++11)
   log
   log10
   log1p
   (C++11)
   log2
   (C++11)
   Power functions
   sqrt
   cbrt
   (C++11)
   hypot
   (C++11)
   pow
   Trigonometric and hyperbolic functions
   sin
   cos
   tan
   asin
   acos
   atan
   atan2
   sinh
   cosh
   tanh
   asinh
   (C++11)
   acosh
   (C++11)
   atanh
   (C++11)
   Error and gamma functions
   erf
   (C++11)
   erfc
   (C++11)
   lgamma
   (C++11)
   tgamma
   (C++11)
   Nearest integer floating point operations
   ceil
   floor
   roundlroundllround
   (C++11)(C++11)(C++11)
   trunc
   (C++11)
   nearbyint
   (C++11)
   rintlrintllrint
   (C++11)(C++11)(C++11)
   Floating point manipulation functions
   ldexp
   scalbnscalbln
   (C++11)(C++11)
   ilogb
   (C++11)
   logb
   (C++11)
   frexp
   modf
   nextafternexttoward
   (C++11)(C++11)
   copysign
   (C++11)
   Classification/Comparison
   fpclassify
   (C++11)
   isfinite
   (C++11)
   isinf
   (C++11)
   isnan
   (C++11)
   isnormal
   (C++11)
   signbit
   (C++11)
   isgreater
   (C++11)
   isgreaterequal
   (C++11)
   isless
   (C++11)
   islessequal
   (C++11)
   islessgreater
   (C++11)
   isunordered
   (C++11)
   Macro constants
   HUGE_VALFHUGE_VALHUGE_VALL
   (C++11)(C++11)
   INFINITY
   (C++11)
   NAN
   (C++11)
   math_errhandlingMATH_ERRNOMATH_ERREXCEPT
   (C++11)
   FP_NORMALFP_SUBNORMALFP_ZEROFP_INFINITEFP_NAN
   (C++11)(C++11)(C++11)(C++11)(C++11)

   Defined in header <cmath>
   (1)
   float       logb ( float num );

   double      logb ( double num );
   long double logb ( long double num );
   (until C++23)
   constexpr /* floating-point-type */
               logb ( /* floating-point-type */ num );
   (since C++23)
   float       logbf( float num );
   (2) (since C++11)
   (constexpr since C++23)
   long double logbl( long double num );
   (3) (since C++11)
   (constexpr since C++23)
   Additional overloads (since C++11)
   Defined in header <cmath>
   template< class Integer >
   double      logb ( Integer num );
   (A) (constexpr since C++23)
   1-3) Extracts the value of the unbiased radix-independent exponent from
   the floating-point argument num, and returns it as a floating-point
   value. The library provides overloads of std::logb for all
   cv-unqualified floating-point types as the type of the parameter.(since
   C++23)
   A) Additional overloads are provided for all integer types, which are
   treated as double.
   (since C++11)

   Formally, the unbiased exponent is the signed integral part of log
   r|num| (returned by this function as a floating-point value), for
   non-zero num, where r is std::numeric_limits<T>::radix and T is the
   floating-point type of num. If num is subnormal, it is treated as
   though it was normalized.

Parameters

   num - floating-point or integer value

Return value

   If no errors occur, the unbiased exponent of num is returned as a
   signed floating-point value.

   If a domain error occurs, an implementation-defined value is returned.

   If a pole error occurs, -HUGE_VAL, -HUGE_VALF, or -HUGE_VALL is
   returned.

Error handling

   Errors are reported as specified in math_errhandling.

   Domain or range error may occur if num is zero.

   If the implementation supports IEEE floating-point arithmetic (IEC
   60559),
     * If num is ±0, -infty is returned and FE_DIVBYZERO is raised.
     * If num is ±infty, +infty is returned.
     * If num is NaN, NaN is returned.
     * In all other cases, the result is exact (FE_INEXACT is never
       raised) and the current rounding mode is ignored.

Notes

   POSIX requires that a pole error occurs if num is ±0.

   The value of the exponent returned by std::logb is always 1 less than
   the exponent returned by std::frexp because of the different
   normalization requirements: for the exponent e returned by std::logb,
   |num*r-e
   | is between 1 and r (typically between 1 and 2), but for the exponent
   e returned by std::frexp, |num*2-e
   | is between 0.5 and 1.

   The additional overloads are not required to be provided exactly as
   (A). They only need to be sufficient to ensure that for their argument
   num of integer type, std::logb(num) has the same effect as
   std::logb(static_cast<double>(num)).

Example

   Compares different floating-point decomposition functions:
   Run this code
#include <cfenv>
#include <cmath>
#include <iostream>
#include <limits>
// #pragma STDC FENV_ACCESS ON

int main()
{
    double f = 123.45;
    std::cout << "Given the number " << f << " or " << std::hexfloat
              << f << std::defaultfloat << " in hex,\n";

    double f3;
    double f2 = std::modf(f, &f3);
    std::cout << "modf() makes " << f3 << " + " << f2 << '\n';

    int i;
    f2 = std::frexp(f, &i);
    std::cout << "frexp() makes " << f2 << " * 2^" << i << '\n';

    i = std::ilogb(f);
    std::cout << "logb()/ilogb() make " << f / std::scalbn(1.0, i) << " * "
              << std::numeric_limits<double>::radix
              << "^" << std::ilogb(f) << '\n';

    // error handling
    std::feclearexcept(FE_ALL_EXCEPT);

    std::cout << "logb(0) = " << std::logb(0) << '\n';
    if (std::fetestexcept(FE_DIVBYZERO))
        std::cout << "    FE_DIVBYZERO raised\n";
}

   Possible output:
Given the number 123.45 or 0x1.edccccccccccdp+6 in hex,
modf() makes 123 + 0.45
frexp() makes 0.964453 * 2^7
logb()/ilogb() make 1.92891 * 2^6
logb(0) = -Inf
    FE_DIVBYZERO raised

See also

   frexpfrexpffrexpl
   (C++11)(C++11)
   decomposes a number into significand and base-2 exponent
   (function)
   ilogbilogbfilogbl
   (C++11)(C++11)(C++11)
   extracts exponent of the number
   (function)
   scalbnscalbnfscalbnlscalblnscalblnfscalblnl
   (C++11)(C++11)(C++11)(C++11)(C++11)(C++11)
   multiplies a number by FLT_RADIX raised to a power
   (function)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/numeric/math/log
   b&oldid=160772"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 15 October 2023, at 22:46.
     * This page has been accessed 38,373 times.
