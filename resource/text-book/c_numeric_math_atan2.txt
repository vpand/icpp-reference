atan2, atan2f, atan2l

   From cppreference.com
   < c | numeric | math

   C
   Language
   Headers
   Type support
   Program utilities
   Variadic function support
   Error handling
   Dynamic memory management
   Strings library
   Algorithms
   Numerics
   Date and time utilities
   Input/output support
   Localization support
   Concurrency support (C11)
   Technical Specifications
   Symbol index

   Numerics
   Common mathematical functions
   Floating-point environment (C99)
   Pseudo-random number generation
   Complex number arithmetic (C99)
   Type-generic math (C99)

   Common mathematical functions
   Types
   div_tldiv_tlldiv_timaxdiv_t
   (C99)(C99)
   float_tdouble_t
   (C99)(C99)
   _Decimal32_t_Decimal64_t
   (C23)(C23)
   Functions
   Basic operations
   abslabsllabsimaxabs
   (C99)(C99)
   fabs
   divldivlldivimaxdiv
   (C99)(C99)
   fmod
   remainder
   (C99)
   remquo
   (C99)
   fma
   (C99)
   fdim
   (C99)
   nannanfnanlnandN
   (C99)(C99)(C99)(C23)
   Maximum/minimum operations
   fmax
   (C99)
   fmaximum
   (C23)
   fmaximum_mag
   (C23)
   fmaximum_num
   (C23)
   fmaximum_mag_num
   (C23)
   fmin
   (C99)
   fminimum
   (C23)
   fminimum_mag
   (C23)
   fminimum_num
   (C23)
   fminimum_mag_num
   (C23)
   Exponential functions
   exp
   exp10
   (C23)
   exp2
   (C99)
   expm1
   (C99)
   exp10m1
   (C23)
   exp2m1
   (C23)
   log
   log10
   log2
   (C99)
   log1plogp1
   (C99)(C23)
   log10p1
   (C23)
   log2p1
   (C23)
   Power functions
   sqrt
   cbrt
   (C99)
   rootn
   (C23)
   rsqrt
   (C23)
   hypot
   (C99)
   compound
   (C23)
   pow
   pown
   (C23)
   powr
   (C23)
   Trigonometric and hyperbolic functions
   sin
   cos
   tan
   asin
   acos
   atan
   atan2
   sinpi
   (C23)
   cospi
   (C23)
   tanpi
   (C23)
   asinpi
   (C23)
   acospi
   (C23)
   atanpi
   (C23)
   atan2pi
   (C23)
   sinh
   cosh
   tanh
   asinh
   (C99)
   acosh
   (C99)
   atanh
   (C99)
   Error and gamma functions
   erf
   (C99)
   erfc
   (C99)
   lgamma
   (C99)
   tgamma
   (C99)
   Nearest integer floating-point operations
   ceil
   floor
   roundlroundllround
   (C99)(C99)(C99)
   roundeven
   (C23)
   trunc
   (C99)
   nearbyint
   (C99)
   rintlrintllrint
   (C99)(C99)(C99)
   fromfpfromfpxufromfpufromfpx
   (C23)(C23)(C23)(C23)
   Floating-point manipulation functions
   ldexp
   frexp
   scalbnscalbln
   (C99)(C99)
   ilogbllogb
   (C99)(C23)
   logb
   (C99)
   modf
   nextafternexttoward
   (C99)(C99)
   nextupnextdown
   (C23)(C23)
   copysign
   (C99)
   canonicalize
   (C23)
   Narrowing operations
   fadd
   (C23)
   fsub
   (C23)
   fmul
   (C23)
   fdiv
   (C23)
   ffma
   (C23)
   fsqrt
   (C23)
   Quantum and quantum exponent functions
   quantizedN
   (C23)
   samequantumdN
   (C23)
   quantumdN
   (C23)
   llquantexpdN
   (C23)
   Decimal re-encoding functions
   encodedecdN
   (C23)
   decodedecdN
   (C23)
   encodebindN
   (C23)
   decodebindN
   (C23)
   Total order and payload functions
   totalorder
   (C23)
   getpayload
   (C23)
   setpayload
   (C23)
   setpayloadsig
   (C23)
   Classification
   fpclassify
   (C99)
   iscanonical
   (C23)
   isfinite
   (C99)
   isinf
   (C99)
   isnan
   (C99)
   isnormal
   (C99)
   signbit
   (C99)
   issubnormal
   (C23)
   iszero
   (C23)
   isgreater
   (C99)
   isgreaterequal
   (C99)
   isless
   (C99)
   islessequal
   (C99)
   islessgreater
   (C99)
   isunordered
   (C99)
   issignaling
   (C23)
   iseqsig
   (C23)
   Macro constants
   Special floating-point values
   HUGE_VALFHUGE_VALHUGE_VALLHUGE_VALDN
   (C99)(C99)(C23)
   INFINITYDEC_INFINITY
   (C99)(C23)
   NANDEC_NAN
   (C99)(C23)
   Arguments and return values
   FP_ILOGB0FP_ILOGBNAN
   (C99)(C99)
   FP_INT_UPWARDFP_INT_DOWNWARDFP_INT_TOWARDZEROFP_INT_TONEARESTFROMZEROFP
   _INT_TONEAREST
   (C23)(C23)(C23)(C23)(C23)
   FP_LLOGB0FP_LLOGBNAN
   (C23)(C23)
   FP_NORMALFP_SUBNORMALFP_ZEROFP_INFINITEFP_NAN
   (C99)(C99)(C99)(C99)(C99)
   Error handling
   MATH_ERRNOMATH_ERRNOEXCEPT
   (C99)(C99)
   math_errhandling
   (C99)
   Fast operation indicators
   FP_FAST_FMAFFP_FAST_FMA
   (C99)(C99)
   FP_FAST_FADDFP_FAST_FADDLFP_FAST_DADDLFP_FAST_DMADDDN
   (C23)(C23)(C23)(C23)
   FP_FAST_FMULFP_FAST_FMULLFP_FAST_DMULLFP_FAST_DMMULDN
   (C23)(C23)(C23)(C23)
   FP_FAST_FFMAFP_FAST_FFMALFP_FAST_DFMALFP_FAST_DMFMADN
   (C23)(C23)(C23)(C23)
   FP_FAST_FMALFP_FAST_FMADN
   (C99)(C23)
   FP_FAST_FSUBFP_FAST_FSUBLFP_FAST_DSUBLFP_FAST_DMSUBDN
   (C23)(C23)(C23)(C23)
   FP_FAST_FDIVFP_FAST_FDIVLFP_FAST_DDIVLFP_FAST_DMDIVDN
   (C23)(C23)(C23)(C23)
   FP_FAST_FSQRTFP_FAST_FSQRTLFP_FAST_DSQRTLFP_FAST_DMSQRTDN
   (C23)(C23)(C23)(C23)

   Defined in header <math.h>
   float       atan2f( float y, float x );
   (1)                                                   (since C99)
   double      atan2( double y, double x );
   (2)
   long double atan2l( long double y, long double x );
   (3)                                                   (since C99)
   _Decimal32  atan2d32( _Decimal32 y, _Decimal32 x );
   (4)                                                   (since C23)
   _Decimal64  atan2d64( _Decimal64 y, _Decimal64 x );
   (5)                                                   (since C23)
   _Decimal128 atan2d128( _Decimal128 y, _Decimal128 x );
   (6)                                                   (since C23)
   Defined in header <tgmath.h>
   #define atan2( y, x )
   (7)                                                   (since C99)
   1-6) Computes the arc tangent of y / x using the signs of arguments to
   determine the correct quadrant.
   7) Type-generic macro: If any argument has type long double, (3)
   (atan2l) is called. Otherwise, if any argument has integer type or has
   type double, (2) (atan2) is called. Otherwise, (1) (atan2f) is called.

   The functions (4-6) are declared if and only if the implementation
   predefines __STDC_IEC_60559_DFP__ (i.e. the implementation supports
   decimal floating-point numbers).
   (since C23)

Parameters

   x, y - floating-point value

Return value

   If no errors occur, the arc tangent of y / x (arctan(
   y
   x
   )) in the range [-p ; +p] radians, is returned.
   Y argument
   Return value
   X argument

   If a domain error occurs, an implementation-defined value is returned.

   If a range error occurs due to underflow, the correct result (after
   rounding) is returned.

Error handling

   Errors are reported as specified in math_errhandling.

   Domain error may occur if x and y are both zero.

   If the implementation supports IEEE floating-point arithmetic (IEC
   60559):
     * If x and y are both zero, domain error does not occur;
     * If x and y are both zero, range error does not occur either;
     * If y is zero, pole error does not occur;
     * If y is ±0 and x is negative or -0, ±p is returned;
     * If y is ±0 and x is positive or +0, ±0 is returned;
     * If y is ±infty and x is finite, ±p/2 is returned;
     * If y is ±infty and x is -infty, ±3p/4 is returned;
     * If y is ±infty and x is +infty, ±p/4 is returned;
     * If x is ±0 and y is negative, -p/2 is returned;
     * If x is ±0 and y is positive, +p/2 is returned;
     * If x is -infty and y is finite and positive, +p is returned;
     * If x is -infty and y is finite and negative, -p is returned;
     * If x is +infty and y is finite and positive, +0 is returned;
     * If x is +infty and y is finite and negative, -0 is returned;
     * If either x is NaN or y is NaN, NaN is returned.

Notes

   atan2(y, x) is equivalent to carg(x + I*y).

   POSIX specifies that in case of underflow, y / x is the value returned,
   and if that is not supported, an implementation-defined value no
   greater than DBL_MIN, FLT_MIN, and LDBL_MIN is returned.

Example

   Run this code
#include <math.h>
#include <stdio.h>

int main(void)
{
    // normal usage: the signs of the two arguments determine the quadrant
    // atan2(1,1) = +pi/4, Quad I
    printf("(+1,+1) cartesian is (%f,%f) polar\n", hypot( 1, 1), atan2( 1, 1));
    // atan2(1, -1) = +3pi/4, Quad II
    printf("(+1,-1) cartesian is (%f,%f) polar\n", hypot( 1,-1), atan2( 1,-1));
    // atan2(-1,-1) = -3pi/4, Quad III
    printf("(-1,-1) cartesian is (%f,%f) polar\n", hypot(-1,-1), atan2(-1,-1));
    // atan2(-1,-1) = -pi/4, Quad IV
    printf("(-1,+1) cartesian is (%f,%f) polar\n", hypot(-1, 1), atan2(-1, 1));

    // special values
    printf("atan2(0, 0) = %f atan2(0, -0)=%f\n", atan2(0,0), atan2(0,-0.0));
    printf("atan2(7, 0) = %f atan2(7, -0)=%f\n", atan2(7,0), atan2(7,-0.0));
}

   Output:
(+1,+1) cartesian is (1.414214,0.785398) polar
(+1,-1) cartesian is (1.414214,2.356194) polar
(-1,-1) cartesian is (1.414214,-2.356194) polar
(-1,+1) cartesian is (1.414214,-0.785398) polar
atan2(0, 0) = 0.000000 atan2(0, -0)=3.141593
atan2(7, 0) = 1.570796 atan2(7, -0)=1.570796

References

     * C23 standard (ISO/IEC 9899:2023):

          + 7.12.4.4 The atan2 functions (p: TBD)

          + 7.25 Type-generic math <tgmath.h> (p: TBD)

          + F.10.1.4 The atan2 functions (p: TBD)

     * C17 standard (ISO/IEC 9899:2018):

          + 7.12.4.4 The atan2 functions (p: 174)

          + 7.25 Type-generic math <tgmath.h> (p: 272-273)

          + F.10.1.4 The atan2 functions (p: 378)

     * C11 standard (ISO/IEC 9899:2011):

          + 7.12.4.4 The atan2 functions (p: 239)

          + 7.25 Type-generic math <tgmath.h> (p: 373-375)

          + F.10.1.4 The atan2 functions (p: 519)

     * C99 standard (ISO/IEC 9899:1999):

          + 7.12.4.4 The atan2 functions (p: 219)

          + 7.22 Type-generic math <tgmath.h> (p: 335-337)

          + F.9.1.4 The atan2 functions (p: 456)

     * C89/C90 standard (ISO/IEC 9899:1990):

          + 4.5.2.4 The atan2 function

See also

   asinasinfasinl
   (C99)(C99)
   computes arc sine (\({\small\arcsin{x} }\)arcsin(x))
   (function)
   acosacosfacosl
   (C99)(C99)
   computes arc cosine (\({\small\arccos{x} }\)arccos(x))
   (function)
   atanatanfatanl
   (C99)(C99)
   computes arc tangent (\({\small\arctan{x} }\)arctan(x))
   (function)
   cargcargfcargl
   (C99)(C99)(C99)
   computes the phase angle of a complex number
   (function)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=c/numeric/math/atan2
   &oldid=150042"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 3 April 2023, at 10:37.
     * This page has been accessed 90,115 times.
