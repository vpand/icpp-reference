Standard library header <mutex> (C++11)

   From cppreference.com
   < cpp | header

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Standard library headers
   Language support
   <cstddef>
   <cstdlib>
   <version> (C++20)
   <limits>
   <climits>
   <cfloat>
   <cstdint> (C++11)
   <stdfloat> (C++23)
   <new>
   <typeinfo>
   <source_location> (C++20)
   <exception>
   <initializer_list> (C++11)
   <compare> (C++20)
   <coroutine> (C++20)
   <csignal>
   <csetjmp>
   <cstdarg>
   Concepts
   <concepts> (C++20)
   Diagnostics
   <stdexcept>
   <stacktrace> (C++23)
   <cassert>
   <cerrno>
   <system_error> (C++11)
   Memory management
   <memory>
   <memory_resource> (C++17)
   <scoped_allocator> (C++11)
   Metaprogramming
   <type_traits> (C++11)
   <ratio> (C++11)
   General utilities
   <utility>
   <tuple> (C++11)
   <optional> (C++17)
   <variant> (C++17)
   <any> (C++17)
   <debugging> (C++26)
   <expected> (C++23)
   <bitset>
   <functional>
   <typeindex> (C++11)
   <execution> (C++17)
   <charconv> (C++17)
   <format> (C++20)
   <bit> (C++20)
   Strings
   <string_view> (C++17)
   <string>
   <cctype>
   <cwctype>
   <cstring>
   <cwchar>
   <cuchar> (C++11)
   Containers
   <array> (C++11)
   <deque>
   <forward_list> (C++11)
   <list>
   <vector>
   <map>
   <set>
   <unordered_map> (C++11)
   <unordered_set> (C++11)
   <queue>
   <stack>
   <flat_map> (C++23)
   <flat_set> (C++23)
   <span> (C++20)
   <mdspan> (C++23)
   Iterators
   <iterator>
   Ranges
   <ranges> (C++20)
   <generator> (C++23)
   Algorithms
   <algorithm>
   <numeric>
   Numerics
   <cfenv> (C++11)
   <complex>
   <random> (C++11)
   <valarray>
   <cmath>
   <linalg> (C++26)
   <numbers> (C++20)
   Time
   <chrono> (C++11)
   <ctime>
   Localization
   <locale>
   <clocale>
   <codecvt> (C++11/17/26*)
   <text_encoding> (C++26)
   Input/output
   <iosfwd>
   <iostream>
   <ios>
   <streambuf>
   <istream>
   <ostream>
   <iomanip>
   <print> (C++23)
   <sstream>
   <spanstream> (C++23)
   <fstream>
   <syncstream> (C++20)
   <filesystem> (C++17)
   <cstdio>
   <cinttypes> (C++11)
   <strstream> (C++98/26*)
   Regular expressions
   <regex> (C++11)
   Concurrency support
   <stop_token> (C++20)
   <thread> (C++11)
   <atomic> (C++11)
   <rcu> (C++26)
   <stdatomic.h> (C++23)
   <mutex> (C++11)
   <shared_mutex> (C++14)
   <condition_variable> (C++11)
   <semaphore> (C++20)
   <latch> (C++20)
   <barrier> (C++20)
   <future> (C++11)
   <hazard_pointer> (C++26)
   C compatibility
   <cstdbool> (C++11/17/20*)
   <ccomplex> (C++11/17/20*)
   <ctgmath> (C++11/17/20*)
   <cstdalign> (C++11/17/20*)
   <ciso646> (until C++20)

   This header is part of the thread support library.

Classes

   mutex
   (C++11)
   provides basic mutual exclusion facility
   (class)
   timed_mutex
   (C++11)
   provides mutual exclusion facility which implements locking with a
   timeout
   (class)
   recursive_mutex
   (C++11)
   provides mutual exclusion facility which can be locked recursively by
   the same thread
   (class)
   recursive_timed_mutex
   (C++11)
   provides mutual exclusion facility which can be locked recursively
   by the same thread and implements locking with a timeout
   (class)
   lock_guard
   (C++11)
   implements a strictly scope-based mutex ownership wrapper
   (class template)
   unique_lock
   (C++11)
   implements movable mutex ownership wrapper
   (class template)
   scoped_lock
   (C++17)
   deadlock-avoiding RAII wrapper for multiple mutexes
   (class template)
   defer_lock_ttry_to_lock_tadopt_lock_t
   (C++11)(C++11)(C++11)
   tag type used to specify locking strategy
   (class)
   once_flag
   (C++11)
   helper object to ensure that call_once invokes the function only once
   (class)

Constants

   defer_locktry_to_lockadopt_lock
   (C++11)(C++11)(C++11)
   tag constants used to specify locking strategy
   (constant)

Functions

   try_lock
   (C++11)
   attempts to obtain ownership of mutexes via repeated calls to try_lock
   (function template)
   lock
   (C++11)
   locks specified mutexes, blocks if any are unavailable
   (function template)
   call_once
   (C++11)
   invokes a function only once even if called from multiple threads
   (function template)
   std::swap(std::unique_lock)
   (C++11)
   specialization of std::swap for unique_lock
   (function template)

Synopsis

namespace std {
  class mutex;
  class recursive_mutex;
  class timed_mutex;
  class recursive_timed_mutex;

  struct defer_lock_t { explicit defer_lock_t() = default; };
  struct try_to_lock_t { explicit try_to_lock_t() = default; };
  struct adopt_lock_t { explicit adopt_lock_t() = default; };

  inline constexpr defer_lock_t  defer_lock { };
  inline constexpr try_to_lock_t try_to_lock { };
  inline constexpr adopt_lock_t  adopt_lock { };

  template<class Mutex> class lock_guard;
  template<class... MutexTypes> class scoped_lock;
  template<class Mutex> class unique_lock;

  template<class Mutex>
    void swap(unique_lock<Mutex>& x, unique_lock<Mutex>& y) noexcept;

  template<class L1, class L2, class... L3> int try_lock(L1&, L2&, L3&...);
  template<class L1, class L2, class... L3> void lock(L1&, L2&, L3&...);

  struct once_flag;

  template<class Callable, class... Args>
    void call_once(once_flag& flag, Callable&& func, Args&&... args);
}

Class std::mutex

namespace std {
  class mutex {
  public:
    constexpr mutex() noexcept;
    ~mutex();

    mutex(const mutex&) = delete;
    mutex& operator=(const mutex&) = delete;

    void lock();
    bool try_lock();
    void unlock();

    using native_handle_type = /* implementation-defined */;
    native_handle_type native_handle();
  };
}

Class std::recursive_mutex

namespace std {
  class recursive_mutex {
  public:
    recursive_mutex();
    ~recursive_mutex();

    recursive_mutex(const recursive_mutex&) = delete;
    recursive_mutex& operator=(const recursive_mutex&) = delete;

    void lock();
    bool try_lock() noexcept;
    void unlock();

    using native_handle_type = /* implementation-defined */;
    native_handle_type native_handle();
  };
}

Class std::timed_mutex

namespace std {
  class timed_mutex {
  public:
    timed_mutex();
    ~timed_mutex();

    timed_mutex(const timed_mutex&) = delete;
    timed_mutex& operator=(const timed_mutex&) = delete;

    void lock();    // blocking
    bool try_lock();
    template<class Rep, class Period>
      bool try_lock_for(const chrono::duration<Rep, Period>& rel_time);
    template<class Clock, class Duration>
      bool try_lock_until(const chrono::time_point<Clock, Duration>& abs_time);
    void unlock();

    using native_handle_type = /* implementation-defined */;
    native_handle_type native_handle();
  };
}

Class std::recursive_timed_mutex

namespace std {
  class recursive_timed_mutex {
  public:
    recursive_timed_mutex();
    ~recursive_timed_mutex();

    recursive_timed_mutex(const recursive_timed_mutex&) = delete;
    recursive_timed_mutex& operator=(const recursive_timed_mutex&) = delete;

    void lock();    // blocking
    bool try_lock() noexcept;
    template<class Rep, class Period>
      bool try_lock_for(const chrono::duration<Rep, Period>& rel_time);
    template<class Clock, class Duration>
      bool try_lock_until(const chrono::time_point<Clock, Duration>& abs_time);
    void unlock();

    using native_handle_type = /* implementation-defined */;
    native_handle_type native_handle();
  };
}

Class template std::lock_guard

namespace std {
  template<class Mutex>
  class lock_guard {
  public:
    using mutex_type = Mutex;

    explicit lock_guard(mutex_type& m);
    lock_guard(mutex_type& m, adopt_lock_t);
    ~lock_guard();

    lock_guard(const lock_guard&) = delete;
    lock_guard& operator=(const lock_guard&) = delete;

  private:
    mutex_type& pm;             // exposition only
  };
}

Class template std::scoped_lock

namespace std {
  template<class... MutexTypes>
  class scoped_lock {
  public:
    using mutex_type = Mutex;   // If MutexTypes... consists of the single type
Mutex

    explicit scoped_lock(MutexTypes&... m);
    explicit scoped_lock(adopt_lock_t, MutexTypes&... m);
    ~scoped_lock();

    scoped_lock(const scoped_lock&) = delete;
    scoped_lock& operator=(const scoped_lock&) = delete;

  private:
    tuple<MutexTypes&...> pm;   // exposition only
  };
}

Class template std::unique_lock

namespace std {
  template<class Mutex>
  class unique_lock {
  public:
    using mutex_type = Mutex;

    // construct/copy/destroy
    unique_lock() noexcept;
    explicit unique_lock(mutex_type& m);
    unique_lock(mutex_type& m, defer_lock_t) noexcept;
    unique_lock(mutex_type& m, try_to_lock_t);
    unique_lock(mutex_type& m, adopt_lock_t);
    template<class Clock, class Duration>
      unique_lock(mutex_type& m, const chrono::time_point<Clock, Duration>& abs_
time);
    template<class Rep, class Period>
      unique_lock(mutex_type& m, const chrono::duration<Rep, Period>& rel_time);
    ~unique_lock();

    unique_lock(const unique_lock&) = delete;
    unique_lock& operator=(const unique_lock&) = delete;

    unique_lock(unique_lock&& u) noexcept;
    unique_lock& operator=(unique_lock&& u);

    // locking
    void lock();
    bool try_lock();

    template<class Rep, class Period>
      bool try_lock_for(const chrono::duration<Rep, Period>& rel_time);
    template<class Clock, class Duration>
      bool try_lock_until(const chrono::time_point<Clock, Duration>& abs_time);

    void unlock();

    // modifiers
    void swap(unique_lock& u) noexcept;
    mutex_type* release() noexcept;

    // observers
    bool owns_lock() const noexcept;
    explicit operator bool () const noexcept;
    mutex_type* mutex() const noexcept;

  private:
    mutex_type* pm;             // exposition only
    bool owns;                  // exposition only
  };

  template<class Mutex>
    void swap(unique_lock<Mutex>& x, unique_lock<Mutex>& y) noexcept;
}

Class std::once_flag

namespace std {
  struct once_flag {
    constexpr once_flag() noexcept;

    once_flag(const once_flag&) = delete;
    once_flag& operator=(const once_flag&) = delete;
  };
}

   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/header/mutex&old
   id=163988"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 27 November 2023, at 08:18.
     * This page has been accessed 166,456 times.
