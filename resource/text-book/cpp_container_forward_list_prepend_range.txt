std::forward_list<T,Allocator>::prepend_range

   From cppreference.com
   < cpp | container | forward list


   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Containers library
   Sequence
   array
   (C++11)
   vector
   vector<bool>
   deque
   forward_list
   (C++11)
   list
   Associative
   set
   multiset
   map
   multimap
   Unordered associative
   unordered_set
   (C++11)
   unordered_multiset
   (C++11)
   unordered_map
   (C++11)
   unordered_multimap
   (C++11)
   Adaptors
   stack
   queue
   priority_queue
   flat_set
   (C++23)
   flat_multiset
   (C++23)
   flat_map
   (C++23)
   flat_multimap
   (C++23)
   Views
   span
   (C++20)
   mdspan
   (C++23)
   Iterator invalidation
   Member function table
   Non-member function table

   std::forward_list
   Member functions
   forward_list::forward_list
   forward_list::~forward_list

   forward_list::operator=
   forward_list::assign
   forward_list::assign_range
   (C++23)
   forward_list::get_allocator
   Element access
   forward_list::front
   Iterators
   forward_list::before_beginforward_list::cbefore_begin
   forward_list::beginforward_list::cbegin
   forward_list::endforward_list::cend
   Capacity
   forward_list::empty
   forward_list::max_size
   Modifiers
   forward_list::clear
   forward_list::emplace_front
   forward_list::push_front
   forward_list::insert_after
   forward_list::emplace_after
   forward_list::erase_after
   forward_list::insert_range_after
   (C++23)
   forward_list::prepend_range
   (C++23)
   forward_list::pop_front
   forward_list::resize
   forward_list::swap
   Operations
   forward_list::merge
   forward_list::splice_after
   forward_list::removeforward_list::remove_if
   forward_list::reverse
   forward_list::unique
   forward_list::sort
   Non-member functions
   operator==operator!=operator<operator>operator<=operator>=operator<=>
   (C++11)(C++11)(until C++20)(C++11)(until C++20)(C++11)(until
   C++20)(C++11)(until C++20)(C++11)(until C++20)(C++20)
   swap(std::forward_list)
   (C++11)
   erase(std::forward_list)erase_if(std::forward_list)
   (C++20)(C++20)
   Deduction guides(C++17)

   template< container-compatible-range<T> R >
   void prepend_range( R&& rg );
                                              (since C++23)

   Inserts, in non-reversing order, copies of elements in rg before
   begin(). Each iterator in the range rg is dereferenced exactly once.

   No iterators or references are invalidated.

Parameters

   rg - a container compatible range, that is, an input_range whose
   elements are convertible to T
   Type requirements
   -
   T must be EmplaceConstructible into forward_list from
   *ranges::begin(rg). Otherwise, the behavior is undefined.

Return value

   (none)

Complexity

   Linear in size of rg.

Notes

   Feature-test macro Value Std Feature
   __cpp_lib_containers_ranges 202202L (C++23) Ranges-aware construction
   and insertion

Example

   Run this code
#include <algorithm>
#include <cassert>
#include <forward_list>
#include <vector>

int main()
{
    auto container = std::forward_list{0, 1, 2, 3};
    const auto rg = std::vector{-3, -2, -1};

#if __cpp_lib_containers_ranges
    container.prepend_range(rg);
#else
    container.insert_after(container.before_begin(), rg.cbegin(), rg.cend());
#endif
    assert(std::ranges::equal(container, std::forward_list{-3, -2, -1, 0, 1, 2,
3}));
}

See also

   insert_range
   (C++23)
   inserts a range of elements
   (public member function)
   insert_range_after
   (C++23)
   inserts a range of elements after an element
   (public member function)
   push_front
   inserts an element to the beginning
   (public member function)
   emplace_front
   constructs an element in-place at the beginning
   (public member function)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/container/forwar
   d_list/prepend_range&oldid=155597"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 27 July 2023, at 14:34.
     * This page has been accessed 1,772 times.
