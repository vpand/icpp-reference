std::ranges::get(std::ranges::subrange)

   From cppreference.com
   < cpp | ranges | subrange

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Ranges library
   Range access
   begin
   cbegin
   end
   cend
   rbegin
   crbegin
   rend
   crend
   size
   ssize
   data
   cdata
   empty
   Range conversions
   std::from_range_t
   std::from_range
   (C++23)(C++23)
   to
   (C++23)
   Range primitives
   range_size_trange_difference_trange_value_trange_reference_t
   iterator_tconst_iterator_tsentinel_tconst_sentinel_t
   (C++23)(C++23)
   range_const_reference_trange_rvalue_reference_trange_common_reference_t
   (C++23)
   elements_of
   (C++23)
   Dangling iterator handling
   dangling
   borrowed_iterator_t
   borrowed_subrange_t
   Range concepts
   range
   borrowed_range
   sized_range
   constant_range
   (C++23)
   common_range
   view
   viewable_range
   input_range
   output_range
   forward_range
   bidirectional_range
   random_access_range
   contiguous_range
   Views
   view_interface
   subrange
   Range factories
   empty_viewviews::empty
   single_viewviews::single
   iota_viewviews::iota
   repeat_viewviews::repeat
   (C++23)(C++23)
   basic_istream_viewviews::istream
   Range adaptors
   views::all_tviews::all
   ref_view
   owning_view
   as_rvalue_viewviews::as_rvalue
   (C++23)(C++23)
   filter_viewviews::filter
   transform_viewviews::transform
   take_viewviews::take
   take_while_viewviews::take_while
   concat_viewviews::concat
   (C++26)(C++26)
   drop_viewviews::drop
   drop_while_viewviews::drop_while
   join_viewviews::join
   join_with_viewviews::join_with
   (C++23)(C++23)
   lazy_split_viewviews::lazy_split
   split_viewviews::split
   views::counted
   common_viewviews::common
   reverse_viewviews::reverse
   as_const_viewviews::as_const
   (C++23)(C++23)
   elements_viewviews::elements
   keys_viewviews::keys
   values_viewviews::values
   enumerate_viewviews::enumerate
   (C++23)(C++23)
   zip_viewviews::zip
   (C++23)(C++23)
   zip_transform_viewviews::zip_transform
   (C++23)(C++23)
   adjacent_viewviews::adjacent
   (C++23)(C++23)
   views::pairwise
   (C++23)
   adjacent_transform_viewviews::adjacent_transform
   (C++23)(C++23)
   views::pairwise_transform
   (C++23)
   chunk_viewviews::chunk
   (C++23)(C++23)
   slide_viewviews::slide
   (C++23)(C++23)
   chunk_by_viewviews::chunk_by
   (C++23)(C++23)
   stride_viewviews::stride
   (C++23)(C++23)
   cartesian_product_viewviews::cartesian_product
   (C++23)(C++23)
   Range generators
   std::generator
   (C++23)
   Range adaptor objects
   Range adaptor closure objects
   range_adaptor_closure
   (C++23)
   Helper items
   copyable-box
   movable-box
   (until C++23)(C++23)
   simple-view
   non-propagating-cache

   std::ranges::subrange
   Member functions
   subrange::subrange
   subrange::operator PairLike
   Observers
   subrange::begin
   subrange::end
   subrange::empty
   subrange::size
   Iterator operations
   subrange::advance
   subrange::next
   subrange::prev
   Deduction guides
   Non-member functions
   get(std::ranges::subrange)
   Helper types
   subrange_kind
   tuple_size<std::ranges::subrange>
   tuple_element<std::ranges::subrange>

   Defined in header <ranges>
   template< std::size_t N, class I, class S, ranges::subrange_kind K >

       requires ((N == 0 && std::copyable<I>) || N == 1)
   constexpr auto get( const ranges::subrange<I, S, K>& r );
   (1) (since C++20)
   template< std::size_t N, class I, class S, ranges::subrange_kind K >

       requires (N < 2)
   constexpr auto get( ranges::subrange<I, S, K>&& r );
   (2) (since C++20)
   namespace std { using ranges::get; }
   (3) (since C++20)
   1) Obtains the iterator or sentinel from a subrange lvalue (or a const
   rvalue) when N == 0 or N == 1, respectively. It is mainly provided for
   structured binding support.
   2) Same as (1), except that it takes a non-const subrange rvalue.
   3) (1,2) are imported into namespace std, which simplifies their usage
   and makes every subrange with a copyable iterator a pair-like type.

Parameters

   r - a subrange

Return value

   1) An iterator or sentinel copy constructed from the stored one when N
   == 0 or N == 1, respectively.
   2) Same as (1), except that the iterator is move constructed if N == 0
   and I does not satisfy copyable.

Possible implementation

template<std::size_t N, class I, class S, std::ranges::subrange_kind K>
    requires ((N == 0 && std::copyable<I>) || N == 1)
constexpr auto get(const std::ranges::subrange<I, S, K>& r)
{
    if constexpr (N == 0)
        return r.begin();
    else
        return r.end();
}

template<std::size_t N, class I, class S, std::ranges::subrange_kind K>
    requires (N < 2)
constexpr auto get(std::ranges::subrange<I, S, K>&& r)
{
    if constexpr (N == 0)
        return r.begin(); // may perform move construction
    else
        return r.end();
}

Example

   Run this code
#include <array>
#include <iostream>
#include <iterator>
#include <ranges>

int main()
{
    std::array a{1, -2, 3, -4};

    std::ranges::subrange sub_a{std::next(a.begin()), std::prev(a.end())};
    std::cout << *std::ranges::get<0>(sub_a) << ' ' // == *(begin(a) + 1)
              << *get<1>(sub_a) << '\n';            // == *(end(a) - 1)

    *get<0>(sub_a) = 42; // OK
//  *get<2>(sub_a) = 13; // hard error: index can only be 0 or 1
}

   Output:
-2 -4

Defect reports

   The following behavior-changing defect reports were applied
   retroactively to previously published C++ standards.
   DR Applied to Behavior as published Correct behavior
   LWG 3589 C++20 the overload for const lvalue was ill-formed if N == 0
   and I does not model copyable it is removed from the overload set

See also

   Structured binding (C++17) binds the specified names to sub-objects or
   tuple elements of the initializer
   get(std::tuple)
   (C++11)
   tuple accesses specified element
   (function template)
   get(std::pair)
   (C++11)
   accesses an element of a pair
   (function template)
   get(std::array)
   (C++11)
   accesses an element of an array
   (function template)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/ranges/subrange/
   get&oldid=171349"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 26 April 2024, at 15:54.
     * This page has been accessed 12,724 times.
