std::chrono::ceil(std::chrono::time_point)

   From cppreference.com
   < cpp | chrono | time point

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Utilities library
   Language support
   Type support (basic types, RTTI)
   Library feature-test macros (C++20)
   Dynamic memory management
   Program utilities
   Coroutine support (C++20)
   Variadic functions
   is_constant_evaluated
   (C++20)
   is_within_lifetime
   (C++26)
   initializer_list
   (C++11)
   source_location
   (C++20)
   Debugging support
   is_debugger_present
   (C++26)
   breakpoint_if_debugging
   (C++26)
   breakpoint
   (C++26)
   Three-way comparison
   three_way_comparablethree_way_comparable_with
   (C++20)(C++20)
   strong_ordering
   (C++20)
   weak_ordering
   (C++20)
   partial_ordering
   (C++20)
   common_comparison_category
   (C++20)
   compare_three_way_result
   (C++20)
   compare_three_way
   (C++20)
   strong_order
   (C++20)
   weak_order
   (C++20)
   partial_order
   (C++20)
   compare_strong_order_fallback
   (C++20)
   compare_weak_order_fallback
   (C++20)
   compare_partial_order_fallback
   (C++20)
   is_eqis_ltis_lteq
   (C++20)(C++20)(C++20)
   is_neqis_gtis_gteq
   (C++20)(C++20)(C++20)
   General utilities
   Date and time
   Function objects
   Formatting library (C++20)
   bitset
   hash
   (C++11)
   Relational operators (deprecated in C++20)
   rel_ops::operator!=rel_ops::operator>

   rel_ops::operator<=rel_ops::operator>=
   Integer comparison functions
   cmp_equalcmp_lesscmp_less_than
   (C++20)(C++20)(C++20)
   cmp_not_equalcmp_greatercmp_greater_than
   (C++20)(C++20)(C++20)
   in_range
   (C++20)
   Swap and type operations
   swap
   ranges::swap
   (C++20)
   exchange
   (C++14)
   declval
   (C++11)
   to_underlying
   (C++23)
   forward
   (C++11)
   forward_like
   (C++23)
   move
   (C++11)
   move_if_noexcept
   (C++11)
   as_const
   (C++17)
   Common vocabulary types
   pair
   tuple
   (C++11)
   optional
   (C++17)
   any
   (C++17)
   variant
   (C++17)
   tuple_size
   (C++11)
   tuple_element
   (C++11)
   apply
   (C++17)
   make_from_tuple
   (C++17)
   expected
   (C++23)
   Elementary string conversions
   to_chars
   (C++17)
   from_chars
   (C++17)
   chars_format
   (C++17)
   to_chars_result
   (C++17)
   from_chars_result
   (C++17)

   Date and time utilities
   Time point
   time_point
   (C++11)
   clock_time_conversion
   (C++20)
   clock_cast
   (C++20)
   Duration
   duration
   (C++11)
   Clocks
   system_clock
   (C++11)
   steady_clock
   (C++11)
   high_resolution_clock
   (C++11)
   is_clock
   (C++20)
   utc_clock
   (C++20)
   tai_clock
   (C++20)
   gps_clock
   (C++20)
   file_clock
   (C++20)
   local_t
   (C++20)
   Time of day
   is_amis_pm
   (C++20)(C++20)
   make12make24
   (C++20)(C++20)
   hh_mm_ss
   (C++20)
   Calendars
   day
   (C++20)
   month
   (C++20)
   year
   (C++20)
   weekday
   (C++20)
   operator/
   (C++20)
   year_month_day
   (C++20)
   year_month_day_last
   (C++20)
   year_month_weekday
   (C++20)
   year_month_weekday_last
   (C++20)
   weekday_indexed
   (C++20)
   weekday_last
   (C++20)
   month_day
   (C++20)
   month_day_last
   (C++20)
   month_weekday
   (C++20)
   month_weekday_last
   (C++20)
   year_month
   (C++20)
   last_speclast
   (C++20)(C++20)
   Time zones
   tzdb
   (C++20)
   tzdb_list
   (C++20)
   get_tzdbget_tzdb_listreload_tzdbremote_version
   (C++20)(C++20)(C++20)(C++20)
   sys_info
   (C++20)
   local_info
   (C++20)
   nonexistent_local_time
   (C++20)
   ambiguous_local_time
   (C++20)
   locate_zone
   (C++20)
   current_zone
   (C++20)
   time_zone
   (C++20)
   choose
   (C++20)
   zoned_traits
   (C++20)
   zoned_time
   (C++20)
   time_zone_link
   (C++20)
   leap_second
   (C++20)
   leap_second_info
   (C++20)
   get_leap_second_info
   (C++20)
   chrono I/O
   parse
   (C++20)
   C-style date and time

   std::chrono::time_point
   Member functions
   time_point::time_point
   time_point::time_since_epoch
   time_point::operator+=time_point::operator-=
   time_point::operator++time_point::operator--
   (C++20)(C++20)
   time_point::min
   time_point::max
   Non-member functions
   operator+operator-
   operator==operator!=operator<operator<=operator>operator>=operator<=>
   (until C++20)(C++20)
   time_point_cast
   floor
   (C++17)
   ceil
   (C++17)
   round
   (C++17)
   Helper classes
   common_type
   hash<std::chrono::time_point>
   (C++26)

   Defined in header <chrono>
   template< class ToDuration, class Clock, class Duration >

   constexpr std::chrono::time_point<Clock, ToDuration>
       ceil( const std::chrono::time_point<Clock, Duration>& tp );
                                                            (since C++17)

   Returns the smallest time point t representable in ToDuration that is
   greater or equal to tp.

   The function does not participate in the overload resolution unless
   ToDuration is a specialization of std::chrono::duration.

Parameters

   tp - time point to round up

Return value

   tp rounded up to the next time point using duration of type ToDuration.

Possible implementation

namespace detail
{
    template<class> inline constexpr bool is_duration_v = false;
    template<class Rep, class Period> inline constexpr bool is_duration_v<
        std::chrono::duration<Rep, Period>> = true;
}

template<class To, class Clock, class FromDuration,
         class = std::enable_if_t<detail::is_duration_v<To>>>
constexpr std::chrono::time_point<Clock, To>
    ceil(const std::chrono::time_point<Clock, FromDuration>& tp)
{
    return std::chrono::time_point<Clock, To>{
               std::chrono::ceil<To>(tp.time_since_epoch())};
}

Example

   Run this code
#include <chrono>
#include <iostream>
#include <string>

template<typename TimePoint>
std::string to_string(const TimePoint& time_point)
{
    return std::to_string(time_point.time_since_epoch().count());
}

int main()
{
    using namespace std::literals::chrono_literals;
    using Sec = std::chrono::seconds;

    std::cout << "Time point\t" "Cast\t" "Floor\t" "Round\t" "Ceil\n";
    std::cout << "(ms)\t\t"     "(s)\t"  "(s)\t"   "(s)\t"   "(s)\n";
    for (const auto value_ms : {5432ms, 5678ms})
    {
        std::chrono::time_point<std::chrono::system_clock, std::chrono::millisec
onds>
            time_point_ms(value_ms);

        std::cout
            << to_string(time_point_ms) << "\t\t"
            << to_string(std::chrono::time_point_cast<Sec>(time_point_ms)) << '\
t'
            << to_string(std::chrono::floor<Sec>(time_point_ms)) << '\t'
            << to_string(std::chrono::round<Sec>(time_point_ms)) << '\t'
            << to_string(std::chrono::ceil<Sec>(time_point_ms)) << '\n';
    }
}

   Output:
Time point      Cast    Floor   Round   Ceil
(ms)            (s)     (s)     (s)     (s)
5432            5       5       5       6
5678            5       5       6       6

See also

   time_point_cast
   (C++11)
   converts a time point to another time point on the same clock, with a
   different duration
   (function template)
   floor(std::chrono::time_point)
   (C++17)
   converts a time_point to another, rounding down
   (function template)
   round(std::chrono::time_point)
   (C++17)
   converts a time_point to another, rounding to nearest, ties to even
   (function template)
   ceil(std::chrono::duration)
   (C++17)
   converts a duration to another, rounding up
   (function template)
   ceilceilfceill
   (C++11)(C++11)
   nearest integer not less than the given value
   (function)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/chrono/time_poin
   t/ceil&oldid=159665"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 26 September 2023, at 12:11.
     * This page has been accessed 17,165 times.
