ATOMIC_VAR_INIT

   From cppreference.com
   < c | atomic

   C
   Language
   Headers
   Type support
   Program utilities
   Variadic function support
   Error handling
   Dynamic memory management
   Strings library
   Algorithms
   Numerics
   Date and time utilities
   Input/output support
   Localization support
   Concurrency support (C11)
   Technical Specifications
   Symbol index

   Concurrency support library
   Threads
   thrd_create
   thrd_equal
   thrd_current

   thrd_sleep
   thrd_yield
   thrd_exit
   thrd_detach
   thrd_join
   thrd_successthrd_timedoutthrd_busythrd_nomemthrd_error

   Atomic operations
   atomic_init
   ATOMIC_VAR_INIT
   (until C23)
   ATOMIC_***_LOCK_FREE
   atomic_is_lock_free
   atomic_store
   atomic_load
   atomic_exchange
   atomic_compare_exchange
   atomic_fetch_add
   atomic_fetch_sub
   atomic_fetch_or
   atomic_fetch_xor
   atomic_fetch_and
   Atomic flags
   atomic_flag
   ATOMIC_FLAG_INIT
   atomic_flag_test_and_set
   atomic_flag_clear
   Memory ordering
   memory_order
   kill_dependency
   atomic_thread_fence
   atomic_signal_fence
   Mutual exclusion
   mtx_init
   mtx_lock
   mtx_timedlock
   mtx_trylock
   call_once
   mtx_unlock
   mtx_destroy
   mtx_plainmtx_recursivemtx_timed
   Condition variables
   cnd_init
   cnd_signal
   cnd_broadcast
   cnd_wait
   cnd_timedwait
   cnd_destroy
   Thread-local storage
   thread_local
   TSS_DTOR_ITERATIONS

   tss_create
   tss_get
   tss_set
   tss_delete

   Defined in header <stdatomic.h>
   #define ATOMIC_VAR_INIT(value) /* unspecified */
   (since C11)
   (deprecated in C17)
   (removed in C23)

   Expands to an expression that can be used to initialize an atomic
   variable of the same type as value.

   The initial value of atomic object of automatic storage duration that
   is not explicitly initialized is indeterminate. The default (zero)
   initialization of static and thread-local variables produces a valid
   value however.

   When initializing an atomic variable, any concurrent access, even
   through an atomic operation, is a data race (it may happen if the
   address is immediately passed to another thread with a
   memory_order_relaxed operation).

Notes

   This macro was a part of early draft design for C11 atomic types. It is
   not needed in C11, and is deprecated in C17 and removed in C23.

Defect reports

   The following behavior-changing defect reports were applied
   retroactively to previously published C standards.
   DR Applied to Behavior as published Correct behavior
   DR 485 C11 the specification was redundant and contradictory to the
   core language fixed

References

     * C17 standard (ISO/IEC 9899:2018):

          + 7.17.2.1 The ATOMIC_VAR_INIT macro (p: 201)

     * C11 standard (ISO/IEC 9899:2011):

          + 7.17.2.1 The ATOMIC_VAR_INIT macro (p: 274)

See also

   ATOMIC_FLAG_INIT
   (C11)
   initializes a new atomic_flag
   (macro constant)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=c/atomic/ATOMIC_VAR_
   INIT&oldid=140123"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 8 June 2022, at 18:08.
     * This page has been accessed 29,746 times.
