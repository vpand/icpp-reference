MATH_ERRNO, MATH_ERREXCEPT, math_errhandling

   From cppreference.com
   < cpp | numeric | math

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Numerics library
   Common mathematical functions
   Mathematical special functions (C++17)
   Mathematical constants (C++20)
   Basic linear algebra algorithms (C++26)
   Floating-point environment (C++11)
   Complex numbers
   Numeric arrays
   Pseudo-random number generation
   Factor operations
   gcd
   (C++17)
   lcm
   (C++17)
   Interpolations
   midpoint
   (C++20)
   lerp
   (C++20)
   Saturation arithmetic
   add_sat
   (C++26)
   sub_sat
   (C++26)
   saturate_cast
   (C++26)
   mul_sat
   (C++26)
   div_sat
   (C++26)
   Generic numeric operations
   iota
   (C++11)
   ranges::iota
   (C++23)
   accumulate
   inner_product
   adjacent_difference
   partial_sum
   reduce
   (C++17)
   transform_reduce
   (C++17)
   inclusive_scan
   (C++17)
   exclusive_scan
   (C++17)
   transform_inclusive_scan
   (C++17)
   transform_exclusive_scan
   (C++17)
   Bit operations
   has_single_bit
   (C++20)
   bit_cast
   (C++20)
   bit_ceil
   (C++20)
   bit_floor
   (C++20)
   bit_width
   (C++20)
   rotl
   (C++20)
   rotr
   (C++20)
   popcount
   (C++20)
   countl_zero
   (C++20)
   countl_one
   (C++20)
   countr_zero
   (C++20)
   countr_one
   (C++20)
   byteswap
   (C++23)
   endian
   (C++20)

   Common mathematical functions
   Functions
   Basic operations
   abs(int)labsllabsimaxabs
   (C++11)
   abs(float)fabs
   divldivlldivimaxdiv
   (C++11)
   fmod
   remainder
   (C++11)
   remquo
   (C++11)
   fma
   (C++11)
   fmax
   (C++11)
   fmin
   (C++11)
   fdim
   (C++11)
   nannanfnanl
   (C++11)(C++11)(C++11)
   Exponential functions
   exp
   exp2
   (C++11)
   expm1
   (C++11)
   log
   log10
   log1p
   (C++11)
   log2
   (C++11)
   Power functions
   sqrt
   cbrt
   (C++11)
   hypot
   (C++11)
   pow
   Trigonometric and hyperbolic functions
   sin
   cos
   tan
   asin
   acos
   atan
   atan2
   sinh
   cosh
   tanh
   asinh
   (C++11)
   acosh
   (C++11)
   atanh
   (C++11)
   Error and gamma functions
   erf
   (C++11)
   erfc
   (C++11)
   lgamma
   (C++11)
   tgamma
   (C++11)
   Nearest integer floating point operations
   ceil
   floor
   roundlroundllround
   (C++11)(C++11)(C++11)
   trunc
   (C++11)
   nearbyint
   (C++11)
   rintlrintllrint
   (C++11)(C++11)(C++11)
   Floating point manipulation functions
   ldexp
   scalbnscalbln
   (C++11)(C++11)
   ilogb
   (C++11)
   logb
   (C++11)
   frexp
   modf
   nextafternexttoward
   (C++11)(C++11)
   copysign
   (C++11)
   Classification/Comparison
   fpclassify
   (C++11)
   isfinite
   (C++11)
   isinf
   (C++11)
   isnan
   (C++11)
   isnormal
   (C++11)
   signbit
   (C++11)
   isgreater
   (C++11)
   isgreaterequal
   (C++11)
   isless
   (C++11)
   islessequal
   (C++11)
   islessgreater
   (C++11)
   isunordered
   (C++11)
   Macro constants
   HUGE_VALFHUGE_VALHUGE_VALL
   (C++11)(C++11)
   INFINITY
   (C++11)
   NAN
   (C++11)
   math_errhandlingMATH_ERRNOMATH_ERREXCEPT
   (C++11)
   FP_NORMALFP_SUBNORMALFP_ZEROFP_INFINITEFP_NAN
   (C++11)(C++11)(C++11)(C++11)(C++11)

   Defined in header <cmath>
   #define MATH_ERRNO        1
                                                       (since C++11)
   #define MATH_ERREXCEPT    2
                                                       (since C++11)
   #define math_errhandling  /*implementation defined*/
                                                       (since C++11)

   The macro constant math_errhandling expands to an expression of type
   int that is either equal to MATH_ERRNO, or equal to MATH_ERREXCEPT, or
   equal to their bitwise OR (MATH_ERRNO | MATH_ERREXCEPT).

   The value of math_errhandling indicates the type of error handling that
   is performed by the floating-point operators and functions:
   Constant Explanation
   MATH_ERREXCEPT Indicates that floating-point exceptions are used: at
   least FE_DIVBYZERO, FE_INVALID, and FE_OVERFLOW are defined in <cfenv>.
   MATH_ERRNO Indicates that floating-point operations use the variable
   errno to report errors.

   If the implementation supports IEEE floating-point arithmetic (IEC
   60559), math_errhandling & MATH_ERREXCEPT is required to be non-zero.

   The following floating-point error conditions are recognized:
   Condition Explanation errno Floating-point exception Example
   Domain error The argument is outside the range in which the operation
   is mathematically defined (the description of each function lists the
   required domain errors) EDOM FE_INVALID std::acos(2)
   Pole error The mathematical result of the function is exactly infinite
   or undefined ERANGE FE_DIVBYZERO std::log(0.0), 1.0 / 0.0
   Range error due to overflow The mathematical result is finite, but
   becomes infinite after rounding, or becomes the largest representable
   finite value after rounding down ERANGE FE_OVERFLOW std::pow(DBL_MAX,
   2)
   Range error due to underflow The result is non-zero, but becomes zero
   after rounding, or becomes subnormal with a loss of precision ERANGE or
   unchanged (implementation-defined) FE_UNDERFLOW or nothing
   (implementation-defined) DBL_TRUE_MIN / 2
   Inexact result The result has to be rounded to fit in the destination
   type Unchanged FE_INEXACT or nothing (unspecified) std::sqrt(2), 1.0 /
   10.0

Notes

   Whether FE_INEXACT is raised by the mathematical library functions is
   unspecified in general, but may be explicitly specified in the
   description of the function (e.g. std::rint vs std::nearbyint).

   Before C++11, floating-point exceptions were not specified, EDOM was
   required for any domain error, ERANGE was required for overflows and
   implementation-defined for underflows.

Example

   Run this code
#include <cerrno>
#include <cfenv>
#include <cmath>
#include <cstring>
#include <iostream>
// #pragma STDC FENV_ACCESS ON

int main()
{
    std::cout << "MATH_ERRNO is "
              << (math_errhandling & MATH_ERRNO ? "set" : "not set") << '\n'
              << "MATH_ERREXCEPT is "
              << (math_errhandling & MATH_ERREXCEPT ? "set" : "not set") << '\n'
;
    std::feclearexcept(FE_ALL_EXCEPT);
    errno = 0;
    std::cout <<  "log(0) = " << std::log(0) << '\n';
    if (errno == ERANGE)
        std::cout << "errno = ERANGE (" << std::strerror(errno) << ")\n";
    if (std::fetestexcept(FE_DIVBYZERO))
        std::cout << "FE_DIVBYZERO (pole error) reported\n";
}

   Possible output:
MATH_ERRNO is set
MATH_ERREXCEPT is set
log(0) = -inf
errno = ERANGE (Numerical result out of range)
FE_DIVBYZERO (pole error) reported

See also

   FE_ALL_EXCEPTFE_DIVBYZEROFE_INEXACTFE_INVALIDFE_OVERFLOWFE_UNDERFLOW
   (C++11)
   floating-point exceptions
   (macro constant)
   errno
   macro which expands to POSIX-compatible thread-local error number
   variable
   (macro variable)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/numeric/math/mat
   h_errhandling&oldid=160773"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 15 October 2023, at 22:58.
     * This page has been accessed 66,160 times.
