std::visit

   From cppreference.com
   < cpp | utility | variant

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Utilities library
   Language support
   Type support (basic types, RTTI)
   Library feature-test macros (C++20)
   Dynamic memory management
   Program utilities
   Coroutine support (C++20)
   Variadic functions
   is_constant_evaluated
   (C++20)
   is_within_lifetime
   (C++26)
   initializer_list
   (C++11)
   source_location
   (C++20)
   Debugging support
   is_debugger_present
   (C++26)
   breakpoint_if_debugging
   (C++26)
   breakpoint
   (C++26)
   Three-way comparison
   three_way_comparablethree_way_comparable_with
   (C++20)(C++20)
   strong_ordering
   (C++20)
   weak_ordering
   (C++20)
   partial_ordering
   (C++20)
   common_comparison_category
   (C++20)
   compare_three_way_result
   (C++20)
   compare_three_way
   (C++20)
   strong_order
   (C++20)
   weak_order
   (C++20)
   partial_order
   (C++20)
   compare_strong_order_fallback
   (C++20)
   compare_weak_order_fallback
   (C++20)
   compare_partial_order_fallback
   (C++20)
   is_eqis_ltis_lteq
   (C++20)(C++20)(C++20)
   is_neqis_gtis_gteq
   (C++20)(C++20)(C++20)
   General utilities
   Date and time
   Function objects
   Formatting library (C++20)
   bitset
   hash
   (C++11)
   Relational operators (deprecated in C++20)
   rel_ops::operator!=rel_ops::operator>

   rel_ops::operator<=rel_ops::operator>=
   Integer comparison functions
   cmp_equalcmp_lesscmp_less_than
   (C++20)(C++20)(C++20)
   cmp_not_equalcmp_greatercmp_greater_than
   (C++20)(C++20)(C++20)
   in_range
   (C++20)
   Swap and type operations
   swap
   ranges::swap
   (C++20)
   exchange
   (C++14)
   declval
   (C++11)
   to_underlying
   (C++23)
   forward
   (C++11)
   forward_like
   (C++23)
   move
   (C++11)
   move_if_noexcept
   (C++11)
   as_const
   (C++17)
   Common vocabulary types
   pair
   tuple
   (C++11)
   optional
   (C++17)
   any
   (C++17)
   variant
   (C++17)
   tuple_size
   (C++11)
   tuple_element
   (C++11)
   apply
   (C++17)
   make_from_tuple
   (C++17)
   expected
   (C++23)
   Elementary string conversions
   to_chars
   (C++17)
   from_chars
   (C++17)
   chars_format
   (C++17)
   to_chars_result
   (C++17)
   from_chars_result
   (C++17)

   std::variant
   Member functions
   variant::variant
   variant::~variant
   variant::operator=
   Observers
   variant::index
   variant::valueless_by_exception
   Modifiers
   variant::emplace
   variant::swap
   Visitation
   variant::visit
   (C++26)
   Non-member functions
   visit
   holds_alternative
   get(std::variant)
   get_if
   operator==operator!=operator<operator<=operator>operator>=operator<=>
   (C++20)
   swap(std::variant)
   Helper classes
   monostate
   bad_variant_access
   variant_size
   variant_alternative
   hash<std::variant>
   Helper objects
   variant_npos

   Defined in header <variant>
   template< class Visitor, class... Variants >
   constexpr /* see below */ visit( Visitor&& vis, Variants&&... vars );
   (1)                                                  (since C++17)
   template< class R, class Visitor, class... Variants >
   constexpr R visit( Visitor&& vis, Variants&&... vars );
   (2)                                                  (since C++20)
   template< class... Ts >
   auto&& as-variant( std::variant<Ts...>& var );
   (3)                                                  (exposition only*)
   template< class... Ts >
   auto&& as-variant( const std::variant<Ts...>& var );
   (4)                                                  (exposition only*)
   template< class... Ts >
   auto&& as-variant( std::variant<Ts...>&& var );
   (5)                                                  (exposition only*)
   template< class... Ts >
   auto&& as-variant( const std::variant<Ts...>&& var );
   (6)                                                  (exposition only*)

   Applies the visitor vis (a Callable that can be called with any
   combination of types from variants) to the variants vars.

   Given VariantBases as
   decltype(as-variant(std::forward<Variants>(vars))... (a pack of
   sizeof...(Variants) types):
   1) Invokes vis as if by

   INVOKE(std::forward<Visitor>(vis),
          std::get<indices>(std::forward<VariantBases>(vars))...),
   where indices is as-variant(vars).index()....
   2) Invokes vis as if by

   INVOKE<R>(std::forward<Visitor>(vis),
             std::get<indices>(std::forward<VariantBases>(vars))...),
   where indices is as-variant(vars).index()....

   These overloads participate in overload resolution only if every type
   in VariantBases is a valid type. If the expression denoted by INVOKE or
   INVOKE<R>(since C++20) is invalid, or the results of INVOKE or
   INVOKE<R>(since C++20) have different types or value categories for
   different indices, the program is ill-formed.
   3-6) The exposition-only as-variant function templates accept a value
   whose type can be deduced for std::variant<Ts...> (i.e. either
   std::variant<Ts...> or a type derived from std::variant<Ts...>), and
   return the std::variant value with the same const-qualification and
   value category.
   3,4) Returns var.
   5,6) Returns std::move(var).

Parameters

   vis - a Callable that accepts every possible alternative from every
   variant
   vars - list of variants to pass to the visitor

Return value

   1) The result of the INVOKE operation. The return type is the type
   obtained from applying decltype to the result.
   2) Nothing if R is (possibly cv-qualified) void; otherwise the result
   of the INVOKE<R> operation.
   3-6) A std::variant value converted from var.

Exceptions

   Throws std::bad_variant_access if
   as-variant(vars_i).valueless_by_exception() is true for any variant
   vars_i in vars.

Complexity

   When the number of variants is zero or one, the invocation of the
   callable object is implemented in constant time, i.e. it does not
   depend on the number of types can be stored in the variant.

   If the number of variants is larger than one, the invocation of the
   callable object has no complexity requirements.

Notes

   Let n be (1 * ... *
   std::variant_size_v<std::remove_reference_t<VariantBases>>),
   implementations usually generate a table equivalent to an (possibly
   multidimensional) array of n function pointers for every specialization
   of std::visit, which is similar to the implementation of virtual
   functions.

   Implementations may also generate a switch statement with n branches
   for std::visit (e.g. the MSVC STL implementation uses a switch
   statement when n is not greater than 256).

   On typical implementations, the time complexity of the invocation of
   vis can be considered equal to that of access to an element in an
   (possibly multidimensional) array or execution of a switch statement.
   Feature-test macro Value Std Feature
   __cpp_lib_variant 202102L (C++17)
   (DR) std::visit for classes derived from std::variant

Example

   Run this code
#include <iomanip>
#include <iostream>
#include <string>
#include <type_traits>
#include <variant>
#include <vector>

// the variant to visit
using var_t = std::variant<int, long, double, std::string>;

// helper type for the visitor #4
template<class... Ts>
struct overloaded : Ts... { using Ts::operator()...; };
// explicit deduction guide (not needed as of C++20)
template<class... Ts>
overloaded(Ts...) -> overloaded<Ts...>;

int main()
{
    std::vector<var_t> vec = {10, 15l, 1.5, "hello"};

    for (auto& v: vec)
    {
        // 1. void visitor, only called for side-effects (here, for I/O)
        std::visit([](auto&& arg){ std::cout << arg; }, v);

        // 2. value-returning visitor, demonstrates the idiom of returning anoth
er variant
        var_t w = std::visit([](auto&& arg) -> var_t { return arg + arg; }, v);

        // 3. type-matching visitor: a lambda that handles each type differently
        std::cout << ". After doubling, variant holds ";
        std::visit([](auto&& arg)
        {
            using T = std::decay_t<decltype(arg)>;
            if constexpr (std::is_same_v<T, int>)
                std::cout << "int with value " << arg << '\n';
            else if constexpr (std::is_same_v<T, long>)
                std::cout << "long with value " << arg << '\n';
            else if constexpr (std::is_same_v<T, double>)
                std::cout << "double with value " << arg << '\n';
            else if constexpr (std::is_same_v<T, std::string>)
                std::cout << "std::string with value " << std::quoted(arg) << '\
n';
            else
                static_assert(false, "non-exhaustive visitor!");
        }, w);
    }

    for (auto& v: vec)
    {
        // 4. another type-matching visitor: a class with 3 overloaded operator(
)'s
        // Note: The `(auto arg)` template operator() will bind to `int` and `lo
ng`
        //       in this case, but in its absence the `(double arg)` operator()
        //       *will also* bind to `int` and `long` because both are implicitl
y
        //       convertible to double. When using this form, care has to be tak
en
        //       that implicit conversions are handled correctly.
        std::visit(overloaded{
            [](auto arg) { std::cout << arg << ' '; },
            [](double arg) { std::cout << std::fixed << arg << ' '; },
            [](const std::string& arg) { std::cout << std::quoted(arg) << ' '; }
        }, v);
    }
}

   Output:
10. After doubling, variant holds int with value 20
15. After doubling, variant holds long with value 30
1.5. After doubling, variant holds double with value 3
hello. After doubling, variant holds std::string with value "hellohello"
10 15 1.500000 "hello"

Defect reports

   The following behavior-changing defect reports were applied
   retroactively to previously published C++ standards.
   DR Applied to Behavior as published Correct behavior
   LWG 2970 C++17 the return type of overload (1) did not preserve the
   value category of the result of the INVOKE operation preserves
   LWG 3052
   (P2162R2) C++17 the effects were unspecified if any type
   in Variants is not a std::variant specified

See also

   swap
   swaps with another variant
   (public member function)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/utility/variant/
   visit&oldid=171080"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 21 April 2024, at 05:07.
     * This page has been accessed 708,838 times.
