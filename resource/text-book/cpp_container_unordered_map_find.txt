std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::find

   From cppreference.com
   < cpp | container | unordered map


   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Containers library
   Sequence
   array
   (C++11)
   vector
   vector<bool>
   deque
   forward_list
   (C++11)
   list
   Associative
   set
   multiset
   map
   multimap
   Unordered associative
   unordered_set
   (C++11)
   unordered_multiset
   (C++11)
   unordered_map
   (C++11)
   unordered_multimap
   (C++11)
   Adaptors
   stack
   queue
   priority_queue
   flat_set
   (C++23)
   flat_multiset
   (C++23)
   flat_map
   (C++23)
   flat_multimap
   (C++23)
   Views
   span
   (C++20)
   mdspan
   (C++23)
   Iterator invalidation
   Member function table
   Non-member function table

   std::unordered_map
   Member types
   Member functions
   unordered_map::unordered_map
   unordered_map::~unordered_map
   unordered_map::operator=
   unordered_map::get_allocator
   Iterators
   unordered_map::beginunordered_map::cbegin
   unordered_map::endunordered_map::cend
   Capacity
   unordered_map::size
   unordered_map::max_size
   unordered_map::empty
   Modifiers
   unordered_map::clear
   unordered_map::erase
   unordered_map::swap
   unordered_map::extract
   (C++17)
   unordered_map::merge
   (C++17)
   unordered_map::insert
   unordered_map::insert_range
   (C++23)
   unordered_map::insert_or_assign
   (C++17)
   unordered_map::emplace
   unordered_map::emplace_hint
   unordered_map::try_emplace
   (C++17)
   Lookup
   unordered_map::at
   unordered_map::operator[]
   unordered_map::count
   unordered_map::find
   unordered_map::contains
   (C++20)
   unordered_map::equal_range
   Bucket interface
   unordered_map::begin(size_type)unordered_map::cbegin(size_type)
   unordered_map::end(size_type)unordered_map::cend(size_type)
   unordered_map::bucket_count
   unordered_map::max_bucket_count
   unordered_map::bucket_size
   unordered_map::bucket
   Hash policy
   unordered_map::load_factor
   unordered_map::max_load_factor

   unordered_map::rehash
   unordered_map::reserve
   Observers
   unordered_map::hash_function
   unordered_map::key_eq
   Non-member functions
   operator==operator!=
   (C++11)(C++11)(until C++20)
   std::swap(std::unordered_map)
   (C++11)
   erase_if(std::unordered_map)
   (C++20)
   Deduction guides(C++17)

   iterator find( const Key& key );
   (1)                                         (since C++11)
   const_iterator find( const Key& key ) const;
   (2)                                         (since C++11)
   template< class K >
   iterator find( const K& x );
   (3)                                         (since C++20)
   template< class K >
   const_iterator find( const K& x ) const;
   (4)                                         (since C++20)
   1,2) Finds an element with key equivalent to key.
   3,4) Finds an element with key that compares equivalent to the value x.
   This overload participates in overload resolution only if
   Hash::is_transparent and KeyEqual::is_transparent are valid and each
   denotes a type. This assumes that such Hash is callable with both K and
   Key type, and that the KeyEqual is transparent, which, together, allows
   calling this function without constructing an instance of Key.

Parameters

   key - key value of the element to search for
   x   - a value of any type that can be transparently compared with a key

Return value

   An iterator to the requested element. If no such element is found,
   past-the-end (see end()) iterator is returned.

Complexity

   Constant on average, worst case linear in the size of the container.

Notes

   Feature-test macro Value Std Feature
   __cpp_lib_generic_unordered_lookup 201811L (C++20) Heterogeneous
   comparison lookup in unordered associative containers; overloads (3,4)

Example

   Run this code
#include <cstddef>
#include <functional>
#include <iostream>
#include <string>
#include <string_view>
#include <unordered_map>

using namespace std::literals;

struct string_hash
{
    using hash_type = std::hash<std::string_view>;
    using is_transparent = void;

    std::size_t operator()(const char* str) const        { return hash_type{}(st
r); }
    std::size_t operator()(std::string_view str) const   { return hash_type{}(st
r); }
    std::size_t operator()(std::string const& str) const { return hash_type{}(st
r); }
};

int main()
{
    // simple comparison demo
    std::unordered_map<int,char> example{{1, 'a'}, {2, 'b'}};

    if (auto search = example.find(2); search != example.end())
        std::cout << "Found " << search->first << ' ' << search->second << '\n';
    else
        std::cout << "Not found\n";

    // C++20 demo: Heterogeneous lookup for unordered containers (transparent ha
shing)
    std::unordered_map<std::string, size_t, string_hash, std::equal_to<>> map{{"
one"s, 1}};
    std::cout << std::boolalpha
        << (map.find("one")   != map.end()) << '\n'
        << (map.find("one"s)  != map.end()) << '\n'
        << (map.find("one"sv) != map.end()) << '\n';
}

   Output:
Found 2 b
true
true
true

See also

   count
   returns the number of elements matching specific key
   (public member function)
   equal_range
   returns range of elements matching a specific key
   (public member function)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/container/unorde
   red_map/find&oldid=136040"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 4 December 2021, at 09:11.
     * This page has been accessed 799,590 times.
