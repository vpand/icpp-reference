std::experimental::simd_abi::fixed_size

   From cppreference.com
   < cpp | experimental | simd

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Experimental
   Technical Specification
   Filesystem library (filesystem TS)
   Library fundamentals (library fundamentals TS)
   Library fundamentals 2 (library fundamentals TS v2)
   Library fundamentals 3 (library fundamentals TS v3)
   Extensions for parallelism (parallelism TS)
   Extensions for parallelism 2 (parallelism TS v2)
   Extensions for concurrency (concurrency TS)
   Extensions for concurrency 2 (concurrency TS v2)
   Concepts (concepts TS)
   Ranges (ranges TS)
   Reflection (reflection TS)
   Mathematical special functions (special functions TR)
   Experimental Non-TS
   Pattern Matching
   Linear Algebra
   std::execution
   Contracts
   2D Graphics

   Extensions for parallelism v2
   Parallel exceptions
   exception_list
   Additional execution policies
   execution::vector_policy
   execution::unsequenced_policy
   Algorithms
   induction
   reductionreduction_plusreduction_minusreduction_multiplies

   reduction_bit_andreduction_bit_orreduction_bit_xorreduction_minreductio
   n_max

   for_loopfor_loop_stridedfor_loop_nfor_loop_n_strided
   execution::no_vec
   execution::ordered_update_t
   Task blocks
   task_block
   task_cancelled_exception
   define_task_blockdefine_task_block_restore_thread
   Data-parallel vectors

   SIMD library
   Main classes
   simd
   simd_mask
   ABI tags
   simd_abi::scalar
   simd_abi::fixed_size

   simd_abi::native
   simd_abi::compatible

   simd_abi::max_fixed_size
   simd_abi::deduce
   Alignment tags
   element_aligned_tagelement_aligned
   vector_aligned_tagvector_aligned
   overaligned_tagoveraligned
   Where expression
   where
   where_expression
   const_where_expression
   Casts
   simd_caststatic_simd_cast
   to_fixed_sizeto_compatibleto_native
   splitsplit_by
   concat
   Algorithms
   min
   max
   minmax
   clamp
   Reduction
   reducehminhmax
   Mask reduction
   all_ofany_ofnone_ofsome_of
   popcount
   find_first_setfind_last_set
   Traits
   is_simdis_simd_mask
   is_abi_tag
   is_simd_flag_type
   simd_size
   memory_alignment
   rebind_simdresize_simd
   Math functions

   Defined in header <experimental/simd>
   template< int N >
   struct fixed_size {};
                                        (parallelism TS v2)

   The simd_abi::fixed_size<N> tag type ensures data-parallel types to
   store and manipulate N elements (i.e. simd<T,
   simd_abi::fixed_size<N>>::size() returns N). An implementation shall
   support at least all N (- [1, 32]. Additionally, for every supported
   simd<T, Abi>, where Abi is an implementation-defined ABI tag, N =
   simd<T, Abi>::size() shall be supported.

Notes

   An implementation may choose to forego ABI compatibility between
   differently compiled translation units for simd and simd_mask
   instantiations using the same simd_abi::fixed_size<N> tag. Otherwise,
   the efficiency of simd<T, Abi> is likely to be better than simd<T,
   fixed_size<simd_size_v<T, Abi>>> (with Abi not an instance of
   simd_abi::fixed_size).

Example

   This section is incomplete
   Reason: no example

See also

   max_fixed_size
   (parallelism TS v2)
   the maximum number of elements guaranteed to be supported by fixed
   (constant)
   scalar
   (parallelism TS v2)
   tag type for storing a single element
   (typedef)
   compatible
   (parallelism TS v2)
   tag type that ensures ABI compatibility
   (alias template)
   native
   (parallelism TS v2)
   tag type that is most efficient
   (alias template)
   deducededuce_t
   (parallelism TS v2)
   obtains an ABI type for given element type and number of elements
   (class template)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/experimental/sim
   d/fixed_size&oldid=161481"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 26 October 2023, at 16:33.
     * This page has been accessed 8,214 times.
