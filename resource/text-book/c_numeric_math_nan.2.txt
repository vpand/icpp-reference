nan, nanf, nanl, nand32, nand64, nand128

   From cppreference.com
   < c | numeric | math

   C
   Language
   Headers
   Type support
   Program utilities
   Variadic function support
   Error handling
   Dynamic memory management
   Strings library
   Algorithms
   Numerics
   Date and time utilities
   Input/output support
   Localization support
   Concurrency support (C11)
   Technical Specifications
   Symbol index

   Numerics
   Common mathematical functions
   Floating-point environment (C99)
   Pseudo-random number generation
   Complex number arithmetic (C99)
   Type-generic math (C99)

   Common mathematical functions
   Types
   div_tldiv_tlldiv_timaxdiv_t
   (C99)(C99)
   float_tdouble_t
   (C99)(C99)
   _Decimal32_t_Decimal64_t
   (C23)(C23)
   Functions
   Basic operations
   abslabsllabsimaxabs
   (C99)(C99)
   fabs
   divldivlldivimaxdiv
   (C99)(C99)
   fmod
   remainder
   (C99)
   remquo
   (C99)
   fma
   (C99)
   fdim
   (C99)
   nannanfnanlnandN
   (C99)(C99)(C99)(C23)
   Maximum/minimum operations
   fmax
   (C99)
   fmaximum
   (C23)
   fmaximum_mag
   (C23)
   fmaximum_num
   (C23)
   fmaximum_mag_num
   (C23)
   fmin
   (C99)
   fminimum
   (C23)
   fminimum_mag
   (C23)
   fminimum_num
   (C23)
   fminimum_mag_num
   (C23)
   Exponential functions
   exp
   exp10
   (C23)
   exp2
   (C99)
   expm1
   (C99)
   exp10m1
   (C23)
   exp2m1
   (C23)
   log
   log10
   log2
   (C99)
   log1plogp1
   (C99)(C23)
   log10p1
   (C23)
   log2p1
   (C23)
   Power functions
   sqrt
   cbrt
   (C99)
   rootn
   (C23)
   rsqrt
   (C23)
   hypot
   (C99)
   compound
   (C23)
   pow
   pown
   (C23)
   powr
   (C23)
   Trigonometric and hyperbolic functions
   sin
   cos
   tan
   asin
   acos
   atan
   atan2
   sinpi
   (C23)
   cospi
   (C23)
   tanpi
   (C23)
   asinpi
   (C23)
   acospi
   (C23)
   atanpi
   (C23)
   atan2pi
   (C23)
   sinh
   cosh
   tanh
   asinh
   (C99)
   acosh
   (C99)
   atanh
   (C99)
   Error and gamma functions
   erf
   (C99)
   erfc
   (C99)
   lgamma
   (C99)
   tgamma
   (C99)
   Nearest integer floating-point operations
   ceil
   floor
   roundlroundllround
   (C99)(C99)(C99)
   roundeven
   (C23)
   trunc
   (C99)
   nearbyint
   (C99)
   rintlrintllrint
   (C99)(C99)(C99)
   fromfpfromfpxufromfpufromfpx
   (C23)(C23)(C23)(C23)
   Floating-point manipulation functions
   ldexp
   frexp
   scalbnscalbln
   (C99)(C99)
   ilogbllogb
   (C99)(C23)
   logb
   (C99)
   modf
   nextafternexttoward
   (C99)(C99)
   nextupnextdown
   (C23)(C23)
   copysign
   (C99)
   canonicalize
   (C23)
   Narrowing operations
   fadd
   (C23)
   fsub
   (C23)
   fmul
   (C23)
   fdiv
   (C23)
   ffma
   (C23)
   fsqrt
   (C23)
   Quantum and quantum exponent functions
   quantizedN
   (C23)
   samequantumdN
   (C23)
   quantumdN
   (C23)
   llquantexpdN
   (C23)
   Decimal re-encoding functions
   encodedecdN
   (C23)
   decodedecdN
   (C23)
   encodebindN
   (C23)
   decodebindN
   (C23)
   Total order and payload functions
   totalorder
   (C23)
   getpayload
   (C23)
   setpayload
   (C23)
   setpayloadsig
   (C23)
   Classification
   fpclassify
   (C99)
   iscanonical
   (C23)
   isfinite
   (C99)
   isinf
   (C99)
   isnan
   (C99)
   isnormal
   (C99)
   signbit
   (C99)
   issubnormal
   (C23)
   iszero
   (C23)
   isgreater
   (C99)
   isgreaterequal
   (C99)
   isless
   (C99)
   islessequal
   (C99)
   islessgreater
   (C99)
   isunordered
   (C99)
   issignaling
   (C23)
   iseqsig
   (C23)
   Macro constants
   Special floating-point values
   HUGE_VALFHUGE_VALHUGE_VALLHUGE_VALDN
   (C99)(C99)(C23)
   INFINITYDEC_INFINITY
   (C99)(C23)
   NANDEC_NAN
   (C99)(C23)
   Arguments and return values
   FP_ILOGB0FP_ILOGBNAN
   (C99)(C99)
   FP_INT_UPWARDFP_INT_DOWNWARDFP_INT_TOWARDZEROFP_INT_TONEARESTFROMZEROFP
   _INT_TONEAREST
   (C23)(C23)(C23)(C23)(C23)
   FP_LLOGB0FP_LLOGBNAN
   (C23)(C23)
   FP_NORMALFP_SUBNORMALFP_ZEROFP_INFINITEFP_NAN
   (C99)(C99)(C99)(C99)(C99)
   Error handling
   MATH_ERRNOMATH_ERRNOEXCEPT
   (C99)(C99)
   math_errhandling
   (C99)
   Fast operation indicators
   FP_FAST_FMAFFP_FAST_FMA
   (C99)(C99)
   FP_FAST_FADDFP_FAST_FADDLFP_FAST_DADDLFP_FAST_DMADDDN
   (C23)(C23)(C23)(C23)
   FP_FAST_FMULFP_FAST_FMULLFP_FAST_DMULLFP_FAST_DMMULDN
   (C23)(C23)(C23)(C23)
   FP_FAST_FFMAFP_FAST_FFMALFP_FAST_DFMALFP_FAST_DMFMADN
   (C23)(C23)(C23)(C23)
   FP_FAST_FMALFP_FAST_FMADN
   (C99)(C23)
   FP_FAST_FSUBFP_FAST_FSUBLFP_FAST_DSUBLFP_FAST_DMSUBDN
   (C23)(C23)(C23)(C23)
   FP_FAST_FDIVFP_FAST_FDIVLFP_FAST_DDIVLFP_FAST_DMDIVDN
   (C23)(C23)(C23)(C23)
   FP_FAST_FSQRTFP_FAST_FSQRTLFP_FAST_DSQRTLFP_FAST_DMSQRTDN
   (C23)(C23)(C23)(C23)

   Defined in header <math.h>
   float       nanf( const char* arg );
   (1)                                    (since C99)
   double      nan( const char* arg );
   (2)                                    (since C99)
   long double nanl( const char* arg );
   (3)                                    (since C99)
   _Decimal32  nand32( const char* arg );
   (4)                                    (since C23)
   _Decimal64  nand64( const char* arg );
   (5)                                    (since C23)
   _Decimal128 nand128( const char* arg );
   (6)                                    (since C23)

   Converts the implementation-defined character string arg into the
   corresponding quiet NaN value, as if by calling the appropriate parsing
   function strtoX, as follows:
     * The call nan("n-char-sequence"), where n-char-sequence is a
       sequence of digits, Latin letters, and underscores, is equivalent
       to the call /*strtoX*/("NAN(n-char-sequence)", (char**)NULL);.
     * The call nan("") is equivalent to the call /*strtoX*/("NAN()",
       (char**)NULL);.
     * The call nan("string"), where string is neither an n-char-sequence
       nor an empty string, is equivalent to the call /*strtoX*/("NAN",
       (char**)NULL);.

   1) The parsing function is strtof.
   2) The parsing function is strtod.
   3) The parsing function is strtold.
   4) The parsing function is strtod32.
   5) The parsing function is strtod64.
   6) The parsing function is strtod128.

   The functions returning decimal floating point values are declared if
   and only the implementation predefines __STDC_IEC_60559_DFP__ (i.e. the
   implementation supports decimal floating point numbers).
   (since C23)

Parameters

   arg - narrow character string identifying the contents of a NaN

Return value

   The quiet NaN value that corresponds to the identifying string arg or
   zero if the implementation does not support quiet NaNs.

   If the implementation supports IEEE floating-point arithmetic (IEC
   60559), it also supports quiet NaNs.

Error handling

   This function is not subject to any of the error conditions specified
   in math_errhandling.

Example

   Run this code
#include <stdio.h>
#include <math.h>
#include <stdint.h>
#include <inttypes.h>
#include <string.h>

int main(void)
{
    double f1 = nan("1");
    uint64_t f1n; memcpy(&f1n, &f1, sizeof f1);
    printf("nan(\"1\")   = %f (%" PRIx64 ")\n", f1, f1n);

    double f2 = nan("2");
    uint64_t f2n; memcpy(&f2n, &f2, sizeof f2);
    printf("nan(\"2\")   = %f (%" PRIx64 ")\n", f2, f2n);

    double f3 = nan("0xF");
    uint64_t f3n; memcpy(&f3n, &f3, sizeof f3);
    printf("nan(\"0xF\") = %f (%" PRIx64 ")\n", f3, f3n);
}

   Possible output:
nan("1")   = nan (7ff8000000000001)
nan("2")   = nan (7ff8000000000002)
nan("0xF") = nan (7ff800000000000f)

References

     * C17 standard (ISO/IEC 9899:2018):

          + 7.12.11.2 The nan functions (p: 186-187)

          + F.10.8.2 The nan functions (p: 386)

     * C11 standard (ISO/IEC 9899:2011):

          + 7.12.11.2 The nan functions (p: 256)

          + F.10.8.2 The nan functions (p: 529)

     * C99 standard (ISO/IEC 9899:1999):

          + 7.12.11.2 The nan functions (p: 237)

          + F.9.8.2 The fabs functions (p: 465)

See also

   isnan
   (C99)
   checks if the given number is NaN
   (function macro)
   NAN
   (C99)
   evaluates to a quiet NaN of type float
   (macro constant)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=c/numeric/math/nan&o
   ldid=133964"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 29 September 2021, at 06:26.
     * This page has been accessed 60,015 times.
