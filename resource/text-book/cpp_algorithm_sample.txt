std::sample

   From cppreference.com
   < cpp | algorithm

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Algorithm library
   Constrained algorithms and algorithms on ranges (C++20)
   Constrained algorithms, e.g. ranges::copy, ranges::sort, ...
   Execution policies (C++17)
   is_execution_policy
   (C++17)
   execution::seqexecution::parexecution::par_unseqexecution::unseq
   (C++17)    (C++17)(C++17)(C++20)
   execution::sequenced_policyexecution::parallel_policyexecution::paralle
   l_unsequenced_policyexecution::parallel_unsequenced
   (C++17)(C++17)(C++17)(C++20)
   Non-modifying sequence operations
   Batch operations
   for_each
   for_each_n
   (C++17)
   Search operations
   all_ofany_ofnone_of
   (C++11)                (C++11)(C++11)
   countcount_if
   mismatch
   equal
   findfind_iffind_if_not
   (C++11)
   find_end
   find_first_of
   adjacent_find
   search
   search_n
   Modifying sequence operations
   Copy operations
   copycopy_if
   (C++11)
   copy_backward
   copy_n
   (C++11)
   move
   (C++11)
   move_backward
   (C++11)
   Swap operations
   swap
   iter_swap
   swap_ranges
   Transformation operations
   replacereplace_if
   transform
   replace_copyreplace_copy_if
   Generation operations
   fill
   fill_n
   generate
   generate_n
   Removing operations
   removeremove_if
   unique
   remove_copyremove_copy_if
   unique_copy
   Order-changing operations
   reverse
   reverse_copy
   rotate
   rotate_copy
   random_shuffleshuffle
   (until C++17)(C++11)
   shift_leftshift_right
   (C++20)(C++20)
   Sampling operations
   sample
   (C++17)
   Sorting and related operations
   Partitioning operations
   partition
   partition_copy
   (C++11)
   stable_partition
   is_partitioned
   (C++11)
   partition_point
   (C++11)
   Sorting operations
   sort
   stable_sort
   partial_sort
   partial_sort_copy
   is_sorted
   (C++11)
   is_sorted_until
   (C++11)
   nth_element
   Binary search operations
   (on partitioned ranges)
   lower_bound
   upper_bound
   equal_range
   binary_search
   Set operations (on sorted ranges)
   includes
   set_union
   set_intersection
   set_difference
   set_symmetric_difference
   Merge operations (on sorted ranges)
   merge
   inplace_merge
   Heap operations
   push_heap
   pop_heap
   make_heap
   sort_heap
   is_heap
   (C++11)
   is_heap_until
   (C++11)
   Minimum/maximum operations
   max
   min
   minmax
   (C++11)
   clamp
   (C++17)
   max_element
   min_element
   minmax_element
   (C++11)
   Lexicographical comparison operations
   lexicographical_compare
   lexicographical_compare_three_way
   (C++20)
   Permutation operations
   next_permutation
   prev_permutation
   is_permutation
   (C++11)
   C library
   qsort
   bsearch
   Numeric operations
   iota
   (C++11)
   inner_product
   adjacent_difference

   accumulate
   reduce
   (C++17)
   transform_reduce
   (C++17)
   partial_sum
   inclusive_scan
   (C++17)
   exclusive_scan
   (C++17)
   transform_inclusive_scan
   (C++17)
   transform_exclusive_scan
   (C++17)
   Operations on uninitialized memory
   uninitialized_copy
   uninitialized_move
   (C++17)
   uninitialized_fill
   uninitialized_copy_n
   (C++11)
   uninitialized_move_n
   (C++17)
   uninitialized_fill_n
   destroy
   (C++17)
   destroy_n
   (C++17)
   destroy_at
   (C++17)
   construct_at
   (C++20)
   uninitialized_default_construct
   (C++17)
   uninitialized_value_construct
   (C++17)
   uninitialized_default_construct_n
   (C++17)
   uninitialized_value_construct_n
   (C++17)

   Defined in header <algorithm>
   template< class PopulationIt, class SampleIt, class Distance, class
   URBG >

   SampleIterator sample( PopulationIt first, PopulationIt last,
                          SampleIt out, Distance n, URBG&& g );
   (since C++17)

   Selects n elements from the sequence [first, last) (without
   replacement) such that each possible sample has equal probability of
   appearance, and writes those selected elements into the output iterator
   out. Random numbers are generated using the random number generator g.

   If n is greater than the number of elements in the sequence, selects
   all elements in the sequence.

   The algorithm is stable (preserves the relative order of the selected
   elements) only if PopulationIt meets the requirements of
   LegacyForwardIterator.

   If the value type of first(until C++20)*first(since C++20) is not
   writable to out, the program is ill-formed.

   If any of the following conditions is satisfied, the behavior is
   undefined:
     * out is in [first, last).
     * PopulationIt does not meet the requirements of LegacyInputIterator.
     * SampleIt does not meet the requirements of LegacyOutputIterator.
     * All following conditions are satisfied:

          + PopulationIt does not meet the requirements of
            LegacyForwardIterator.

   (until C++23)

          + PopulationIt does not model forward_iterator.

   (since C++23)

          + SampleIt does not meet the requirements of
            LegacyRandomAccessIterator.

     * Given the type T as std::remove_reference_t<URBG>, any of the
       following conditions is satisfied:

          + T does not meet the requirements of UniformRandomBitGenerator.

          + The return type of T is not convertible to Distance.

   (until C++20)

Parameters

   first, last - pair of iterators forming the range from which to make
   the sampling (the population)
   out - the output iterator where the samples are written
   n - number of samples to make
   g - the random number generator used as the source of randomness
   Type requirements
   -
   Distance must be an integer type.

Return value

   Returns a copy of out after the last sample that was output, that is,
   end of the sample range.

Complexity

   Linear in std::distance(first, last).

Possible implementation

   See the implementations in libstdc++, libc++ and MSVC STL.

Notes

   This function may implement selection sampling or reservoir sampling.
   Feature-test macro  Value    Std     Feature
   __cpp_lib_sample   201603L (C++17) std::sample

Example

   Run this code
#include <algorithm>
#include <iostream>
#include <iterator>
#include <random>
#include <string>

int main()
{
    std::string in {"ABCDEFGHIJK"}, out;
    std::sample(in.begin(), in.end(), std::back_inserter(out), 4,
                std::mt19937 {std::random_device{}()});
    std::cout << "Four random letters out of " << in << " : " << out << '\n';
}

   Possible output:
Four random letters out of ABCDEFGHIJK: EFGK

See also

   random_shuffleshuffle
   (until C++17)(C++11)
   randomly re-orders elements in a range
   (function template)
   ranges::sample
   (C++20)
   selects N random elements from a sequence
   (niebloid)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/algorithm/sample
   &oldid=170521"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 28 March 2024, at 02:10.
     * This page has been accessed 126,449 times.
