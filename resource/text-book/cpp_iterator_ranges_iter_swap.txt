std::ranges::iter_swap

   From cppreference.com
   < cpp | iterator

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Iterator library
   Iterator concepts
   indirectly_readable
   (C++20)
   indirectly_writable
   (C++20)
   weakly_incrementable
   (C++20)
   incrementable
   (C++20)
   input_or_output_iterator
   (C++20)
   sentinel_for
   (C++20)
   sized_sentinel_for
   (C++20)
   input_iterator
   (C++20)
   output_iterator
   (C++20)
   forward_iterator
   (C++20)
   bidirectional_iterator
   (C++20)
   random_access_iterator
   (C++20)
   contiguous_iterator
   (C++20)
   Iterator primitives
   input_iterator_tagoutput_iterator_tagforward_iterator_tagbidirectional_
   iterator_tagrandom_access_iterator_tagcontiguous_iterator_tag
   (C++20)
   iter_value_titer_difference_titer_reference_titer_const_reference_titer
   _rvalue_reference_titer_common_reference_t
   (C++20)(C++20)(C++20)(C++23)(C++20)(C++20)
   iterator
   (deprecated in C++17)
   iterator_traits
   incrementable_traits
   (C++20)
   indirectly_readable_traits
   (C++20)
   Algorithm concepts and utilities
   Indirect callable concepts
   indirectly_unary_invocableindirectly_regular_unary_invocable
   (C++20)(C++20)
   indirect_unary_predicate
   (C++20)
   indirect_binary_predicate
   (C++20)
   indirect_equivalence_relation
   (C++20)
   indirect_strict_weak_order
   (C++20)
   Common algorithm requirements
   indirectly_movable
   (C++20)
   indirectly_movable_storable
   (C++20)
   indirectly_copyable
   (C++20)
   indirectly_copyable_storable
   (C++20)
   indirectly_swappable
   (C++20)
   indirectly_comparable
   (C++20)
   permutable
   (C++20)
   mergeable
   (C++20)
   sortable
   (C++20)
   Utilities
   indirect_result_t
   (C++20)
   projected
   (C++20)
   projected_value_t
   (C++26)
   Iterator adaptors
   reverse_iterator
   make_reverse_iterator
   (C++14)
   move_iterator
   (C++11)
   make_move_iterator
   (C++11)
   default_sentinel_tdefault_sentinel
   (C++20)(C++20)
   unreachable_sentinel_tunreachable_sentinel
   (C++20)(C++20)
   front_insert_iterator
   back_insert_iterator
   inserter
   insert_iterator
   front_inserter
   back_inserter
   move_sentinel
   (C++20)
   common_iterator
   (C++20)
   counted_iterator
   (C++20)
   basic_const_iterator
   (C++23)
   const_iterator
   (C++23)
   const_sentinel
   (C++23)
   make_const_iterator
   (C++23)
   make_const_sentinel
   (C++23)
   Stream iterators
   istream_iterator

   ostream_iterator
   istreambuf_iterator
   ostreambuf_iterator
   Iterator customization points
   ranges::iter_move
   (C++20)
   ranges::iter_swap
   (C++20)
   Iterator operations
   advance
   distance
   prev
   (C++11)
   next
   (C++11)
   ranges::advance
   (C++20)
   ranges::distance
   (C++20)
   ranges::prev
   (C++20)
   ranges::next
   (C++20)
   Range access
   begincbegin
   (C++11)(C++14)
   rbegincrbegin
   (C++14)(C++14)
   endcend
   (C++11)(C++14)
   rendcrend
   (C++14)(C++14)
   sizessize
   (C++17)(C++20)
   empty
   (C++17)
   data
   (C++17)

   Defined in header <iterator>
   namespace ranges {

       inline namespace /* unspecified */ {
           inline constexpr /* unspecified */
               iter_swap = /* unspecified */;
       }
   }
   (since C++20)
   (customization point object)
   Call signature
   template< class I1, class I2 >
   constexpr void iter_swap( I1&& i1, I2&& i2 ) noexcept(/* see below */);
                                 (since C++20)
   Helper function
   template< class X, class Y >

   constexpr std::iter_value_t<X>
       iter-exchange-move( X&& x, Y&& y )
       noexcept(noexcept(std::iter_value_t<X>(std::ranges::iter_move(x)))
   &&
                noexcept(*x = std::ranges::iter_move(y)));
                                 (exposition only*)

   Swaps values denoted by two iterators.

   The effect of the exposition-only helper function iter-exchange-move is
   equivalent to
std::iter_value_t<X> old(std::ranges::iter_move(x));
*x = std::ranges::iter_move(y);
return old;

   ranges::iter_swap(i1, i2) is expression-equivalent to:
    1. (void)iter_swap(i1, i2), if i1 or i2 has a class or enumeration
       type and the expression is well-formed, where the overload
       resolution of iter_swap is performed with the additional candidate
       void iter_swap(auto, auto) = delete;^[1], excluding
       std::ranges::iter_swap itself.
          + If the selected overload does not exchange the value denoted
            by i1 and i2, the program is ill-formed, no diagnostic
            required.
    2. Otherwise, ranges::swap(*i1, *i2) if both I1 and I2 model
       indirectly_readable and if std::iter_reference_t<I1> and
       std::iter_reference_t<I2> model swappable_with.
    3. Otherwise, (void)(*i1 = iter-exchange-move(i2, i1)), if
       std::indirectly_movable_storable<I1, I2> and
       std::indirectly_movable_storable<I2, I1> are both modeled, except
       that i1 is only evaluated once.
    4. Otherwise, ranges::iter_swap(i1, i2) is ill-formed, which can
       result in substitution failure when ranges::iter_swap(i1, i2)
       appears in the immediate context of a template instantiation.

    1. ^| This precludes calling unconstrained std::iter_swap.

Customization point objects

   The name ranges::iter_swap denotes a customization point object, which
   is a const function object of a literal semiregular class type. For
   exposition purposes, the cv-unqualified version of its type is denoted
   as __iter_swap_fn.

   All instances of __iter_swap_fn are equal. The effects of invoking
   different instances of type __iter_swap_fn on the same arguments are
   equivalent, regardless of whether the expression denoting the instance
   is an lvalue or rvalue, and is const-qualified or not (however, a
   volatile-qualified instance is not required to be invocable). Thus,
   ranges::iter_swap can be copied freely and its copies can be used
   interchangeably.

   Given a set of types Args..., if std::declval<Args>()... meet the
   requirements for arguments to ranges::iter_swap above, __iter_swap_fn
   models
     * std::invocable<__iter_swap_fn, Args...>,
     * std::invocable<const __iter_swap_fn, Args...>,
     * std::invocable<__iter_swap_fn&, Args...>, and
     * std::invocable<const __iter_swap_fn&, Args...>.

   Otherwise, no function call operator of __iter_swap_fn participates in
   overload resolution.

Example

   This section is incomplete
   Reason: no example

See also

   iter_swap
   (C++20)
   swaps the objects pointed to by two adjusted underlying iterators
   (function template)
   iter_swap
   (C++20)
   swaps the objects pointed to by two underlying iterators
   (function template)
   iter_swap
   swaps the elements pointed to by two iterators
   (function template)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/ranges/
   iter_swap&oldid=156030"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 1 August 2023, at 10:41.
     * This page has been accessed 15,071 times.
