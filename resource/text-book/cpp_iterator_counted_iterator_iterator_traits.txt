std::iterator_traits<std::counted_iterator>

   From cppreference.com
   < cpp | iterator | counted iterator

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Iterator library
   Iterator concepts
   indirectly_readable
   (C++20)
   indirectly_writable
   (C++20)
   weakly_incrementable
   (C++20)
   incrementable
   (C++20)
   input_or_output_iterator
   (C++20)
   sentinel_for
   (C++20)
   sized_sentinel_for
   (C++20)
   input_iterator
   (C++20)
   output_iterator
   (C++20)
   forward_iterator
   (C++20)
   bidirectional_iterator
   (C++20)
   random_access_iterator
   (C++20)
   contiguous_iterator
   (C++20)
   Iterator primitives
   input_iterator_tagoutput_iterator_tagforward_iterator_tagbidirectional_
   iterator_tagrandom_access_iterator_tagcontiguous_iterator_tag
   (C++20)
   iter_value_titer_difference_titer_reference_titer_const_reference_titer
   _rvalue_reference_titer_common_reference_t
   (C++20)(C++20)(C++20)(C++23)(C++20)(C++20)
   iterator
   (deprecated in C++17)
   iterator_traits
   incrementable_traits
   (C++20)
   indirectly_readable_traits
   (C++20)
   Algorithm concepts and utilities
   Indirect callable concepts
   indirectly_unary_invocableindirectly_regular_unary_invocable
   (C++20)(C++20)
   indirect_unary_predicate
   (C++20)
   indirect_binary_predicate
   (C++20)
   indirect_equivalence_relation
   (C++20)
   indirect_strict_weak_order
   (C++20)
   Common algorithm requirements
   indirectly_movable
   (C++20)
   indirectly_movable_storable
   (C++20)
   indirectly_copyable
   (C++20)
   indirectly_copyable_storable
   (C++20)
   indirectly_swappable
   (C++20)
   indirectly_comparable
   (C++20)
   permutable
   (C++20)
   mergeable
   (C++20)
   sortable
   (C++20)
   Utilities
   indirect_result_t
   (C++20)
   projected
   (C++20)
   projected_value_t
   (C++26)
   Iterator adaptors
   reverse_iterator
   make_reverse_iterator
   (C++14)
   move_iterator
   (C++11)
   make_move_iterator
   (C++11)
   default_sentinel_tdefault_sentinel
   (C++20)(C++20)
   unreachable_sentinel_tunreachable_sentinel
   (C++20)(C++20)
   front_insert_iterator
   back_insert_iterator
   inserter
   insert_iterator
   front_inserter
   back_inserter
   move_sentinel
   (C++20)
   common_iterator
   (C++20)
   counted_iterator
   (C++20)
   basic_const_iterator
   (C++23)
   const_iterator
   (C++23)
   const_sentinel
   (C++23)
   make_const_iterator
   (C++23)
   make_const_sentinel
   (C++23)
   Stream iterators
   istream_iterator

   ostream_iterator
   istreambuf_iterator
   ostreambuf_iterator
   Iterator customization points
   ranges::iter_move
   (C++20)
   ranges::iter_swap
   (C++20)
   Iterator operations
   advance
   distance
   prev
   (C++11)
   next
   (C++11)
   ranges::advance
   (C++20)
   ranges::distance
   (C++20)
   ranges::prev
   (C++20)
   ranges::next
   (C++20)
   Range access
   begincbegin
   (C++11)(C++14)
   rbegincrbegin
   (C++14)(C++14)
   endcend
   (C++11)(C++14)
   rendcrend
   (C++14)(C++14)
   sizessize
   (C++17)(C++20)
   empty
   (C++17)
   data
   (C++17)

   std::counted_iterator
   Member functions
   counted_iterator::counted_iterator
   (C++20)
   counted_iterator::operator=
   (C++20)
   counted_iterator::base
   (C++20)
   counted_iterator::count
   (C++20)
   counted_iterator::operator*counted_iterator::operator->
   (C++20)(C++20)
   counted_iterator::operator[]
   (C++20)
   counted_iterator::operator++counted_iterator::operator++(int)counted_it
   erator::operator+counted_iterator::operator+=counted_iterator::operator
   --counted_iterator::operator--(int)counted_iterator::operator-counted_i
   terator::operator-=
   (C++20)(C++20)(C++20)(C++20)(C++20)(C++20)(C++20)(C++20)
   Non-member functions
   operator==operator<=>
   (C++20)(C++20)
   operator==(default_sentinel_t)
   (C++20)
   operator+
   (C++20)
   operator-
   (C++20)
   operator-(default_sentinel_t)
   (C++20)
   iter_move
   (C++20)
   iter_swap
   (C++20)
   Helper classes
   iterator_traits
   (C++20)

   Defined in header <iterator>
   template< std::input_iterator I >

       requires /* see below */
   struct iterator_traits<std::counted_iterator<I>> :
   std::iterator_traits<I> {
       using pointer = std::conditional_t<std::contiguous_iterator<I>,

   std::add_pointer_t<std::iter_reference_t<I>>,
                                          void>;
   };
                                    (since C++20)

   Inherits the properties from customized (generated from either a
   standard partial specialization or a program-defined specialization)
   std::iterator_traits<I>, with the member type pointer adjusted, where I
   models input_iterator.

   Notably, the iterator_concept (if present) and iterator_category are
   inherited from std::iterator_traits<I>.

   The condition in the requires-clause is true if and only if
   std::iterator_traits<I> is not generated from the primary template.

Note

   Before P2259R1, this specialization is used even if
   std::iterator_traits<I> is generated from the primary template. As a
   result, when testing std::counted_iterator<I> against an iterator
   concept (e.g. forward_iterator), the determination of /*ITER_CONCEPT*/
   does not take I::iterator_concept into account, and thus
   std::counted_iterator<I> sometimes erroneously behaves as if it cannot
   model that concept. This incorrect behavior is implemented in libstdc++
   prior to 10.4, and in MSVC STL prior to VS 2022 17.0 Preview 3.

   The standard library provides partial specializations of
   std::iterator_traits for pointer types, std::counted_iterator, and
   std::common_iterator.

Example

   Run this code
#include <iterator>
#include <list>
#include <type_traits>
#include <vector>

int main()
{
    std::vector v{1, 2, 3, 4};
    std::list l{1, 2, 3, 4};
    std::counted_iterator iv{v.begin(), 3};
    std::counted_iterator il{l.begin(), 3};
    static_assert(std::is_same<int*, std::iterator_traits<decltype(iv)>::pointer
>());
    static_assert(std::is_same<void, std::iterator_traits<decltype(il)>::pointer
>());
}

Defect reports

   The following behavior-changing defect reports were applied
   retroactively to previously published C++ standards.
   DR Applied to Behavior as published Correct behavior
   P2259R1 C++20 there's no requires-clause
   pointer is unconditionally defined as void constraint added

See also

   iterator_traits
   provides uniform interface to the properties of an iterator
   (class template)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/counted
   _iterator/iterator_traits&oldid=159834"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 30 September 2023, at 00:11.
     * This page has been accessed 5,655 times.
