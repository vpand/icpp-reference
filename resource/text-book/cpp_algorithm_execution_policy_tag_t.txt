std::execution::sequenced_policy, std::execution::parallel_policy,
std::execution::parallel_unsequenced_policy,
std::execution::unsequenced_policy

   From cppreference.com
   < cpp | algorithm

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Algorithm library
   Constrained algorithms and algorithms on ranges (C++20)
   Constrained algorithms, e.g. ranges::copy, ranges::sort, ...
   Execution policies (C++17)
   is_execution_policy
   (C++17)
   execution::seqexecution::parexecution::par_unseqexecution::unseq
   (C++17)    (C++17)(C++17)(C++20)
   execution::sequenced_policyexecution::parallel_policyexecution::paralle
   l_unsequenced_policyexecution::parallel_unsequenced
   (C++17)(C++17)(C++17)(C++20)
   Non-modifying sequence operations
   Batch operations
   for_each
   for_each_n
   (C++17)
   Search operations
   all_ofany_ofnone_of
   (C++11)                (C++11)(C++11)
   countcount_if
   mismatch
   equal
   findfind_iffind_if_not
   (C++11)
   find_end
   find_first_of
   adjacent_find
   search
   search_n
   Modifying sequence operations
   Copy operations
   copycopy_if
   (C++11)
   copy_backward
   copy_n
   (C++11)
   move
   (C++11)
   move_backward
   (C++11)
   Swap operations
   swap
   iter_swap
   swap_ranges
   Transformation operations
   replacereplace_if
   transform
   replace_copyreplace_copy_if
   Generation operations
   fill
   fill_n
   generate
   generate_n
   Removing operations
   removeremove_if
   unique
   remove_copyremove_copy_if
   unique_copy
   Order-changing operations
   reverse
   reverse_copy
   rotate
   rotate_copy
   random_shuffleshuffle
   (until C++17)(C++11)
   shift_leftshift_right
   (C++20)(C++20)
   Sampling operations
   sample
   (C++17)
   Sorting and related operations
   Partitioning operations
   partition
   partition_copy
   (C++11)
   stable_partition
   is_partitioned
   (C++11)
   partition_point
   (C++11)
   Sorting operations
   sort
   stable_sort
   partial_sort
   partial_sort_copy
   is_sorted
   (C++11)
   is_sorted_until
   (C++11)
   nth_element
   Binary search operations
   (on partitioned ranges)
   lower_bound
   upper_bound
   equal_range
   binary_search
   Set operations (on sorted ranges)
   includes
   set_union
   set_intersection
   set_difference
   set_symmetric_difference
   Merge operations (on sorted ranges)
   merge
   inplace_merge
   Heap operations
   push_heap
   pop_heap
   make_heap
   sort_heap
   is_heap
   (C++11)
   is_heap_until
   (C++11)
   Minimum/maximum operations
   max
   min
   minmax
   (C++11)
   clamp
   (C++17)
   max_element
   min_element
   minmax_element
   (C++11)
   Lexicographical comparison operations
   lexicographical_compare
   lexicographical_compare_three_way
   (C++20)
   Permutation operations
   next_permutation
   prev_permutation
   is_permutation
   (C++11)
   C library
   qsort
   bsearch
   Numeric operations
   iota
   (C++11)
   inner_product
   adjacent_difference

   accumulate
   reduce
   (C++17)
   transform_reduce
   (C++17)
   partial_sum
   inclusive_scan
   (C++17)
   exclusive_scan
   (C++17)
   transform_inclusive_scan
   (C++17)
   transform_exclusive_scan
   (C++17)
   Operations on uninitialized memory
   uninitialized_copy
   uninitialized_move
   (C++17)
   uninitialized_fill
   uninitialized_copy_n
   (C++11)
   uninitialized_move_n
   (C++17)
   uninitialized_fill_n
   destroy
   (C++17)
   destroy_n
   (C++17)
   destroy_at
   (C++17)
   construct_at
   (C++20)
   uninitialized_default_construct
   (C++17)
   uninitialized_value_construct
   (C++17)
   uninitialized_default_construct_n
   (C++17)
   uninitialized_value_construct_n
   (C++17)

   Defined in header <execution>
   class sequenced_policy { /* unspecified */ };
   (1)                                                     (since C++17)
   class parallel_policy { /* unspecified */ };
   (2)                                                     (since C++17)
   class parallel_unsequenced_policy { /* unspecified */ };
   (3)                                                     (since C++17)
   class unsequenced_policy { /* unspecified */ };
   (4)                                                     (since C++20)
   1) The execution policy type used as a unique type to disambiguate
   parallel algorithm overloading and require that a parallel algorithm's
   execution may not be parallelized. The invocations of element access
   functions in parallel algorithms invoked with this policy (usually
   specified as std::execution::seq) are indeterminately sequenced in the
   calling thread.
   2) The execution policy type used as a unique type to disambiguate
   parallel algorithm overloading and indicate that a parallel algorithm's
   execution may be parallelized. The invocations of element access
   functions in parallel algorithms invoked with this policy (usually
   specified as std::execution::par) are permitted to execute in either
   the invoking thread or in a thread implicitly created by the library to
   support parallel algorithm execution. Any such invocations executing in
   the same thread are indeterminately sequenced with respect to each
   other.
   3) The execution policy type used as a unique type to disambiguate
   parallel algorithm overloading and indicate that a parallel algorithm's
   execution may be parallelized, vectorized, or migrated across threads
   (such as by a parent-stealing scheduler). The invocations of element
   access functions in parallel algorithms invoked with this policy are
   permitted to execute in an unordered fashion in unspecified threads,
   and unsequenced with respect to one another within each thread.
   4) The execution policy type used as a unique type to disambiguate
   parallel algorithm overloading and indicate that a parallel algorithm's
   execution may be vectorized, e.g., executed on a single thread using
   instructions that operate on multiple data items.

   During the execution of a parallel algorithm with any of these
   execution policies, if the invocation of an element access function
   exits via an uncaught exception, std::terminate is called, but the
   implementations may define additional execution policies that handle
   exceptions differently.

Notes

   When using parallel execution policy, it is the programmer's
   responsibility to avoid data races and deadlocks:
int a[] = {0, 1};
std::vector<int> v;
std::for_each(std::execution::par, std::begin(a), std::end(a), [&](int i)
{
    v.push_back(i * 2 + 1); // Error: data race
});

std::atomic<int> x {0};
int a[] = {1, 2};
std::for_each(std::execution::par, std::begin(a), std::end(a), [&](int)
{
    x.fetch_add(1, std::memory_order_relaxed);
    while (x.load(std::memory_order_relaxed) == 1) { } // Error: assumes executi
on order
});

int x = 0;
std::mutex m;
int a[] = {1, 2};
std::for_each(std::execution::par, std::begin(a), std::end(a), [&](int)
{
    std::lock_guard<std::mutex> guard(m);
    ++x; // correct
});

   Unsequenced execution policies are the only case where function calls
   are unsequenced with respect to each other, meaning they can be
   interleaved. In all other situations in C++, they are
   indeterminately-sequenced (cannot interleave). Because of that, users
   are not allowed to allocate or deallocate memory, acquire mutexes, use
   non-lockfree std::atomic specializations, or, in general, perform any
   vectorization-unsafe operations when using these policies
   (vectorization-unsafe functions are the ones that synchronize-with
   another function, e.g. std::mutex::unlock synchronizes-with the next
   std::mutex::lock).
int x = 0;
std::mutex m;
int a[] = {1, 2};
std::for_each(std::execution::par_unseq, std::begin(a), std::end(a), [&](int)
{
    std::lock_guard<std::mutex> guard(m); // Error: lock_guard constructor calls
 m.lock()
    ++x;
});

   If the implementation cannot parallelize or vectorize (e.g. due to lack
   of resources), all standard execution policies can fall back to
   sequential execution.

See also

   seqparpar_unsequnseq
   (C++17)(C++17)(C++17)(C++20)
   global execution policy objects
   (constant)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/algorithm/execut
   ion_policy_tag_t&oldid=154537"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 5 July 2023, at 22:43.
     * This page has been accessed 470,004 times.
