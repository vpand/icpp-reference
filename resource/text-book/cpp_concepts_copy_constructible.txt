std::copy_constructible

   From cppreference.com
   < cpp | concepts

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Concepts library
   Core language concepts
   same_as
   derived_from
   convertible_to
   common_reference_with

   common_with
   integral
   signed_integral
   unsigned_integral
   floating_point
   swappableswappable_with
   destructible
   constructible_from
   default_initializable
   move_constructible
   copy_constructible
   assignable_from
   Comparison concepts
   equality_comparableequality_comparable_with
   totally_orderedtotally_ordered_with
   Object concepts
   movable
   copyable
   semiregular
   regular
   Callable concepts
   invocableregular_invocable
   predicate
   relation
   equivalence_relation
   strict_weak_order
   Exposition-only concepts
   boolean-testable

   Defined in header <concepts>
   template< class T >

   concept copy_constructible =
       std::move_constructible<T> &&
       std::constructible_from<T, T&> && std::convertible_to<T&, T> &&
       std::constructible_from<T, const T&> && std::convertible_to<const
   T&, T> &&
       std::constructible_from<T, const T> && std::convertible_to<const T,
   T>;
                               (since C++20)

   The concept copy_constructible is satisfied if T is an lvalue reference
   type, or if it is a move_constructible object type where an object of
   that type can constructed from a (possibly const) lvalue or const
   rvalue of that type in both direct- and copy-initialization contexts
   with the usual semantics (a copy is constructed with the source
   unchanged).

Semantic requirements

   If T is an object type, then copy_constructible<T> is modeled only if
   given
     * v, an lvalue of type (possibly const) T or an rvalue of type const
       T,

   the following are true:
     * After the definition T u = v;, u is equal to v and v is not
       modified;
     * T(v) is equal to v and does not modify v.

See also

   is_copy_constructibleis_trivially_copy_constructibleis_nothrow_copy_con
   structible
   (C++11)(C++11)(C++11)
   checks if a type has a copy constructor
   (class template)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/concepts/copy_co
   nstructible&oldid=161743"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 29 October 2023, at 14:15.
     * This page has been accessed 27,155 times.
