std::find, std::find_if, std::find_if_not

   From cppreference.com
   < cpp | algorithm

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Algorithm library
   Constrained algorithms and algorithms on ranges (C++20)
   Constrained algorithms, e.g. ranges::copy, ranges::sort, ...
   Execution policies (C++17)
   is_execution_policy
   (C++17)
   execution::seqexecution::parexecution::par_unseqexecution::unseq
   (C++17)    (C++17)(C++17)(C++20)
   execution::sequenced_policyexecution::parallel_policyexecution::paralle
   l_unsequenced_policyexecution::parallel_unsequenced
   (C++17)(C++17)(C++17)(C++20)
   Non-modifying sequence operations
   Batch operations
   for_each
   for_each_n
   (C++17)
   Search operations
   all_ofany_ofnone_of
   (C++11)                (C++11)(C++11)
   countcount_if
   mismatch
   equal
   findfind_iffind_if_not
   (C++11)
   find_end
   find_first_of
   adjacent_find
   search
   search_n
   Modifying sequence operations
   Copy operations
   copycopy_if
   (C++11)
   copy_backward
   copy_n
   (C++11)
   move
   (C++11)
   move_backward
   (C++11)
   Swap operations
   swap
   iter_swap
   swap_ranges
   Transformation operations
   replacereplace_if
   transform
   replace_copyreplace_copy_if
   Generation operations
   fill
   fill_n
   generate
   generate_n
   Removing operations
   removeremove_if
   unique
   remove_copyremove_copy_if
   unique_copy
   Order-changing operations
   reverse
   reverse_copy
   rotate
   rotate_copy
   random_shuffleshuffle
   (until C++17)(C++11)
   shift_leftshift_right
   (C++20)(C++20)
   Sampling operations
   sample
   (C++17)
   Sorting and related operations
   Partitioning operations
   partition
   partition_copy
   (C++11)
   stable_partition
   is_partitioned
   (C++11)
   partition_point
   (C++11)
   Sorting operations
   sort
   stable_sort
   partial_sort
   partial_sort_copy
   is_sorted
   (C++11)
   is_sorted_until
   (C++11)
   nth_element
   Binary search operations
   (on partitioned ranges)
   lower_bound
   upper_bound
   equal_range
   binary_search
   Set operations (on sorted ranges)
   includes
   set_union
   set_intersection
   set_difference
   set_symmetric_difference
   Merge operations (on sorted ranges)
   merge
   inplace_merge
   Heap operations
   push_heap
   pop_heap
   make_heap
   sort_heap
   is_heap
   (C++11)
   is_heap_until
   (C++11)
   Minimum/maximum operations
   max
   min
   minmax
   (C++11)
   clamp
   (C++17)
   max_element
   min_element
   minmax_element
   (C++11)
   Lexicographical comparison operations
   lexicographical_compare
   lexicographical_compare_three_way
   (C++20)
   Permutation operations
   next_permutation
   prev_permutation
   is_permutation
   (C++11)
   C library
   qsort
   bsearch
   Numeric operations
   iota
   (C++11)
   inner_product
   adjacent_difference

   accumulate
   reduce
   (C++17)
   transform_reduce
   (C++17)
   partial_sum
   inclusive_scan
   (C++17)
   exclusive_scan
   (C++17)
   transform_inclusive_scan
   (C++17)
   transform_exclusive_scan
   (C++17)
   Operations on uninitialized memory
   uninitialized_copy
   uninitialized_move
   (C++17)
   uninitialized_fill
   uninitialized_copy_n
   (C++11)
   uninitialized_move_n
   (C++17)
   uninitialized_fill_n
   destroy
   (C++17)
   destroy_n
   (C++17)
   destroy_at
   (C++17)
   construct_at
   (C++20)
   uninitialized_default_construct
   (C++17)
   uninitialized_value_construct
   (C++17)
   uninitialized_default_construct_n
   (C++17)
   uninitialized_value_construct_n
   (C++17)

   Defined in header <algorithm>
   (1)
   template< class InputIt, class T >
   InputIt find( InputIt first, InputIt last, const T& value );
   (constexpr since C++20)
   (until C++26)
   template< class InputIt, class T = typename std::iterator_traits

                                          <InputIt>::value_type >
   constexpr InputIt find( InputIt first, InputIt last, const T& value );
   (since C++26)
   (2)
   template< class ExecutionPolicy, class ForwardIt, class T >

   ForwardIt find( ExecutionPolicy&& policy,
                   ForwardIt first, ForwardIt last, const T& value );
   (since C++17)
   (until C++26)
   template< class ExecutionPolicy,

             class ForwardIt, class T = typename std::iterator_traits
                                            <ForwardIt>::value_type >
   ForwardIt find( ExecutionPolicy&& policy,
                   ForwardIt first, ForwardIt last, const T& value );
   (since C++26)
   template< class InputIt, class UnaryPred >
   InputIt find_if( InputIt first, InputIt last, UnaryPred p );
   (3) (constexpr since C++20)
   template< class ExecutionPolicy, class ForwardIt, class UnaryPred >

   ForwardIt find_if( ExecutionPolicy&& policy,
                      ForwardIt first, ForwardIt last, UnaryPred p );
   (4) (since C++17)
   template< class InputIt, class UnaryPred >
   InputIt find_if_not( InputIt first, InputIt last, UnaryPred q );
   (5) (since C++11)
   (constexpr since C++20)
   template< class ExecutionPolicy, class ForwardIt, class UnaryPred >

   ForwardIt find_if_not( ExecutionPolicy&& policy,
                          ForwardIt first, ForwardIt last, UnaryPred q );
   (6) (since C++17)

   Returns an iterator to the first element in the range [first, last)
   that satisfies specific criteria (or last if there is no such
   iterator).
   1) find searches for an element equal to value (using operator==).
   3) find_if searches for an element for which predicate p returns true.
   5) find_if_not searches for an element for which predicate q returns
   false.
   2,4,6) Same as (1,3,5), but executed according to policy.
   These overloads participate in overload resolution only if

   std::is_execution_policy_v<std::decay_t<ExecutionPolicy>> is true.
   (until C++20)

   std::is_execution_policy_v<std::remove_cvref_t<ExecutionPolicy>> is
   true.
   (since C++20)

Parameters

   first, last - the range of elements to examine
   value - value to compare the elements to
   policy - the execution policy to use. See execution policy for details.
   p - unary predicate which returns true for the required element.

   The expression p(v) must be convertible to bool for every argument v of
   type (possibly const) VT, where VT is the value type of InputIt,
   regardless of value category, and must not modify v. Thus, a parameter
   type of VT&is not allowed, nor is VT unless for VT a move is equivalent
   to a copy(since C++11).
   q - unary predicate which returns false for the required element.

   The expression q(v) must be convertible to bool for every argument v of
   type (possibly const) VT, where VT is the value type of InputIt,
   regardless of value category, and must not modify v. Thus, a parameter
   type of VT&is not allowed, nor is VT unless for VT a move is equivalent
   to a copy(since C++11).
   Type requirements
   -
   InputIt must meet the requirements of LegacyInputIterator.
   -
   ForwardIt must meet the requirements of LegacyForwardIterator.
   -
   UnaryPredicate must meet the requirements of Predicate.

Return value

   The first iterator it in the range [first, last) satisfying the
   following condition or last if there is no such iterator:
   1,2) *it == value is true.
   3,4) p(*it) is true.
   5,6) q(*it) is false.

Complexity

   Given \(\scriptsize N\)N as std::distance(first, last):
   1,2) At most \(\scriptsize N\)N comparisons with value using
   operator==.
   3,4) At most \(\scriptsize N\)N applications of the predicate p.
   5,6) At most \(\scriptsize N\)N applications of the predicate q.

Exceptions

   The overloads with a template parameter named ExecutionPolicy report
   errors as follows:
     * If execution of a function invoked as part of the algorithm throws
       an exception and ExecutionPolicy is one of the standard policies,
       std::terminate is called. For any other ExecutionPolicy, the
       behavior is implementation-defined.
     * If the algorithm fails to allocate memory, std::bad_alloc is
       thrown.

Possible implementation

                                        find
template<class InputIt, class T = typename std::iterator_traits<InputIt>::value_
type>
constexpr InputIt find(InputIt first, InputIt last, const T& value)
{
    for (; first != last; ++first)
        if (*first == value)
            return first;

    return last;
}

                                       find_if
template<class InputIt, class UnaryPred>
constexpr InputIt find_if(InputIt first, InputIt last, UnaryPred p)
{
    for (; first != last; ++first)
        if (p(*first))
            return first;

    return last;
}

                                     find_if_not
template<class InputIt, class UnaryPred>
constexpr InputIt find_if_not(InputIt first, InputIt last, UnaryPred q)
{
    for (; first != last; ++first)
        if (!q(*first))
            return first;

    return last;
}

Notes

   If C++11 is not available, an equivalent to std::find_if_not is to use
   std::find_if with the negated predicate.
template<class InputIt, class UnaryPred>
InputIt find_if_not(InputIt first, InputIt last, UnaryPred q)
{
    return std::find_if(first, last, std::not1(q));
}

             Feature-test macro           Value    Std   Feature
   __cpp_lib_algorithm_default_value_type 202403 (C++26)
   List-initialization for algorithms (1,2)

Example

   The following example finds numbers in given sequences.
   Run this code
#include <algorithm>
#include <array>
#include <cassert>
#include <complex>
#include <iostream>
#include <vector>

int main()
{
    const auto v = {1, 2, 3, 4};

    for (const int n : {3, 5})
        (std::find(v.begin(), v.end(), n) == std::end(v))
            ? std::cout << "v does not contain " << n << '\n'
            : std::cout << "v contains " << n << '\n';

    auto is_even = [](int i) { return i % 2 == 0; };

    for (const auto& w : {std::array{3, 1, 4}, {1, 3, 5}})
        if (auto it = std::find_if(begin(w), end(w), is_even); it != std::end(w)
)
            std::cout << "w contains an even number " << *it << '\n';
        else
            std::cout << "w does not contain even numbers\n";

    std::vector<std::complex<double>> nums{{4, 2}};
    #ifdef __cpp_lib_algorithm_default_value_type
        // T gets deduced making list-initialization possible
        const auto it = std::find(nums.begin(), nums.end(), {4, 2});
    #else
        const auto it = std::find(nums.begin(), nums.end(), std::complex<double>
{4, 2});
    #endif
    assert(it == nums.begin());
}

   Output:
v contains 3
v does not contain 5
w contains an even number 4
w does not contain even numbers

Defect reports

   The following behavior-changing defect reports were applied
   retroactively to previously published C++ standards.
   DR Applied to Behavior as published Correct behavior
   LWG 283 C++98 T was required to be EqualityComparable, but
   the value type of InputIt might not be T removed the requirement

See also

   adjacent_find
   finds the first two adjacent items that are equal (or satisfy a given
   predicate)
   (function template)
   find_end
   finds the last sequence of elements in a certain range
   (function template)
   find_first_of
   searches for any one of a set of elements
   (function template)
   mismatch
   finds the first position where two ranges differ
   (function template)
   search
   searches for a range of elements
   (function template)
   ranges::findranges::find_ifranges::find_if_not
   (C++20)(C++20)(C++20)
   finds the first element satisfying specific criteria
   (niebloid)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/algorithm/find&o
   ldid=171906"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 20 May 2024, at 22:13.
     * This page has been accessed 2,907,366 times.
