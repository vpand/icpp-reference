operator<<,>>(std::basic_string)

   From cppreference.com
   < cpp | string | basic string

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Strings library
   Null-terminated strings
   Byte strings
   Multibyte strings
   Wide strings
   Classes
   basic_string
   basic_string_view
   (C++17)
   char_traits

   std::basic_string
   Member functions
   basic_string::basic_string
   basic_string::~basic_string
   basic_string::operator=
   basic_string::assign
   basic_string::assign_range
   (C++23)
   basic_string::get_allocator
   Element access
   basic_string::at
   basic_string::operator[]
   basic_string::front
   (DR*)
   basic_string::back
   (DR*)
   basic_string::data
   basic_string::c_str
   basic_string::operator
    basic_string_view
   (C++17)
   Iterators
   basic_string::beginbasic_string::cbegin
   (C++11)
   basic_string::endbasic_string::cend
   (C++11)
   basic_string::rbeginbasic_string::crbegin
   (C++11)
   basic_string::rendbasic_string::crend
   (C++11)
   Capacity
   basic_string::empty
   basic_string::sizebasic_string::length
   basic_string::max_size
   basic_string::reserve
   basic_string::capacity
   basic_string::shrink_to_fit
   (DR*)
   Modifiers
   basic_string::clear
   basic_string::insert
   basic_string::insert_range
   (C++23)
   basic_string::erase
   basic_string::push_back
   basic_string::pop_back
   (DR*)
   basic_string::append
   basic_string::append_range
   (C++23)
   basic_string::operator+=
   basic_string::replace
   basic_string::replace_with_range
   (C++23)
   basic_string::copy
   basic_string::resize
   basic_string::resize_and_overwrite
   (C++23)
   basic_string::swap
   Search
   basic_string::find
   basic_string::rfind
   basic_string::find_first_of
   basic_string::find_first_not_of
   basic_string::find_last_of
   basic_string::find_last_not_of
   Operations
   basic_string::compare
   basic_string::starts_with
   (C++20)
   basic_string::ends_with
   (C++20)
   basic_string::contains
   (C++23)
   basic_string::substr
   Constants
   basic_string::npos
   Non-member functions
   operator+
   swap(std::basic_string)
   erase(std::basic_string)erase_if(std::basic_string)
   (C++20)(C++20)
   I/O
   operator<<operator>>
   getline
   Comparison
   operator==operator!=operator<operator>operator<=operator>=operator<=>
   (until C++20)(until C++20)(until C++20)(until C++20)(until
   C++20)(C++20)
   Numeric conversions
   stoistolstoll
   (C++11)(C++11)(C++11)
   stoulstoull
   (C++11)(C++11)
   stofstodstold
   (C++11)(C++11)(C++11)
   to_string
   (C++11)
   to_wstring
   (C++11)
   Literals
   operator""s
   (C++14)
   Helper classes
   hash<std::basic_string>
   (C++11)
   Deduction guides (C++17)

   Defined in header <string>
   template< class CharT, class Traits, class Allocator >

   std::basic_ostream<CharT, Traits>&
       operator<<( std::basic_ostream<CharT, Traits>& os,
                   const std::basic_string<CharT, Traits, Allocator>& str
   );
   (1)
   template< class CharT, class Traits, class Allocator >

   std::basic_istream<CharT, Traits>&
       operator>>( std::basic_istream<CharT, Traits>& is,
                   std::basic_string<CharT, Traits, Allocator>& str );
   (2)
   1) Behaves as a FormattedOutputFunction. After constructing and
   checking the sentry object, determines the output format padding.

   Then inserts each character from the resulting sequence seq (the
   contents of str plus padding) to the output stream os as if by calling
   os.rdbuf()->sputn(seq, n), where n is std::max(os.width(), str.size())
   Finally, calls os.width(0) to cancel the effects of std::setw, if any.

   Equivalent to return os << std::basic_string_view<CharT, Traits>(str);.
   (since C++17)
   2) Behaves as a FormattedInputFunction. After constructing and checking
   the sentry object, which may skip leading whitespace, first clears str
   with str.erase(), then reads characters from is and appends them to str
   as if by str.append(1, c), until one of the following conditions
   becomes true:
     * N characters are read, where N is is.width() if is.width() > 0,
       otherwise N is str.max_size(),
     * the end-of-file condition occurs in the stream is, or
     * std::isspace(c, is.getloc()) is true for the next character c in is
       (this whitespace character remains in the input stream).

   If no characters are extracted then std::ios::failbit is set on is,
   which may throw std::ios_base::failure.
   Finally, calls is.width(0) to cancel the effects of std::setw, if any.

Exceptions

   1) May throw std::ios_base::failure if an exception is thrown during
   output.
   2) May throw std::ios_base::failure if no characters are extracted from
   is (e.g. the stream is at end of file, or consists of whitespace only),
   or if an exception is thrown during input.

Parameters

   os  - a character output stream
   is  - a character input stream
   str - the string to be inserted or extracted

Return value

   1) os
   2) is

Example

   Run this code
#include <iostream>
#include <sstream>
#include <string>

int main()
{
    std::string greeting = "Hello, whirled!";
    std::istringstream iss(greeting);

    std::string hello_comma, whirled, word;

    iss >> hello_comma;
    iss >> whirled;

    std::cout << greeting << '\n'
              << hello_comma << '\n' << whirled << '\n';

    // Reset the stream
    iss.clear();
    iss.seekg(0);

    while (iss >> word)
        std::cout << '+' << word << '\n';
}

   Output:
Hello, whirled!
Hello,
whirled!
+Hello,
+whirled!

Defect reports

   The following behavior-changing defect reports were applied
   retroactively to previously published C++ standards.
   DR Applied to Behavior as published Correct behavior
   LWG 25 C++98 n was the smaller of os.width() and str.size() n is the
   larger of them
   LWG 90 C++98 std::isspace(c, getloc()) was used to check
   for spaces, but getloc is not declared in <string> replaced getloc()
   with is.getloc()
   LWG 91 C++98 operator>> did not behave
   as a FormattedInputFunction behaves as a
   FormattedInputFunction
   LWG 211 C++98 operator>> did not set failbit if no character is
   extracted sets failbit
   LWG 435 C++98 characters were inserted by os.rdbuf()->sputn(str.data(),
   n),
   and the resolution of LWG issue 25 made the behavior
   undefined if os.width() is larger than str.size() determines the
   padding
   first and inserts the padded
   character sequence instead
   LWG 586 C++98 operator<< did not behave
   as a FormattedOutputFunction behaves as a
   FormattedOutputFunction

See also

   operator<<
   (C++17)
   performs stream output on string views
   (function template)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/string/basic_str
   ing/operator_ltltgtgt&oldid=152690"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 2 June 2023, at 10:24.
     * This page has been accessed 133,048 times.
