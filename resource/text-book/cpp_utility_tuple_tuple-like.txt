tuple-like, pair-like

   From cppreference.com
   < cpp | utility | tuple

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Utilities library
   Language support
   Type support (basic types, RTTI)
   Library feature-test macros (C++20)
   Dynamic memory management
   Program utilities
   Coroutine support (C++20)
   Variadic functions
   is_constant_evaluated
   (C++20)
   is_within_lifetime
   (C++26)
   initializer_list
   (C++11)
   source_location
   (C++20)
   Debugging support
   is_debugger_present
   (C++26)
   breakpoint_if_debugging
   (C++26)
   breakpoint
   (C++26)
   Three-way comparison
   three_way_comparablethree_way_comparable_with
   (C++20)(C++20)
   strong_ordering
   (C++20)
   weak_ordering
   (C++20)
   partial_ordering
   (C++20)
   common_comparison_category
   (C++20)
   compare_three_way_result
   (C++20)
   compare_three_way
   (C++20)
   strong_order
   (C++20)
   weak_order
   (C++20)
   partial_order
   (C++20)
   compare_strong_order_fallback
   (C++20)
   compare_weak_order_fallback
   (C++20)
   compare_partial_order_fallback
   (C++20)
   is_eqis_ltis_lteq
   (C++20)(C++20)(C++20)
   is_neqis_gtis_gteq
   (C++20)(C++20)(C++20)
   General utilities
   Date and time
   Function objects
   Formatting library (C++20)
   bitset
   hash
   (C++11)
   Relational operators (deprecated in C++20)
   rel_ops::operator!=rel_ops::operator>

   rel_ops::operator<=rel_ops::operator>=
   Integer comparison functions
   cmp_equalcmp_lesscmp_less_than
   (C++20)(C++20)(C++20)
   cmp_not_equalcmp_greatercmp_greater_than
   (C++20)(C++20)(C++20)
   in_range
   (C++20)
   Swap and type operations
   swap
   ranges::swap
   (C++20)
   exchange
   (C++14)
   declval
   (C++11)
   to_underlying
   (C++23)
   forward
   (C++11)
   forward_like
   (C++23)
   move
   (C++11)
   move_if_noexcept
   (C++11)
   as_const
   (C++17)
   Common vocabulary types
   pair
   tuple
   (C++11)
   optional
   (C++17)
   any
   (C++17)
   variant
   (C++17)
   tuple_size
   (C++11)
   tuple_element
   (C++11)
   apply
   (C++17)
   make_from_tuple
   (C++17)
   expected
   (C++23)
   Elementary string conversions
   to_chars
   (C++17)
   from_chars
   (C++17)
   chars_format
   (C++17)
   to_chars_result
   (C++17)
   from_chars_result
   (C++17)

   std::tuple
   Member functions
   tuple::tuple
   tuple::operator=
   tuple::swap
   Non-member functions
   make_tuple
   tie
   forward_as_tuple
   tuple_cat
   operator==operator!=operator<operator<=operator>operator>=operator<=>
   (until C++20)(until C++20)(until C++20)(until C++20)(until
   C++20)(C++20)
   swap(std::tuple)
   get(std::tuple)
   Helper concepts
   tuple-like
   (C++23)
   Helper classes
   tuple_size<std::tuple>
   tuple_element<std::tuple>
   uses_allocator<std::tuple>
   basic_common_reference<std::tuple>
   (C++23)
   common_type<std::tuple>
   (C++23)
   formatter<std::tuple>
   (C++23)
   ignore
   Deduction guides(C++17)

   template< class T >
   concept tuple-like = /* see below */;
   (1) (since C++23)
   (exposition only*)
   template< class T >

   concept pair-like =
       tuple-like<T> && std::tuple_size_v<std::remove_cvref_t<T>> == 2;
   (2) (since C++23)
   (exposition only*)
   1) A type T models and satisfies the concept tuple-like if
   std::remove_cvref_t<T> is a specialization of
     * std::array,

     * std::complex,

   (since C++26)
     * std::pair,
     * std::tuple, or
     * std::ranges::subrange.

   2) pair-like objects are tuple-like objects with exactly 2 elements.

Notes

   tuple-like types implement the tuple protocol, i.e., such types can be
   used with std::get, std::tuple_element and std::tuple_size.

   Elements of tuple-like types can be bound with structured binding.

See also

   tuple-like and pair-like are used in the following standard library
   components:
   (constructor)
   constructs a new tuple
   (public member function)
   operator=
   assigns the contents of one tuple to another
   (public member function)
   operator==operator!=operator<operator<=operator>operator>=operator<=>
   (removed in C++20)(removed in C++20)(removed in C++20)(removed in
   C++20)(removed in C++20)(C++20)
   lexicographically compares the values in the tuple
   (function template)
   std::basic_common_reference<tuple-like>
   (C++23)
   determines the common reference type of a tuple and a tuple-like type
   (class template specialization)
   std::common_type<tuple-like>
   (C++23)
   determines the common type of a tuple and a tuple-like type
   (class template specialization)
   tuple_cat
   (C++11)
   creates a tuple by concatenating any number of tuples
   (function template)
   apply
   (C++17)
   calls a function with a tuple of arguments
   (function template)
   make_from_tuple
   (C++17)
   construct an object with a tuple of arguments
   (function template)
   (constructor)
   constructs new pair
   (public member function of std::pair<T1,T2>)
   operator=
   assigns the contents
   (public member function of std::pair<T1,T2>)
   operator PairLike
   (C++20)
   converts the subrange to a pair-like type
   (public member function of std::ranges::subrange<I,S,K>)
   ranges::elements_viewviews::elements
   (C++20)
   takes a view consisting of tuple-like values and a number N and
   produces a view of N^th element of each tuple
   (class template) (range adaptor object)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/utility/tuple/tu
   ple-like&oldid=162566"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 12 November 2023, at 02:22.
     * This page has been accessed 8,252 times.
