std::deque<T,Allocator>::operator=

   From cppreference.com
   < cpp | container | deque


   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Containers library
   Sequence
   array
   (C++11)
   vector
   vector<bool>
   deque
   forward_list
   (C++11)
   list
   Associative
   set
   multiset
   map
   multimap
   Unordered associative
   unordered_set
   (C++11)
   unordered_multiset
   (C++11)
   unordered_map
   (C++11)
   unordered_multimap
   (C++11)
   Adaptors
   stack
   queue
   priority_queue
   flat_set
   (C++23)
   flat_multiset
   (C++23)
   flat_map
   (C++23)
   flat_multimap
   (C++23)
   Views
   span
   (C++20)
   mdspan
   (C++23)
   Iterator invalidation
   Member function table
   Non-member function table

   std::deque
   Member types
   Member functions
   deque::deque
   deque::~deque
   deque::operator=
   deque::assign
   deque::assign_range
   (C++23)
   deque::get_allocator
   Element access
   deque::at
   deque::operator[]
   deque::front
   deque::back
   Iterators
   deque::begindeque::cbegin
   (C++11)
   deque::enddeque::cend
   (C++11)
   deque::rbegindeque::crbegin
   (C++11)
   deque::renddeque::crend
   (C++11)
   Capacity
   deque::empty
   deque::size
   deque::max_size
   deque::shrink_to_fit
   (DR*)
   Modifiers
   deque::clear
   deque::insert
   deque::insert_range
   (C++23)
   deque::emplace
   deque::erase
   deque::push_front
   deque::emplace_front
   (C++11)
   deque::prepend_range
   (C++23)
   deque::pop_front
   deque::push_back
   deque::emplace_back
   (C++11)
   deque::append_range
   (C++23)
   deque::pop_back
   deque::resize
   deque::swap
   Non-member functions
   operator==operator!=operator<operator>operator<=operator>=operator<=>
   (until C++20)(until C++20)(until C++20)(until C++20)(until
   C++20)(C++20)
   swap(std::deque)
   erase(std::deque)erase_if(std::deque)
   (C++20)(C++20)
   Deduction guides(C++17)

   deque& operator=( const deque& other );
   (1)
   (2)
   deque& operator=( deque&& other );
   (since C++11)
   (until C++17)
   deque& operator=( deque&& other ) noexcept(/* see below */);
   (since C++17)
   deque& operator=( std::initializer_list<value_type> ilist );
   (3) (since C++11)

   Replaces the contents of the container.
   1) Copy assignment operator. Replaces the contents with a copy of the
   contents of other.

   If
   std::allocator_traits<allocator_type>::propagate_on_container_copy_assi
   gnment::value is true, the allocator of *this is replaced by a copy of
   other. If the allocator of *this after assignment would compare unequal
   to its old value, the old allocator is used to deallocate the memory,
   then the new allocator is used to allocate it before copying the
   elements. Otherwise, the memory owned by *this may be reused when
   possible. In any case, the elements originally belonging to *this may
   be either destroyed or replaced by element-wise copy-assignment.
   (since C++11)
   2) Move assignment operator. Replaces the contents with those of other
   using move semantics (i.e. the data in other is moved from other into
   this container). other is in a valid but unspecified state afterwards.
   If
   std::allocator_traits<allocator_type>::propagate_on_container_move_assi
   gnment::value is true, the allocator of *this is replaced by a copy of
   that of other. If it is false and the allocators of *this and other do
   not compare equal, *this cannot take ownership of the memory owned by
   other and must move-assign each element individually, allocating
   additional memory using its own allocator as needed. In any case, all
   elements originally belonging to *this are either destroyed or replaced
   by element-wise move-assignment.
   3) Replaces the contents with those identified by initializer list
   ilist.

Parameters

   other - another container to use as data source
   ilist - initializer list to use as data source

Return value

   *this

Complexity

   1) Linear in the size of *this and other.
   2) Linear in the size of *this unless the allocators do not compare
   equal and do not propagate, in which case linear in the size of *this
   and other.
   3) Linear in the size of *this and ilist.

Exceptions

   1-3) May throw implementation-defined exceptions.
   (until C++17)
   1,3) May throw implementation-defined exceptions.
   2)
   noexcept specification:
   noexcept(std::allocator_traits<Allocator>::is_always_equal::value)
   (since C++17)

Notes

   After container move assignment (overload (2)), unless element-wise
   move assignment is forced by incompatible allocators, references,
   pointers, and iterators (other than the end iterator) to other remain
   valid, but refer to elements that are now in *this. The current
   standard makes this guarantee via the blanket statement in
   [container.reqmts]/67, and a more direct guarantee is under
   consideration via LWG issue 2321.

Example

   The following code uses operator= to assign one std::deque to another:
   Run this code
#include <initializer_list>
#include <iostream>
#include <iterator>
#include <deque>

void print(auto const comment, auto const& container)
{
    auto size = std::size(container);
    std::cout << comment << "{ ";
    for (auto const& element : container)
        std::cout << element << (--size ? ", " : " ");
    std::cout << "}\n";
}

int main()
{
    std::deque<int> x{1, 2, 3}, y, z;
    const auto w = {4, 5, 6, 7};

    std::cout << "Initially:\n";
    print("x = ", x);
    print("y = ", y);
    print("z = ", z);

    std::cout << "Copy assignment copies data from x to y:\n";
    y = x;
    print("x = ", x);
    print("y = ", y);

    std::cout << "Move assignment moves data from x to z, modifying both x and z
:\n";
    z = std::move(x);
    print("x = ", x);
    print("z = ", z);

    std::cout << "Assignment of initializer_list w to z:\n";
    z = w;
    print("w = ", w);
    print("z = ", z);
}

   Output:
Initially:
x = { 1, 2, 3 }
y = { }
z = { }
Copy assignment copies data from x to y:
x = { 1, 2, 3 }
y = { 1, 2, 3 }
Move assignment moves data from x to z, modifying both x and z:
x = { }
z = { 1, 2, 3 }
Assignment of initializer_list w to z:
w = { 4, 5, 6, 7 }
z = { 4, 5, 6, 7 }

See also

   (constructor)
   constructs the deque
   (public member function)
   assign
   assigns values to the container
   (public member function)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/container/deque/
   operator%3D&oldid=135167"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 11 November 2021, at 18:50.
     * This page has been accessed 34,045 times.
