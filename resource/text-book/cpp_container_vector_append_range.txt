std::vector<T,Allocator>::append_range

   From cppreference.com
   < cpp | container | vector


   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Containers library
   Sequence
   array
   (C++11)
   vector
   vector<bool>
   deque
   forward_list
   (C++11)
   list
   Associative
   set
   multiset
   map
   multimap
   Unordered associative
   unordered_set
   (C++11)
   unordered_multiset
   (C++11)
   unordered_map
   (C++11)
   unordered_multimap
   (C++11)
   Adaptors
   stack
   queue
   priority_queue
   flat_set
   (C++23)
   flat_multiset
   (C++23)
   flat_map
   (C++23)
   flat_multimap
   (C++23)
   Views
   span
   (C++20)
   mdspan
   (C++23)
   Iterator invalidation
   Member function table
   Non-member function table

   std::vector
   Member types
   Member functions
   vector::vector
   vector::~vector
   vector::operator=
   vector::assign
   vector::assign_range
   (C++23)
   vector::get_allocator
   Element access
   vector::at
   vector::operator[]
   vector::front
   vector::back
   vector::data
   Iterators
   vector::beginvector::cbegin
   (C++11)
   vector::endvector::cend
   (C++11)
   vector::rbeginvector::crbegin
   (C++11)
   vector::rendvector::crend
   (C++11)
   Capacity
   vector::empty
   vector::size
   vector::max_size
   vector::reserve
   vector::capacity
   vector::shrink_to_fit
   (DR*)
   Modifiers
   vector::clear
   vector::insert
   vector::emplace
   (C++11)
   vector::insert_range
   (C++23)
   vector::erase
   vector::push_back
   vector::emplace_back
   (C++11)
   vector::append_range
   (C++23)
   vector::pop_back
   vector::resize
   vector::swap
   Non-member functions
   operator==operator!=operator<operator>operator<=operator>=operator<=>
   (until C++20)(until C++20)(until C++20)(until C++20)(until
   C++20)(C++20)
   swap(std::vector)
   erase(std::vector)erase_if(std::vector)
   (C++20)(C++20)
   Deduction guides(C++17)

   template< container-compatible-range<T> R >
   constexpr void append_range( R&& rg );
                                              (since C++23)

   Inserts copies of elements from the range rg before end(), in
   non-reversing order.

   If after the operation the new size() is greater than old capacity() a
   reallocation takes place, in which case all iterators (including the
   end() iterator) and all references to the elements are invalidated.
   Otherwise only the end() iterator is invalidated.

   Each iterator in rg is dereferenced exactly once.

Parameters

   rg - a container compatible range, that is, an input_range whose
   elements are convertible to T
   Type requirements
   -
   T must be EmplaceConstructible into vector from *ranges::begin(rg).
   Also, T must be MoveInsertable into vector. Otherwise, the behavior is
   undefined.

Return value

   (none)

Complexity

   If reallocation happens, linear in the number of elements of the
   resulting vector; otherwise, linear in the number of elements inserted
   plus the distance to the end().

Exceptions

   If an exception is thrown other than by the copy constructor, move
   constructor, assignment operator, or move assignment operator of T or
   by any InputIterator operation there are no effects. If an exception is
   thrown while inserting a single element at the end and T is
   CopyInsertable or std::is_nothrow_move_constructible_v<T> is true,
   there are no effects. Otherwise, if an exception is thrown by the move
   constructor of a non-CopyInsertable T, the effects are unspecified.

Notes

   Feature-test macro Value Std Feature
   __cpp_lib_containers_ranges 202202L (C++23) Ranges-aware construction
   and insertion

Example

   Run this code
#include <algorithm>
#include <cassert>
#include <vector>
#include <list>

int main()
{
    auto head = std::vector{1, 2, 3, 4};
    const auto tail = std::list{-5, -6, -7};
#ifdef __cpp_lib_containers_ranges
    head.append_range(tail);
#else
    head.insert(head.end(), tail.cbegin(), tail.cend());
#endif
    assert(std::ranges::equal(head, std::vector{1, 2, 3, 4, -5, -6, -7}));
}

See also

   insert_range
   (C++23)
   inserts a range of elements
   (public member function)
   push_back
   adds an element to the end
   (public member function)
   emplace_back
   (C++11)
   constructs an element in-place at the end
   (public member function)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/container/vector
   /append_range&oldid=155591"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 27 July 2023, at 12:02.
     * This page has been accessed 19,227 times.
