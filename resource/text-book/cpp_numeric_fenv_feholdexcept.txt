std::feholdexcept

   From cppreference.com
   < cpp | numeric | fenv

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Numerics library
   Common mathematical functions
   Mathematical special functions (C++17)
   Mathematical constants (C++20)
   Basic linear algebra algorithms (C++26)
   Floating-point environment (C++11)
   Complex numbers
   Numeric arrays
   Pseudo-random number generation
   Factor operations
   gcd
   (C++17)
   lcm
   (C++17)
   Interpolations
   midpoint
   (C++20)
   lerp
   (C++20)
   Saturation arithmetic
   add_sat
   (C++26)
   sub_sat
   (C++26)
   saturate_cast
   (C++26)
   mul_sat
   (C++26)
   div_sat
   (C++26)
   Generic numeric operations
   iota
   (C++11)
   ranges::iota
   (C++23)
   accumulate
   inner_product
   adjacent_difference
   partial_sum
   reduce
   (C++17)
   transform_reduce
   (C++17)
   inclusive_scan
   (C++17)
   exclusive_scan
   (C++17)
   transform_inclusive_scan
   (C++17)
   transform_exclusive_scan
   (C++17)
   Bit operations
   has_single_bit
   (C++20)
   bit_cast
   (C++20)
   bit_ceil
   (C++20)
   bit_floor
   (C++20)
   bit_width
   (C++20)
   rotl
   (C++20)
   rotr
   (C++20)
   popcount
   (C++20)
   countl_zero
   (C++20)
   countl_one
   (C++20)
   countr_zero
   (C++20)
   countr_one
   (C++20)
   byteswap
   (C++23)
   endian
   (C++20)

   Floating-point environment
   Functions
   feclearexcept
   (C++11)
   fetestexcept
   (C++11)
   feraiseexcept
   (C++11)
   fegetexceptflagfesetexceptflag
   (C++11)(C++11)
   fegetroundfesetround
   (C++11)(C++11)
   fegetenvfesetenv
   (C++11)(C++11)
   feholdexcept
   (C++11)
   feupdateenv
   (C++11)
   Macro constants
   FE_ALL_EXCEPTFE_DIVBYZEROFE_INEXACTFE_INVALIDFE_OVERFLOWFE_UNDERFLOW
   (C++11)(C++11)(C++11)(C++11)(C++11)(C++11)
   FE_DOWNWARDFE_TONEARESTFE_TOWARDZEROFE_UPWARD
   (C++11)(C++11)(C++11)(C++11)
   FE_DFL_ENV
   (C++11)

   Defined in header <cfenv>
   int feholdexcept( std::fenv_t* envp )
                                        (since C++11)

   First, saves the current floating-point environment to the object
   pointed to by envp (similar to std::fegetenv), then clears all
   floating-point status flags, and then installs the non-stop mode:
   future floating-point exceptions will not interrupt execution (will not
   trap), until the floating-point environment is restored by
   std::feupdateenv or std::fesetenv.

   This function may be used in the beginning of a subroutine that must
   hide the floating-point exceptions it may raise from the caller. If
   only some exceptions must be suppressed, while others must be reported,
   the non-stop mode is usually ended with a call to std::feupdateenv
   after clearing the unwanted exceptions.

Parameters

   envp - pointer to the object of type std::fenv_t where the
   floating-point environment will be stored

Return value

   0 on success, non-zero otherwise.

See also

   feupdateenv
   (C++11)
   restores the floating-point environment and raises the previously
   raised exceptions
   (function)
   fegetenvfesetenv
   (C++11)
   saves or restores the current floating-point environment
   (function)
   FE_DFL_ENV
   (C++11)
   default floating-point environment
   (macro constant)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/numeric/fenv/feh
   oldexcept&oldid=95627"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 18 September 2017, at 08:57.
     * This page has been accessed 20,518 times.
