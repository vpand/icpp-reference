std::ranges::viewable_range

   From cppreference.com
   < cpp | ranges

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Ranges library
   Range access
   begin
   cbegin
   end
   cend
   rbegin
   crbegin
   rend
   crend
   size
   ssize
   data
   cdata
   empty
   Range conversions
   std::from_range_t
   std::from_range
   (C++23)(C++23)
   to
   (C++23)
   Range primitives
   range_size_trange_difference_trange_value_trange_reference_t
   iterator_tconst_iterator_tsentinel_tconst_sentinel_t
   (C++23)(C++23)
   range_const_reference_trange_rvalue_reference_trange_common_reference_t
   (C++23)
   elements_of
   (C++23)
   Dangling iterator handling
   dangling
   borrowed_iterator_t
   borrowed_subrange_t
   Range concepts
   range
   borrowed_range
   sized_range
   constant_range
   (C++23)
   common_range
   view
   viewable_range
   input_range
   output_range
   forward_range
   bidirectional_range
   random_access_range
   contiguous_range
   Views
   view_interface
   subrange
   Range factories
   empty_viewviews::empty
   single_viewviews::single
   iota_viewviews::iota
   repeat_viewviews::repeat
   (C++23)(C++23)
   basic_istream_viewviews::istream
   Range adaptors
   views::all_tviews::all
   ref_view
   owning_view
   as_rvalue_viewviews::as_rvalue
   (C++23)(C++23)
   filter_viewviews::filter
   transform_viewviews::transform
   take_viewviews::take
   take_while_viewviews::take_while
   concat_viewviews::concat
   (C++26)(C++26)
   drop_viewviews::drop
   drop_while_viewviews::drop_while
   join_viewviews::join
   join_with_viewviews::join_with
   (C++23)(C++23)
   lazy_split_viewviews::lazy_split
   split_viewviews::split
   views::counted
   common_viewviews::common
   reverse_viewviews::reverse
   as_const_viewviews::as_const
   (C++23)(C++23)
   elements_viewviews::elements
   keys_viewviews::keys
   values_viewviews::values
   enumerate_viewviews::enumerate
   (C++23)(C++23)
   zip_viewviews::zip
   (C++23)(C++23)
   zip_transform_viewviews::zip_transform
   (C++23)(C++23)
   adjacent_viewviews::adjacent
   (C++23)(C++23)
   views::pairwise
   (C++23)
   adjacent_transform_viewviews::adjacent_transform
   (C++23)(C++23)
   views::pairwise_transform
   (C++23)
   chunk_viewviews::chunk
   (C++23)(C++23)
   slide_viewviews::slide
   (C++23)(C++23)
   chunk_by_viewviews::chunk_by
   (C++23)(C++23)
   stride_viewviews::stride
   (C++23)(C++23)
   cartesian_product_viewviews::cartesian_product
   (C++23)(C++23)
   Range generators
   std::generator
   (C++23)
   Range adaptor objects
   Range adaptor closure objects
   range_adaptor_closure
   (C++23)
   Helper items
   copyable-box
   movable-box
   (until C++23)(C++23)
   simple-view
   non-propagating-cache

   Defined in header <ranges>
   template< class T >

   concept viewable_range =
       ranges::range<T> &&
       ((ranges::view<std::remove_cvref_t<T>> &&
         std::constructible_from<std::remove_cvref_t<T>, T>) ||
        (!ranges::view<std::remove_cvref_t<T>> &&
         (std::is_lvalue_reference_v<T> ||
          (std::movable<std::remove_reference_t<T>> &&
   !/*is-initializer-list*/<T>))));
                             (since C++20)

   The viewable_range concept is a refinement of range that describes a
   range that can be converted into a view through views::all.

   The constant /*is-initializer-list*/<T> is true if and only if
   std::remove_cvref_t<T> is a specialization of std::initializer_list.

Example

   Run this code
#include <ranges>
#include <string>
#include <vector>

struct valid_result {};
struct invalid_result {};

template <typename T>
concept valid_viewable_range = std::same_as<T, valid_result>;

template <typename T>
concept invalid_viewable_range = std::same_as<T, invalid_result>;

auto test_viewable_range(std::ranges::viewable_range auto &&) -> valid_result;
auto test_viewable_range(auto&&) -> invalid_result;

int main()
{
    auto il = {1, 2, 3};
    int arr []{1, 2, 3};
    std::vector vec{1, 2, 3};
    std::ranges::ref_view r{arr};
    std::ranges::owning_view o{std::string("Hello")};

    static_assert(requires {
        { test_viewable_range(il) } -> valid_viewable_range;
        { test_viewable_range(std::move(il)) } -> invalid_viewable_range;
        { test_viewable_range(arr) } -> valid_viewable_range;
        { test_viewable_range(std::move(arr)) } -> invalid_viewable_range;
        { test_viewable_range(vec) } -> valid_viewable_range;
        { test_viewable_range(std::move(vec)) } -> valid_viewable_range;
        { test_viewable_range(r) } -> valid_viewable_range;
        { test_viewable_range(std::move(r)) } -> valid_viewable_range;
        { test_viewable_range(o) } -> invalid_viewable_range;
        { test_viewable_range(std::move(o)) } -> valid_viewable_range;
        { test_viewable_range(std::ranges::ref_view(o)) } -> valid_viewable_rang
e;
    });
}

Defect reports

   The following behavior-changing defect reports were applied
   retroactively to previously published C++ standards.
   DR Applied to Behavior as published Correct behavior
   LWG 3481 C++20 viewable_range accepted an lvalue of a move-only view
   rejects
   P2415R2 C++20 viewable_range only accepted non-view rvalues that are
   borrowed_range accepts more types

See also

   views::all_tviews::all
   (C++20)
   a view that includes all elements of a range
   (alias template) (range adaptor object)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/ranges/viewable_
   range&oldid=171265"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 24 April 2024, at 09:43.
     * This page has been accessed 29,508 times.
