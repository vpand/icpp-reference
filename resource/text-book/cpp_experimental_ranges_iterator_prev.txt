std::experimental::ranges::prev

   From cppreference.com
   < cpp | experimental | ranges

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Experimental
   Technical Specification
   Filesystem library (filesystem TS)
   Library fundamentals (library fundamentals TS)
   Library fundamentals 2 (library fundamentals TS v2)
   Library fundamentals 3 (library fundamentals TS v3)
   Extensions for parallelism (parallelism TS)
   Extensions for parallelism 2 (parallelism TS v2)
   Extensions for concurrency (concurrency TS)
   Extensions for concurrency 2 (concurrency TS v2)
   Concepts (concepts TS)
   Ranges (ranges TS)
   Reflection (reflection TS)
   Mathematical special functions (special functions TR)
   Experimental Non-TS
   Pattern Matching
   Linear Algebra
   std::execution
   Contracts
   2D Graphics

   Ranges
   Concepts
   General utilities
   Iterators
   Ranges
   Algorithms

   Iterators library
   Iterator concepts
   Readable
   Writable
   WeaklyIncrementable
   Incrementable
   Iterator
   Sentinel
   SizedSentinel
   InputIterator
   ForwardIterator
   BidirectionalIterator
   RandomAccessIterator
   OutputIterator
   Indirect callable concepts
   IndirectUnaryInvocableIndirectRegularUnaryInvocable
   IndirectUnaryPredicate

   IndirectRelation

   IndirectStrictWeakOrder

   Common algorithm requirements
   IndirectlyMovable
   IndirectlyMovableStorable

   IndirectlyCopyable
   IndirectlyCopyableStorable
   IndirectlySwappable
   IndirectlyComparable
   Permutable
   Mergeable
   Sortable
   Concept utilities
   indirect_result_of
   projected
   Iterator utilities and operations
   iter_move
   iter_swap
   advance
   distance
   next
   prev
   Iterator traits
   difference_type
   value_type
   reference_trvalue_reference_titer_common_reference_t
   iterator_category
   input_iterator_tagoutput_iterator_tagforward_iterator_tagbidirectional_
   iterator_tagrandom_access_iterator_tag
   ranges::iterator_traits
   std::iterator_traits<InputIterator>std::iterator_traits<OutputIterator>
   Iterator adaptors
   reverse_iterator
   move_iterator
   move_sentinel
   back_insert_iterator
   front_insert_iterator
   insert_iterator
   common_iterator
   counted_iterator
   default_sentinel
   danglingborrowed_iterator_t
   unreachable
   Stream iterators
   istream_iterator
   ostream_iterator
   istreambuf_iterator
   ostreambuf_iterator

   Defined in header <experimental/ranges/iterator>
   namespace {

       constexpr /* unspecified */ prev = /* unspecified */;
   }
   (ranges TS)
   (customization point object)
   Call signature
   template< Iterator I >
   constexpr I prev( I i );
   (1)
   template< Iterator I >
   constexpr I prev( I i, ranges::difference_type_t<I> n );
   (2)
   template< Iterator I >
   constexpr I prev( I i, ranges::difference_type_t<I> n, I bound );
   (3)

   Decrements the iterator i n times, or until bound is reached, whichever
   comes first, and returns the decremented iterator.
   1) Equivalent to --i; return i;.
   2) Equivalent to ranges::advance(i, -n); return i;.
   3) Equivalent to ranges::advance(i, -n, bound); return i;.

Customization point objects

   The name ranges::prev denotes a customization point object, which is a
   function object of a literal Semiregular class type (denoted, for
   exposition purposes, as PrevT). All instances of PrevT are equal. Thus,
   ranges::prev can be copied freely and its copies can be used
   interchangeably.

   Given a set of types Args..., if std::declval<Args>()... meet the
   requirements for arguments to ranges::prev above, PrevT will satisfy
   ranges::Invocable<const PrevT, Args...>. Otherwise, no function call
   operator of PrevT participates in overload resolution.

   In every translation unit in which ranges::prev is defined, it refers
   to the same instance of the customization point object. (This means
   that it can be used freely in things like inline functions and function
   templates without violating the one-definition rule.)

Return value

   The decremented iterator.

Example

   This section is incomplete
   Reason: no example

See also

   prev
   (C++11)
   decrement an iterator
   (function template)
   advance
   advances an iterator by given distance
   (function template)
   next
   increment an iterator
   (function template)
   distance
   returns the distance between an iterator and a sentinel, or between the
   beginning and the end of a range
   (function template)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/experimental/ran
   ges/iterator/prev&oldid=155545"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 26 July 2023, at 23:53.
     * This page has been accessed 7,967 times.
