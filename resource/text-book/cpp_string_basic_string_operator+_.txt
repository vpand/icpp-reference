std::basic_string<CharT,Traits,Allocator>::operator+=

   From cppreference.com
   < cpp | string | basic string

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Strings library
   Null-terminated strings
   Byte strings
   Multibyte strings
   Wide strings
   Classes
   basic_string
   basic_string_view
   (C++17)
   char_traits

   std::basic_string
   Member functions
   basic_string::basic_string
   basic_string::~basic_string
   basic_string::operator=
   basic_string::assign
   basic_string::assign_range
   (C++23)
   basic_string::get_allocator
   Element access
   basic_string::at
   basic_string::operator[]
   basic_string::front
   (DR*)
   basic_string::back
   (DR*)
   basic_string::data
   basic_string::c_str
   basic_string::operator
    basic_string_view
   (C++17)
   Iterators
   basic_string::beginbasic_string::cbegin
   (C++11)
   basic_string::endbasic_string::cend
   (C++11)
   basic_string::rbeginbasic_string::crbegin
   (C++11)
   basic_string::rendbasic_string::crend
   (C++11)
   Capacity
   basic_string::empty
   basic_string::sizebasic_string::length
   basic_string::max_size
   basic_string::reserve
   basic_string::capacity
   basic_string::shrink_to_fit
   (DR*)
   Modifiers
   basic_string::clear
   basic_string::insert
   basic_string::insert_range
   (C++23)
   basic_string::erase
   basic_string::push_back
   basic_string::pop_back
   (DR*)
   basic_string::append
   basic_string::append_range
   (C++23)
   basic_string::operator+=
   basic_string::replace
   basic_string::replace_with_range
   (C++23)
   basic_string::copy
   basic_string::resize
   basic_string::resize_and_overwrite
   (C++23)
   basic_string::swap
   Search
   basic_string::find
   basic_string::rfind
   basic_string::find_first_of
   basic_string::find_first_not_of
   basic_string::find_last_of
   basic_string::find_last_not_of
   Operations
   basic_string::compare
   basic_string::starts_with
   (C++20)
   basic_string::ends_with
   (C++20)
   basic_string::contains
   (C++23)
   basic_string::substr
   Constants
   basic_string::npos
   Non-member functions
   operator+
   swap(std::basic_string)
   erase(std::basic_string)erase_if(std::basic_string)
   (C++20)(C++20)
   I/O
   operator<<operator>>
   getline
   Comparison
   operator==operator!=operator<operator>operator<=operator>=operator<=>
   (until C++20)(until C++20)(until C++20)(until C++20)(until
   C++20)(C++20)
   Numeric conversions
   stoistolstoll
   (C++11)(C++11)(C++11)
   stoulstoull
   (C++11)(C++11)
   stofstodstold
   (C++11)(C++11)(C++11)
   to_string
   (C++11)
   to_wstring
   (C++11)
   Literals
   operator""s
   (C++14)
   Helper classes
   hash<std::basic_string>
   (C++11)
   Deduction guides (C++17)

   basic_string& operator+=( const basic_string& str );
   (1) (constexpr since C++20)
   basic_string& operator+=( CharT ch );
   (2) (constexpr since C++20)
   basic_string& operator+=( const CharT* s );
   (3) (constexpr since C++20)
   basic_string& operator+=( std::initializer_list<CharT> ilist );
   (4) (since C++11)
   (constexpr since C++20)
   template< class StringViewLike >
   basic_string& operator+=( const StringViewLike& t );
   (5) (since C++17)
   (constexpr since C++20)

   Appends additional characters to the string.
   1) Appends string str.
   2) Appends character ch.
   3) Appends the null-terminated character string pointed to by s.
   4) Appends characters in the initializer list ilist.
   5) Implicitly converts t to a string view sv as if by
   std::basic_string_view<CharT, Traits> sv = t;, then appends characters
   in the string view sv as if by append(sv).
   This overload participates in overload resolution only if
   std::is_convertible_v<const StringViewLike&,
                         std::basic_string_view<CharT, Traits>> is true
   and std::is_convertible_v<const StringViewLike&, const CharT*> is
   false.

Parameters

   str - string to append
   ch - character value to append
   s - pointer to a null-terminated character string to append
   ilist - std::initializer_list with the characters to append
   t - object (convertible to std::basic_string_view) with the characters
   to append

Return value

   *this

Complexity

   There are no standard complexity guarantees, typical implementations
   behave similar to std::vector::insert().

Exceptions

   If the operation would result in size() > max_size(), throws
   std::length_error.

   If an exception is thrown for any reason, this function has no effect
   (strong exception safety guarantee).

Notes

   Overload (2) can accept any types that are implicitly convertible to
   CharT. For std::string, where CharT is char, the set of acceptable
   types includes all arithmetic types. This may have unintended effects.

Example

   Run this code
#include <iomanip>
#include <iostream>
#include <string>

int main()
{
    std::string str;

    // reserve sufficient storage space to avoid memory reallocation
    str.reserve(50);

    std::cout << std::quoted(str) << '\n'; // empty string

    str += "This";
    std::cout << std::quoted(str) << '\n';

    str += std::string(" is ");
    std::cout << std::quoted(str) << '\n';

    str += 'a';
    std::cout << std::quoted(str) << '\n';

    str += {' ', 's', 't', 'r', 'i', 'n', 'g', '.'};
    std::cout << std::quoted(str) << '\n';

    str += 69.96; // Equivalent to str += static_cast<char>(69.96);
                  // 'E' (ASCII code 69) is appended by overload (2),
                  // which might not be the intent.

    // To add a numeric value, consider std::to_string():
    str += std::to_string(1729);

    std::cout << std::quoted(str) << '\n';
}

   Output:
""
"This"
"This is "
"This is a"
"This is a string."
"This is a string.E1729"

Defect reports

   The following behavior-changing defect reports were applied
   retroactively to previously published C++ standards.
   DR Applied to Behavior as published Correct behavior
   LWG 847 C++98 there was no exception safety guarantee added strong
   exception safety guarantee
   LWG 2946 C++17 overload (5) caused ambiguity in some cases avoided by
   making it a template

See also

   append
   appends characters to the end
   (public member function)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/string/basic_str
   ing/operator%2B%3D&oldid=171130"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 22 April 2024, at 07:02.
     * This page has been accessed 117,751 times.
