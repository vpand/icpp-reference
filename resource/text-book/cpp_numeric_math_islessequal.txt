std::islessequal

   From cppreference.com
   < cpp | numeric | math

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Numerics library
   Common mathematical functions
   Mathematical special functions (C++17)
   Mathematical constants (C++20)
   Basic linear algebra algorithms (C++26)
   Floating-point environment (C++11)
   Complex numbers
   Numeric arrays
   Pseudo-random number generation
   Factor operations
   gcd
   (C++17)
   lcm
   (C++17)
   Interpolations
   midpoint
   (C++20)
   lerp
   (C++20)
   Saturation arithmetic
   add_sat
   (C++26)
   sub_sat
   (C++26)
   saturate_cast
   (C++26)
   mul_sat
   (C++26)
   div_sat
   (C++26)
   Generic numeric operations
   iota
   (C++11)
   ranges::iota
   (C++23)
   accumulate
   inner_product
   adjacent_difference
   partial_sum
   reduce
   (C++17)
   transform_reduce
   (C++17)
   inclusive_scan
   (C++17)
   exclusive_scan
   (C++17)
   transform_inclusive_scan
   (C++17)
   transform_exclusive_scan
   (C++17)
   Bit operations
   has_single_bit
   (C++20)
   bit_cast
   (C++20)
   bit_ceil
   (C++20)
   bit_floor
   (C++20)
   bit_width
   (C++20)
   rotl
   (C++20)
   rotr
   (C++20)
   popcount
   (C++20)
   countl_zero
   (C++20)
   countl_one
   (C++20)
   countr_zero
   (C++20)
   countr_one
   (C++20)
   byteswap
   (C++23)
   endian
   (C++20)

   Common mathematical functions
   Functions
   Basic operations
   abs(int)labsllabsimaxabs
   (C++11)
   abs(float)fabs
   divldivlldivimaxdiv
   (C++11)
   fmod
   remainder
   (C++11)
   remquo
   (C++11)
   fma
   (C++11)
   fmax
   (C++11)
   fmin
   (C++11)
   fdim
   (C++11)
   nannanfnanl
   (C++11)(C++11)(C++11)
   Exponential functions
   exp
   exp2
   (C++11)
   expm1
   (C++11)
   log
   log10
   log1p
   (C++11)
   log2
   (C++11)
   Power functions
   sqrt
   cbrt
   (C++11)
   hypot
   (C++11)
   pow
   Trigonometric and hyperbolic functions
   sin
   cos
   tan
   asin
   acos
   atan
   atan2
   sinh
   cosh
   tanh
   asinh
   (C++11)
   acosh
   (C++11)
   atanh
   (C++11)
   Error and gamma functions
   erf
   (C++11)
   erfc
   (C++11)
   lgamma
   (C++11)
   tgamma
   (C++11)
   Nearest integer floating point operations
   ceil
   floor
   roundlroundllround
   (C++11)(C++11)(C++11)
   trunc
   (C++11)
   nearbyint
   (C++11)
   rintlrintllrint
   (C++11)(C++11)(C++11)
   Floating point manipulation functions
   ldexp
   scalbnscalbln
   (C++11)(C++11)
   ilogb
   (C++11)
   logb
   (C++11)
   frexp
   modf
   nextafternexttoward
   (C++11)(C++11)
   copysign
   (C++11)
   Classification/Comparison
   fpclassify
   (C++11)
   isfinite
   (C++11)
   isinf
   (C++11)
   isnan
   (C++11)
   isnormal
   (C++11)
   signbit
   (C++11)
   isgreater
   (C++11)
   isgreaterequal
   (C++11)
   isless
   (C++11)
   islessequal
   (C++11)
   islessgreater
   (C++11)
   isunordered
   (C++11)
   Macro constants
   HUGE_VALFHUGE_VALHUGE_VALL
   (C++11)(C++11)
   INFINITY
   (C++11)
   NAN
   (C++11)
   math_errhandlingMATH_ERRNOMATH_ERREXCEPT
   (C++11)
   FP_NORMALFP_SUBNORMALFP_ZEROFP_INFINITEFP_NAN
   (C++11)(C++11)(C++11)(C++11)(C++11)

   Defined in header <cmath>
   (1)
   bool islessequal( float x, float y );

   bool islessequal( double x, double y );
   bool islessequal( long double x, long double y );
   (since C++11)
   (until C++23)
   constexpr bool islessequal( /* floating-point-type */ x,
                               /* floating-point-type */ y );
   (since C++23)
   Additional overloads
   Defined in header <cmath>
   template< class Arithmetic1, class Arithmetic2 >
   bool islessequal( Arithmetic1 x, Arithmetic2 y );
   (A) (since C++11)
   (constexpr since C++23)
   1) Determines if the floating point number x is less than or equal to
   the floating-point number y, without setting floating-point exceptions.
   The library provides overloads for all cv-unqualified floating-point
   types as the type of the parameters x and y.(since C++23)
   A) Additional overloads are provided for all other combinations of
   arithmetic types.

Parameters

   x, y - floating-point or integer values

Return value

   true if x <= y, false otherwise.

Notes

   The built-in operator<= for floating-point numbers may raise FE_INVALID
   if one or both of the arguments is NaN. This function is a "quiet"
   version of operator<=.

   The additional overloads are not required to be provided exactly as
   (A). They only need to be sufficient to ensure that for their first
   argument num1 and second argument num2:
     * If num1 or num2 has type long double, then std::islessequal(num1,
       num2) has the same effect as std::islessequal(static_cast<long
       double>(num1),
                        static_cast<long double>(num2)).
     * Otherwise, if num1 and/or num2 has type double or an integer type,
       then std::islessequal(num1, num2) has the same effect as
       std::islessequal(static_cast<double>(num1),
                        static_cast<double>(num2)).
     * Otherwise, if num1 or num2 has type float, then
       std::islessequal(num1, num2) has the same effect as
       std::islessequal(static_cast<float>(num1),
                        static_cast<float>(num2)).

   (until C++23)

   If num1 and num2 have arithmetic types, then std::islessequal(num1,
   num2) has the same effect as std::islessequal(static_cast</*
   common-floating-point-type */>(num1),
                    static_cast</* common-floating-point-type */>(num2)),
   where /* common-floating-point-type */ is the floating-point type with
   the greatest floating-point conversion rank and greatest floating-point
   conversion subrank between the types of num1 and num2, arguments of
   integer type are considered to have the same floating-point conversion
   rank as double.

   If no such floating-point type with the greatest rank and subrank
   exists, then overload resolution does not result in a usable candidate
   from the overloads provided.
   (since C++23)

See also

   less_equal
   function object implementing x <= y
   (class template)
   isgreaterequal
   (C++11)
   checks if the first floating-point argument is greater or equal than
   the second
   (function)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/numeric/math/isl
   essequal&oldid=149467"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 20 March 2023, at 20:02.
     * This page has been accessed 23,973 times.
