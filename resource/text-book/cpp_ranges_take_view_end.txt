std::ranges::take_view<V>::end

   From cppreference.com
   < cpp | ranges | take view

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Ranges library
   Range access
   begin
   cbegin
   end
   cend
   rbegin
   crbegin
   rend
   crend
   size
   ssize
   data
   cdata
   empty
   Range conversions
   std::from_range_t
   std::from_range
   (C++23)(C++23)
   to
   (C++23)
   Range primitives
   range_size_trange_difference_trange_value_trange_reference_t
   iterator_tconst_iterator_tsentinel_tconst_sentinel_t
   (C++23)(C++23)
   range_const_reference_trange_rvalue_reference_trange_common_reference_t
   (C++23)
   elements_of
   (C++23)
   Dangling iterator handling
   dangling
   borrowed_iterator_t
   borrowed_subrange_t
   Range concepts
   range
   borrowed_range
   sized_range
   constant_range
   (C++23)
   common_range
   view
   viewable_range
   input_range
   output_range
   forward_range
   bidirectional_range
   random_access_range
   contiguous_range
   Views
   view_interface
   subrange
   Range factories
   empty_viewviews::empty
   single_viewviews::single
   iota_viewviews::iota
   repeat_viewviews::repeat
   (C++23)(C++23)
   basic_istream_viewviews::istream
   Range adaptors
   views::all_tviews::all
   ref_view
   owning_view
   as_rvalue_viewviews::as_rvalue
   (C++23)(C++23)
   filter_viewviews::filter
   transform_viewviews::transform
   take_viewviews::take
   take_while_viewviews::take_while
   concat_viewviews::concat
   (C++26)(C++26)
   drop_viewviews::drop
   drop_while_viewviews::drop_while
   join_viewviews::join
   join_with_viewviews::join_with
   (C++23)(C++23)
   lazy_split_viewviews::lazy_split
   split_viewviews::split
   views::counted
   common_viewviews::common
   reverse_viewviews::reverse
   as_const_viewviews::as_const
   (C++23)(C++23)
   elements_viewviews::elements
   keys_viewviews::keys
   values_viewviews::values
   enumerate_viewviews::enumerate
   (C++23)(C++23)
   zip_viewviews::zip
   (C++23)(C++23)
   zip_transform_viewviews::zip_transform
   (C++23)(C++23)
   adjacent_viewviews::adjacent
   (C++23)(C++23)
   views::pairwise
   (C++23)
   adjacent_transform_viewviews::adjacent_transform
   (C++23)(C++23)
   views::pairwise_transform
   (C++23)
   chunk_viewviews::chunk
   (C++23)(C++23)
   slide_viewviews::slide
   (C++23)(C++23)
   chunk_by_viewviews::chunk_by
   (C++23)(C++23)
   stride_viewviews::stride
   (C++23)(C++23)
   cartesian_product_viewviews::cartesian_product
   (C++23)(C++23)
   Range generators
   std::generator
   (C++23)
   Range adaptor objects
   Range adaptor closure objects
   range_adaptor_closure
   (C++23)
   Helper items
   copyable-box
   movable-box
   (until C++23)(C++23)
   simple-view
   non-propagating-cache

   std::ranges::take_view
   Member functions
   take_view::take_view
   take_view::base
   take_view::begin
   take_view::end
   take_view::size
   Deduction guides
   Sentinel
   Member functions
   take_view::sentinel::sentinel
   Non-member functions
   take_view::sentinel::base
   operator==(std::counted_iterator,take_view::sentinel)

   constexpr auto end() requires (!__SimpleView<V>);
   (1)                                                        (since C++20)
   constexpr auto end() const requires ranges::range<const V>;
   (2)                                                        (since C++20)

   Returns a sentinel or an iterator representing the end of the
   take_view. The end of the take_view is either one past the count-th
   element in the underlying range, or the end of the underlying range if
   the latter has less than count elements.
   1) Returns a take_view::/*sentinel*/<false>, a std::default_sentinel_t,
   or a ranges::iterator_t<V>.
   2) Returns a take_view::/*sentinel*/<true>, a std::default_sentinel_t,
   or a ranges::iterator_t<const V>.

   Overload (1) does not participate in overload resolution if V is a
   simple view (that is, if V and const V are views with the same iterator
   and sentinel types).

Parameters

   (none)

Return value

   The result depends on the concepts satisfied by possibly
   const-qualified underlying view type Base_, that is V (for overload
   (1)) or const V (for overload (2)).

   Let base_ be the underlying view.
   The underlying view satisfies ... random_access_range
   yes no
   sized_range yes ranges::begin(base_) +

   ranges::range_difference_t<Base_>(this->size())
   std::default_sentinel
   no
   1) /*sentinel*/<false>{ranges::end(base_)}
   2) /*sentinel*/<true>{ranges::end(base_)}

Example

   Run this code
#include <iostream>
#include <iterator>
#include <list>
#include <ranges>
#include <type_traits>

int main()
{
    const auto list1 = {3, 1, 4, 1, 5};
    const auto seq1 = list1 | std::views::take(4);
    static_assert(std::ranges::sized_range<decltype(seq1)> &&
                  std::ranges::random_access_range<decltype(seq1)> &&
                  std::is_same_v<decltype(seq1.end()), decltype(list1.end())>);
    for (auto it = seq1.begin(); it != seq1.end(); ++it)
        std::cout << *it << ' ';
    std::cout << '\n';

    std::list list2 = {2, 7, 1, 8, 2};
    const auto seq2 = list2 | std::views::take(4);
    static_assert(std::ranges::sized_range<decltype(seq2)> &&
                  not std::ranges::random_access_range<decltype(seq2)> &&
                  std::is_same_v<decltype(seq2.end()), std::default_sentinel_t>)
;
    for (auto it = seq2.begin(); it != std::default_sentinel; ++it)
        std::cout << *it << ' ';
    std::cout << '\n';
}

   Output:
3 1 4 1
2 7 1 8

Defect reports

   The following behavior-changing defect reports were applied
   retroactively to previously published C++ standards.
   DR Applied to Behavior as published Correct behavior
   P2393R1 C++20 implicit conversions between signed and unsigned
   integer-class types might fail made explicit

See also

   begin
   (C++20)
   returns an iterator to the beginning
   (public member function)
   counted_iterator
   (C++20)
   iterator adaptor that tracks the distance to the end of the range
   (class template)
   operator==
   (C++20)
   compares a sentinel with an iterator returned from take_view::begin
   (function)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/ranges/take_view
   /end&oldid=160955"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 19 October 2023, at 22:45.
     * This page has been accessed 5,542 times.
