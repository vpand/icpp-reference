std::linear_congruential_engine<UIntType,a,c,m>::linear_congruential_engine

   From cppreference.com
   < cpp | numeric | random | linear congruential engine

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Numerics library
   Common mathematical functions
   Mathematical special functions (C++17)
   Mathematical constants (C++20)
   Basic linear algebra algorithms (C++26)
   Floating-point environment (C++11)
   Complex numbers
   Numeric arrays
   Pseudo-random number generation
   Factor operations
   gcd
   (C++17)
   lcm
   (C++17)
   Interpolations
   midpoint
   (C++20)
   lerp
   (C++20)
   Saturation arithmetic
   add_sat
   (C++26)
   sub_sat
   (C++26)
   saturate_cast
   (C++26)
   mul_sat
   (C++26)
   div_sat
   (C++26)
   Generic numeric operations
   iota
   (C++11)
   ranges::iota
   (C++23)
   accumulate
   inner_product
   adjacent_difference
   partial_sum
   reduce
   (C++17)
   transform_reduce
   (C++17)
   inclusive_scan
   (C++17)
   exclusive_scan
   (C++17)
   transform_inclusive_scan
   (C++17)
   transform_exclusive_scan
   (C++17)
   Bit operations
   has_single_bit
   (C++20)
   bit_cast
   (C++20)
   bit_ceil
   (C++20)
   bit_floor
   (C++20)
   bit_width
   (C++20)
   rotl
   (C++20)
   rotr
   (C++20)
   popcount
   (C++20)
   countl_zero
   (C++20)
   countl_one
   (C++20)
   countr_zero
   (C++20)
   countr_one
   (C++20)
   byteswap
   (C++23)
   endian
   (C++20)

   Pseudo-random number generation
   Uniform random bit generators
   uniform_random_bit_generator
   (C++20)
   Random number engines
   linear_congruential_engine
   (C++11)
   mersenne_twister_engine
   (C++11)
   subtract_with_carry_engine
   (C++11)
   Random number engine adaptors
   discard_block_engine
   (C++11)
   independent_bits_engine
   (C++11)
   shuffle_order_engine
   (C++11)
   Predefined random number generators
   Non-deterministic random numbers
   random_device
   (C++11)
   Random number distributions
   Uniform distributions
   uniform_int_distribution
   (C++11)
   uniform_real_distribution
   (C++11)
   generate_canonical
   (C++11)
   Bernoulli distributions
   bernoulli_distribution
   (C++11)
   binomial_distribution
   (C++11)
   negative_binomial_distribution
   (C++11)
   geometric_distribution
   (C++11)
   Poisson distributions
   poisson_distribution
   (C++11)
   exponential_distribution
   (C++11)
   gamma_distribution
   (C++11)
   weibull_distribution
   (C++11)
   extreme_value_distribution
   (C++11)
   Normal distributions
   normal_distribution
   (C++11)
   lognormal_distribution
   (C++11)
   chi_squared_distribution
   (C++11)
   cauchy_distribution
   (C++11)
   fisher_f_distribution
   (C++11)
   student_t_distribution
   (C++11)
   Sampling distributions
   discrete_distribution
   (C++11)
   piecewise_constant_distribution
   (C++11)
   piecewise_linear_distribution
   (C++11)
   Utilities
   generate_canonical
   (C++11)
   seed_seq
   (C++11)
   Random number algorithms
   ranges::generate_random
   (C++26)
   C random library
   rand
   srand
   RAND_MAX

   std::linear_congruential_engine
   Member functions
   linear_congruential_engine::linear_congruential_engine
   (C++11)
   linear_congruential_engine::seed
   (C++11)
   Generation
   linear_congruential_engine::operator()
   (C++11)
   linear_congruential_engine::discard
   (C++11)
   Characteristics
   linear_congruential_engine::min
   (C++11)
   linear_congruential_engine::max
   (C++11)
   Non-member functions
   operator==operator!=
   (C++11)(C++11)(until C++20)
   operator<<operator>>
   (C++11)(C++11)

   linear_congruential_engine() : linear_congruential_engine(default_seed)
   {}
   (1) (since C++11)
   explicit linear_congruential_engine( result_type value );
   (2) (since C++11)
   template< class SeedSeq >
   explicit linear_congruential_engine( SeedSeq& seq );
   (3) (since C++11)
   linear_congruential_engine( const linear_congruential_engine& other );
   (4) (since C++11)
   (implicitly declared)

   Constructs the pseudo-random number engine.
   1) The default constructor.
   2) Constructs the engine with a seed value value. The engine's initial
   state is determined as follows:
     * If c % m == 0 and value % m == 0 are both true, the state is 1.
     * Otherwise, the state is value % m.

   3) Constructs the engine with a seed sequence seq. Given
   std::size_t(std::log2(m) / 32) + 1 as k, the engine's initial state is
   determined as follows:
    1. Creates an invented array object a of length k + 3.
    2. Calls seq.generate(a + 0, a + k + 3).
    3. Let S be \((\sum^{k-1}_{j=0} a_{j+3} \cdot 2^{32j}) \mod
       m\)(\sumk-1
       j=0 a
       j+3·232j
       ) mod m.
    4. If both c % m == 0 and S == 0 are true, sets the engine's state to
       1. Otherwise, sets the engine's state to S.

   This overload participates in overload resolution only if SeedSeq meets
   the requirements of SeedSequence.
   4) The copy constructor. Upon construction, *this == other is true.

Parameters

   value - seed value to use in the initialization of the internal state
   seq   - seed sequence to use in the initialization of the internal state

Complexity

   1,2) Constant.
   3) Same as the complexity of the seq.generate call.
   4) Constant.

Defect reports

   The following behavior-changing defect reports were applied
   retroactively to previously published C++ standards.
     DR    Applied to        Behavior as published         Correct behavior
   P0935R0 C++11      the default constructor was explicit made implicit

See also

   seed
   (C++11)
   sets the current state of the engine
   (public member function)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/numeric/random/l
   inear_congruential_engine/linear_congruential_engine&oldid=171505"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 4 May 2024, at 16:30.
     * This page has been accessed 33,473 times.
