std::filesystem::recursive_directory_iterator::operator++,
std::filesystem::recursive_directory_iterator::increment

   From cppreference.com
   < cpp | filesystem | recursive directory iterator

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Filesystem library
   Classes
   filesystem::path
   filesystem::filesystem_error
   filesystem::directory_entry
   filesystem::directory_iterator
   filesystem::recursive_directory_iterator

   filesystem::file_status
   filesystem::space_info
   filesystem::file_type
   filesystem::perms
   filesystem::perm_options
   filesystem::copy_options
   filesystem::directory_options
   filesystem::file_time_type
   Functions
   filesystem::absolute
   filesystem::canonicalfilesystem::weakly_canonical
   filesystem::relativefilesystem::proximate
   filesystem::copy
   filesystem::copy_file
   filesystem::copy_symlink
   filesystem::create_directory
   filesystem::create_directories
   filesystem::create_hard_link
   filesystem::create_symlink
   filesystem::create_directory_symlink
   filesystem::current_path
   filesystem::exists
   filesystem::equivalent
   filesystem::file_size
   filesystem::hard_link_count
   filesystem::last_write_time
   filesystem::permissions
   filesystem::read_symlink
   filesystem::remove
   filesystem::remove_all
   filesystem::rename
   filesystem::resize_file
   filesystem::space
   filesystem::status
   filesystem::symlink_status
   filesystem::temp_directory_path
   File types
   filesystem::is_block_file
   filesystem::is_character_file
   filesystem::is_directory
   filesystem::is_empty
   filesystem::status_known
   filesystem::is_fifo
   filesystem::is_other
   filesystem::is_regular_file
   filesystem::is_socket
   filesystem::is_symlink

   std::filesystem::recursive_directory_iterator
   Member functions
   recursive_directory_iterator::recursive_directory_iterator
   recursive_directory_iterator::operator*recursive_directory_iterator::op
   erator->
   recursive_directory_iterator::options
   recursive_directory_iterator::depth
   recursive_directory_iterator::recursion_pending
   recursive_directory_iterator::operator=
   recursive_directory_iterator::incrementrecursive_directory_iterator::op
   erator++
   recursive_directory_iterator::pop
   recursive_directory_iterator::disable_recursion_pending
   Non-member functions
   begin(std::filesystem::recursive_directory_iterator)end(std::filesystem
   ::recursive_directory_iterator)

   recursive_directory_iterator& operator++();
   (1)                                                            (since C++17)
   recursive_directory_iterator& increment( std::error_code& ec );
   (2)                                                            (since C++17)

   Advances the iterator to the next entry. Invalidates all copies of the
   previous value of *this.

   If there are no more entries left in the currently iterated directory,
   the iteration is resumed over the parent directory. The process is
   repeated if the parent directory has no sibling entries that can to be
   iterated on. If the parent of the directory hierarchy that has been
   recursively iterated on is reached (there are no candidate entries at
   depth() == 0), *this is set to an end iterator.

   Otherwise, if *this refers to a directory, it is iterated into if the
   following conditions are met:
     * disable_recursion_pending() has not been called before this
       increment, i.e. recursion_pending() == true.
     * The directory is not a symlink or following symlinks is enabled,
       i.e., at least one of the following is true:
          + !is_symlink((*this)->symlink_status()).
          + (options() & directory_options::follow_directory_symlink) !=
            directory_options::none)

Parameters

   ec - error code to store the error status to

Return value

   *this

Exceptions

   Any overload not marked noexcept may throw std::bad_alloc if memory
   allocation fails.
   1) Throws std::filesystem::filesystem_error on underlying OS API
   errors, constructed with the OS error code as the error code argument.
   2) Sets a std::error_code& parameter to the OS API error code if an OS
   API call fails, and executes ec.clear() if no errors occur.

Example

   This section is incomplete
   Reason: no example

Defect reports

   The following behavior-changing defect reports were applied
   retroactively to previously published C++ standards.
   DR Applied to Behavior as published Correct behavior
   LWG 3013 C++17 error_code overload marked noexcept but can allocate
   memory noexcept removed
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/filesystem/recur
   sive_directory_iterator/increment&oldid=158202"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 8 September 2023, at 07:48.
     * This page has been accessed 15,091 times.
