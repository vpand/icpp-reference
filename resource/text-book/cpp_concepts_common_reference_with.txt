std::common_reference_with

   From cppreference.com
   < cpp | concepts

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Concepts library
   Core language concepts
   same_as
   derived_from
   convertible_to
   common_reference_with

   common_with
   integral
   signed_integral
   unsigned_integral
   floating_point
   swappableswappable_with
   destructible
   constructible_from
   default_initializable
   move_constructible
   copy_constructible
   assignable_from
   Comparison concepts
   equality_comparableequality_comparable_with
   totally_orderedtotally_ordered_with
   Object concepts
   movable
   copyable
   semiregular
   regular
   Callable concepts
   invocableregular_invocable
   predicate
   relation
   equivalence_relation
   strict_weak_order
   Exposition-only concepts
   boolean-testable

   Defined in header <concepts>
   template< class T, class U >

   concept common_reference_with =
       std::same_as<std::common_reference_t<T, U>,
   std::common_reference_t<U, T>> &&
       std::convertible_to<T, std::common_reference_t<T, U>> &&
       std::convertible_to<U, std::common_reference_t<T, U>>;
                               (since C++20)

   The concept common_reference_with<T, U> specifies that two types T and
   U share a common reference type (as computed by
   std::common_reference_t) to which both can be converted.

Semantic requirements

   T and U model std::common_reference_with<T, U> only if, given
   equality-preserving expressions t1, t2, u1 and u2 such that
   decltype((t1)) and decltype((t2)) are both T and decltype((u1)) and
   decltype((u2)) are both U,
     * std::common_reference_t<T, U>(t1) equals std::common_reference_t<T,
       U>(t2) if and only if t1 equals t2; and
     * std::common_reference_t<T, U>(u1) equals std::common_reference_t<T,
       U>(u2) if and only if u1 equals u2.

   In other words, the conversion to the common reference type must
   preserve equality.

See also

   common_referencebasic_common_reference
   (C++20)
   determines the common reference type of a group of types
   (class template)
   common_with
   (C++20)
   specifies that two types share a common type
   (concept)
   common_type
   (C++11)
   determines the common type of a group of types
   (class template)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/concepts/common_
   reference_with&oldid=161732"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 29 October 2023, at 14:00.
     * This page has been accessed 24,413 times.
