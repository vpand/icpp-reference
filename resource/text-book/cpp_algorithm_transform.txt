std::transform

   From cppreference.com
   < cpp | algorithm

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Algorithm library
   Constrained algorithms and algorithms on ranges (C++20)
   Constrained algorithms, e.g. ranges::copy, ranges::sort, ...
   Execution policies (C++17)
   is_execution_policy
   (C++17)
   execution::seqexecution::parexecution::par_unseqexecution::unseq
   (C++17)    (C++17)(C++17)(C++20)
   execution::sequenced_policyexecution::parallel_policyexecution::paralle
   l_unsequenced_policyexecution::parallel_unsequenced
   (C++17)(C++17)(C++17)(C++20)
   Non-modifying sequence operations
   Batch operations
   for_each
   for_each_n
   (C++17)
   Search operations
   all_ofany_ofnone_of
   (C++11)                (C++11)(C++11)
   countcount_if
   mismatch
   equal
   findfind_iffind_if_not
   (C++11)
   find_end
   find_first_of
   adjacent_find
   search
   search_n
   Modifying sequence operations
   Copy operations
   copycopy_if
   (C++11)
   copy_backward
   copy_n
   (C++11)
   move
   (C++11)
   move_backward
   (C++11)
   Swap operations
   swap
   iter_swap
   swap_ranges
   Transformation operations
   replacereplace_if
   transform
   replace_copyreplace_copy_if
   Generation operations
   fill
   fill_n
   generate
   generate_n
   Removing operations
   removeremove_if
   unique
   remove_copyremove_copy_if
   unique_copy
   Order-changing operations
   reverse
   reverse_copy
   rotate
   rotate_copy
   random_shuffleshuffle
   (until C++17)(C++11)
   shift_leftshift_right
   (C++20)(C++20)
   Sampling operations
   sample
   (C++17)
   Sorting and related operations
   Partitioning operations
   partition
   partition_copy
   (C++11)
   stable_partition
   is_partitioned
   (C++11)
   partition_point
   (C++11)
   Sorting operations
   sort
   stable_sort
   partial_sort
   partial_sort_copy
   is_sorted
   (C++11)
   is_sorted_until
   (C++11)
   nth_element
   Binary search operations
   (on partitioned ranges)
   lower_bound
   upper_bound
   equal_range
   binary_search
   Set operations (on sorted ranges)
   includes
   set_union
   set_intersection
   set_difference
   set_symmetric_difference
   Merge operations (on sorted ranges)
   merge
   inplace_merge
   Heap operations
   push_heap
   pop_heap
   make_heap
   sort_heap
   is_heap
   (C++11)
   is_heap_until
   (C++11)
   Minimum/maximum operations
   max
   min
   minmax
   (C++11)
   clamp
   (C++17)
   max_element
   min_element
   minmax_element
   (C++11)
   Lexicographical comparison operations
   lexicographical_compare
   lexicographical_compare_three_way
   (C++20)
   Permutation operations
   next_permutation
   prev_permutation
   is_permutation
   (C++11)
   C library
   qsort
   bsearch
   Numeric operations
   iota
   (C++11)
   inner_product
   adjacent_difference

   accumulate
   reduce
   (C++17)
   transform_reduce
   (C++17)
   partial_sum
   inclusive_scan
   (C++17)
   exclusive_scan
   (C++17)
   transform_inclusive_scan
   (C++17)
   transform_exclusive_scan
   (C++17)
   Operations on uninitialized memory
   uninitialized_copy
   uninitialized_move
   (C++17)
   uninitialized_fill
   uninitialized_copy_n
   (C++11)
   uninitialized_move_n
   (C++17)
   uninitialized_fill_n
   destroy
   (C++17)
   destroy_n
   (C++17)
   destroy_at
   (C++17)
   construct_at
   (C++20)
   uninitialized_default_construct
   (C++17)
   uninitialized_value_construct
   (C++17)
   uninitialized_default_construct_n
   (C++17)
   uninitialized_value_construct_n
   (C++17)

 Defined in header <algorithm>
   template< class InputIt, class OutputIt, class UnaryOp >

   OutputIt transform( InputIt first1, InputIt last1,
                       OutputIt d_first, UnaryOp unary_op );
 (1)                                                     (constexpr since C++20)
   template< class ExecutionPolicy,

             class ForwardIt1, class ForwardIt2, class UnaryOp >
   ForwardIt2 transform( ExecutionPolicy&& policy,
                         ForwardIt1 first1, ForwardIt1 last1,
                         ForwardIt2 d_first, UnaryOp unary_op );
 (2)                                                     (since C++17)
   template< class InputIt1, class InputIt2,

             class OutputIt, class BinaryOp >
   OutputIt transform( InputIt1 first1, InputIt1 last1, InputIt2 first2,
                       OutputIt d_first, BinaryOp binary_op );
 (3)                                                     (constexpr since C++20)
   template< class ExecutionPolicy,

             class ForwardIt1, class ForwardIt2,
             class ForwardIt3, class BinaryOp >
   ForwardIt3 transform( ExecutionPolicy&& policy,
                         ForwardIt1 first1, ForwardIt1 last1,
                         ForwardIt2 first2,
                         ForwardIt3 d_first, BinaryOp binary_op );
 (4)                                                     (since C++17)

   std::transform applies the given function to the elements of the given
   input range(s), and stores the result in an output range starting from
   d_first.
   1) The unary operation unary_op is applied to the elements of
   [first1, last1).
   If unary_op invalidates an iterator or modifies an element in any of
   the following ranges, the behavior is undefined:
     * [first1, last1].
     * The range of std::distance(first1, last1) + 1 elements starting
       from d_first.

   3) The binary operation binary_op is applied to pairs of elements from
   two ranges: [first1, last1) and another range of std::distance(first1,
   last1) elements starting from first2.
   If binary_op invalidates an iterator or modifies an element in any of
   the following ranges, the behavior is undefined:
     * [first1, last1].
     * The range of std::distance(first1, last1) + 1 elements starting
       from first2.
     * The range of std::distance(first1, last1) + 1 elements starting
       from d_first.

   2,4) Same as (1,3), but executed according to policy.
   These overloads participate in overload resolution only if

   std::is_execution_policy_v<std::decay_t<ExecutionPolicy>> is true.
   (until C++20)

   std::is_execution_policy_v<std::remove_cvref_t<ExecutionPolicy>> is
   true.
   (since C++20)

Parameters

   first1, last1 - the first range of elements to transform
   first2 - the beginning of the second range of elements to transform
   d_first - the beginning of the destination range, may be equal to
   first1 or first2
   policy - the execution policy to use. See execution policy for details.
   unary_op - unary operation function object that will be applied.

   The signature of the function should be equivalent to the following:

    Ret fun(const Type &a);

   The signature does not need to have const &.
   The type  Type must be such that an object of type InputIt can be
   dereferenced and then implicitly converted to  Type. The type Ret must
   be such that an object of type OutputIt can be dereferenced and
   assigned a value of type Ret.
   binary_op - binary operation function object that will be applied.

   The signature of the function should be equivalent to the following:

    Ret fun(const Type1 &a, const Type2 &b);

   The signature does not need to have const &.
   The types  Type1 and  Type2 must be such that objects of types InputIt1
   and InputIt2 can be dereferenced and then implicitly converted to
   Type1 and  Type2 respectively. The type Ret must be such that an object
   of type OutputIt can be dereferenced and assigned a value of type Ret.
   Type requirements
   -
   InputIt, InputIt1, InputIt2 must meet the requirements of
   LegacyInputIterator.
   -
   OutputIt must meet the requirements of LegacyOutputIterator.
   -
   ForwardIt1, ForwardIt2, ForwardIt3 must meet the requirements of
   LegacyForwardIterator.

Return value

   Output iterator to the element that follows the last element
   transformed.

Complexity

   Given \(\scriptsize N\)N as std::distance(first1, last1):
   1,2) Exactly \(\scriptsize N\)N applications of unary_op.
   3,4) Exactly \(\scriptsize N\)N applications of binary_op.

Exceptions

   The overloads with a template parameter named ExecutionPolicy report
   errors as follows:
     * If execution of a function invoked as part of the algorithm throws
       an exception and ExecutionPolicy is one of the standard policies,
       std::terminate is called. For any other ExecutionPolicy, the
       behavior is implementation-defined.
     * If the algorithm fails to allocate memory, std::bad_alloc is
       thrown.

Possible implementation

                       transform (1)
template<class InputIt, class OutputIt, class UnaryOp>
constexpr //< since C++20
OutputIt transform(InputIt first1, InputIt last1,
                   OutputIt d_first, UnaryOp unary_op)
{
    for (; first1 != last1; ++d_first, ++first1)
        *d_first = unary_op(*first1);

    return d_first;
}

                       transform (3)
template<class InputIt1, class InputIt2,
         class OutputIt, class BinaryOp>
constexpr //< since C++20
OutputIt transform(InputIt1 first1, InputIt1 last1, InputIt2 first2,
                   OutputIt d_first, BinaryOp binary_op)
{
    for (; first1 != last1; ++d_first, ++first1, ++first2)
        *d_first = binary_op(*first1, *first2);

    return d_first;
}

Notes

   std::transform does not guarantee in-order application of unary_op or
   binary_op. To apply a function to a sequence in-order or to apply a
   function that modifies the elements of a sequence, use std::for_each.

Example

   Run this code
#include <algorithm>
#include <cctype>
#include <iomanip>
#include <iostream>
#include <string>
#include <utility>
#include <vector>

void print_ordinals(const std::vector<unsigned>& ordinals)
{
    std::cout << "ordinals: ";
    for (unsigned ord : ordinals)
        std::cout << std::setw(3) << ord << ' ';
    std::cout << '\n';
}

char to_uppercase(unsigned char c)
{
    return std::toupper(c);
}

void to_uppercase_inplace(char& c)
{
    c = to_uppercase(c);
}

void unary_transform_example(std::string& hello, std::string world)
{
    // Transform string to uppercase in-place

    std::transform(hello.cbegin(), hello.cend(), hello.begin(), to_uppercase);
    std::cout << "hello = " << std::quoted(hello) << '\n';

    // for_each version (see Notes above)
    std::for_each(world.begin(), world.end(), to_uppercase_inplace);
    std::cout << "world = " << std::quoted(world) << '\n';
}

void binary_transform_example(std::vector<unsigned> ordinals)
{
    // Transform numbers to doubled values

    print_ordinals(ordinals);

    std::transform(ordinals.cbegin(), ordinals.cend(), ordinals.cbegin(),
                   ordinals.begin(), std::plus<>{});

    print_ordinals(ordinals);
}

int main()
{
    std::string hello("hello");
    unary_transform_example(hello, "world");

    std::vector<unsigned> ordinals;
    std::copy(hello.cbegin(), hello.cend(), std::back_inserter(ordinals));
    binary_transform_example(std::move(ordinals));
}

   Output:
hello = "HELLO"
world = "WORLD"
ordinals:  72  69  76  76  79
ordinals: 144 138 152 152 158

Defect reports

   The following behavior-changing defect reports were applied
   retroactively to previously published C++ standards.
   DR Applied to Behavior as published Correct behavior
   LWG 242 C++98 unary_op and binary_op could not have side effects they
   cannot modify the ranges involved

See also

   for_each
   applies a function to a range of elements
   (function template)
   ranges::transform
   (C++20)
   applies a function to a range of elements
   (niebloid)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/algorithm/transf
   orm&oldid=171264"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 24 April 2024, at 09:25.
     * This page has been accessed 1,888,341 times.
