std::ranges::iterator_t, std::ranges::const_iterator_t,
std::ranges::sentinel_t, std::ranges::const_sentinel_t,
std::ranges::range_size_t, std::ranges::range_difference_t,
std::ranges::range_value_t, std::ranges::range_reference_t

   From cppreference.com
   < cpp | ranges

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Ranges library
   Range access
   begin
   cbegin
   end
   cend
   rbegin
   crbegin
   rend
   crend
   size
   ssize
   data
   cdata
   empty
   Range conversions
   std::from_range_t
   std::from_range
   (C++23)(C++23)
   to
   (C++23)
   Range primitives
   range_size_trange_difference_trange_value_trange_reference_t
   iterator_tconst_iterator_tsentinel_tconst_sentinel_t
   (C++23)(C++23)
   range_const_reference_trange_rvalue_reference_trange_common_reference_t
   (C++23)
   elements_of
   (C++23)
   Dangling iterator handling
   dangling
   borrowed_iterator_t
   borrowed_subrange_t
   Range concepts
   range
   borrowed_range
   sized_range
   constant_range
   (C++23)
   common_range
   view
   viewable_range
   input_range
   output_range
   forward_range
   bidirectional_range
   random_access_range
   contiguous_range
   Views
   view_interface
   subrange
   Range factories
   empty_viewviews::empty
   single_viewviews::single
   iota_viewviews::iota
   repeat_viewviews::repeat
   (C++23)(C++23)
   basic_istream_viewviews::istream
   Range adaptors
   views::all_tviews::all
   ref_view
   owning_view
   as_rvalue_viewviews::as_rvalue
   (C++23)(C++23)
   filter_viewviews::filter
   transform_viewviews::transform
   take_viewviews::take
   take_while_viewviews::take_while
   concat_viewviews::concat
   (C++26)(C++26)
   drop_viewviews::drop
   drop_while_viewviews::drop_while
   join_viewviews::join
   join_with_viewviews::join_with
   (C++23)(C++23)
   lazy_split_viewviews::lazy_split
   split_viewviews::split
   views::counted
   common_viewviews::common
   reverse_viewviews::reverse
   as_const_viewviews::as_const
   (C++23)(C++23)
   elements_viewviews::elements
   keys_viewviews::keys
   values_viewviews::values
   enumerate_viewviews::enumerate
   (C++23)(C++23)
   zip_viewviews::zip
   (C++23)(C++23)
   zip_transform_viewviews::zip_transform
   (C++23)(C++23)
   adjacent_viewviews::adjacent
   (C++23)(C++23)
   views::pairwise
   (C++23)
   adjacent_transform_viewviews::adjacent_transform
   (C++23)(C++23)
   views::pairwise_transform
   (C++23)
   chunk_viewviews::chunk
   (C++23)(C++23)
   slide_viewviews::slide
   (C++23)(C++23)
   chunk_by_viewviews::chunk_by
   (C++23)(C++23)
   stride_viewviews::stride
   (C++23)(C++23)
   cartesian_product_viewviews::cartesian_product
   (C++23)(C++23)
   Range generators
   std::generator
   (C++23)
   Range adaptor objects
   Range adaptor closure objects
   range_adaptor_closure
   (C++23)
   Helper items
   copyable-box
   movable-box
   (until C++23)(C++23)
   simple-view
   non-propagating-cache

   Defined in header <ranges>
   template< class T >
   using iterator_t = decltype(ranges::begin(std::declval<T&>()));
   (1)                              (since C++20)
   template< ranges::range R >
   using const_iterator_t = decltype(ranges::cbegin(std::declval<R&>()));
   (2)                              (since C++23)
   template< ranges::range R >
   using sentinel_t = decltype(ranges::end(std::declval<R&>()));
   (3)                              (since C++20)
   template< ranges::range R >
   using const_sentinel_t = decltype(ranges::cend(std::declval<R&>()));
   (4)                              (since C++23)
   template< ranges::sized_range R >
   using range_size_t = decltype(ranges::size(std::declval<R&>()));
   (5)                              (since C++20)
   template< ranges::range R >
   using range_difference_t =
   std::iter_difference_t<ranges::iterator_t<R>>;
   (6)                              (since C++20)
   template< ranges::range R >
   using range_value_t = std::iter_value_t<ranges::iterator_t<R>>;
   (7)                              (since C++20)
   template< ranges::range R >
   using range_reference_t = std::iter_reference_t<ranges::iterator_t<R>>;
   (8)                              (since C++20)
   template< ranges::range R >

   using range_const_reference_t =
       std::iter_const_reference_t<ranges::iterator_t<R>>;
   (9)                              (since C++23)
   template< ranges::range R >

   using range_rvalue_reference_t =
       std::iter_rvalue_reference_t<ranges::iterator_t<R>>;
   (10)                             (since C++20)
   template< ranges::range R >

   using range_common_reference_t =
       std::iter_common_reference_t<ranges::iterator_t<R>>;
   (11)                             (since C++20)
   1) Used to obtain the iterator type of the type T.
   2) Used to obtain the constant iterator type of the range type R.
   3) Used to obtain the sentinel type of the range type R.
   4) Used to obtain the constant sentinel type of the range type R.
   5) Used to obtain the size type of the sized_range type R.
   6) Used to obtain the difference type of the iterator type of range
   type R.
   7) Used to obtain the value type of the iterator type of range type R.
   8) Used to obtain the reference type of the iterator type of range type
   R.
   9) Used to obtain the constant reference type of the iterator type of
   range type R.
   10) Used to obtain the rvalue reference type of the iterator type of
   range type R.
   11) Used to obtain the common reference type of the iterator type of
   range type R.

Template parameters

   T - a type that can be used in std::ranges::begin
   R - a range type or a sized_range type

Notes

   iterator_t can be applied to non-range types, e.g. arrays with unknown
   bound.

Defect reports

   The following behavior-changing defect reports were applied
   retroactively to previously published C++ standards.
   DR Applied to Behavior as published Correct behavior
   LWG 3860 C++20 range_common_reference_t was missing added
   LWG 3946 C++23 const_iterator_t and const_sentinel_t were inconsistent
   with the result of ranges::cbegin and ranges::cend respectively tweaked

See also

   iter_value_titer_reference_titer_const_reference_titer_difference_titer
   _rvalue_reference_titer_common_reference_t
   (C++20)(C++20)(C++23)(C++20)(C++20)(C++20)
   computes the associated types of an iterator
   (alias template)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/ranges/iterator_
   t&oldid=166342"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 19 December 2023, at 07:41.
     * This page has been accessed 53,526 times.
