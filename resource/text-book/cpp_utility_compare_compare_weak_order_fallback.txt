std::compare_weak_order_fallback

   From cppreference.com
   < cpp | utility

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Utilities library
   Language support
   Type support (basic types, RTTI)
   Library feature-test macros (C++20)
   Dynamic memory management
   Program utilities
   Coroutine support (C++20)
   Variadic functions
   is_constant_evaluated
   (C++20)
   is_within_lifetime
   (C++26)
   initializer_list
   (C++11)
   source_location
   (C++20)
   Debugging support
   is_debugger_present
   (C++26)
   breakpoint_if_debugging
   (C++26)
   breakpoint
   (C++26)
   Three-way comparison
   three_way_comparablethree_way_comparable_with
   (C++20)(C++20)
   strong_ordering
   (C++20)
   weak_ordering
   (C++20)
   partial_ordering
   (C++20)
   common_comparison_category
   (C++20)
   compare_three_way_result
   (C++20)
   compare_three_way
   (C++20)
   strong_order
   (C++20)
   weak_order
   (C++20)
   partial_order
   (C++20)
   compare_strong_order_fallback
   (C++20)
   compare_weak_order_fallback
   (C++20)
   compare_partial_order_fallback
   (C++20)
   is_eqis_ltis_lteq
   (C++20)(C++20)(C++20)
   is_neqis_gtis_gteq
   (C++20)(C++20)(C++20)
   General utilities
   Date and time
   Function objects
   Formatting library (C++20)
   bitset
   hash
   (C++11)
   Relational operators (deprecated in C++20)
   rel_ops::operator!=rel_ops::operator>

   rel_ops::operator<=rel_ops::operator>=
   Integer comparison functions
   cmp_equalcmp_lesscmp_less_than
   (C++20)(C++20)(C++20)
   cmp_not_equalcmp_greatercmp_greater_than
   (C++20)(C++20)(C++20)
   in_range
   (C++20)
   Swap and type operations
   swap
   ranges::swap
   (C++20)
   exchange
   (C++14)
   declval
   (C++11)
   to_underlying
   (C++23)
   forward
   (C++11)
   forward_like
   (C++23)
   move
   (C++11)
   move_if_noexcept
   (C++11)
   as_const
   (C++17)
   Common vocabulary types
   pair
   tuple
   (C++11)
   optional
   (C++17)
   any
   (C++17)
   variant
   (C++17)
   tuple_size
   (C++11)
   tuple_element
   (C++11)
   apply
   (C++17)
   make_from_tuple
   (C++17)
   expected
   (C++23)
   Elementary string conversions
   to_chars
   (C++17)
   from_chars
   (C++17)
   chars_format
   (C++17)
   to_chars_result
   (C++17)
   from_chars_result
   (C++17)

   Defined in header <compare>
   inline namespace /* unspecified */ {

       inline constexpr /* unspecified */
           compare_weak_order_fallback = /* unspecified */;
   }
                                       (since C++20)
   Call signature
   template< class T, class U >

       requires /* see below */
   constexpr std::weak_ordering
       compare_weak_order_fallback( T&& t, U&& u ) noexcept(/* see below
   */);
                                       (since C++20)

   Performs three-way comparison on subexpressions t and u and produces a
   result of type std::weak_ordering, even if the operator <=> is
   unavailable.

   If std::decay_t<T> and std::decay_t<U> are the same type,
   std::compare_weak_order_fallback(t, u) is expression-equivalent to:
     * std::weak_order(t, u), if it is a well-formed expression;
       otherwise,
     * t == u ? std::weak_ordering::equivalent :
       t <  u ? std::weak_ordering::less :
       std::weak_ordering::greater, if the expressions t == u and t < u
       are both well-formed and each of decltype(t == u) and decltype(t <
       u) models boolean-testable, except that t and u are evaluated only
       once.

   In all other cases, std::compare_weak_order_fallback(t, u) is
   ill-formed, which can result in substitution failure when it appears in
   the immediate context of a template instantiation.

Customization point objects

   The name std::compare_weak_order_fallback denotes a customization point
   object, which is a const function object of a literal semiregular class
   type. For exposition purposes, the cv-unqualified version of its type
   is denoted as __compare_weak_order_fallback_fn.

   All instances of __compare_weak_order_fallback_fn are equal. The
   effects of invoking different instances of type
   __compare_weak_order_fallback_fn on the same arguments are equivalent,
   regardless of whether the expression denoting the instance is an lvalue
   or rvalue, and is const-qualified or not (however, a volatile-qualified
   instance is not required to be invocable). Thus,
   std::compare_weak_order_fallback can be copied freely and its copies
   can be used interchangeably.

   Given a set of types Args..., if std::declval<Args>()... meet the
   requirements for arguments to std::compare_weak_order_fallback above,
   __compare_weak_order_fallback_fn models
     * std::invocable<__compare_weak_order_fallback_fn, Args...>,
     * std::invocable<const __compare_weak_order_fallback_fn, Args...>,
     * std::invocable<__compare_weak_order_fallback_fn&, Args...>, and
     * std::invocable<const __compare_weak_order_fallback_fn&, Args...>.

   Otherwise, no function call operator of
   __compare_weak_order_fallback_fn participates in overload resolution.

Example

   Run this code
#include <compare>
#include <iostream>

// does not support <=>
struct Rational_1
{
    int num;
    int den; // > 0
};

inline constexpr bool operator<(Rational_1 lhs, Rational_1 rhs)
{
    return lhs.num * rhs.den < rhs.num * lhs.den;
}

inline constexpr bool operator==(Rational_1 lhs, Rational_1 rhs)
{
    return lhs.num * rhs.den == rhs.num * lhs.den;
}

// supports <=>
struct Rational_2
{
    int num;
    int den; // > 0
};

inline constexpr std::weak_ordering operator<=>(Rational_2 lhs, Rational_2 rhs)
{
    return lhs.num * rhs.den <=> rhs.num * lhs.den;
}

inline constexpr bool operator==(Rational_2 lhs, Rational_2 rhs)
{
    return lhs <=> rhs == 0;
}

void print(int id, std::weak_ordering value)
{
    std::cout << id << ") ";
    if (value == 0)
        std::cout << "equal\n";
    else if (value < 0)
        std::cout << "less\n";
    else
        std::cout << "greater\n";
}

int main()
{
    Rational_1 a{1, 2}, b{3, 4};
//  print(0, a <=> b); // does not work
    print(1, std::compare_weak_order_fallback(a, b)); // works, defaults to < an
d ==

    Rational_2 c{6, 5}, d{8, 7};
    print(2, c <=> d); // works
    print(3, std::compare_weak_order_fallback(c, d)); // works

    Rational_2 e{2, 3}, f{4, 6};
    print(4, e <=> f); // works
    print(5, std::compare_weak_order_fallback(e, f)); // works
}

   Output:
1) less
2) greater
3) greater
4) equal
5) equal

Defect reports

   The following behavior-changing defect reports were applied
   retroactively to previously published C++ standards.
   DR Applied to Behavior as published Correct behavior
   LWG 2114
   (P2167R3) C++20 the fallback mechanism only required
   return types to be convertible to bool constraints strengthened

See also

   weak_order
   (C++20)
   performs 3-way comparison and produces a result of type
   std::weak_ordering
   (customization point object)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/utility/compare/
   compare_weak_order_fallback&oldid=168771"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 18 January 2024, at 02:40.
     * This page has been accessed 20,099 times.
