std::filesystem::is_other

   From cppreference.com
   < cpp | filesystem

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Filesystem library
   Classes
   filesystem::path
   filesystem::filesystem_error
   filesystem::directory_entry
   filesystem::directory_iterator
   filesystem::recursive_directory_iterator

   filesystem::file_status
   filesystem::space_info
   filesystem::file_type
   filesystem::perms
   filesystem::perm_options
   filesystem::copy_options
   filesystem::directory_options
   filesystem::file_time_type
   Functions
   filesystem::absolute
   filesystem::canonicalfilesystem::weakly_canonical
   filesystem::relativefilesystem::proximate
   filesystem::copy
   filesystem::copy_file
   filesystem::copy_symlink
   filesystem::create_directory
   filesystem::create_directories
   filesystem::create_hard_link
   filesystem::create_symlink
   filesystem::create_directory_symlink
   filesystem::current_path
   filesystem::exists
   filesystem::equivalent
   filesystem::file_size
   filesystem::hard_link_count
   filesystem::last_write_time
   filesystem::permissions
   filesystem::read_symlink
   filesystem::remove
   filesystem::remove_all
   filesystem::rename
   filesystem::resize_file
   filesystem::space
   filesystem::status
   filesystem::symlink_status
   filesystem::temp_directory_path
   File types
   filesystem::is_block_file
   filesystem::is_character_file
   filesystem::is_directory
   filesystem::is_empty
   filesystem::status_known
   filesystem::is_fifo
   filesystem::is_other
   filesystem::is_regular_file
   filesystem::is_socket
   filesystem::is_symlink

   Defined in header <filesystem>
   bool is_other( std::filesystem::file_status s ) noexcept;
   (1) (since C++17)
   bool is_other( const std::filesystem::path& p );
   (2) (since C++17)
   bool is_other( const std::filesystem::path& p, std::error_code& ec )
   noexcept;
   (3) (since C++17)

   Checks if the given file status or path corresponds to a file of type
   other type. That is, the file exists, but is neither regular file, nor
   directory nor a symlink.
   1) Equivalent to exists(s) && !is_regular_file(s) && !is_directory(s)
   && !is_symlink(s).
   2,3) Equivalent to is_other(status(p)) or is_other(status(p, ec)),
   respectively.

Parameters

   s  - file status to check
   p  - path to examine
   ec - error code to store the error status to

Return value

   true if the file indicated by p or if the type indicated s refers to a
   file that is not regular file, directory, or a symlink, false
   otherwise. The non-throwing overload returns false if an error occurs.

Exceptions

   Any overload not marked noexcept may throw std::bad_alloc if memory
   allocation fails.
   2,3) Sets a std::error_code& parameter to the OS API error code if an
   OS API call fails, and executes ec.clear() if no errors occur.

Example

   This section is incomplete
   Reason: no example

See also

   statussymlink_status
   (C++17)(C++17)
   determines file attributes
   determines file attributes, checking the symlink target
   (function)
   file_status
   (C++17)
   represents file type and permissions
   (class)
   status_known
   (C++17)
   checks whether file status is known
   (function)
   is_block_file
   (C++17)
   checks whether the given path refers to block device
   (function)
   is_character_file
   (C++17)
   checks whether the given path refers to a character device
   (function)
   is_directory
   (C++17)
   checks whether the given path refers to a directory
   (function)
   is_fifo
   (C++17)
   checks whether the given path refers to a named pipe
   (function)
   is_regular_file
   (C++17)
   checks whether the argument refers to a regular file
   (function)
   is_socket
   (C++17)
   checks whether the argument refers to a named IPC socket
   (function)
   is_symlink
   (C++17)
   checks whether the argument refers to a symbolic link
   (function)
   exists
   (C++17)
   checks whether path refers to existing file system object
   (function)
   is_other
   checks whether the directory entry refers to an other file
   (public member function of std::filesystem::directory_entry)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/filesystem/is_ot
   her&oldid=158211"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 8 September 2023, at 08:51.
     * This page has been accessed 22,494 times.
