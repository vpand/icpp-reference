std::flat_set<Key,Compare,KeyContainer>::erase

   From cppreference.com
   < cpp | container | flat set


   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Containers library
   Sequence
   array
   (C++11)
   vector
   vector<bool>
   deque
   forward_list
   (C++11)
   list
   Associative
   set
   multiset
   map
   multimap
   Unordered associative
   unordered_set
   (C++11)
   unordered_multiset
   (C++11)
   unordered_map
   (C++11)
   unordered_multimap
   (C++11)
   Adaptors
   stack
   queue
   priority_queue
   flat_set
   (C++23)
   flat_multiset
   (C++23)
   flat_map
   (C++23)
   flat_multimap
   (C++23)
   Views
   span
   (C++20)
   mdspan
   (C++23)
   Iterator invalidation
   Member function table
   Non-member function table

   std::flat_set
   Member types
   Member functions
   flat_set::flat_set
   flat_set::operator=
   Iterators
   flat_set::beginflat_set::cbegin
   flat_set::endflat_set::cend
   flat_set::rbeginflat_set::crbegin
   flat_set::rendflat_set::crend
   Capacity
   flat_set::size
   flat_set::max_size
   flat_set::empty
   Modifiers
   flat_set::clear
   flat_set::insert
   flat_set::insert_range

   flat_set::emplace
   flat_set::emplace_hint
   flat_set::erase
   flat_set::swap
   flat_set::extract
   flat_set::replace
   Lookup
   flat_set::count
   flat_set::find
   flat_set::contains
   flat_set::equal_range
   flat_set::lower_bound
   flat_set::upper_bound
   Observers
   flat_set::key_comp
   flat_set::value_comp
   Non-member functions
   operator==operator<=>
   (C++23)(C++23)
   swap(std::flat_set)
   (C++23)
   erase_if(std::flat_set)
   (C++23)
   Helper classes
   uses_allocator<std::flat_set>
   (C++23)
   Tags
   sorted_unique
   (C++23)
   sorted_unique_t
   (C++23)
   Deduction guides

   iterator erase( iterator position );
   (1)                                                         (since C++23)
   iterator erase( const_iterator pos );
   (2)                                                         (since C++23)
   iterator erase( const_iterator first, const_iterator last );
   (3)                                                         (since C++23)
   size_type erase( const Key& key );
   (4)                                                         (since C++23)
   template< class K >
   size_type erase( K&& x );
   (5)                                                         (since C++23)

   Removes specified elements from the container.
   1,2) Removes the element at pos.
   3) Removes the elements in the range [first, last), which must be a
   valid range in *this.
   4) Removes the element (if one exists) with the key equivalent to key.
   5) Removes all elements with key that compares equivalent to the value
   x. This overload participates in overload resolution only if the
   qualified-id Compare::is_transparent is valid and denotes a type, and
   neither iterator nor const_iterator is implicitly convertible from K.
   It allows calling this function without constructing an instance of
   Key.
   Information on iterator invalidation is copied from here

   The iterator pos must be valid and dereferenceable. Thus the end()
   iterator (which is valid, but is not dereferenceable) cannot be used as
   a value for pos.

Parameters

   pos - iterator to the element to remove
   first, last - range of elements to remove
   key - key value of the elements to remove
   x - a value of any type that can be transparently compared with a key
   denoting the elements to remove

Return value

   1-3) Iterator following the last removed element.
   4) Number of elements removed (0 or 1).
   5) Number of elements removed.

Exceptions

   1-3) Throws nothing.
   4,5) Any exceptions thrown by the Compare object.

Complexity

   Depends on underlying container. Typically linear.
   This section is incomplete
   Reason: revision required

Example

   Run this code
#include <flat_set>
#include <iostream>

int main()
{
    std::flat_set<int> c = {1, 2, 3, 4, 1, 2, 3, 4};

    auto print = [&c]
    {
        std::cout << "c = { ";
        for (int n : c)
            std::cout << n << ' ';
        std::cout << "}\n";
    };
    print();

    std::cout << "Erase all odd numbers:\n";
    for (auto it = c.begin(); it != c.end();)
    {
        if (*it % 2 != 0)
            it = c.erase(it);
        else
            ++it;
    }
    print();

    std::cout << "Erase 1, erased count: " << c.erase(1) << '\n';
    std::cout << "Erase 2, erased count: " << c.erase(2) << '\n';
    std::cout << "Erase 2, erased count: " << c.erase(2) << '\n';
    print();
}

See also

   clear
   clears the contents
   (public member function)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/container/flat_s
   et/erase&oldid=169187"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 25 January 2024, at 12:16.
     * This page has been accessed 787 times.
