std::basic_filebuf<CharT,Traits>::setbuf

   From cppreference.com
   < cpp | io | basic filebuf

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Input/output library
   I/O manipulators
   Print functions (C++23)
   C-style I/O
   Buffers
   basic_streambuf
   basic_filebuf
   basic_stringbuf
   basic_spanbuf
   (C++23)
   strstreambuf
   (C++98/26*)
   basic_syncbuf
   (C++20)
   Streams
   Abstractions
   ios_base
   basic_ios
   basic_istream
   basic_ostream
   basic_iostream
   File I/O
   basic_ifstream
   basic_ofstream
   basic_fstream
   String I/O
   basic_istringstream
   basic_ostringstream
   basic_stringstream
   Array I/O
   basic_ispanstream
   (C++23)
   basic_ospanstream
   (C++23)
   basic_spanstream
   (C++23)
   istrstream
   (C++98/26*)
   ostrstream
   (C++98/26*)
   strstream
   (C++98/26*)
   Synchronized Output
   basic_osyncstream
   (C++20)
   Types
   streamoff
   streamsize
   fpos
   Error category interface
   iostream_category
   (C++11)
   io_errc
   (C++11)

   std::basic_filebuf
   Public member functions
   basic_filebuf::basic_filebuf
   basic_filebuf::~basic_filebuf
   basic_filebuf::operator=
   (C++11)
   basic_filebuf::swap
   (C++11)
   basic_filebuf::native_handle
   (C++26)
   basic_filebuf::is_open
   basic_filebuf::open
   basic_filebuf::close
   Protected member functions
   basic_filebuf::showmanyc
   basic_filebuf::underflow
   basic_filebuf::uflow
   basic_filebuf::pbackfail
   basic_filebuf::overflow
   basic_filebuf::setbuf
   basic_filebuf::seekoff
   basic_filebuf::seekpos
   basic_filebuf::sync
   basic_filebuf::imbue
   Non-member functions
   swap(std::basic_filebuf)
   (C++11)

   protected:
   virtual std::basic_streambuf<CharT, Traits>* setbuf( char_type* s,
   std::streamsize n )

   If s is a null pointer and n is zero, the filebuf becomes unbuffered
   for output, meaning pbase() and pptr() are null and any output is
   immediately sent to file.

   Otherwise, a call to setbuf() replaces the internal buffer (the
   controlled character sequence) with the user-supplied character array
   whose first element is pointed to by s and allows this
   std::basic_filebuf object to use up to n bytes in that array for
   buffering.

   This function is protected virtual, it may only be called through
   pubsetbuf() or from member functions of a user-defined class derived
   from std::basic_filebuf.

Parameters

   s - pointer to the first CharT in the user-provided buffer or null
   n - the number of CharT elements in the user-provided buffer or zero

Return value

   this

Notes

   The conditions when this function may be used and the way in which the
   provided buffer is used is implementation-defined.
     * GCC 4.6 libstdc++

          setbuf() may only be called when the std::basic_filebuf is not
          associated with a file (has no effect otherwise). With a
          user-provided buffer, reading from file reads n-1 bytes at a
          time.

     * Clang++3.0 libc++

          setbuf() may be called after opening the file, but before any
          I/O (may crash otherwise). With a user-provided buffer, reading
          from file reads largest multiples of 4096 that fit in the
          buffer.

     * Visual Studio 2010

          setbuf() may be called at any time, even after some I/O took
          place. Current contents of the buffer, if any, are lost.

   The standard does not define any behavior for this function except that
   setbuf(0, 0) called before any I/O has taken place is required to set
   unbuffered output.

Example

   Provides a 10k buffer for reading. On linux, the strace utility may be
   used to observe the actual number of bytes read.
   Run this code
#include <fstream>
#include <iostream>
#include <string>

int main()
{
    int cnt = 0;
    std::ifstream file;
    char buf[10241];

    file.rdbuf()->pubsetbuf(buf, sizeof buf);
    file.open("/usr/share/dict/words");

    for (std::string line; getline(file, line);)
        ++cnt;
    std::cout << cnt << '\n';
}

   Possible output:
356010

Defect reports

   The following behavior-changing defect reports were applied
   retroactively to previously published C++ standards.
   DR Applied to Behavior as published Correct behavior
   LWG 173 C++98 the type of n was misspecified as int corrected to
   std::streamsize

See also

   pubsetbuf
   invokes setbuf()
   (public member function of std::basic_streambuf<CharT,Traits>)
   setvbuf
   sets the buffer and its size for a file stream
   (function)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/io/basic_filebuf
   /setbuf&oldid=159795"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 29 September 2023, at 01:25.
     * This page has been accessed 26,201 times.
