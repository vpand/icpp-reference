std::basic_stringbuf<CharT,Traits,Allocator>::setbuf

   From cppreference.com
   < cpp | io | basic stringbuf

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Input/output library
   I/O manipulators
   Print functions (C++23)
   C-style I/O
   Buffers
   basic_streambuf
   basic_filebuf
   basic_stringbuf
   basic_spanbuf
   (C++23)
   strstreambuf
   (C++98/26*)
   basic_syncbuf
   (C++20)
   Streams
   Abstractions
   ios_base
   basic_ios
   basic_istream
   basic_ostream
   basic_iostream
   File I/O
   basic_ifstream
   basic_ofstream
   basic_fstream
   String I/O
   basic_istringstream
   basic_ostringstream
   basic_stringstream
   Array I/O
   basic_ispanstream
   (C++23)
   basic_ospanstream
   (C++23)
   basic_spanstream
   (C++23)
   istrstream
   (C++98/26*)
   ostrstream
   (C++98/26*)
   strstream
   (C++98/26*)
   Synchronized Output
   basic_osyncstream
   (C++20)
   Types
   streamoff
   streamsize
   fpos
   Error category interface
   iostream_category
   (C++11)
   io_errc
   (C++11)

   std::basic_stringbuf
   Public member functions
   basic_stringbuf::basic_stringbuf
   basic_stringbuf::operator=
   (C++11)
   basic_stringbuf::swap
   (C++11)
   basic_stringbuf::str
   basic_stringbuf::get_allocator
   (C++20)
   basic_stringbuf::view
   (C++20)
   Protected member functions
   basic_stringbuf::underflow
   basic_stringbuf::pbackfail
   basic_stringbuf::overflow
   basic_stringbuf::setbuf
   basic_stringbuf::seekoff
   basic_stringbuf::seekpos
   Non-member functions
   swap(std::basic_stringbuf)
   (C++11)
   Exposition-only member functions
   basic_stringbuf::init_buf_ptrs

   protected:
   virtual std::basic_streambuf<CharT, Traits>* setbuf( char_type* s,
   std::streamsize n )

   If s is a null pointer and n is zero, this function has no effect.

   Otherwise, the effect is implementation-defined: some implementations
   do nothing, while some implementations clear the std::string member
   currently used as the buffer and begin using the user-supplied
   character array of size n, whose first element is pointed to by s, as
   the buffer and the input/output character sequence.

   This function is protected virtual, it may only be called through
   pubsetbuf() or from member functions of a user-defined class derived
   from std::basic_stringbuf.

Parameters

   s - pointer to the first CharT in the user-provided buffer or null
   n - the number of CharT elements in the user-provided buffer or zero

Return value

   this

Notes

   The deprecated stream buffer std::strstreambuf or the boost.IOStreams
   device boost::basic_array may be used to implement I/O buffering over a
   user-provided char array in portable manner.

Example

   Test for the stringstream's setbuf functionality.
   Run this code
#include <iostream>
#include <sstream>

int main()
{
    std::ostringstream ss;
    char c[1024] = {};
    ss.rdbuf()->pubsetbuf(c, 1024);
    ss << 3.14 << '\n';
    std::cout << c << '\n';
}

   Output:
3.14 (on GNU g++/libstdc++ and SunPro C++/roguewave)
<nothing> (on MS Visual Studio 2010, SunPro C++/stlport4, CLang++/libc++)

See also

   pubsetbuf
   invokes setbuf()
   (public member function of std::basic_streambuf<CharT,Traits>)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/io/basic_stringb
   uf/setbuf&oldid=158807"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 11 September 2023, at 12:25.
     * This page has been accessed 22,509 times.
