std::unreachable_sentinel_t, std::unreachable_sentinel

   From cppreference.com
   < cpp | iterator

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Iterator library
   Iterator concepts
   indirectly_readable
   (C++20)
   indirectly_writable
   (C++20)
   weakly_incrementable
   (C++20)
   incrementable
   (C++20)
   input_or_output_iterator
   (C++20)
   sentinel_for
   (C++20)
   sized_sentinel_for
   (C++20)
   input_iterator
   (C++20)
   output_iterator
   (C++20)
   forward_iterator
   (C++20)
   bidirectional_iterator
   (C++20)
   random_access_iterator
   (C++20)
   contiguous_iterator
   (C++20)
   Iterator primitives
   input_iterator_tagoutput_iterator_tagforward_iterator_tagbidirectional_
   iterator_tagrandom_access_iterator_tagcontiguous_iterator_tag
   (C++20)
   iter_value_titer_difference_titer_reference_titer_const_reference_titer
   _rvalue_reference_titer_common_reference_t
   (C++20)(C++20)(C++20)(C++23)(C++20)(C++20)
   iterator
   (deprecated in C++17)
   iterator_traits
   incrementable_traits
   (C++20)
   indirectly_readable_traits
   (C++20)
   Algorithm concepts and utilities
   Indirect callable concepts
   indirectly_unary_invocableindirectly_regular_unary_invocable
   (C++20)(C++20)
   indirect_unary_predicate
   (C++20)
   indirect_binary_predicate
   (C++20)
   indirect_equivalence_relation
   (C++20)
   indirect_strict_weak_order
   (C++20)
   Common algorithm requirements
   indirectly_movable
   (C++20)
   indirectly_movable_storable
   (C++20)
   indirectly_copyable
   (C++20)
   indirectly_copyable_storable
   (C++20)
   indirectly_swappable
   (C++20)
   indirectly_comparable
   (C++20)
   permutable
   (C++20)
   mergeable
   (C++20)
   sortable
   (C++20)
   Utilities
   indirect_result_t
   (C++20)
   projected
   (C++20)
   projected_value_t
   (C++26)
   Iterator adaptors
   reverse_iterator
   make_reverse_iterator
   (C++14)
   move_iterator
   (C++11)
   make_move_iterator
   (C++11)
   default_sentinel_tdefault_sentinel
   (C++20)(C++20)
   unreachable_sentinel_tunreachable_sentinel
   (C++20)(C++20)
   front_insert_iterator
   back_insert_iterator
   inserter
   insert_iterator
   front_inserter
   back_inserter
   move_sentinel
   (C++20)
   common_iterator
   (C++20)
   counted_iterator
   (C++20)
   basic_const_iterator
   (C++23)
   const_iterator
   (C++23)
   const_sentinel
   (C++23)
   make_const_iterator
   (C++23)
   make_const_sentinel
   (C++23)
   Stream iterators
   istream_iterator

   ostream_iterator
   istreambuf_iterator
   ostreambuf_iterator
   Iterator customization points
   ranges::iter_move
   (C++20)
   ranges::iter_swap
   (C++20)
   Iterator operations
   advance
   distance
   prev
   (C++11)
   next
   (C++11)
   ranges::advance
   (C++20)
   ranges::distance
   (C++20)
   ranges::prev
   (C++20)
   ranges::next
   (C++20)
   Range access
   begincbegin
   (C++11)(C++14)
   rbegincrbegin
   (C++14)(C++14)
   endcend
   (C++11)(C++14)
   rendcrend
   (C++14)(C++14)
   sizessize
   (C++17)(C++20)
   empty
   (C++17)
   data
   (C++17)

   Defined in header <iterator>
   struct unreachable_sentinel_t;
   (1)                                                            (since C++20)
   inline constexpr unreachable_sentinel_t unreachable_sentinel{};
   (2)                                                            (since C++20)
   1) unreachable_sentinel_t is an empty class type that can be used to
   denote the "upper bound" of an unbounded interval.
   2) unreachable_sentinel is a constant of type unreachable_sentinel_t.

Non-member functions

   operator==
   (C++20)
   compares an unreachable_sentinel_t with a value of any
   weakly_incrementable type
   (function template)

operator==(std::unreachable_sentinel_t)

   template<std::weakly_incrementable I>

   friend constexpr bool operator==( unreachable_sentinel_t, const I& )
   noexcept
   { return false; }
                                        (since C++20)

   unreachable_sentinel_t can be compared with any weakly_incrementable
   type and the result is always false.

   This function template is not visible to ordinary unqualified or
   qualified lookup, and can only be found by argument-dependent lookup
   when std::unreachable_sentinel_t is an associated class of the
   arguments.

Example

   Run this code
#include <algorithm>
#include <cstddef>
#include <iostream>
#include <iterator>

template<class CharT>
constexpr std::size_t strlen(const CharT *s)
{
    return std::ranges::find(s, std::unreachable_sentinel, CharT{}) - s;
}

template<class CharT>
constexpr std::size_t pos(const CharT *haystack, const CharT *needle)
{
    // search(begin, unreachable_sentinel) is usually more efficient than
    // search(begin, end) due to one less comparison per cycle.
    // But "needle" MUST BE in the "haystack", otherwise the call is UB,
    // which is a compile-time error in constexpr context.
    return std::ranges::search(
               haystack, std::unreachable_sentinel,
               needle, needle + strlen(needle)
           ).begin() - haystack;
}

int main()
{
    static_assert(strlen("The quick brown fox jumps over the lazy dog.") == 44);
    static_assert(pos("const short int", "short") == 6);
//  static_assert(pos("long int", "float")); // compile-time error
}

See also

   ranges::iota_viewviews::iota
   (C++20)
   a view consisting of a sequence generated by repeatedly incrementing an
   initial value
   (class template) (customization point object)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/unreach
   able_sentinel_t&oldid=159974"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 2 October 2023, at 00:48.
     * This page has been accessed 16,964 times.
