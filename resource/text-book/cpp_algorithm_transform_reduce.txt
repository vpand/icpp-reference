std::transform_reduce

   From cppreference.com
   < cpp | algorithm

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Algorithm library
   Constrained algorithms and algorithms on ranges (C++20)
   Constrained algorithms, e.g. ranges::copy, ranges::sort, ...
   Execution policies (C++17)
   is_execution_policy
   (C++17)
   execution::seqexecution::parexecution::par_unseqexecution::unseq
   (C++17)    (C++17)(C++17)(C++20)
   execution::sequenced_policyexecution::parallel_policyexecution::paralle
   l_unsequenced_policyexecution::parallel_unsequenced
   (C++17)(C++17)(C++17)(C++20)
   Non-modifying sequence operations
   Batch operations
   for_each
   for_each_n
   (C++17)
   Search operations
   all_ofany_ofnone_of
   (C++11)                (C++11)(C++11)
   countcount_if
   mismatch
   equal
   findfind_iffind_if_not
   (C++11)
   find_end
   find_first_of
   adjacent_find
   search
   search_n
   Modifying sequence operations
   Copy operations
   copycopy_if
   (C++11)
   copy_backward
   copy_n
   (C++11)
   move
   (C++11)
   move_backward
   (C++11)
   Swap operations
   swap
   iter_swap
   swap_ranges
   Transformation operations
   replacereplace_if
   transform
   replace_copyreplace_copy_if
   Generation operations
   fill
   fill_n
   generate
   generate_n
   Removing operations
   removeremove_if
   unique
   remove_copyremove_copy_if
   unique_copy
   Order-changing operations
   reverse
   reverse_copy
   rotate
   rotate_copy
   random_shuffleshuffle
   (until C++17)(C++11)
   shift_leftshift_right
   (C++20)(C++20)
   Sampling operations
   sample
   (C++17)
   Sorting and related operations
   Partitioning operations
   partition
   partition_copy
   (C++11)
   stable_partition
   is_partitioned
   (C++11)
   partition_point
   (C++11)
   Sorting operations
   sort
   stable_sort
   partial_sort
   partial_sort_copy
   is_sorted
   (C++11)
   is_sorted_until
   (C++11)
   nth_element
   Binary search operations
   (on partitioned ranges)
   lower_bound
   upper_bound
   equal_range
   binary_search
   Set operations (on sorted ranges)
   includes
   set_union
   set_intersection
   set_difference
   set_symmetric_difference
   Merge operations (on sorted ranges)
   merge
   inplace_merge
   Heap operations
   push_heap
   pop_heap
   make_heap
   sort_heap
   is_heap
   (C++11)
   is_heap_until
   (C++11)
   Minimum/maximum operations
   max
   min
   minmax
   (C++11)
   clamp
   (C++17)
   max_element
   min_element
   minmax_element
   (C++11)
   Lexicographical comparison operations
   lexicographical_compare
   lexicographical_compare_three_way
   (C++20)
   Permutation operations
   next_permutation
   prev_permutation
   is_permutation
   (C++11)
   C library
   qsort
   bsearch
   Numeric operations
   iota
   (C++11)
   inner_product
   adjacent_difference

   accumulate
   reduce
   (C++17)
   transform_reduce
   (C++17)
   partial_sum
   inclusive_scan
   (C++17)
   exclusive_scan
   (C++17)
   transform_inclusive_scan
   (C++17)
   transform_exclusive_scan
   (C++17)
   Operations on uninitialized memory
   uninitialized_copy
   uninitialized_move
   (C++17)
   uninitialized_fill
   uninitialized_copy_n
   (C++11)
   uninitialized_move_n
   (C++17)
   uninitialized_fill_n
   destroy
   (C++17)
   destroy_n
   (C++17)
   destroy_at
   (C++17)
   construct_at
   (C++20)
   uninitialized_default_construct
   (C++17)
   uninitialized_value_construct
   (C++17)
   uninitialized_default_construct_n
   (C++17)
   uninitialized_value_construct_n
   (C++17)

   Numerics library
   Common mathematical functions
   Mathematical special functions (C++17)
   Mathematical constants (C++20)
   Basic linear algebra algorithms (C++26)
   Floating-point environment (C++11)
   Complex numbers
   Numeric arrays
   Pseudo-random number generation
   Factor operations
   gcd
   (C++17)
   lcm
   (C++17)
   Interpolations
   midpoint
   (C++20)
   lerp
   (C++20)
   Saturation arithmetic
   add_sat
   (C++26)
   sub_sat
   (C++26)
   saturate_cast
   (C++26)
   mul_sat
   (C++26)
   div_sat
   (C++26)
   Generic numeric operations
   iota
   (C++11)
   ranges::iota
   (C++23)
   accumulate
   inner_product
   adjacent_difference
   partial_sum
   reduce
   (C++17)
   transform_reduce
   (C++17)
   inclusive_scan
   (C++17)
   exclusive_scan
   (C++17)
   transform_inclusive_scan
   (C++17)
   transform_exclusive_scan
   (C++17)
   Bit operations
   has_single_bit
   (C++20)
   bit_cast
   (C++20)
   bit_ceil
   (C++20)
   bit_floor
   (C++20)
   bit_width
   (C++20)
   rotl
   (C++20)
   rotr
   (C++20)
   popcount
   (C++20)
   countl_zero
   (C++20)
   countl_one
   (C++20)
   countr_zero
   (C++20)
   countr_one
   (C++20)
   byteswap
   (C++23)
   endian
   (C++20)

   Defined in header <numeric>
   template< class InputIt1, class InputIt2, class T >

   T transform_reduce( InputIt1 first1, InputIt1 last1,
                       InputIt2 first2, T init );
   (1) (since C++17)
   (constexpr since C++20)
   template< class ExecutionPolicy,

             class ForwardIt1, class ForwardIt2, class T >
   T transform_reduce( ExecutionPolicy&& policy,
                       ForwardIt1 first1, ForwardIt1 last1,
                       ForwardIt2 first2, T init );
   (2) (since C++17)
   template< class InputIt1, class InputIt2, class T,

             class BinaryOp1, class BinaryOp2 >
   T transform_reduce( InputIt1 first1, InputIt1 last1,
                       InputIt2 first2, T init,
                       BinaryOp1 reduce, BinaryOp2 transform );
   (3) (since C++17)
   (constexpr since C++20)
   template< class ExecutionPolicy,

             class ForwardIt1, class ForwardIt2, class T,
             class BinaryOp1, class BinaryOp2 >
   T transform_reduce( ExecutionPolicy&& policy,
                       ForwardIt1 first1, ForwardIt1 last1,
                       ForwardIt2 first2, T init,
                       BinaryOp1 reduce, BinaryOp2 transform );
   (4) (since C++17)
   template< class InputIt, class T,

             class BinaryOp, class UnaryOp >
   T transform_reduce( InputIt first, InputIt last, T init,
                       BinaryOp reduce, UnaryOp transform );
   (5) (since C++17)
   (constexpr since C++20)
   template< class ExecutionPolicy,

             class ForwardIt, class T,
             class BinaryOp, class UnaryOp >
   T transform_reduce( ExecutionPolicy&& policy,
                       ForwardIt first, ForwardIt last, T init,
                       BinaryOp reduce, UnaryOp transform );
   (6) (since C++17)
   1) Equivalent to transform_reduce(first1, last1, first2, init,
                    std::plus<>(), std::multiplies<>()), effectively
   parallelized version of the default std::inner_product.
   3) Applies transform to each pair of elements from the ranges
   [first1, last1) and the range of std::distance(first1, last1) elements
   starting from first2 and reduces the results (possibly permuted and
   aggregated in unspecified manner) along with the initial value init
   over reduce.
   The result is non-deterministic if the reduce is not associative or not
   commutative (such as floating-point addition).
   If any of the following values is not convertible to T, the program is
   ill-formed:
     * reduce(init, init)
     * reduce(init, transform(*first1, *first2))
     * reduce(transform(*first1, *first2), init)
     * reduce(transform(*first1, *first2), transform(*first1, *first2))

   Given last2 as the std::distance(first1, last1)
   th next iterator of first2, if any of the following conditions is
   satisfied, the behavior is undefined:
     * T is not MoveConstructible.
     * transform or reduce modifies any element of [first1, last1) or
       [first2, last2).
     * transform or reduce invalidates any iterator or subrange of
       [first1, last1] or [first2, last2].

   5) Applies transform to each element in the range [first, last) and
   reduces the results (possibly permuted and aggregated in unspecified
   manner) along with the initial value init over reduce.
   The result is non-deterministic if the reduce is not associative or not
   commutative (such as floating-point addition).
   If any of the following values is not convertible to T, the program is
   ill-formed:
     * reduce(init, init)
     * reduce(init, transform(*first))
     * reduce(transform(*first), init)
     * reduce(transform(*first), transform(*first))

   If any of the following conditions is satisfied, the behavior is
   undefined:
     * T is not MoveConstructible.
     * transform or reduce modifies any element of [first, last).
     * transform or reduce invalidates any iterator or subrange of
       [first, last].

   2,4,6) Same as (1,3,5), but executed according to policy.
   These overloads participate in overload resolution only if

   std::is_execution_policy_v<std::decay_t<ExecutionPolicy>> is true.
   (until C++20)

   std::is_execution_policy_v<std::remove_cvref_t<ExecutionPolicy>> is
   true.
   (since C++20)

Parameters

   first1, last1 - the range of elements to be taken as the left operand
   of transform
   first2 - the start of range of elements to be taken as the right
   operand of transform
   first, last - the range of elements to be taken as the operand of
   transform
   init - the initial value of the generalized sum
   policy - the execution policy to use. See execution policy for details.
   reduce - binary FunctionObject that will be applied in unspecified
   order to the results of transform, the results of other reduce and
   init.
   transform - unary or binary FunctionObject that will be applied to each
   element of the input range(s). The return type must be acceptable as
   input to reduce.
   Type requirements
   -
   InputIt1, InputIt2, InputIt must meet the requirements of
   LegacyInputIterator.
   -
   ForwardIt1, ForwardIt2, ForwardIt must meet the requirements of
   LegacyForwardIterator.

Return value

   1,2) The generalized sum of init and values over std::plus<>(), where
   values are the values transformed by std::multiplies<>(), each value is
   transformed from a pair of elements from the two input ranges.
   3,4) The generalized sum of init and values over reduce, where values
   are the values transformed by transform, each value is transformed from
   a pair of elements from the two input ranges.
   5,6) The generalized sum of init and values over reduce, where values
   are the values transformed by transform, each value is transformed from
   an element from the input range.

   The generalized sum of a group of elements over an binary operation
   binary_op is defined as follows:
     * If the group only has one element, the sum is the value of the
       element.
     * Otherwise, performs the following operations in order:

    1. Takes any two elements elem1 and elem2 from the group.
    2. Calculates binary_op(elem1, elem2) and puts the result back to the
       group.
    3. Repeats steps 1 and 2 until there is only one element in the group.

Complexity

   Given \(\scriptsize N\)N as std::distance(first1, last1) (or
   std::distance(first, last) for overloads (5,6)):
   1,2) \(\scriptsize O(N)\)O(N) applications of std::plus<>() and
   std::multiplies<>() respectively.
   3-6) \(\scriptsize O(N)\)O(N) applications of reduce and transform
   respectively.

Exceptions

   The overloads with a template parameter named ExecutionPolicy report
   errors as follows:
     * If execution of a function invoked as part of the algorithm throws
       an exception and ExecutionPolicy is one of the standard policies,
       std::terminate is called. For any other ExecutionPolicy, the
       behavior is implementation-defined.
     * If the algorithm fails to allocate memory, std::bad_alloc is
       thrown.

Notes

   transform is never applied to init.

   If first == last or first1 == last1, init is returned, unmodified.

Example

   transform_reduce can be used to parallelize std::inner_product. Some
   systems may need additional support to get advantages of parallel
   execution. E.g., on GNU/Linux, the Intel TBB be installed and -ltbb
   option be provided to gcc/clang compiler.
   Run this code
#if PARALLEL
#include <execution>
#define PAR std::execution::par,
#else
#define PAR
#endif

#include <algorithm>
#include <functional>
#include <iostream>
#include <iterator>
#include <locale>
#include <numeric>
#include <vector>

// to parallelize non-associate accumulative operation, you'd better choose
// transform_reduce instead of reduce; e.g., a + b * b != b + a * a
void print_sum_squared(long const num)
{
    std::cout.imbue(std::locale{"en_US.UTF8"});
    std::cout << "num = " << num << '\n';

    // create an immutable vector filled with pattern: 1,2,3,4, 1,2,3,4 ...
    const std::vector<long> v{[n = num * 4] {
        std::vector<long> v;
        v.reserve(n);
        std::generate_n(std::back_inserter(v), n,
            [i = 0]() mutable { return 1 + i++ % 4; });
        return v;
    }()};

    auto squared_sum = [](auto sum, auto val) { return sum + val * val; };

    auto sum1 = std::accumulate(v.cbegin(), v.cend(), 0L, squared_sum);
    std::cout << "accumulate(): " << sum1 << '\n';

    auto sum2 = std::reduce(PAR v.cbegin(), v.cend(), 0L, squared_sum);
    std::cout << "reduce(): " << sum2 << '\n';

    auto sum3 = std::transform_reduce(PAR v.cbegin(), v.cend(), 0L, std::plus{},
                                      [](auto val) { return val * val; });
    std::cout << "transform_reduce(): " << sum3 << "\n\n";
}

int main()
{
    print_sum_squared(1);
    print_sum_squared(1'000);
    print_sum_squared(1'000'000);
}

   Possible output:
num = 1
accumulate(): 30
reduce(): 30
transform_reduce(): 30

num = 1,000
accumulate(): 30,000
reduce(): -7,025,681,278,312,630,348
transform_reduce(): 30,000

num = 1,000,000
accumulate(): 30,000,000
reduce(): -5,314,886,882,370,003,032
transform_reduce(): 30,000,000

// Compile-options for parallel execution on POSIX:
// g++ -O2 -std=c++17 -Wall -Wextra -pedantic -DPARALLEL ./example.cpp -ltbb -o
tr; ./tr

See also

   accumulate
   sums up or folds a range of elements
   (function template)
   transform
   applies a function to a range of elements, storing results in a
   destination range
   (function template)
   reduce
   (C++17)
   similar to std::accumulate, except out of order
   (function template)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/algorithm/transf
   orm_reduce&oldid=171012"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 18 April 2024, at 01:17.
     * This page has been accessed 183,421 times.
