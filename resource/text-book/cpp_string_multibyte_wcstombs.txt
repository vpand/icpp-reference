std::wcstombs

   From cppreference.com
   < cpp | string | multibyte

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Strings library
   Null-terminated strings
   Byte strings
   Multibyte strings
   Wide strings
   Classes
   basic_string
   basic_string_view
   (C++17)
   char_traits

   Null-terminated multibyte strings
   Wide/multibyte conversions
   mbsinit
   mbtowc
   mbstowcs
   btowc
   mbrtowc
   mbsrtowcs
   mbrtoc8
   (C++20)
   mbrtoc16
   (C++11)
   mbrtoc32
   (C++11)
   mblen
   wctomb
   wcstombs
   wctob
   wcrtomb
   wcsrtombs
   c8rtomb
   (C++20)
   c16rtomb
   (C++11)
   c32rtomb
   (C++11)
   mbrlen
   Types
   mbstate_t

   Defined in header <cstdlib>
   std::size_t wcstombs( char* dst, const wchar_t* src, std::size_t len );

   Converts a sequence of wide characters from the array whose first
   element is pointed to by src to its narrow multibyte representation
   that begins in the initial shift state. Converted characters are stored
   in the successive elements of the char array pointed to by dst. No more
   than len bytes are written to the destination array.

   Each character is converted as if by a call to std::wctomb, except that
   the wctomb's conversion state is unaffected. The conversion stops if:
     * The null character was converted and stored.
     * A wchar_t was found that does not correspond to a valid character
       in the current C locale.
     * The next multibyte character to be stored would exceed len.

Notes

   In most implementations, this function updates a global static object
   of type std::mbstate_t as it processes through the string, and cannot
   be called simultaneously by two threads, std::wcsrtombs should be used
   in such cases.

   POSIX specifies a common extension: if dst is a null pointer, this
   function returns the number of bytes that would be written to dst, if
   converted. Similar behavior is standard for std::wcsrtombs.

Parameters

   dst - pointer to narrow character array where the multibyte character
   will be stored
   src - pointer to the first element of a null-terminated wide string to
   convert
   len - number of byte available in the array pointed to by dst

Return value

   On success, returns the number of bytes (including any shift sequences,
   but excluding the terminating '\0') written to the character array
   whose first element is pointed to by dst.

   On conversion error (if invalid wide character was encountered),
   returns static_cast<std::size_t>(-1).

Example

   Run this code
#include <clocale>
#include <cstdlib>
#include <iostream>

int main()
{
    std::setlocale(LC_ALL, "en_US.utf8");
    // UTF-8 narrow multibyte encoding
    const wchar_t* wstr = L"z\u00df\u6c34\U0001d10b"; // or L"zߴ"
    char mbstr[11];
    std::wcstombs(mbstr, wstr, 11);
    std::cout << "multibyte string: " << mbstr << '\n';
}

   Output:
multibyte string: zߴ

See also

   wcsrtombs
   converts a wide string to narrow multibyte character string, given
   state
   (function)
   mbstowcs
   converts a narrow multibyte character string to wide string
   (function)
   do_out
   [virtual]
   converts a string from InternT to ExternT, such as when writing to file
   (virtual protected member function of
   std::codecvt<InternT,ExternT,StateT>)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/string/multibyte
   /wcstombs&oldid=160944"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 19 October 2023, at 11:04.
     * This page has been accessed 85,644 times.
