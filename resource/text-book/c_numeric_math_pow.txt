pow, powf, powl

   From cppreference.com
   < c | numeric | math

   C
   Language
   Headers
   Type support
   Program utilities
   Variadic function support
   Error handling
   Dynamic memory management
   Strings library
   Algorithms
   Numerics
   Date and time utilities
   Input/output support
   Localization support
   Concurrency support (C11)
   Technical Specifications
   Symbol index

   Numerics
   Common mathematical functions
   Floating-point environment (C99)
   Pseudo-random number generation
   Complex number arithmetic (C99)
   Type-generic math (C99)

   Common mathematical functions
   Types
   div_tldiv_tlldiv_timaxdiv_t
   (C99)(C99)
   float_tdouble_t
   (C99)(C99)
   _Decimal32_t_Decimal64_t
   (C23)(C23)
   Functions
   Basic operations
   abslabsllabsimaxabs
   (C99)(C99)
   fabs
   divldivlldivimaxdiv
   (C99)(C99)
   fmod
   remainder
   (C99)
   remquo
   (C99)
   fma
   (C99)
   fdim
   (C99)
   nannanfnanlnandN
   (C99)(C99)(C99)(C23)
   Maximum/minimum operations
   fmax
   (C99)
   fmaximum
   (C23)
   fmaximum_mag
   (C23)
   fmaximum_num
   (C23)
   fmaximum_mag_num
   (C23)
   fmin
   (C99)
   fminimum
   (C23)
   fminimum_mag
   (C23)
   fminimum_num
   (C23)
   fminimum_mag_num
   (C23)
   Exponential functions
   exp
   exp10
   (C23)
   exp2
   (C99)
   expm1
   (C99)
   exp10m1
   (C23)
   exp2m1
   (C23)
   log
   log10
   log2
   (C99)
   log1plogp1
   (C99)(C23)
   log10p1
   (C23)
   log2p1
   (C23)
   Power functions
   sqrt
   cbrt
   (C99)
   rootn
   (C23)
   rsqrt
   (C23)
   hypot
   (C99)
   compound
   (C23)
   pow
   pown
   (C23)
   powr
   (C23)
   Trigonometric and hyperbolic functions
   sin
   cos
   tan
   asin
   acos
   atan
   atan2
   sinpi
   (C23)
   cospi
   (C23)
   tanpi
   (C23)
   asinpi
   (C23)
   acospi
   (C23)
   atanpi
   (C23)
   atan2pi
   (C23)
   sinh
   cosh
   tanh
   asinh
   (C99)
   acosh
   (C99)
   atanh
   (C99)
   Error and gamma functions
   erf
   (C99)
   erfc
   (C99)
   lgamma
   (C99)
   tgamma
   (C99)
   Nearest integer floating-point operations
   ceil
   floor
   roundlroundllround
   (C99)(C99)(C99)
   roundeven
   (C23)
   trunc
   (C99)
   nearbyint
   (C99)
   rintlrintllrint
   (C99)(C99)(C99)
   fromfpfromfpxufromfpufromfpx
   (C23)(C23)(C23)(C23)
   Floating-point manipulation functions
   ldexp
   frexp
   scalbnscalbln
   (C99)(C99)
   ilogbllogb
   (C99)(C23)
   logb
   (C99)
   modf
   nextafternexttoward
   (C99)(C99)
   nextupnextdown
   (C23)(C23)
   copysign
   (C99)
   canonicalize
   (C23)
   Narrowing operations
   fadd
   (C23)
   fsub
   (C23)
   fmul
   (C23)
   fdiv
   (C23)
   ffma
   (C23)
   fsqrt
   (C23)
   Quantum and quantum exponent functions
   quantizedN
   (C23)
   samequantumdN
   (C23)
   quantumdN
   (C23)
   llquantexpdN
   (C23)
   Decimal re-encoding functions
   encodedecdN
   (C23)
   decodedecdN
   (C23)
   encodebindN
   (C23)
   decodebindN
   (C23)
   Total order and payload functions
   totalorder
   (C23)
   getpayload
   (C23)
   setpayload
   (C23)
   setpayloadsig
   (C23)
   Classification
   fpclassify
   (C99)
   iscanonical
   (C23)
   isfinite
   (C99)
   isinf
   (C99)
   isnan
   (C99)
   isnormal
   (C99)
   signbit
   (C99)
   issubnormal
   (C23)
   iszero
   (C23)
   isgreater
   (C99)
   isgreaterequal
   (C99)
   isless
   (C99)
   islessequal
   (C99)
   islessgreater
   (C99)
   isunordered
   (C99)
   issignaling
   (C23)
   iseqsig
   (C23)
   Macro constants
   Special floating-point values
   HUGE_VALFHUGE_VALHUGE_VALLHUGE_VALDN
   (C99)(C99)(C23)
   INFINITYDEC_INFINITY
   (C99)(C23)
   NANDEC_NAN
   (C99)(C23)
   Arguments and return values
   FP_ILOGB0FP_ILOGBNAN
   (C99)(C99)
   FP_INT_UPWARDFP_INT_DOWNWARDFP_INT_TOWARDZEROFP_INT_TONEARESTFROMZEROFP
   _INT_TONEAREST
   (C23)(C23)(C23)(C23)(C23)
   FP_LLOGB0FP_LLOGBNAN
   (C23)(C23)
   FP_NORMALFP_SUBNORMALFP_ZEROFP_INFINITEFP_NAN
   (C99)(C99)(C99)(C99)(C99)
   Error handling
   MATH_ERRNOMATH_ERRNOEXCEPT
   (C99)(C99)
   math_errhandling
   (C99)
   Fast operation indicators
   FP_FAST_FMAFFP_FAST_FMA
   (C99)(C99)
   FP_FAST_FADDFP_FAST_FADDLFP_FAST_DADDLFP_FAST_DMADDDN
   (C23)(C23)(C23)(C23)
   FP_FAST_FMULFP_FAST_FMULLFP_FAST_DMULLFP_FAST_DMMULDN
   (C23)(C23)(C23)(C23)
   FP_FAST_FFMAFP_FAST_FFMALFP_FAST_DFMALFP_FAST_DMFMADN
   (C23)(C23)(C23)(C23)
   FP_FAST_FMALFP_FAST_FMADN
   (C99)(C23)
   FP_FAST_FSUBFP_FAST_FSUBLFP_FAST_DSUBLFP_FAST_DMSUBDN
   (C23)(C23)(C23)(C23)
   FP_FAST_FDIVFP_FAST_FDIVLFP_FAST_DDIVLFP_FAST_DMDIVDN
   (C23)(C23)(C23)(C23)
   FP_FAST_FSQRTFP_FAST_FSQRTLFP_FAST_DSQRTLFP_FAST_DMSQRTDN
   (C23)(C23)(C23)(C23)

   Defined in header <math.h>
   float powf( float base, float exponent );
   (1)                                                        (since C99)
   double pow( double base, double exponent );
   (2)
   long double powl( long double base, long double exponent );
   (3)                                                        (since C99)
   Defined in header <tgmath.h>
   #define pow( base, exponent )
   (4)                                                        (since C99)
   1-3) Computes the value of base raised to the power exponent.
   4) Type-generic macro: If any argument has type long double, powl is
   called. Otherwise, if any argument has integer type or has type double,
   pow is called. Otherwise, powf is called. If at least one argument is
   complex or imaginary, then the macro invokes the corresponding complex
   function (cpowf, cpow, cpowl).

Parameters

   base     - base as floating-point value
   exponent - exponent as floating-point value

Return value

   If no errors occur, base raised to the power of exponent (baseexponent
   ) is returned.

   If a domain error occurs, an implementation-defined value is returned
   (NaN where supported).

   If a pole error or a range error due to overflow occurs, ±HUGE_VAL,
   ±HUGE_VALF, or ±HUGE_VALL is returned.

   If a range error occurs due to underflow, the correct result (after
   rounding) is returned.

Error handling

   Errors are reported as specified in math_errhandling.

   If base is finite and negative and exponent is finite and non-integer,
   a domain error occurs and a range error may occur.

   If base is zero and exponent is zero, a domain error may occur.

   If base is zero and exponent is negative, a domain error or a pole
   error may occur.

   If the implementation supports IEEE floating-point arithmetic (IEC
   60559),
     * pow(+0, exponent), where exponent is a negative odd integer,
       returns +infty and raises FE_DIVBYZERO
     * pow(-0, exponent), where exponent is a negative odd integer,
       returns -infty and raises FE_DIVBYZERO
     * pow(±0, exponent), where exponent is negative, finite, and is an
       even integer or a non-integer, returns +infty and raises
       FE_DIVBYZERO
     * pow(±0, -infty) returns +infty and may raise FE_DIVBYZERO(until
       C23)
     * pow(+0, exponent), where exponent is a positive odd integer,
       returns +0
     * pow(-0, exponent), where exponent is a positive odd integer,
       returns -0
     * pow(±0, exponent), where exponent is positive non-integer or a
       positive even integer, returns +0
     * pow(-1, ±infty) returns 1
     * pow(+1, exponent) returns 1 for any exponent, even when exponent is
       NaN
     * pow(base, ±0) returns 1 for any base, even when base is NaN
     * pow(base, exponent) returns NaN and raises FE_INVALID if base is
       finite and negative and exponent is finite and non-integer.
     * pow(base, -infty) returns +infty for any |base|<1
     * pow(base, -infty) returns +0 for any |base|>1
     * pow(base, +infty) returns +0 for any |base|<1
     * pow(base, +infty) returns +infty for any |base|>1
     * pow(-infty, exponent) returns -0 if exponent is a negative odd
       integer
     * pow(-infty, exponent) returns +0 if exponent is a negative
       non-integer or negative even integer
     * pow(-infty, exponent) returns -infty if exponent is a positive odd
       integer
     * pow(-infty, exponent) returns +infty if exponent is a positive
       non-integer or positive even integer
     * pow(+infty, exponent) returns +0 for any negative exponent
     * pow(+infty, exponent) returns +infty for any positive exponent
     * except where specified above, if any argument is NaN, NaN is
       returned.

Notes

   Although pow cannot be used to obtain a root of a negative number, cbrt
   is provided for the common case where exponent is 1 / 3.

Example

   Run this code
#include <errno.h>
#include <fenv.h>
#include <math.h>
#include <stdio.h>
// #pragma STDC FENV_ACCESS ON

int main(void)
{
    // typical usage
    printf("pow(2, 10) = %f\n", pow(2, 10));
    printf("pow(2, 0.5) = %f\n", pow(2, 0.5));
    printf("pow(-2, -3) = %f\n", pow(-2, -3));

    // special values
    printf("pow(-1, NAN) = %f\n", pow(-1, NAN));
    printf("pow(+1, NAN) = %f\n", pow(+1, NAN));
    printf("pow(INFINITY, 2) = %f\n", pow(INFINITY, 2));
    printf("pow(INFINITY, -1) = %f\n", pow(INFINITY, -1));

    // error handling
    errno = 0; feclearexcept(FE_ALL_EXCEPT);
    printf("pow(-1, 1/3) = %f\n", pow(-1, 1.0 / 3));
    if (errno == EDOM)
        perror("    errno == EDOM");
    if (fetestexcept(FE_INVALID))
        puts("    FE_INVALID raised");

    feclearexcept(FE_ALL_EXCEPT);
    printf("pow(-0, -3) = %f\n", pow(-0.0, -3));
    if (fetestexcept(FE_DIVBYZERO))
        puts("    FE_DIVBYZERO raised");
}

   Possible output:
pow(2, 10) = 1024.000000
pow(2, 0.5) = 1.414214
pow(-2, -3) = -0.125000
pow(-1, NAN) = nan
pow(+1, NAN) = 1.000000
pow(INFINITY, 2) = inf
pow(INFINITY, -1) = 0.000000
pow(-1, 1/3) = -nan
    errno == EDOM: Numerical argument out of domain
    FE_INVALID raised
pow(-0, -3) = -inf
    FE_DIVBYZERO raised

References

     * C23 standard (ISO/IEC 9899:2023):

          + 7.12.7.5 The pow functions

          + 7.27 Type-generic math <tgmath.h>

          + F.10.4.5 The pow functions (p: 524-525)

     * C17 standard (ISO/IEC 9899:2018):

          + 7.12.7.4 The pow functions (p: 248-249)

          + 7.25 Type-generic math <tgmath.h> (p: 373-375)

          + F.10.4.4 The pow functions (p: 524-525)

     * C11 standard (ISO/IEC 9899:2011):

          + 7.12.7.4 The pow functions (p: 248-249)

          + 7.25 Type-generic math <tgmath.h> (p: 373-375)

          + F.10.4.4 The pow functions (p: 524-525)

     * C99 standard (ISO/IEC 9899:1999):

          + 7.12.7.4 The pow functions (p: 229)

          + 7.22 Type-generic math <tgmath.h> (p: 335-337)

          + F.9.4.4 The pow functions (p: 461)

     * C89/C90 standard (ISO/IEC 9899:1990):

          + 4.5.5.1 The pow function

See also

   sqrtsqrtfsqrtl
   (C99)(C99)
   computes square root (\(\small{\sqrt{x} }\) SQRT x)
   (function)
   cbrtcbrtfcbrtl
   (C99)(C99)(C99)
   computes cube root (\(\small{\sqrt[3]{x} }\)3 SQRT x)
   (function)
   hypothypotfhypotl
   (C99)(C99)(C99)
   computes square root of the sum of the squares of two given numbers
   (\(\scriptsize{\sqrt{x^2+y^2} }\) SQRT x2
   +y2
   )
   (function)
   cpowcpowfcpowl
   (C99)(C99)(C99)
   computes the complex power function
   (function)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=c/numeric/math/pow&o
   ldid=172055"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 23 May 2024, at 20:36.
     * This page has been accessed 330,771 times.
