iter_swap(std::common_iterator)

   From cppreference.com
   < cpp | iterator | common iterator

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Iterator library
   Iterator concepts
   indirectly_readable
   (C++20)
   indirectly_writable
   (C++20)
   weakly_incrementable
   (C++20)
   incrementable
   (C++20)
   input_or_output_iterator
   (C++20)
   sentinel_for
   (C++20)
   sized_sentinel_for
   (C++20)
   input_iterator
   (C++20)
   output_iterator
   (C++20)
   forward_iterator
   (C++20)
   bidirectional_iterator
   (C++20)
   random_access_iterator
   (C++20)
   contiguous_iterator
   (C++20)
   Iterator primitives
   input_iterator_tagoutput_iterator_tagforward_iterator_tagbidirectional_
   iterator_tagrandom_access_iterator_tagcontiguous_iterator_tag
   (C++20)
   iter_value_titer_difference_titer_reference_titer_const_reference_titer
   _rvalue_reference_titer_common_reference_t
   (C++20)(C++20)(C++20)(C++23)(C++20)(C++20)
   iterator
   (deprecated in C++17)
   iterator_traits
   incrementable_traits
   (C++20)
   indirectly_readable_traits
   (C++20)
   Algorithm concepts and utilities
   Indirect callable concepts
   indirectly_unary_invocableindirectly_regular_unary_invocable
   (C++20)(C++20)
   indirect_unary_predicate
   (C++20)
   indirect_binary_predicate
   (C++20)
   indirect_equivalence_relation
   (C++20)
   indirect_strict_weak_order
   (C++20)
   Common algorithm requirements
   indirectly_movable
   (C++20)
   indirectly_movable_storable
   (C++20)
   indirectly_copyable
   (C++20)
   indirectly_copyable_storable
   (C++20)
   indirectly_swappable
   (C++20)
   indirectly_comparable
   (C++20)
   permutable
   (C++20)
   mergeable
   (C++20)
   sortable
   (C++20)
   Utilities
   indirect_result_t
   (C++20)
   projected
   (C++20)
   projected_value_t
   (C++26)
   Iterator adaptors
   reverse_iterator
   make_reverse_iterator
   (C++14)
   move_iterator
   (C++11)
   make_move_iterator
   (C++11)
   default_sentinel_tdefault_sentinel
   (C++20)(C++20)
   unreachable_sentinel_tunreachable_sentinel
   (C++20)(C++20)
   front_insert_iterator
   back_insert_iterator
   inserter
   insert_iterator
   front_inserter
   back_inserter
   move_sentinel
   (C++20)
   common_iterator
   (C++20)
   counted_iterator
   (C++20)
   basic_const_iterator
   (C++23)
   const_iterator
   (C++23)
   const_sentinel
   (C++23)
   make_const_iterator
   (C++23)
   make_const_sentinel
   (C++23)
   Stream iterators
   istream_iterator

   ostream_iterator
   istreambuf_iterator
   ostreambuf_iterator
   Iterator customization points
   ranges::iter_move
   (C++20)
   ranges::iter_swap
   (C++20)
   Iterator operations
   advance
   distance
   prev
   (C++11)
   next
   (C++11)
   ranges::advance
   (C++20)
   ranges::distance
   (C++20)
   ranges::prev
   (C++20)
   ranges::next
   (C++20)
   Range access
   begincbegin
   (C++11)(C++14)
   rbegincrbegin
   (C++14)(C++14)
   endcend
   (C++11)(C++14)
   rendcrend
   (C++14)(C++14)
   sizessize
   (C++17)(C++20)
   empty
   (C++17)
   data
   (C++17)

   std::common_iterator
   Member functions
   common_iterator::common_iterator
   (C++20)
   common_iterator::operator=
   (C++20)
   common_iterator::operator*common_iterator::operator->
   (C++20)(C++20)
   common_iterator::operator++common_iterator::operator++(int)
   (C++20)(C++20)
   Non-member functions
   operator==
   (C++20)
   operator-
   (C++20)
   iter_move
   (C++20)
   iter_swap
   (C++20)
   Helper classes
   incrementable_traits
   (C++20)
   iterator_traits
   (C++20)

   template< std::indirectly_swappable<I> I2, class S2 >

   friend constexpr void
       iter_swap( const common_iterator& x,
                  const std::common_iterator<I2, S2>& y ) noexcept(/*see
   below*/);
                                                        (since C++20)

   Swaps the objects pointed to by two underlying iterators. The behavior
   is undefined if x does not hold an I object or y does not hold an I2
   object (i.e. at least one of x and y does not hold an iterator).

   The function body is equivalent to
   ranges::iter_swap(std::get<I>(x.var), std::get<I2>(y.var)).

   This function template is not visible to ordinary unqualified or
   qualified lookup, and can only be found by argument-dependent lookup
   when std::common_iterator<I,S> is an associated class of the arguments.

Parameters

   x, y - the iterators to the elements to swap

Return value

   (none)

Complexity

   Constant.

Exceptions

   noexcept specification:
   noexcept(noexcept(ranges::iter_swap(std::declval<const I&>(),
   std::declval<const I2&>())))

Example

   Run this code
#include <algorithm>
#include <iostream>
#include <iterator>
#include <string>
#include <vector>

int main()
{
    std::vector<std::string> v1{"1", "2", "3", "4", "5"},
                             v2{"a", "b", "g", "d", "e"};

    using CI = std::common_iterator<
                   std::counted_iterator<std::vector<std::string>::iterator>,
                   std::default_sentinel_t
                   >;

    CI first1{std::counted_iterator{v1.begin(), 3}};
    CI first2{std::counted_iterator{v2.begin(), 4}};
    CI last{std::default_sentinel};

    auto print = [&](auto rem)
    {
        std::cout << rem << "v1 = ";
        std::ranges::copy(v1, std::ostream_iterator<std::string>{std::cout, " "}
);
        std::cout << "\nv2 = ";
        std::ranges::copy(v2, std::ostream_iterator<std::string>{std::cout, " "}
);
        std::cout << '\n';
    };

    print("Before iter_swap:\n");

    for (; first1 != last && first2 != last; ++first1, ++first2)
        iter_swap(first1, first2); // ADL

    print("After iter_swap:\n");
}

   Output:
Before iter_swap:
v1 = 1 2 3 4 5
v2 = a b g d e
After iter_swap:
v1 = a b g 4 5
v2 = 1 2 3 d e

Defect reports

   The following behavior-changing defect reports were applied
   retroactively to previously published C++ standards.
   DR Applied to Behavior as published Correct behavior
   LWG 3574 C++20 variant was fully constexpr (P2231R1) but
   common_iterator was not also made constexpr

See also

   swap
   swaps the values of two objects
   (function template)
   swap_ranges
   swaps two ranges of elements
   (function template)
   iter_swap
   swaps the elements pointed to by two iterators
   (function template)
   iter_swap
   (C++20)
   swaps the values referenced by two dereferenceable objects
   (customization point object)
   iter_swap
   (C++20)
   swaps the objects pointed to by two underlying iterators
   (function template)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/common_
   iterator/iter_swap&oldid=159350"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 18 September 2023, at 11:20.
     * This page has been accessed 4,664 times.
