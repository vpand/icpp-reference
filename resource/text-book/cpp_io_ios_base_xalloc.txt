std::ios_base::xalloc

   From cppreference.com
   < cpp | io | ios base

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Input/output library
   I/O manipulators
   Print functions (C++23)
   C-style I/O
   Buffers
   basic_streambuf
   basic_filebuf
   basic_stringbuf
   basic_spanbuf
   (C++23)
   strstreambuf
   (C++98/26*)
   basic_syncbuf
   (C++20)
   Streams
   Abstractions
   ios_base
   basic_ios
   basic_istream
   basic_ostream
   basic_iostream
   File I/O
   basic_ifstream
   basic_ofstream
   basic_fstream
   String I/O
   basic_istringstream
   basic_ostringstream
   basic_stringstream
   Array I/O
   basic_ispanstream
   (C++23)
   basic_ospanstream
   (C++23)
   basic_spanstream
   (C++23)
   istrstream
   (C++98/26*)
   ostrstream
   (C++98/26*)
   strstream
   (C++98/26*)
   Synchronized Output
   basic_osyncstream
   (C++20)
   Types
   streamoff
   streamsize
   fpos
   Error category interface
   iostream_category
   (C++11)
   io_errc
   (C++11)

   std::ios_base
   Member functions
   ios_base::ios_base
   ios_base::~ios_base
   ios_base::operator=
   Formatting
   ios_base::flags
   ios_base::setf
   ios_base::unsetf
   ios_base::precision
   ios_base::width
   Locales
   ios_base::imbue
   ios_base::getloc
   Internal extensible array
   ios_base::xalloc
   ios_base::iword
   ios_base::pword
   Miscellaneous
   ios_base::register_callback
   ios_base::sync_with_stdio
   Member classes
   ios_base::failure
   ios_base::Init
   Member types
   ios_base::openmode
   ios_base::fmtflags
   ios_base::iostate
   ios_base::seekdir
   ios_base::event
   ios_base::event_callback

   static int xalloc();

   Returns a unique (program-wide) index value that can be used to access
   one long and one void* elements in the private storage of std::ios_base
   by calling iword() and pword(). The call to xalloc does not allocate
   memory.

   This function is thread-safe: concurrent access by multiple threads
   does not result in a data race.
   (since C++11)

   Effectively increments the next available unique index.

Return value

   Unique integer for use as pword/iword index.

Example

   Uses base class pword storage for runtime type identification of
   derived stream objects.
   Run this code
#include <iostream>

template<class CharT, class Traits = std::char_traits<CharT>>
class mystream : public std::basic_ostream<CharT, Traits>
{
public:
    static const int xindex;

    mystream(std::basic_ostream<CharT, Traits>& ostr) :
        std::basic_ostream<CharT, Traits>(ostr.rdbuf())
    {
        this->pword(xindex) = this;
    }

    void myfn()
    {
        *this << "[special handling for mystream]";
    }
};

// Each specialization of mystream obtains a unique index from xalloc()
template<class CharT, class Traits>
const int mystream<CharT, Traits>::xindex = std::ios_base::xalloc();

// This I/O manipulator will be able to recognize ostreams that are mystreams
// by looking up the pointer stored in pword
template<class CharT, class Traits>
std::basic_ostream<CharT, Traits>& mymanip(std::basic_ostream<CharT, Traits>& os
)
{
    if (os.pword(mystream<CharT, Traits>::xindex) == &os)
        static_cast<mystream<CharT, Traits>&>(os).myfn();
    return os;
}

int main()
{
    std::cout << "cout, narrow-character test " << mymanip << '\n';

    mystream<char> myout(std::cout);
    myout << "myout, narrow-character test " << mymanip << '\n';

    std::wcout << "wcout, wide-character test " << mymanip << '\n';

    mystream<wchar_t> mywout(std::wcout);
    mywout << "mywout, wide-character test " << mymanip << '\n';
}

   Output:
cout, narrow-character test
myout, narrow-character test [special handling for mystream]
wcout, wide-character test
mywout, wide-character test [special handling for mystream]

Defect reports

   The following behavior-changing defect reports were applied
   retroactively to previously published C++ standards.
      DR    Applied to   Behavior as published    Correct behavior
   LWG 2143 C++11      xalloc was not thread-safe made thread-safe

See also

   pword
   resizes the private storage if necessary and access to the void*
   element at the given index
   (public member function)
   iword
   resizes the private storage if necessary and access to the long element
   at the given index
   (public member function)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/io/ios_base/xall
   oc&oldid=170167"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 14 March 2024, at 01:44.
     * This page has been accessed 36,246 times.
