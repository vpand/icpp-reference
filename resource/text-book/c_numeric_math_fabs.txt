fabs, fabsf, fabsl, fabsd32, fabsd64, fabsd128

   From cppreference.com
   < c | numeric | math

   C
   Language
   Headers
   Type support
   Program utilities
   Variadic function support
   Error handling
   Dynamic memory management
   Strings library
   Algorithms
   Numerics
   Date and time utilities
   Input/output support
   Localization support
   Concurrency support (C11)
   Technical Specifications
   Symbol index

   Numerics
   Common mathematical functions
   Floating-point environment (C99)
   Pseudo-random number generation
   Complex number arithmetic (C99)
   Type-generic math (C99)

   Common mathematical functions
   Types
   div_tldiv_tlldiv_timaxdiv_t
   (C99)(C99)
   float_tdouble_t
   (C99)(C99)
   _Decimal32_t_Decimal64_t
   (C23)(C23)
   Functions
   Basic operations
   abslabsllabsimaxabs
   (C99)(C99)
   fabs
   divldivlldivimaxdiv
   (C99)(C99)
   fmod
   remainder
   (C99)
   remquo
   (C99)
   fma
   (C99)
   fdim
   (C99)
   nannanfnanlnandN
   (C99)(C99)(C99)(C23)
   Maximum/minimum operations
   fmax
   (C99)
   fmaximum
   (C23)
   fmaximum_mag
   (C23)
   fmaximum_num
   (C23)
   fmaximum_mag_num
   (C23)
   fmin
   (C99)
   fminimum
   (C23)
   fminimum_mag
   (C23)
   fminimum_num
   (C23)
   fminimum_mag_num
   (C23)
   Exponential functions
   exp
   exp10
   (C23)
   exp2
   (C99)
   expm1
   (C99)
   exp10m1
   (C23)
   exp2m1
   (C23)
   log
   log10
   log2
   (C99)
   log1plogp1
   (C99)(C23)
   log10p1
   (C23)
   log2p1
   (C23)
   Power functions
   sqrt
   cbrt
   (C99)
   rootn
   (C23)
   rsqrt
   (C23)
   hypot
   (C99)
   compound
   (C23)
   pow
   pown
   (C23)
   powr
   (C23)
   Trigonometric and hyperbolic functions
   sin
   cos
   tan
   asin
   acos
   atan
   atan2
   sinpi
   (C23)
   cospi
   (C23)
   tanpi
   (C23)
   asinpi
   (C23)
   acospi
   (C23)
   atanpi
   (C23)
   atan2pi
   (C23)
   sinh
   cosh
   tanh
   asinh
   (C99)
   acosh
   (C99)
   atanh
   (C99)
   Error and gamma functions
   erf
   (C99)
   erfc
   (C99)
   lgamma
   (C99)
   tgamma
   (C99)
   Nearest integer floating-point operations
   ceil
   floor
   roundlroundllround
   (C99)(C99)(C99)
   roundeven
   (C23)
   trunc
   (C99)
   nearbyint
   (C99)
   rintlrintllrint
   (C99)(C99)(C99)
   fromfpfromfpxufromfpufromfpx
   (C23)(C23)(C23)(C23)
   Floating-point manipulation functions
   ldexp
   frexp
   scalbnscalbln
   (C99)(C99)
   ilogbllogb
   (C99)(C23)
   logb
   (C99)
   modf
   nextafternexttoward
   (C99)(C99)
   nextupnextdown
   (C23)(C23)
   copysign
   (C99)
   canonicalize
   (C23)
   Narrowing operations
   fadd
   (C23)
   fsub
   (C23)
   fmul
   (C23)
   fdiv
   (C23)
   ffma
   (C23)
   fsqrt
   (C23)
   Quantum and quantum exponent functions
   quantizedN
   (C23)
   samequantumdN
   (C23)
   quantumdN
   (C23)
   llquantexpdN
   (C23)
   Decimal re-encoding functions
   encodedecdN
   (C23)
   decodedecdN
   (C23)
   encodebindN
   (C23)
   decodebindN
   (C23)
   Total order and payload functions
   totalorder
   (C23)
   getpayload
   (C23)
   setpayload
   (C23)
   setpayloadsig
   (C23)
   Classification
   fpclassify
   (C99)
   iscanonical
   (C23)
   isfinite
   (C99)
   isinf
   (C99)
   isnan
   (C99)
   isnormal
   (C99)
   signbit
   (C99)
   issubnormal
   (C23)
   iszero
   (C23)
   isgreater
   (C99)
   isgreaterequal
   (C99)
   isless
   (C99)
   islessequal
   (C99)
   islessgreater
   (C99)
   isunordered
   (C99)
   issignaling
   (C23)
   iseqsig
   (C23)
   Macro constants
   Special floating-point values
   HUGE_VALFHUGE_VALHUGE_VALLHUGE_VALDN
   (C99)(C99)(C23)
   INFINITYDEC_INFINITY
   (C99)(C23)
   NANDEC_NAN
   (C99)(C23)
   Arguments and return values
   FP_ILOGB0FP_ILOGBNAN
   (C99)(C99)
   FP_INT_UPWARDFP_INT_DOWNWARDFP_INT_TOWARDZEROFP_INT_TONEARESTFROMZEROFP
   _INT_TONEAREST
   (C23)(C23)(C23)(C23)(C23)
   FP_LLOGB0FP_LLOGBNAN
   (C23)(C23)
   FP_NORMALFP_SUBNORMALFP_ZEROFP_INFINITEFP_NAN
   (C99)(C99)(C99)(C99)(C99)
   Error handling
   MATH_ERRNOMATH_ERRNOEXCEPT
   (C99)(C99)
   math_errhandling
   (C99)
   Fast operation indicators
   FP_FAST_FMAFFP_FAST_FMA
   (C99)(C99)
   FP_FAST_FADDFP_FAST_FADDLFP_FAST_DADDLFP_FAST_DMADDDN
   (C23)(C23)(C23)(C23)
   FP_FAST_FMULFP_FAST_FMULLFP_FAST_DMULLFP_FAST_DMMULDN
   (C23)(C23)(C23)(C23)
   FP_FAST_FFMAFP_FAST_FFMALFP_FAST_DFMALFP_FAST_DMFMADN
   (C23)(C23)(C23)(C23)
   FP_FAST_FMALFP_FAST_FMADN
   (C99)(C23)
   FP_FAST_FSUBFP_FAST_FSUBLFP_FAST_DSUBLFP_FAST_DMSUBDN
   (C23)(C23)(C23)(C23)
   FP_FAST_FDIVFP_FAST_FDIVLFP_FAST_DDIVLFP_FAST_DMDIVDN
   (C23)(C23)(C23)(C23)
   FP_FAST_FSQRTFP_FAST_FSQRTLFP_FAST_DSQRTLFP_FAST_DMSQRTDN
   (C23)(C23)(C23)(C23)

   Defined in header <math.h>
   float       fabsf( float arg );
   (1)                                     (since C99)
   double      fabs( double arg );
   (2)
   long double fabsl( long double arg );
   (3)                                     (since C99)
   _Decimal32  fabsd32( _Decimal32 arg );
   (4)                                     (since C23)
   _Decimal64  fabsd64( _Decimal64 arg );
   (5)                                     (since C23)
   _Decimal128 fabsd128( _Decimal128 arg );
   (6)                                     (since C23)
   Defined in header <tgmath.h>
   #define fabs( arith )
   (7)                                     (since C99)
   1-6) Computes the absolute value of a floating-point value arg.

   The functions with decimal floating-point parameters are declared if
   and only if the implementation predefines __STDC_IEC_60559_DFP__ (i.e.
   the implementation supports decimal floating-point numbers).
   (since C23)
   7) Type-generic macro: If the argument has type _Decimal128,
   _Decimal64, _Decimal32,(since C23)long double, double, or float,
   fabsd128, fabsd64, fabsd32,(since C23)fabsl, fabs, or fabsf is called,
   respectively. Otherwise, if the argument has integer type, fabs is
   called. Otherwise, if the argument is complex, then the macro invokes
   the corresponding complex function (cabsf, cabs, cabsl). Otherwise, the
   behavior is undefined.

Parameters

   arg   - floating-point value
   arith - floating-point or integer value

Return value

   If successful, returns the absolute value of arg (\(\small |arg|
   \)|arg|). The value returned is exact and does not depend on any
   rounding modes.

Error handling

   This function is not subject to any of the error conditions specified
   in math_errhandling.

   If the implementation supports IEEE floating-point arithmetic (IEC
   60559),
     * If the argument is ±0, +0 is returned
     * If the argument is ±infty, +infty is returned
     * If the argument is NaN, NaN is returned

Example

   Run this code
#include <math.h>
#include <stdio.h>

#define PI 3.14159

// This numerical integration assumes all area is positive.
double integrate(double f(double),
                 double a, double b, // assume a < b
                 unsigned steps) // assume steps > 0
{
    const double dx = (b - a) / steps;
    double sum = 0.0;
    for (double x = a; x < b; x += dx)
        sum += fabs(f(x));
    return dx * sum;
}

int main(void)
{
    printf("fabs(+3) = %f\n", fabs(+3.0));
    printf("fabs(-3) = %f\n", fabs(-3.0));
    // special values
    printf("fabs(-0) = %f\n", fabs(-0.0));
    printf("fabs(-Inf) = %f\n", fabs(-INFINITY));

    printf("Area under sin(x) in [-PI, PI] = %f\n", integrate(sin, -PI, PI, 5101
));
}

   Output:
fabs(+3) = 3.000000
fabs(-3) = 3.000000
fabs(-0) = 0.000000
fabs(-Inf) = inf
Area under sin(x) in [-PI, PI] = 4.000000

References

     * C23 standard (ISO/IEC 9899:2023):

          + 7.12.7.2 The fabs functions (p: TBD)

          + 7.25 Type-generic math <tgmath.h> (p: TBD)

          + F.10.4.2 The fabs functions (p: TBD)

     * C17 standard (ISO/IEC 9899:2018):

          + 7.12.7.2 The fabs functions (p: 181)

          + 7.25 Type-generic math <tgmath.h> (p: 272-273)

          + F.10.4.2 The fabs functions (p: 382)

     * C11 standard (ISO/IEC 9899:2011):

          + 7.12.7.2 The fabs functions (p: 248)

          + 7.25 Type-generic math <tgmath.h> (p: 373-375)

          + F.10.4.2 The fabs functions (p: 524)

     * C99 standard (ISO/IEC 9899:1999):

          + 7.12.7.2 The fabs functions (p: 228-229)

          + 7.22 Type-generic math <tgmath.h> (p: 335-337)

          + F.9.4.2 The fabs functions (p: 460)

     * C89/C90 standard (ISO/IEC 9899:1990):

          + 4.5.6.2 The fabs function

See also

   abslabsllabs
   (C99)
   computes absolute value of an integral value (\(\small{|x|}\)|x|)
   (function)
   copysigncopysignfcopysignl
   (C99)(C99)(C99)
   produces a value with the magnitude of a given value and the sign of
   another given value
   (function)
   signbit
   (C99)
   checks if the given number is negative
   (function macro)
   cabscabsfcabsl
   (C99)(C99)(C99)
   computes the magnitude of a complex number
   (function)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=c/numeric/math/fabs&
   oldid=172011"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 23 May 2024, at 04:43.
     * This page has been accessed 154,761 times.
