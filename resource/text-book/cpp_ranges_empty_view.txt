std::ranges::views::empty, std::ranges::empty_view

   From cppreference.com
   < cpp | ranges

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Ranges library
   Range access
   begin
   cbegin
   end
   cend
   rbegin
   crbegin
   rend
   crend
   size
   ssize
   data
   cdata
   empty
   Range conversions
   std::from_range_t
   std::from_range
   (C++23)(C++23)
   to
   (C++23)
   Range primitives
   range_size_trange_difference_trange_value_trange_reference_t
   iterator_tconst_iterator_tsentinel_tconst_sentinel_t
   (C++23)(C++23)
   range_const_reference_trange_rvalue_reference_trange_common_reference_t
   (C++23)
   elements_of
   (C++23)
   Dangling iterator handling
   dangling
   borrowed_iterator_t
   borrowed_subrange_t
   Range concepts
   range
   borrowed_range
   sized_range
   constant_range
   (C++23)
   common_range
   view
   viewable_range
   input_range
   output_range
   forward_range
   bidirectional_range
   random_access_range
   contiguous_range
   Views
   view_interface
   subrange
   Range factories
   empty_viewviews::empty
   single_viewviews::single
   iota_viewviews::iota
   repeat_viewviews::repeat
   (C++23)(C++23)
   basic_istream_viewviews::istream
   Range adaptors
   views::all_tviews::all
   ref_view
   owning_view
   as_rvalue_viewviews::as_rvalue
   (C++23)(C++23)
   filter_viewviews::filter
   transform_viewviews::transform
   take_viewviews::take
   take_while_viewviews::take_while
   concat_viewviews::concat
   (C++26)(C++26)
   drop_viewviews::drop
   drop_while_viewviews::drop_while
   join_viewviews::join
   join_with_viewviews::join_with
   (C++23)(C++23)
   lazy_split_viewviews::lazy_split
   split_viewviews::split
   views::counted
   common_viewviews::common
   reverse_viewviews::reverse
   as_const_viewviews::as_const
   (C++23)(C++23)
   elements_viewviews::elements
   keys_viewviews::keys
   values_viewviews::values
   enumerate_viewviews::enumerate
   (C++23)(C++23)
   zip_viewviews::zip
   (C++23)(C++23)
   zip_transform_viewviews::zip_transform
   (C++23)(C++23)
   adjacent_viewviews::adjacent
   (C++23)(C++23)
   views::pairwise
   (C++23)
   adjacent_transform_viewviews::adjacent_transform
   (C++23)(C++23)
   views::pairwise_transform
   (C++23)
   chunk_viewviews::chunk
   (C++23)(C++23)
   slide_viewviews::slide
   (C++23)(C++23)
   chunk_by_viewviews::chunk_by
   (C++23)(C++23)
   stride_viewviews::stride
   (C++23)(C++23)
   cartesian_product_viewviews::cartesian_product
   (C++23)(C++23)
   Range generators
   std::generator
   (C++23)
   Range adaptor objects
   Range adaptor closure objects
   range_adaptor_closure
   (C++23)
   Helper items
   copyable-box
   movable-box
   (until C++23)(C++23)
   simple-view
   non-propagating-cache

   Defined in header <ranges>
   template<class T>

       requires std::is_object_v<T>
   class empty_view : public ranges::view_interface<empty_view<T>>
   (1)                       (since C++20)
   namespace views {

       template<class T> inline constexpr empty_view<T> empty{};
   }
   (2)                       (since C++20)
   1) A range factory that produces a view of no elements of a particular
   type.
   2) Variable template for empty_view.

Member functions

   begin
   [static] (C++20)
   returns nullptr
   (public static member function)
   end
   [static] (C++20)
   returns nullptr
   (public static member function)
   data
   [static] (C++20)
   returns nullptr
   (public static member function)
   size
   [static] (C++20)
   returns 0 (zero)
   (public static member function)
   empty
   [static] (C++20)
   returns true
   (public static member function)

Inherited from std::ranges::view_interface

   cbegin
   (C++23)
   returns a constant iterator to the beginning of the range.
   (public member function of std::ranges::view_interface<D>)
   cend
   (C++23)
   returns a sentinel for the constant iterator of the range.
   (public member function of std::ranges::view_interface<D>)
   operator bool
   (C++20)
   returns whether the derived view is not empty. Provided if
   ranges::empty is applicable to it.
   (public member function of std::ranges::view_interface<D>)
   front
   (C++20)
   returns the first element in the derived view. Provided if it satisfies
   forward_range.
   (public member function of std::ranges::view_interface<D>)
   back
   (C++20)
   returns the last element in the derived view. Provided if it satisfies
   bidirectional_range and common_range.
   (public member function of std::ranges::view_interface<D>)
   operator[]
   (C++20)
   returns the n^th element in the derived view. Provided if it satisfies
   random_access_range.
   (public member function of std::ranges::view_interface<D>)

std::ranges::empty_view::begin

   static constexpr T* begin() noexcept { return nullptr; }
                                                           (since C++20)

   empty_view does not reference any element.

std::ranges::empty_view::end

   static constexpr T* end() noexcept { return nullptr; }
                                                         (since C++20)

   empty_view does not reference any element.

std::ranges::empty_view::data

   static constexpr T* data() noexcept { return nullptr; }
                                                          (since C++20)

   empty_view does not reference any element.

std::ranges::empty_view::size

   static constexpr std::size_t size() noexcept { return 0; }
                                                             (since C++20)

   empty_view is always empty.

std::ranges::empty_view::empty

   static constexpr bool empty() noexcept { return true; }
                                                          (since C++20)

   empty_view is always empty.

Helper templates

   template<class T>
   inline constexpr bool enable_borrowed_range<ranges::empty_view<T>> =
   true;
                    (since C++20)

   This specialization of std::ranges::enable_borrowed_range makes
   empty_view satisfy borrowed_range.

Notes

   Although empty_view obtains front, back, and operator[] member
   functions from view_interface, calls to them always result in undefined
   behavior since an empty_view is always empty.

   The inherited operator bool conversion function always returns false.

Example

   Run this code
#include <ranges>

int main()
{
    std::ranges::empty_view<long> e;
    static_assert(std::ranges::empty(e));
    static_assert(0 == e.size());
    static_assert(nullptr == e.data());
    static_assert(nullptr == e.begin());
    static_assert(nullptr == e.end());
}

See also

   ranges::single_viewviews::single
   (C++20)
   a view that contains a single element of a specified value
   (class template) (customization point object)
   views::all_tviews::all
   (C++20)
   a view that includes all elements of a range
   (alias template) (range adaptor object)
   ranges::ref_view
   (C++20)
   a view of the elements of some other range
   (class template)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/ranges/empty_vie
   w&oldid=131600"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 18 July 2021, at 10:18.
     * This page has been accessed 22,074 times.
