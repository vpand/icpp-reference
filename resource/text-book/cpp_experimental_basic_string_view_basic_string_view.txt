std::experimental::basic_string_view<CharT,Traits>::basic_string_view

   From cppreference.com
   < cpp | experimental | basic string view

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Experimental
   Technical Specification
   Filesystem library (filesystem TS)
   Library fundamentals (library fundamentals TS)
   Library fundamentals 2 (library fundamentals TS v2)
   Library fundamentals 3 (library fundamentals TS v3)
   Extensions for parallelism (parallelism TS)
   Extensions for parallelism 2 (parallelism TS v2)
   Extensions for concurrency (concurrency TS)
   Extensions for concurrency 2 (concurrency TS v2)
   Concepts (concepts TS)
   Ranges (ranges TS)
   Reflection (reflection TS)
   Mathematical special functions (special functions TR)
   Experimental Non-TS
   Pattern Matching
   Linear Algebra
   std::execution
   Contracts
   2D Graphics

   Library fundamentals
   experimental::optional
   experimental::any
   experimental::basic_string_view
   experimental::sample
   experimental::shared_ptr
   experimental::weak_ptr
   experimental::apply
   experimental::invocation_typeexperimental::raw_invocation_type
   experimental::search
   experimental::default_searcherexperimental::make_default_searcher
   experimental::boyer_moore_searcherexperimental::make_boyer_moore_search
   er
   experimental::boyer_moore_horspool_searcherexperimental::make_boyer_moo
   re_horspool_searcher
   Type-erased and polymorphic allocators
   Variable templates for type traits

   std::experimental::basic_string_view
   Member functions
   basic_string_view::basic_string_view
   basic_string_view::operator=
   Iterators
   basic_string_view::beginbasic_string_view::cbegin
   basic_string_view::endbasic_string_view::cend
   basic_string_view::rbeginbasic_string_view::crbegin
   basic_string_view::rendbasic_string_view::crend
   Element access
   basic_string_view::at
   basic_string_view::operator[]
   basic_string_view::front
   basic_string_view::back
   basic_string_view::data
   Capacity
   basic_string_view::sizebasic_string_view::length
   basic_string_view::max_size
   basic_string_view::empty
   Modifiers
   basic_string_view::remove_prefix
   basic_string_view::remove_suffix
   basic_string_view::swap
   Operations
   basic_string_view::to_stringbasic_string_view::operator basic_string
   basic_string_view::copy
   basic_string_view::substr
   basic_string_view::compare
   basic_string_view::find
   basic_string_view::rfind
   basic_string_view::find_first_of
   basic_string_view::find_last_of
   basic_string_view::find_first_not_of
   basic_string_view::find_last_not_of
   Constants
   basic_string_view::npos
   Non-member functions
   operator==operator!=operator<operator>operator<=operator>=
   operator<<
   Helper classes
   hash<std::string_view>hash<std::wstring_view>hash<std::u16string_view>h
   ash<std::u32string_view>

   constexpr basic_string_view() noexcept;
   (1) (library fundamentals TS)
   constexpr basic_string_view( const basic_string_view& other ) noexcept
   = default;
   (2) (library fundamentals TS)
   template<class Allocator>
   basic_string_view( const std::basic_string<CharT, Traits, Allocator>&
   str ) noexcept;
   (3) (library fundamentals TS)
   constexpr basic_string_view( const CharT* s, size_type count );
   (4) (library fundamentals TS)
   constexpr basic_string_view( const CharT* s );
   (5) (library fundamentals TS)
   1) Default constructor. Constructs an empty basic_string_view.
   2) Copy constructor. Constructs a view of the same content as other.
   3) Constructs a view of the first str.size() characters of the
   character array starting with the element pointed by str.data().
   4) Constructs a view of the first count characters of the character
   array starting with the element pointed by s. s can contain null
   characters. The behavior is undefined if [s, s + count) is not a valid
   range (even though the constructor may not access any of the elements
   of this range).
   5) Constructs a view of the null-terminated character string pointed to
   by s, not including the terminating null character. The length of the
   view is determined as if by Traits::length(s). The behavior is
   undefined if [s, s + Traits::length(s)) is not a valid range (even
   though the constructor may not access any of the elements of this
   range).

Parameters

   other - another view to initialize the view with
   str - a C++ string object to initialize view with
   s - pointer to a character array or a C string to initialize the view
   with
   count - number of characters to include in the view

Exceptions

   4,5) Throws nothing.

Complexity

   1-4) Constant.
   5) Linear in length of s.

Example

   Run this code
#include <experimental/string_view>
#include <iostream>

int main()
{
    std::string cppstr = "Foo";
    char array[3] = {'B', 'a', 'r'};

    std::experimental::string_view cppstr_v(cppstr);
    std::experimental::string_view array_v(array, sizeof array);

    std::experimental::wstring_view wcstr_v = L"xyzzy";

    std::cout << cppstr_v << '\n'
              << array_v << '\n'
              << wcstr_v.size() << '\n';
}

   Output:
Foo
Bar
5

See also

   operator=
   assigns a view
   (public member function)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/experimental/bas
   ic_string_view/basic_string_view&oldid=157718"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 2 September 2023, at 00:17.
     * This page has been accessed 23,205 times.
