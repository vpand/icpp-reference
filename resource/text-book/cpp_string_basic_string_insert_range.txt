std::basic_string<CharT,Traits,Allocator>::insert_range

   From cppreference.com
   < cpp | string | basic string

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Strings library
   Null-terminated strings
   Byte strings
   Multibyte strings
   Wide strings
   Classes
   basic_string
   basic_string_view
   (C++17)
   char_traits

   std::basic_string
   Member functions
   basic_string::basic_string
   basic_string::~basic_string
   basic_string::operator=
   basic_string::assign
   basic_string::assign_range
   (C++23)
   basic_string::get_allocator
   Element access
   basic_string::at
   basic_string::operator[]
   basic_string::front
   (DR*)
   basic_string::back
   (DR*)
   basic_string::data
   basic_string::c_str
   basic_string::operator
    basic_string_view
   (C++17)
   Iterators
   basic_string::beginbasic_string::cbegin
   (C++11)
   basic_string::endbasic_string::cend
   (C++11)
   basic_string::rbeginbasic_string::crbegin
   (C++11)
   basic_string::rendbasic_string::crend
   (C++11)
   Capacity
   basic_string::empty
   basic_string::sizebasic_string::length
   basic_string::max_size
   basic_string::reserve
   basic_string::capacity
   basic_string::shrink_to_fit
   (DR*)
   Modifiers
   basic_string::clear
   basic_string::insert
   basic_string::insert_range
   (C++23)
   basic_string::erase
   basic_string::push_back
   basic_string::pop_back
   (DR*)
   basic_string::append
   basic_string::append_range
   (C++23)
   basic_string::operator+=
   basic_string::replace
   basic_string::replace_with_range
   (C++23)
   basic_string::copy
   basic_string::resize
   basic_string::resize_and_overwrite
   (C++23)
   basic_string::swap
   Search
   basic_string::find
   basic_string::rfind
   basic_string::find_first_of
   basic_string::find_first_not_of
   basic_string::find_last_of
   basic_string::find_last_not_of
   Operations
   basic_string::compare
   basic_string::starts_with
   (C++20)
   basic_string::ends_with
   (C++20)
   basic_string::contains
   (C++23)
   basic_string::substr
   Constants
   basic_string::npos
   Non-member functions
   operator+
   swap(std::basic_string)
   erase(std::basic_string)erase_if(std::basic_string)
   (C++20)(C++20)
   I/O
   operator<<operator>>
   getline
   Comparison
   operator==operator!=operator<operator>operator<=operator>=operator<=>
   (until C++20)(until C++20)(until C++20)(until C++20)(until
   C++20)(C++20)
   Numeric conversions
   stoistolstoll
   (C++11)(C++11)(C++11)
   stoulstoull
   (C++11)(C++11)
   stofstodstold
   (C++11)(C++11)(C++11)
   to_string
   (C++11)
   to_wstring
   (C++11)
   Literals
   operator""s
   (C++14)
   Helper classes
   hash<std::basic_string>
   (C++11)
   Deduction guides (C++17)

   template< container-compatible-range<CharT> R >
   constexpr iterator insert_range( const_iterator pos, R&& rg );
                                                  (since C++23)

   Inserts characters from the range rg before the element (if any)
   pointed by pos.

   Equivalent to
return insert(pos - begin(),
    std::basic_string(
        std::from_range,
        std::forward<R>(rg),
        get_allocator())
);

   If pos is not a valid iterator on *this, the behavior is undefined.

Parameters

   pos - iterator before which the characters will be inserted
   rg  - a container compatible range

Return value

   An iterator which refers to the first inserted character, or pos if no
   characters were inserted because rg was empty.

Complexity

   Linear in size of rg.

Exceptions

   If std::allocator_traits<Allocator>::allocate throws an exception, it
   is rethrown.

   If the operation would result in size() > max_size(), throws
   std::length_error.

   If an exception is thrown for any reason, this function has no effect
   (strong exception safety guarantee).

Notes

   Feature-test macro Value Std Feature
   __cpp_lib_containers_ranges 202202L (C++23) member functions that
   accept container compatible range

Example

   Run this code
#include <cassert>
#include <iterator>
#include <string>

int main()
{
    const auto source = {'l', 'i', 'b', '_'};
    std::string target{"__cpp_containers_ranges"};
    //                        ^insertion will occur
    //                         before this position

    const auto pos = target.find("container");
    assert(pos != target.npos);
    auto iter = std::next(target.begin(), pos);

#ifdef __cpp_lib_containers_ranges
    target.insert_range(iter, source);
#else
    target.insert(iter, source.begin(), source.end());
#endif

    assert(target == "__cpp_lib_containers_ranges");
    //                      ^^^^
}

See also

   insert
   inserts characters
   (public member function)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/string/basic_str
   ing/insert_range&oldid=161646"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 28 October 2023, at 15:35.
     * This page has been accessed 4,321 times.
