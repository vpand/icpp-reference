std::for_each

   From cppreference.com
   < cpp | algorithm

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Algorithm library
   Constrained algorithms and algorithms on ranges (C++20)
   Constrained algorithms, e.g. ranges::copy, ranges::sort, ...
   Execution policies (C++17)
   is_execution_policy
   (C++17)
   execution::seqexecution::parexecution::par_unseqexecution::unseq
   (C++17)    (C++17)(C++17)(C++20)
   execution::sequenced_policyexecution::parallel_policyexecution::paralle
   l_unsequenced_policyexecution::parallel_unsequenced
   (C++17)(C++17)(C++17)(C++20)
   Non-modifying sequence operations
   Batch operations
   for_each
   for_each_n
   (C++17)
   Search operations
   all_ofany_ofnone_of
   (C++11)                (C++11)(C++11)
   countcount_if
   mismatch
   equal
   findfind_iffind_if_not
   (C++11)
   find_end
   find_first_of
   adjacent_find
   search
   search_n
   Modifying sequence operations
   Copy operations
   copycopy_if
   (C++11)
   copy_backward
   copy_n
   (C++11)
   move
   (C++11)
   move_backward
   (C++11)
   Swap operations
   swap
   iter_swap
   swap_ranges
   Transformation operations
   replacereplace_if
   transform
   replace_copyreplace_copy_if
   Generation operations
   fill
   fill_n
   generate
   generate_n
   Removing operations
   removeremove_if
   unique
   remove_copyremove_copy_if
   unique_copy
   Order-changing operations
   reverse
   reverse_copy
   rotate
   rotate_copy
   random_shuffleshuffle
   (until C++17)(C++11)
   shift_leftshift_right
   (C++20)(C++20)
   Sampling operations
   sample
   (C++17)
   Sorting and related operations
   Partitioning operations
   partition
   partition_copy
   (C++11)
   stable_partition
   is_partitioned
   (C++11)
   partition_point
   (C++11)
   Sorting operations
   sort
   stable_sort
   partial_sort
   partial_sort_copy
   is_sorted
   (C++11)
   is_sorted_until
   (C++11)
   nth_element
   Binary search operations
   (on partitioned ranges)
   lower_bound
   upper_bound
   equal_range
   binary_search
   Set operations (on sorted ranges)
   includes
   set_union
   set_intersection
   set_difference
   set_symmetric_difference
   Merge operations (on sorted ranges)
   merge
   inplace_merge
   Heap operations
   push_heap
   pop_heap
   make_heap
   sort_heap
   is_heap
   (C++11)
   is_heap_until
   (C++11)
   Minimum/maximum operations
   max
   min
   minmax
   (C++11)
   clamp
   (C++17)
   max_element
   min_element
   minmax_element
   (C++11)
   Lexicographical comparison operations
   lexicographical_compare
   lexicographical_compare_three_way
   (C++20)
   Permutation operations
   next_permutation
   prev_permutation
   is_permutation
   (C++11)
   C library
   qsort
   bsearch
   Numeric operations
   iota
   (C++11)
   inner_product
   adjacent_difference

   accumulate
   reduce
   (C++17)
   transform_reduce
   (C++17)
   partial_sum
   inclusive_scan
   (C++17)
   exclusive_scan
   (C++17)
   transform_inclusive_scan
   (C++17)
   transform_exclusive_scan
   (C++17)
   Operations on uninitialized memory
   uninitialized_copy
   uninitialized_move
   (C++17)
   uninitialized_fill
   uninitialized_copy_n
   (C++11)
   uninitialized_move_n
   (C++17)
   uninitialized_fill_n
   destroy
   (C++17)
   destroy_n
   (C++17)
   destroy_at
   (C++17)
   construct_at
   (C++20)
   uninitialized_default_construct
   (C++17)
   uninitialized_value_construct
   (C++17)
   uninitialized_default_construct_n
   (C++17)
   uninitialized_value_construct_n
   (C++17)

   Defined in header <algorithm>
   template< class InputIt, class UnaryFunc >
   UnaryFunc for_each( InputIt first, InputIt last, UnaryFunc f );
   (1) (constexpr since C++20)
   template< class ExecutionPolicy, class ForwardIt, class UnaryFunc >

   void for_each( ExecutionPolicy&& policy,
                  ForwardIt first, ForwardIt last, UnaryFunc f );
   (2) (since C++17)

   Applies the given function object f to the result of dereferencing
   every iterator in the range [first, last). If f returns a result, the
   result is ignored.
   1) f is applied in order starting from first.

   If UnaryFunc is not MoveConstructible, the behavior is undefined.
   (since C++11)
   2) f might not be applied in order. The algorithm is executed according
   to policy.
   This overload participates in overload resolution only if

   std::is_execution_policy_v<std::decay_t<ExecutionPolicy>> is true.
   (until C++20)

   std::is_execution_policy_v<std::remove_cvref_t<ExecutionPolicy>> is
   true.
   (since C++20)
   If UnaryFunc is not CopyConstructible, the behavior is undefined.

   If the iterator type (InputIt/ForwardIt) is mutable, f may modify the
   elements of the range through the dereferenced iterator.

   Unlike the rest of the parallel algorithms, for_each is not allowed to
   make copies of the elements in the sequence even if they are
   TriviallyCopyable.

Parameters

   first, last - the range to apply the function to
   policy - the execution policy to use. See execution policy for details.
   f - function object, to be applied to the result of dereferencing every
   iterator in the range [first, last)

   The signature of the function should be equivalent to the following:

    void fun(const Type &a);

   The signature does not need to have const &.
   The type  Type must be such that an object of type InputIt can be
   dereferenced and then implicitly converted to  Type.

   Type requirements
   -
   InputIt must meet the requirements of LegacyInputIterator.
   -
   ForwardIt must meet the requirements of LegacyForwardIterator.

Return value

   1) f
   2) (none)

Complexity

   Exactly std::distance(first, last) applications of f.

Exceptions

   The overload with a template parameter named ExecutionPolicy reports
   errors as follows:
     * If execution of a function invoked as part of the algorithm throws
       an exception and ExecutionPolicy is one of the standard policies,
       std::terminate is called. For any other ExecutionPolicy, the
       behavior is implementation-defined.
     * If the algorithm fails to allocate memory, std::bad_alloc is
       thrown.

Possible implementation

   See also the implementations in libstdc++, libc++ and MSVC stdlib.
template<class InputIt, class UnaryFunc>
constexpr UnaryFunc for_each(InputIt first, InputIt last, UnaryFunc f)
{
    for (; first != last; ++first)
        f(*first);

    return f; // implicit move since C++11
}

Notes

   For overload (1), f can be a stateful function object. The return value
   can be considered as the final state of the batch operation.

   For overload (2), multiple copies of f may be created to perform
   parallel invocation. No value is returned because parallelization often
   does not permit efficient state accumulation.

Example

   The following example uses a lambda-expression to increment all of the
   elements of a vector and then uses an overloaded operator() in a
   function object (a.k.a., "functor") to compute their sum. Note that to
   compute the sum, it is recommended to use the dedicated algorithm
   std::accumulate.
   Run this code
#include <algorithm>
#include <iostream>
#include <vector>

int main()
{
    std::vector<int> v{3, -4, 2, -8, 15, 267};

    auto print = [](const int& n) { std::cout << n << ' '; };

    std::cout << "before:\t";
    std::for_each(v.cbegin(), v.cend(), print);
    std::cout << '\n';

    // increment elements in-place
    std::for_each(v.begin(), v.end(), [](int &n) { n++; });

    std::cout << "after:\t";
    std::for_each(v.cbegin(), v.cend(), print);
    std::cout << '\n';

    struct Sum
    {
        void operator()(int n) { sum += n; }
        int sum {0};
    };

    // invoke Sum::operator() for each element
    Sum s = std::for_each(v.cbegin(), v.cend(), Sum());
    std::cout << "sum:\t" << s.sum << '\n';
}

   Output:
before: 3 -4 2 -8 15 267
after:  4 -3 3 -7 16 268
sum:    281

Defect reports

   The following behavior-changing defect reports were applied
   retroactively to previously published C++ standards.
   DR Applied to Behavior as published Correct behavior
   LWG 475 C++98 it was unclear whether f can modify the elements
   of the sequence being iterated over (for_each is
   classified as "non-modifying sequence operations") made clear (allowed
   if the
   iterator type is mutable)
   LWG 2747 C++11 overload (1) returned std::move(f) returns f (which
   implicitly moves)

See also

   transform
   applies a function to a range of elements, storing results in a
   destination range
   (function template)
   for_each_n
   (C++17)
   applies a function object to the first N elements of a sequence
   (function template)
   ranges::for_each
   (C++20)
   applies a function to a range of elements
   (niebloid)
   ranges::for_each_n
   (C++20)
   applies a function object to the first N elements of a sequence
   (niebloid)
   range-for loop(C++11) executes loop over range
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/algorithm/for_ea
   ch&oldid=170215"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 18 March 2024, at 19:25.
     * This page has been accessed 1,867,124 times.
