C++ named requirements: BasicFormatter (since C++20)

   From cppreference.com
   < cpp | named req

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   C++ named requirements
   Basic
   DefaultConstructible
   CopyAssignable
   CopyConstructible
   MoveAssignable
   (C++11)
   MoveConstructible
   (C++11)
   Destructible
   Type properties
   ScalarType
   TriviallyCopyable
   (C++11)
   StandardLayoutType
   (C++11)
   PODType
   TrivialType
   (C++11)
   ImplicitLifetimeType
   Library-Wide
   EqualityComparable
   LessThanComparable
   Swappable
   ValueSwappable
   (C++11)
   NullablePointer
   (C++11)
   Hash
   (C++11)
   Allocator
   FunctionObject
   Callable
   Predicate
   BinaryPredicate
   Compare
   Container
   Container
   SequenceContainer
   ContiguousContainer
   (C++17)
   ReversibleContainer
   AssociativeContainer
   AllocatorAwareContainer
   UnorderedAssociativeContainer
   (C++11)
   Container Elements
   DefaultInsertable
   (C++11)
   CopyInsertable
   (C++11)
   MoveInsertable
   (C++11)
   EmplaceConstructible
   (C++11)
   Erasable
   (C++11)
   Iterator
   LegacyIterator
   LegacyOutputIterator
   LegacyInputIterator
   LegacyForwardIterator
   LegacyBidirectionalIterator
   LegacyRandomAccessIterator
   LegacyContiguousIterator
   (C++17)
   ConstexprIterator
   (C++20)
   Stream I/O
   FormattedInputFunction
   UnformattedInputFunction
   FormattedOutputFunction
   UnformattedOutputFunction
   Formatters
   BasicFormatter
   (C++20)
   Formatter
   (C++20)
   Random Numbers
   SeedSequence
   (C++11)
   RandomNumberEngine
   (C++11)
   RandomNumberDistribution
   (C++11)
   UniformRandomBitGenerator
   (C++11)
   RandomNumberEngineAdaptor
   (C++11)
   Concurrency
   BasicLockable
   (C++11)
   Lockable
   (C++11)
   TimedLockable
   (C++11)
   SharedLockable
   (C++14)
   SharedTimedLockable
   (C++14)
   Mutex
   (C++11)
   TimedMutex
   (C++11)
   SharedMutex
   (C++17)
   SharedTimedMutex
   (C++14)
   Ranges
   RangeAdaptorObject
   (C++20)
   RangeAdaptorClosureObject
   (C++20)
   Other
   CharTraits
   RegexTraits
   (C++11)
   BitmaskType
   LiteralType
   (C++11)
   NumericType
   UnaryTypeTrait
   (C++11)
   BinaryTypeTrait
   (C++11)
   TransformationTrait
   (C++11)
   Clock
   (C++11)
   TrivialClock
   (C++11)

   BasicFormatter is a type that abstracts formatting operations for a
   given formatting argument type and character type. Specializations of
   std::formatter are required to meet the requirements of BasicFormatter.

   A BasicFormatter is a Formatter if it is able to format both const and
   non-const arguments.

Requirements

   A type satisfies BasicFormatter if it is semiregular, meaning it
   satisfies:
     * DefaultConstructible
     * CopyConstructible
     * CopyAssignable
     * Destructible
     * Swappable

   And, given the following types and values, the expressions shown in the
   table below are valid and have the indicated semantics:
   Type      Definition
   CharT     a character type
   Arg       a formatting argument type
   Formatter a Formatter type for types Arg and CharT
   OutputIt  a LegacyOutputIterator type
   ParseCtx  std::basic_format_parse_context<CharT>
   FmtCtx    std::basic_format_context<OutputIt, CharT>
   Value     Definition
   f         a value of type (possibly const-qualified) Formatter
   g         a value of type Formatter
   arg       an lvalue of type Arg
   t         a value of type convertible to (possibly const-qualified) Arg
   parse_ctx an lvalue of type ParseCtx satisfying all following
   conditions:
     * parse_ctx.begin() points to the beginning of the format-spec of the
       replacement field being formatted in the format string.
     * If format-spec is not present or empty, then either
       parse_ctx.begin() == parse_ctx.end() or *parse_ctx.begin() == '}'.

   fmt_ctx   an lvalue of type FmtCtx
         Expression           Return type     Semantics
   g.parse(parse_ctx)     ParseCtx::iterator
     * In the range [parse_ctx.begin(), parse_ctx.end()), parses the
       format-spec for type Arg until the first unmatched character.
     * Throws std::format_error unless the whole range is parsed or the
       unmatched character is }. ^[note 1]
     * Stores the parsed format specifiers in g and returns an end
       iterator of the parsed range.

   f.format(arg, fmt_ctx) FmtCtx::iterator
     * Formats arg according to the specifiers stored in f, writes the
       output to fmt_ctx.out() and returns an end iterator of the output
       range.
     * The output shall only depend on
          + arg,
          + fmt_ctx.locale(),
          + the range [parse_ctx.begin(), parse_ctx.end()) from the last
            call to f.parse(parse_ctx), and
          + fmt_ctx.arg(n) for any value n of type std::size_t.

    1. ^| This allows formatters to emit meaningful error messages.

Defect reports

   The following behavior-changing defect reports were applied
   retroactively to previously published C++ standards.
   DR Applied to Behavior as published Correct behavior
   LWG 3892 C++20 the value of pc.begin() was unclear if format-spec is
   not present made clear
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/named_req/BasicF
   ormatter&oldid=169589"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 4 February 2024, at 23:19.
     * This page has been accessed 13,400 times.
