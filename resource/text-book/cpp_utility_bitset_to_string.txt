std::bitset<N>::to_string

   From cppreference.com
   < cpp | utility | bitset

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Utilities library
   Language support
   Type support (basic types, RTTI)
   Library feature-test macros (C++20)
   Dynamic memory management
   Program utilities
   Coroutine support (C++20)
   Variadic functions
   is_constant_evaluated
   (C++20)
   is_within_lifetime
   (C++26)
   initializer_list
   (C++11)
   source_location
   (C++20)
   Debugging support
   is_debugger_present
   (C++26)
   breakpoint_if_debugging
   (C++26)
   breakpoint
   (C++26)
   Three-way comparison
   three_way_comparablethree_way_comparable_with
   (C++20)(C++20)
   strong_ordering
   (C++20)
   weak_ordering
   (C++20)
   partial_ordering
   (C++20)
   common_comparison_category
   (C++20)
   compare_three_way_result
   (C++20)
   compare_three_way
   (C++20)
   strong_order
   (C++20)
   weak_order
   (C++20)
   partial_order
   (C++20)
   compare_strong_order_fallback
   (C++20)
   compare_weak_order_fallback
   (C++20)
   compare_partial_order_fallback
   (C++20)
   is_eqis_ltis_lteq
   (C++20)(C++20)(C++20)
   is_neqis_gtis_gteq
   (C++20)(C++20)(C++20)
   General utilities
   Date and time
   Function objects
   Formatting library (C++20)
   bitset
   hash
   (C++11)
   Relational operators (deprecated in C++20)
   rel_ops::operator!=rel_ops::operator>

   rel_ops::operator<=rel_ops::operator>=
   Integer comparison functions
   cmp_equalcmp_lesscmp_less_than
   (C++20)(C++20)(C++20)
   cmp_not_equalcmp_greatercmp_greater_than
   (C++20)(C++20)(C++20)
   in_range
   (C++20)
   Swap and type operations
   swap
   ranges::swap
   (C++20)
   exchange
   (C++14)
   declval
   (C++11)
   to_underlying
   (C++23)
   forward
   (C++11)
   forward_like
   (C++23)
   move
   (C++11)
   move_if_noexcept
   (C++11)
   as_const
   (C++17)
   Common vocabulary types
   pair
   tuple
   (C++11)
   optional
   (C++17)
   any
   (C++17)
   variant
   (C++17)
   tuple_size
   (C++11)
   tuple_element
   (C++11)
   apply
   (C++17)
   make_from_tuple
   (C++17)
   expected
   (C++23)
   Elementary string conversions
   to_chars
   (C++17)
   from_chars
   (C++17)
   chars_format
   (C++17)
   to_chars_result
   (C++17)
   from_chars_result
   (C++17)

   std::bitset
   Member types
   bitset::reference
   Member functions
   bitset::bitset
   bitset::operator==bitset::operator!=
   (until C++20)
   Element access
   bitset::operator[]
   bitset::test
   bitset::allbitset::anybitset::none
   (C++11)
   bitset::count
   Capacity
   bitset::size
   Modifiers
   bitset::operator&=bitset::operator|=bitset::operator^=bitset::operator~
   bitset::operator<<=bitset::operator>>=bitset::operator<<bitset::operato
   r>>
   bitset::set
   bitset::reset
   bitset::flip
   Conversions
   bitset::to_string
   bitset::to_ulong
   bitset::to_ullong
   (C++11)
   Non-member functions
   operator&operator|operator^
   operator<<operator>>
   Helper classes
   std::hash
   (C++11)

   (1)
   template< class CharT, class Traits, class Allocator >

   std::basic_string<CharT, Traits, Allocator>
       to_string( CharT zero = CharT('0'),
                  CharT one = CharT('1') ) const;
   (until C++11)
   template<

       class CharT = char,
       class Traits = std::char_traits<CharT>,
       class Allocator = std::allocator<CharT>
   >
   std::basic_string<CharT, Traits, Allocator>
       to_string( CharT zero = CharT('0'),
                  CharT one = CharT('1') ) const;
   (since C++11)
   (constexpr since C++23)
   template< class CharT, class Traits >

   std::basic_string<CharT, Traits>
       to_string( CharT zero = CharT('0'),
                  CharT one = CharT('1') ) const;
   (2) (until C++11)
   template< class CharT >

   std::basic_string<CharT> to_string( CharT zero = CharT('0'),
                                       CharT one = CharT('1') ) const;
   (3) (until C++11)
   std::string to_string( char zero = '0', char one = '1' ) const;
   (4) (until C++11)

   Converts the contents of the bitset to a string. Uses zero to represent
   bits with value of false and one to represent bits with value of true.

   The resulting string contains N characters with the first character
   corresponds to the last (N-1^th) bit and the last character
   corresponding to the first bit.

   All template type arguments need to be provided because function
   templates cannot have default template arguments. Overloads (2-4) are
   provided to simplify the invocations of to_string:
   2) Uses the default allocator std::allocator.
   3) Uses the default character trait std::char_traits and the default
   allocator std::allocator.
   4) Uses the default character type char, the default character trait
   std::char_traits and the default allocator std::allocator.
   (until C++11)

Parameters

   zero - character to use to represent false
   one  - character to use to represent true

Return value

   1) The converted string.
   2) to_string<CharT, Traits, std::allocator<CharT>>(zero, one).
   3) to_string<CharT, std::char_traits<CharT>,
   std::allocator<CharT>>(zero, one).
   4) to_string<char, std::char_traits<char>, std::allocator<char>>(zero,
   one).

Exceptions

   May throw std::bad_alloc from the std::basic_string constructor.

Notes

   Since C++11, functions templates can have default template arguments.
   LWG issue 1113 removed the helper overloads (2-4) and added the
   corresponding default template arguments in (1).

Example

   Run this code
#include <bitset>
#include <iostream>

int main()
{
    std::bitset<8> b{42};
    std::cout << b.to_string() << '\n'
              << b.to_string('*') << '\n'
              << b.to_string('O', 'X') << '\n';
}

   Output:
00101010
**1*1*1*
OOXOXOXO

Defect reports

   The following behavior-changing defect reports were applied
   retroactively to previously published C++ standards.
   DR Applied to Behavior as published Correct behavior
   LWG 396 C++98 zero and one bits were converted to characters 0
   and 1 (which do not correspond to '0' and '1') added parameters to
   provide
   values for these characters
   LWG 434 C++98 all template arguments needed to be provided added
   overloads (2-4)
   LWG 853 C++98 overloads (2-4) did not have the default
   arguments added by LWG issue 396 also added

See also

   to_ulong
   returns an unsigned long integer representation of the data
   (public member function)
   to_ullong
   (C++11)
   returns an unsigned long long integer representation of the data
   (public member function)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/utility/bitset/t
   o_string&oldid=172311"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 8 June 2024, at 16:13.
     * This page has been accessed 129,651 times.
