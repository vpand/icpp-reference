std::discrete_distribution<IntType>::discrete_distribution

   From cppreference.com
   < cpp | numeric | random | discrete distribution

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Numerics library
   Common mathematical functions
   Mathematical special functions (C++17)
   Mathematical constants (C++20)
   Basic linear algebra algorithms (C++26)
   Floating-point environment (C++11)
   Complex numbers
   Numeric arrays
   Pseudo-random number generation
   Factor operations
   gcd
   (C++17)
   lcm
   (C++17)
   Interpolations
   midpoint
   (C++20)
   lerp
   (C++20)
   Saturation arithmetic
   add_sat
   (C++26)
   sub_sat
   (C++26)
   saturate_cast
   (C++26)
   mul_sat
   (C++26)
   div_sat
   (C++26)
   Generic numeric operations
   iota
   (C++11)
   ranges::iota
   (C++23)
   accumulate
   inner_product
   adjacent_difference
   partial_sum
   reduce
   (C++17)
   transform_reduce
   (C++17)
   inclusive_scan
   (C++17)
   exclusive_scan
   (C++17)
   transform_inclusive_scan
   (C++17)
   transform_exclusive_scan
   (C++17)
   Bit operations
   has_single_bit
   (C++20)
   bit_cast
   (C++20)
   bit_ceil
   (C++20)
   bit_floor
   (C++20)
   bit_width
   (C++20)
   rotl
   (C++20)
   rotr
   (C++20)
   popcount
   (C++20)
   countl_zero
   (C++20)
   countl_one
   (C++20)
   countr_zero
   (C++20)
   countr_one
   (C++20)
   byteswap
   (C++23)
   endian
   (C++20)

   Pseudo-random number generation
   Uniform random bit generators
   uniform_random_bit_generator
   (C++20)
   Random number engines
   linear_congruential_engine
   (C++11)
   mersenne_twister_engine
   (C++11)
   subtract_with_carry_engine
   (C++11)
   Random number engine adaptors
   discard_block_engine
   (C++11)
   independent_bits_engine
   (C++11)
   shuffle_order_engine
   (C++11)
   Predefined random number generators
   Non-deterministic random numbers
   random_device
   (C++11)
   Random number distributions
   Uniform distributions
   uniform_int_distribution
   (C++11)
   uniform_real_distribution
   (C++11)
   generate_canonical
   (C++11)
   Bernoulli distributions
   bernoulli_distribution
   (C++11)
   binomial_distribution
   (C++11)
   negative_binomial_distribution
   (C++11)
   geometric_distribution
   (C++11)
   Poisson distributions
   poisson_distribution
   (C++11)
   exponential_distribution
   (C++11)
   gamma_distribution
   (C++11)
   weibull_distribution
   (C++11)
   extreme_value_distribution
   (C++11)
   Normal distributions
   normal_distribution
   (C++11)
   lognormal_distribution
   (C++11)
   chi_squared_distribution
   (C++11)
   cauchy_distribution
   (C++11)
   fisher_f_distribution
   (C++11)
   student_t_distribution
   (C++11)
   Sampling distributions
   discrete_distribution
   (C++11)
   piecewise_constant_distribution
   (C++11)
   piecewise_linear_distribution
   (C++11)
   Utilities
   generate_canonical
   (C++11)
   seed_seq
   (C++11)
   Random number algorithms
   ranges::generate_random
   (C++26)
   C random library
   rand
   srand
   RAND_MAX

   std::discrete_distribution
   Member functions
   discrete_distribution::discrete_distribution
   (C++11)
   discrete_distribution::reset
   (C++11)
   Generation
   discrete_distribution::operator()
   (C++11)
   Characteristics
   discrete_distribution::probabilities
   (C++11)
   discrete_distribution::param
   (C++11)
   discrete_distribution::min
   (C++11)
   discrete_distribution::max
   (C++11)
   Non-member functions
   operator==operator!=
   (C++11)(C++11)(until C++20)
   operator<<operator>>
   (C++11)(C++11)

   discrete_distribution();
   (1)                                                            (since C++11)
   template< class InputIt >
   discrete_distribution( InputIt first, InputIt last );
   (2)                                                            (since C++11)
   discrete_distribution( std::initializer_list<double> weights );
   (3)                                                            (since C++11)
   template< class UnaryOperation >

   discrete_distribution( std::size_t count, double xmin, double xmax,
                          UnaryOperation unary_op );
   (4)                                                            (since C++11)
   explicit discrete_distribution( const param_type& params );
   (5)                                                            (since C++11)

   Constructs a new distribution object.
   1) Default constructor. Constructs the distribution with a single
   weight p = {1}. This distribution will always generate 0.
   2) Constructs the distribution with weights in the range [first, last).
   If first == last, the effects are the same as of the default
   constructor.
   3) Constructs the distribution with weights in weights. Effectively
   calls discrete_distribution(weights.begin(), weights.end()).
   4) Constructs the distribution with count weights that are generated
   using function unary_op. Each of the weights is equal to w
   i = unary_op(xmin + d(i + 0.5)), where d =
   (xmax - xmin)
   count
   and i (- {0, ..., count - 1}. xmin and xmax must be such that d > 0. If
   count == 0 the effects are the same as of the default constructor.
   5) Constructs the distribution with params as the distribution
   parameters.

Parameters

   first, last - the range of elements defining the numbers to use as
   weights. The type of the elements referred by InputIterator must be
   convertible to double
   weights - initializer list containing the weights
   unary_op - unary operation function object that will be applied.

   The signature of the function should be equivalent to the following:

    Ret fun(const Type &a);

   The signature does not need to have const &.
   The type  Type must be such that an object of type double can be
   dereferenced and then implicitly converted to  Type. The type Ret must
   be such that an object of type double can be dereferenced and assigned
   a value of type Ret.
   params - the distribution parameter set
   Type requirements
   -
   InputIt must meet the requirements of LegacyInputIterator.
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/numeric/random/d
   iscrete_distribution/discrete_distribution&oldid=151206"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 30 April 2023, at 07:42.
     * This page has been accessed 40,205 times.
