hypot, hypotf, hypotl

   From cppreference.com
   < c | numeric | math

   C
   Language
   Headers
   Type support
   Program utilities
   Variadic function support
   Error handling
   Dynamic memory management
   Strings library
   Algorithms
   Numerics
   Date and time utilities
   Input/output support
   Localization support
   Concurrency support (C11)
   Technical Specifications
   Symbol index

   Numerics
   Common mathematical functions
   Floating-point environment (C99)
   Pseudo-random number generation
   Complex number arithmetic (C99)
   Type-generic math (C99)

   Common mathematical functions
   Types
   div_tldiv_tlldiv_timaxdiv_t
   (C99)(C99)
   float_tdouble_t
   (C99)(C99)
   _Decimal32_t_Decimal64_t
   (C23)(C23)
   Functions
   Basic operations
   abslabsllabsimaxabs
   (C99)(C99)
   fabs
   divldivlldivimaxdiv
   (C99)(C99)
   fmod
   remainder
   (C99)
   remquo
   (C99)
   fma
   (C99)
   fdim
   (C99)
   nannanfnanlnandN
   (C99)(C99)(C99)(C23)
   Maximum/minimum operations
   fmax
   (C99)
   fmaximum
   (C23)
   fmaximum_mag
   (C23)
   fmaximum_num
   (C23)
   fmaximum_mag_num
   (C23)
   fmin
   (C99)
   fminimum
   (C23)
   fminimum_mag
   (C23)
   fminimum_num
   (C23)
   fminimum_mag_num
   (C23)
   Exponential functions
   exp
   exp10
   (C23)
   exp2
   (C99)
   expm1
   (C99)
   exp10m1
   (C23)
   exp2m1
   (C23)
   log
   log10
   log2
   (C99)
   log1plogp1
   (C99)(C23)
   log10p1
   (C23)
   log2p1
   (C23)
   Power functions
   sqrt
   cbrt
   (C99)
   rootn
   (C23)
   rsqrt
   (C23)
   hypot
   (C99)
   compound
   (C23)
   pow
   pown
   (C23)
   powr
   (C23)
   Trigonometric and hyperbolic functions
   sin
   cos
   tan
   asin
   acos
   atan
   atan2
   sinpi
   (C23)
   cospi
   (C23)
   tanpi
   (C23)
   asinpi
   (C23)
   acospi
   (C23)
   atanpi
   (C23)
   atan2pi
   (C23)
   sinh
   cosh
   tanh
   asinh
   (C99)
   acosh
   (C99)
   atanh
   (C99)
   Error and gamma functions
   erf
   (C99)
   erfc
   (C99)
   lgamma
   (C99)
   tgamma
   (C99)
   Nearest integer floating-point operations
   ceil
   floor
   roundlroundllround
   (C99)(C99)(C99)
   roundeven
   (C23)
   trunc
   (C99)
   nearbyint
   (C99)
   rintlrintllrint
   (C99)(C99)(C99)
   fromfpfromfpxufromfpufromfpx
   (C23)(C23)(C23)(C23)
   Floating-point manipulation functions
   ldexp
   frexp
   scalbnscalbln
   (C99)(C99)
   ilogbllogb
   (C99)(C23)
   logb
   (C99)
   modf
   nextafternexttoward
   (C99)(C99)
   nextupnextdown
   (C23)(C23)
   copysign
   (C99)
   canonicalize
   (C23)
   Narrowing operations
   fadd
   (C23)
   fsub
   (C23)
   fmul
   (C23)
   fdiv
   (C23)
   ffma
   (C23)
   fsqrt
   (C23)
   Quantum and quantum exponent functions
   quantizedN
   (C23)
   samequantumdN
   (C23)
   quantumdN
   (C23)
   llquantexpdN
   (C23)
   Decimal re-encoding functions
   encodedecdN
   (C23)
   decodedecdN
   (C23)
   encodebindN
   (C23)
   decodebindN
   (C23)
   Total order and payload functions
   totalorder
   (C23)
   getpayload
   (C23)
   setpayload
   (C23)
   setpayloadsig
   (C23)
   Classification
   fpclassify
   (C99)
   iscanonical
   (C23)
   isfinite
   (C99)
   isinf
   (C99)
   isnan
   (C99)
   isnormal
   (C99)
   signbit
   (C99)
   issubnormal
   (C23)
   iszero
   (C23)
   isgreater
   (C99)
   isgreaterequal
   (C99)
   isless
   (C99)
   islessequal
   (C99)
   islessgreater
   (C99)
   isunordered
   (C99)
   issignaling
   (C23)
   iseqsig
   (C23)
   Macro constants
   Special floating-point values
   HUGE_VALFHUGE_VALHUGE_VALLHUGE_VALDN
   (C99)(C99)(C23)
   INFINITYDEC_INFINITY
   (C99)(C23)
   NANDEC_NAN
   (C99)(C23)
   Arguments and return values
   FP_ILOGB0FP_ILOGBNAN
   (C99)(C99)
   FP_INT_UPWARDFP_INT_DOWNWARDFP_INT_TOWARDZEROFP_INT_TONEARESTFROMZEROFP
   _INT_TONEAREST
   (C23)(C23)(C23)(C23)(C23)
   FP_LLOGB0FP_LLOGBNAN
   (C23)(C23)
   FP_NORMALFP_SUBNORMALFP_ZEROFP_INFINITEFP_NAN
   (C99)(C99)(C99)(C99)(C99)
   Error handling
   MATH_ERRNOMATH_ERRNOEXCEPT
   (C99)(C99)
   math_errhandling
   (C99)
   Fast operation indicators
   FP_FAST_FMAFFP_FAST_FMA
   (C99)(C99)
   FP_FAST_FADDFP_FAST_FADDLFP_FAST_DADDLFP_FAST_DMADDDN
   (C23)(C23)(C23)(C23)
   FP_FAST_FMULFP_FAST_FMULLFP_FAST_DMULLFP_FAST_DMMULDN
   (C23)(C23)(C23)(C23)
   FP_FAST_FFMAFP_FAST_FFMALFP_FAST_DFMALFP_FAST_DMFMADN
   (C23)(C23)(C23)(C23)
   FP_FAST_FMALFP_FAST_FMADN
   (C99)(C23)
   FP_FAST_FSUBFP_FAST_FSUBLFP_FAST_DSUBLFP_FAST_DMSUBDN
   (C23)(C23)(C23)(C23)
   FP_FAST_FDIVFP_FAST_FDIVLFP_FAST_DDIVLFP_FAST_DMDIVDN
   (C23)(C23)(C23)(C23)
   FP_FAST_FSQRTFP_FAST_FSQRTLFP_FAST_DSQRTLFP_FAST_DMSQRTDN
   (C23)(C23)(C23)(C23)

   Defined in header <math.h>
   float       hypotf( float x, float y );
   (1)                                                (since C99)
   double      hypot( double x, double y );
   (2)                                                (since C99)
   long double hypotl( long double x, long double y );
   (3)                                                (since C99)
   Defined in header <tgmath.h>
   #define hypot( x, y )
   (4)                                                (since C99)
   1-3) Computes the square root of the sum of the squares of x and y,
   without undue overflow or underflow at intermediate stages of the
   computation.
   4) Type-generic macro: If any argument has type long double, the long
   double version of the function is called. Otherwise, if any argument
   has integer type or has type double, the double version of the function
   is called. Otherwise, the float version of the function is called.

   The value computed by this function is the length of the hypotenuse of
   a right-angled triangle with sides of length x and y, or the distance
   of the point (x, y) from the origin (0, 0), or the magnitude of a
   complex number x+iy.

Parameters

   x - floating-point value
   y - floating-point value

Return value

   If no errors occur, the hypotenuse of a right-angled triangle,
   \(\scriptsize{\sqrt{x^2+y^2} }\) SQRT x2
   +y2
   , is returned.

   If a range error due to overflow occurs, +HUGE_VAL, +HUGE_VALF, or
   +HUGE_VALL is returned.

   If a range error due to underflow occurs, the correct result (after
   rounding) is returned.

Error handling

   Errors are reported as specified in math_errhandling.

   If the implementation supports IEEE floating-point arithmetic (IEC
   60559),
     * hypot(x, y), hypot(y, x), and hypot(x, -y) are equivalent
     * if one of the arguments is ±0, hypot is equivalent to fabs called
       with the non-zero argument
     * if one of the arguments is ±infty, hypot returns +infty even if the
       other argument is NaN
     * otherwise, if any of the arguments is NaN, NaN is returned.

Notes

   Implementations usually guarantee precision of less than 1 ulp (units
   in the last place): GNU, BSD.

   hypot(x, y) is equivalent to cabs(x + I*y).

   POSIX specifies that underflow may only occur when both arguments are
   subnormal and the correct result is also subnormal (this forbids naive
   implementations).

   hypot(INFINITY, NAN) returns +infty, but sqrt(INFINITY * INFINITY + NAN
   * NAN) returns NaN.

Example

   Run this code
#include <errno.h>
#include <fenv.h>
#include <float.h>
#include <math.h>
#include <stdio.h>
// #pragma STDC FENV_ACCESS ON

int main(void)
{
    // typical usage
    printf("(1,1) cartesian is (%f,%f) polar\n", hypot(1,1), atan2(1, 1));

    // special values
    printf("hypot(NAN,INFINITY) = %f\n", hypot(NAN, INFINITY));

    // error handling
    errno = 0;
    feclearexcept(FE_ALL_EXCEPT);
    printf("hypot(DBL_MAX,DBL_MAX) = %f\n", hypot(DBL_MAX, DBL_MAX));
    if (errno == ERANGE)
        perror("    errno == ERANGE");
    if (fetestexcept(FE_OVERFLOW))
        puts("    FE_OVERFLOW raised");
}

   Possible output:
(1,1) cartesian is (1.414214,0.785398) polar
hypot(NAN,INFINITY) = inf
hypot(DBL_MAX,DBL_MAX) = inf
    errno == ERANGE: Numerical result out of range
    FE_OVERFLOW raised

References

     * C23 standard (ISO/IEC 9899:2023):

          + 7.12.7.3 The hypot functions (p: TBD)

          + 7.25 Type-generic math <tgmath.h> (p: TBD)

          + F.10.4.3 The hypot functions (p: TBD)

     * C17 standard (ISO/IEC 9899:2018):

          + 7.12.7.3 The hypot functions (p: 181)

          + 7.25 Type-generic math <tgmath.h> (p: 272-273)

          + F.10.4.3 The hypot functions (p: 382)

     * C11 standard (ISO/IEC 9899:2011):

          + 7.12.7.3 The hypot functions (p: 248)

          + 7.25 Type-generic math <tgmath.h> (p: 373-375)

          + F.10.4.3 The hypot functions (p: 524)

     * C99 standard (ISO/IEC 9899:1999):

          + 7.12.7.3 The hypot functions (p: 229)

          + 7.22 Type-generic math <tgmath.h> (p: 335-337)

          + F.9.4.3 The hypot functions (p: 461)

See also

   powpowfpowl
   (C99)(C99)
   computes a number raised to the given power (\(\small{x^y}\)x^y)
   (function)
   sqrtsqrtfsqrtl
   (C99)(C99)
   computes square root (\(\small{\sqrt{x} }\) SQRT x)
   (function)
   cbrtcbrtfcbrtl
   (C99)(C99)(C99)
   computes cube root (\(\small{\sqrt[3]{x} }\)3 SQRT x)
   (function)
   cabscabsfcabsl
   (C99)(C99)(C99)
   computes the magnitude of a complex number
   (function)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=c/numeric/math/hypot
   &oldid=172025"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 23 May 2024, at 05:30.
     * This page has been accessed 47,897 times.
