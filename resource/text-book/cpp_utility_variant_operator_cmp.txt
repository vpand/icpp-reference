operator==, !=, <, <=, >, >=, <=>(std::variant)

   From cppreference.com
   < cpp | utility | variant

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Utilities library
   Language support
   Type support (basic types, RTTI)
   Library feature-test macros (C++20)
   Dynamic memory management
   Program utilities
   Coroutine support (C++20)
   Variadic functions
   is_constant_evaluated
   (C++20)
   is_within_lifetime
   (C++26)
   initializer_list
   (C++11)
   source_location
   (C++20)
   Debugging support
   is_debugger_present
   (C++26)
   breakpoint_if_debugging
   (C++26)
   breakpoint
   (C++26)
   Three-way comparison
   three_way_comparablethree_way_comparable_with
   (C++20)(C++20)
   strong_ordering
   (C++20)
   weak_ordering
   (C++20)
   partial_ordering
   (C++20)
   common_comparison_category
   (C++20)
   compare_three_way_result
   (C++20)
   compare_three_way
   (C++20)
   strong_order
   (C++20)
   weak_order
   (C++20)
   partial_order
   (C++20)
   compare_strong_order_fallback
   (C++20)
   compare_weak_order_fallback
   (C++20)
   compare_partial_order_fallback
   (C++20)
   is_eqis_ltis_lteq
   (C++20)(C++20)(C++20)
   is_neqis_gtis_gteq
   (C++20)(C++20)(C++20)
   General utilities
   Date and time
   Function objects
   Formatting library (C++20)
   bitset
   hash
   (C++11)
   Relational operators (deprecated in C++20)
   rel_ops::operator!=rel_ops::operator>

   rel_ops::operator<=rel_ops::operator>=
   Integer comparison functions
   cmp_equalcmp_lesscmp_less_than
   (C++20)(C++20)(C++20)
   cmp_not_equalcmp_greatercmp_greater_than
   (C++20)(C++20)(C++20)
   in_range
   (C++20)
   Swap and type operations
   swap
   ranges::swap
   (C++20)
   exchange
   (C++14)
   declval
   (C++11)
   to_underlying
   (C++23)
   forward
   (C++11)
   forward_like
   (C++23)
   move
   (C++11)
   move_if_noexcept
   (C++11)
   as_const
   (C++17)
   Common vocabulary types
   pair
   tuple
   (C++11)
   optional
   (C++17)
   any
   (C++17)
   variant
   (C++17)
   tuple_size
   (C++11)
   tuple_element
   (C++11)
   apply
   (C++17)
   make_from_tuple
   (C++17)
   expected
   (C++23)
   Elementary string conversions
   to_chars
   (C++17)
   from_chars
   (C++17)
   chars_format
   (C++17)
   to_chars_result
   (C++17)
   from_chars_result
   (C++17)

   std::variant
   Member functions
   variant::variant
   variant::~variant
   variant::operator=
   Observers
   variant::index
   variant::valueless_by_exception
   Modifiers
   variant::emplace
   variant::swap
   Visitation
   variant::visit
   (C++26)
   Non-member functions
   visit
   holds_alternative
   get(std::variant)
   get_if
   operator==operator!=operator<operator<=operator>operator>=operator<=>
   (C++20)
   swap(std::variant)
   Helper classes
   monostate
   bad_variant_access
   variant_size
   variant_alternative
   hash<std::variant>
   Helper objects
   variant_npos

   Defined in header <variant>
   template< class... Types >

   constexpr bool operator==( const std::variant<Types...>& v,
                              const std::variant<Types...>& w );
   (1)                        (since C++17)
   template< class... Types >

   constexpr bool operator!=( const std::variant<Types...>& v,
                              const std::variant<Types...>& w );
   (2)                        (since C++17)
   template< class... Types >

   constexpr bool operator<( const std::variant<Types...>& v,
                             const std::variant<Types...>& w );
   (3)                        (since C++17)
   template< class... Types >

   constexpr bool operator>( const std::variant<Types...>& v,
                             const std::variant<Types...>& w );
   (4)                        (since C++17)
   template< class... Types >

   constexpr bool operator<=( const std::variant<Types...>& v,
                              const std::variant<Types...>& w );
   (5)                        (since C++17)
   template< class... Types >

   constexpr bool operator>=( const std::variant<Types...>& v,
                              const std::variant<Types...>& w );
   (6)                        (since C++17)
   template< class... Types >

   constexpr std::common_comparison_category_t<
       std::compare_three_way_result_t<Types>...>
       operator<=>( const std::variant<Types...>& v,
                    const std::variant<Types...>& w );
   (7)                        (since C++20)
   1) Equality operator for variants:
     * If v.index() != w.index(), returns false;
     * otherwise if v.valueless_by_exception(), returns true;
     * otherwise returns std::get<v.index()>(v) == std::get<v.index()>(w).
       The behavior is undefined(until C++20)The program is
       ill-formed(since C++20) if std::get<i>(v) == std::get<i>(w) is not
       a valid expression returning a type convertible to bool, for any i.

   2) Inequality operator for variants:
     * If v.index() != w.index(), returns true;
     * otherwise if v.valueless_by_exception(), returns false;
     * otherwise returns std::get<v.index()>(v) != std::get<v.index()>(w).
       The behavior is undefined(until C++20)The program is
       ill-formed(since C++20) if std::get<i>(v) != std::get<i>(w) is not
       a valid expression returning a type convertible to bool, for any i.

   3) Less-than operator for variants:
     * If w.valueless_by_exception(), returns false;
     * otherwise if v.valueless_by_exception(), returns true;
     * otherwise if v.index() < w.index(), returns true;
     * otherwise if v.index() > w.index(), returns false;
     * otherwise returns std::get<v.index()>(v) < std::get<v.index()>(w).
       The behavior is undefined(until C++20)The program is
       ill-formed(since C++20) if std::get<i>(v) < std::get<i>(w) is not a
       valid expression returning a type convertible to bool, for any i.

   4) Greater-than operator for variants:
     * If v.valueless_by_exception(), returns false;
     * otherwise if w.valueless_by_exception(), returns true;
     * otherwise if v.index() > w.index(), returns true;
     * otherwise if v.index() < w.index(), returns false;
     * otherwise returns std::get<v.index()>(v) > std::get<v.index()>(w).
       The behavior is undefined(until C++20)The program is
       ill-formed(since C++20) if std::get<i>(v) > std::get<i>(w) is not a
       valid expression returning a type convertible to bool, for any i.

   5) Less-equal operator for variants:
     * If v.valueless_by_exception(), returns true;
     * otherwise if w.valueless_by_exception(), returns false;
     * otherwise if v.index() < w.index(), returns true;
     * otherwise if v.index() > w.index(), returns false;
     * otherwise returns std::get<v.index()>(v) <= std::get<v.index()>(w).
       The behavior is undefined(until C++20)The program is
       ill-formed(since C++20) if std::get<i>(v) <= std::get<i>(w) is not
       a valid expression returning a type convertible to bool, for any i.

   6) Greater-equal operator for variants:
     * If w.valueless_by_exception(), returns true;
     * otherwise if v.valueless_by_exception(), returns false;
     * otherwise if v.index() > w.index(), returns true;
     * otherwise if v.index() < w.index(), returns false;
     * otherwise std::get<v.index()>(v) >= std::get<v.index()>(w).The
       behavior is undefined(until C++20)The program is ill-formed(since
       C++20) if std::get<i>(v) >= std::get<i>(w) is not a valid
       expression returning a type convertible to bool, for any i.

   7) Three-way comparison operator for variants:
     * If both v.valueless_by_exception() and w.valueless_by_exception()
       are true, returns std::strong_ordering::equal;
     * otherwise if v.valueless_by_exception() is true, returns
       std::strong_ordering::less;
     * otherwise if w.valueless_by_exception() is true, returns
       std::strong_ordering::greater;
     * otherwise if v.index() != w.index(), returns v.index() <=>
       w.index();
     * otherwise equivalent to std::get<v.index()>(v) <=>
       std::get<v.index()>(w).

Parameters

   v,w - variants to compare

Return value

   The result of the comparison as described above.

Example

   Run this code
#include <iostream>
#include <string>
#include <variant>

int main()
{
    std::cout << std::boolalpha;
    std::string cmp;
    bool result;

    auto print2 = [&cmp, &result](const auto& lhs, const auto& rhs)
    {
        std::cout << lhs << ' ' << cmp << ' ' << rhs << " : " << result << '\n';
    };

    std::variant<int, std::string> v1, v2;

    std::cout << "operator==\n";
    {
        cmp = "==";

        // by default v1 = 0, v2 = 0;
        result = v1 == v2; // true
        std::visit(print2, v1, v2);

        v1 = v2 = 1;
        result = v1 == v2; // true
        std::visit(print2, v1, v2);

        v2 = 2;
        result = v1 == v2; // false
        std::visit(print2, v1, v2);

        v1 = "A";
        result = v1 == v2; // false: v1.index == 1, v2.index == 0
        std::visit(print2, v1, v2);

        v2 = "B";
        result = v1 == v2; // false
        std::visit(print2, v1, v2);

        v2 = "A";
        result = v1 == v2; // true
        std::visit(print2, v1, v2);
    }

    std::cout << "operator<\n";
    {
        cmp = "<";

        v1 = v2 = 1;
        result = v1 < v2; // false
        std::visit(print2, v1, v2);

        v2 = 2;
        result = v1 < v2; // true
        std::visit(print2, v1, v2);

        v1 = 3;
        result = v1 < v2; // false
        std::visit(print2, v1, v2);

        v1 = "A"; v2 = 1;
        result = v1 < v2; // false: v1.index == 1, v2.index == 0
        std::visit(print2, v1, v2);

        v1 = 1; v2 = "A";
        result = v1 < v2; // true: v1.index == 0, v2.index == 1
        std::visit(print2, v1, v2);

        v1 = v2 = "A";
        result = v1 < v2; // false
        std::visit(print2, v1, v2);

        v2 = "B";
        result = v1 < v2; // true
        std::visit(print2, v1, v2);

        v1 = "C";
        result = v1 < v2; // false
        std::visit(print2, v1, v2);
    }

    {
        std::variant<int, std::string> v1;
        std::variant<std::string, int> v2;
    //  v1 == v2;  // Compilation error: no known conversion
    }

    // TODO: C++20 three-way comparison operator <=> for variants
}

   Output:
operator==
0 == 0 : true
1 == 1 : true
1 == 2 : false
A == 2 : false
A == B : false
A == A : true
operator<
1 < 1 : false
1 < 2 : true
3 < 2 : false
A < 1 : false
1 < A : true
A < A : false
A < B : true
C < B : false

See also

   operator==operator!=operator<operator<=operator>operator>=operator<=>
   (C++17)(C++17)(C++17)(C++17)(C++17)(C++17)(C++20)
   compares optional objects
   (function template)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/utility/variant/
   operator_cmp&oldid=170896"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 13 April 2024, at 07:40.
     * This page has been accessed 55,857 times.
