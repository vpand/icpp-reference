std::ranges::partial_sort

   From cppreference.com
   < cpp | algorithm | ranges

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Algorithm library
   Constrained algorithms and algorithms on ranges (C++20)
   Constrained algorithms, e.g. ranges::copy, ranges::sort, ...
   Execution policies (C++17)
   is_execution_policy
   (C++17)
   execution::seqexecution::parexecution::par_unseqexecution::unseq
   (C++17)    (C++17)(C++17)(C++20)
   execution::sequenced_policyexecution::parallel_policyexecution::paralle
   l_unsequenced_policyexecution::parallel_unsequenced
   (C++17)(C++17)(C++17)(C++20)
   Non-modifying sequence operations
   Batch operations
   for_each
   for_each_n
   (C++17)
   Search operations
   all_ofany_ofnone_of
   (C++11)                (C++11)(C++11)
   countcount_if
   mismatch
   equal
   findfind_iffind_if_not
   (C++11)
   find_end
   find_first_of
   adjacent_find
   search
   search_n
   Modifying sequence operations
   Copy operations
   copycopy_if
   (C++11)
   copy_backward
   copy_n
   (C++11)
   move
   (C++11)
   move_backward
   (C++11)
   Swap operations
   swap
   iter_swap
   swap_ranges
   Transformation operations
   replacereplace_if
   transform
   replace_copyreplace_copy_if
   Generation operations
   fill
   fill_n
   generate
   generate_n
   Removing operations
   removeremove_if
   unique
   remove_copyremove_copy_if
   unique_copy
   Order-changing operations
   reverse
   reverse_copy
   rotate
   rotate_copy
   random_shuffleshuffle
   (until C++17)(C++11)
   shift_leftshift_right
   (C++20)(C++20)
   Sampling operations
   sample
   (C++17)
   Sorting and related operations
   Partitioning operations
   partition
   partition_copy
   (C++11)
   stable_partition
   is_partitioned
   (C++11)
   partition_point
   (C++11)
   Sorting operations
   sort
   stable_sort
   partial_sort
   partial_sort_copy
   is_sorted
   (C++11)
   is_sorted_until
   (C++11)
   nth_element
   Binary search operations
   (on partitioned ranges)
   lower_bound
   upper_bound
   equal_range
   binary_search
   Set operations (on sorted ranges)
   includes
   set_union
   set_intersection
   set_difference
   set_symmetric_difference
   Merge operations (on sorted ranges)
   merge
   inplace_merge
   Heap operations
   push_heap
   pop_heap
   make_heap
   sort_heap
   is_heap
   (C++11)
   is_heap_until
   (C++11)
   Minimum/maximum operations
   max
   min
   minmax
   (C++11)
   clamp
   (C++17)
   max_element
   min_element
   minmax_element
   (C++11)
   Lexicographical comparison operations
   lexicographical_compare
   lexicographical_compare_three_way
   (C++20)
   Permutation operations
   next_permutation
   prev_permutation
   is_permutation
   (C++11)
   C library
   qsort
   bsearch
   Numeric operations
   iota
   (C++11)
   inner_product
   adjacent_difference

   accumulate
   reduce
   (C++17)
   transform_reduce
   (C++17)
   partial_sum
   inclusive_scan
   (C++17)
   exclusive_scan
   (C++17)
   transform_inclusive_scan
   (C++17)
   transform_exclusive_scan
   (C++17)
   Operations on uninitialized memory
   uninitialized_copy
   uninitialized_move
   (C++17)
   uninitialized_fill
   uninitialized_copy_n
   (C++11)
   uninitialized_move_n
   (C++17)
   uninitialized_fill_n
   destroy
   (C++17)
   destroy_n
   (C++17)
   destroy_at
   (C++17)
   construct_at
   (C++20)
   uninitialized_default_construct
   (C++17)
   uninitialized_value_construct
   (C++17)
   uninitialized_default_construct_n
   (C++17)
   uninitialized_value_construct_n
   (C++17)

   Constrained algorithms
   All names in this menu belong to namespace std::ranges
   Non-modifying sequence operations
   all_ofany_ofnone_of
   for_each
   for_each_n

   countcount_if
   adjacent_find
   mismatch
   equal
   lexicographical_compare

   containscontains_subrange
   (C++23)(C++23)
   findfind_iffind_if_not
   find_lastfind_last_iffind_last_if_not
   (C++23)(C++23)(C++23)
   find_end
   find_first_of
   search
   search_n
   starts_with
   (C++23)
   ends_with
   (C++23)
   Modifying sequence operations
   copycopy_if
   copy_n
   copy_backward

   move
   move_backward
   shift_leftshift_right
   (C++23)(C++23)
   fill
   fill_n
   generate
   generate_n

   transform
   swap_ranges

   shuffle
   sample
   removeremove_if
   replacereplace_if
   reverse
   rotate
   remove_copyremove_copy_if

   unique
   replace_copyreplace_copy_if
   reverse_copy
   rotate_copy
   unique_copy
   Partitioning operations
   is_partitioned

   partition_point

   partition

   partition_copy

   stable_partition
   Sorting operations
   is_sorted
   is_sorted_until

   sort
   stable_sort

   partial_sort

   nth_element
   partial_sort_copy
   Binary search operations (on sorted ranges)
   lower_bound

   upper_bound

   binary_search

   equal_range
   Set operations (on sorted ranges)
   merge
   inplace_merge

   set_difference
   set_intersection

   set_union

   includes
   set_symmetric_difference
   Heap operations
   is_heap
   is_heap_until

   make_heap

   sort_heap
   push_heap
   pop_heap
   Minimum/maximum operations
   max
   max_element

   min
   min_element

   minmax
   minmax_element

   clamp
   Permutation operations
   is_permutation

   next_permutation

   prev_permutation
   Fold operations
   fold_left
   (C++23)
   fold_left_first
   (C++23)
   fold_right
   (C++23)
   fold_right_last
   (C++23)
   fold_left_with_iter
   (C++23)
   fold_left_first_with_iter
   (C++23)
   Numeric operations
   iota
   (C++23)
   Random number generation
   generate_random
   (C++26)
   Operations on uninitialized storage
   construct_at

   destroy
   destroy_n
   destroy_at
   uninitialized_copy

   uninitialized_move
   uninitialized_fill
   uninitialized_copy_n

   uninitialized_move_n
   uninitialized_fill_n
   uninitialized_default_construct
   uninitialized_default_construct_n
   uninitialized_value_construct
   uninitialized_value_construct_n
   Return types
   in_fun_result
   in_in_result
   in_found_result

   in_out_result
   in_in_out_result

   in_out_out_result

   min_max_result
   out_value_result
   (C++23)
   in_value_result
   (C++23)

   Defined in header <algorithm>
   Call signature
   template< std::random_access_iterator I, std::sentinel_for<I> S,

             class Comp = ranges::less, class Proj = std::identity >
   requires std::sortable<I, Comp, Proj>
   constexpr I
       partial_sort( I first, I middle, S last, Comp comp = {}, Proj proj
   = {} );
   (1)                                                             (since C++20)
   template< ranges::random_access_range R,

             class Comp = ranges::less, class Proj = std::identity >
   requires std::sortable<ranges::iterator_t<R>, Comp, Proj>
   constexpr ranges::borrowed_iterator_t<R>
       partial_sort( R&& r, ranges::iterator_t<R> middle, Comp comp = {},
                     Proj proj = {} );
   (2)                                                             (since C++20)
   1) Rearranges elements such that the range [first, middle) contains the
   sorted middle - first smallest elements in the range [first, last).
   The order of equal elements is not guaranteed to be preserved. The
   order of the remaining elements in the range [middle, last) is
   unspecified.
   The elements are compared using the given binary comparison function
   comp and projected using proj function object.
   2) Same as (1), but uses r as the range, as if using ranges::begin(r)
   as first and ranges::end(r) as last.

   The function-like entities described on this page are niebloids, that
   is:
     * Explicit template argument lists cannot be specified when calling
       any of them.
     * None of them are visible to argument-dependent lookup.
     * When any of them are found by normal unqualified lookup as the name
       to the left of the function-call operator, argument-dependent
       lookup is inhibited.

   In practice, they may be implemented as function objects, or with
   special compiler extensions.

Parameters

   first, last - iterator-sentinel defining the range to sort
   r           - the range to sort
   middle      - the iterator defining the last element to be sorted
   comp        - comparator to apply to the projected elements
   proj        - projection to apply to the elements

Return value

   An iterator equal to last.

Complexity

   \(\scriptsize \mathcal{O}(N\cdot\log{(M)})\)(N·log(M)) comparisons and
   twice as many projections, where \(\scriptsize N\)N is
   ranges::distance(first, last), \(\scriptsize M\)M is
   ranges::distance(first, middle).

Possible implementation

struct partial_sort_fn
{
    template<std::random_access_iterator I, std::sentinel_for<I> S,
             class Comp = ranges::less, class Proj = std::identity>
    requires std::sortable<I, Comp, Proj>
    constexpr I
        operator()(I first, I middle, S last, Comp comp = {}, Proj proj = {}) co
nst
    {
        if (first == middle)
            return ranges::next(first, last);
        ranges::make_heap(first, middle, comp, proj);
        auto it {middle};
        for (; it != last; ++it)
        {
            if (std::invoke(comp, std::invoke(proj, *it), std::invoke(proj, *fir
st)))
            {
                ranges::pop_heap(first, middle, comp, proj);
                ranges::iter_swap(middle - 1, it);
                ranges::push_heap(first, middle, comp, proj);
            }
        }
        ranges::sort_heap(first, middle, comp, proj);
        return it;
    }

    template<ranges::random_access_range R, class Comp = ranges::less,
             class Proj = std::identity>
    requires std::sortable<ranges::iterator_t<R>, Comp, Proj>
    constexpr ranges::borrowed_iterator_t<R>
        operator()(R&& r, ranges::iterator_t<R> middle, Comp comp = {}, Proj pro
j = {}) const
    {
        return (*this)(ranges::begin(r), std::move(middle), ranges::end(r),
                       std::move(comp), std::move(proj));
    }
};

inline constexpr partial_sort_fn partial_sort {};

Example

   Run this code
#include <algorithm>
#include <functional>
#include <iostream>
#include <string>
#include <vector>

void print(const auto& v)
{
    for (const char e : v)
        std::cout << e << ' ';
    std::cout << '\n';
}

void underscore(int n)
{
    while (n-- > 0)
        std::cout << "^ ";
    std::cout << '\n';
}

int main()
{
    static_assert('A' < 'a');
    std::vector<char> v {'x', 'P', 'y', 'C', 'z', 'w', 'P', 'o'};
    print(v);
    const int m {3};
    std::ranges::partial_sort(v, v.begin() + m);
    print(v), underscore(m);

    static_assert('1' < 'a');
    std::string s {"3a1b41c5"};
    print(s);
    std::ranges::partial_sort(s.begin(), s.begin() + m, s.end(), std::greater {}
);
    print(s), underscore(m);
}

   Output:
x P y C z w P o
C P P y z x w o
^ ^ ^
3 a 1 b 4 1 c 5
c b a 1 3 1 4 5
^ ^ ^

See also

   ranges::partial_sort_copy
   (C++20)
   copies and partially sorts a range of elements
   (niebloid)
   ranges::sort
   (C++20)
   sorts a range into ascending order
   (niebloid)
   ranges::stable_sort
   (C++20)
   sorts a range of elements while preserving order between equal elements
   (niebloid)
   ranges::nth_element
   (C++20)
   partially sorts the given range making sure that it is partitioned by
   the given element
   (niebloid)
   ranges::make_heap
   (C++20)
   creates a max heap out of a range of elements
   (niebloid)
   ranges::pop_heap
   (C++20)
   removes the largest element from a max heap
   (niebloid)
   ranges::push_heap
   (C++20)
   adds an element to a max heap
   (niebloid)
   ranges::sort_heap
   (C++20)
   turns a max heap into a range of elements sorted in ascending order
   (niebloid)
   partial_sort
   sorts the first N elements of a range
   (function template)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/algorithm/ranges
   /partial_sort&oldid=150559"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 15 April 2023, at 05:37.
     * This page has been accessed 13,283 times.
