std::ranges::lazy_split_view<V, Pattern>::outer_iterator<Const>::value_type

   From cppreference.com
   < cpp | ranges | lazy split view

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Ranges library
   Range access
   begin
   cbegin
   end
   cend
   rbegin
   crbegin
   rend
   crend
   size
   ssize
   data
   cdata
   empty
   Range conversions
   std::from_range_t
   std::from_range
   (C++23)(C++23)
   to
   (C++23)
   Range primitives
   range_size_trange_difference_trange_value_trange_reference_t
   iterator_tconst_iterator_tsentinel_tconst_sentinel_t
   (C++23)(C++23)
   range_const_reference_trange_rvalue_reference_trange_common_reference_t
   (C++23)
   elements_of
   (C++23)
   Dangling iterator handling
   dangling
   borrowed_iterator_t
   borrowed_subrange_t
   Range concepts
   range
   borrowed_range
   sized_range
   constant_range
   (C++23)
   common_range
   view
   viewable_range
   input_range
   output_range
   forward_range
   bidirectional_range
   random_access_range
   contiguous_range
   Views
   view_interface
   subrange
   Range factories
   empty_viewviews::empty
   single_viewviews::single
   iota_viewviews::iota
   repeat_viewviews::repeat
   (C++23)(C++23)
   basic_istream_viewviews::istream
   Range adaptors
   views::all_tviews::all
   ref_view
   owning_view
   as_rvalue_viewviews::as_rvalue
   (C++23)(C++23)
   filter_viewviews::filter
   transform_viewviews::transform
   take_viewviews::take
   take_while_viewviews::take_while
   concat_viewviews::concat
   (C++26)(C++26)
   drop_viewviews::drop
   drop_while_viewviews::drop_while
   join_viewviews::join
   join_with_viewviews::join_with
   (C++23)(C++23)
   lazy_split_viewviews::lazy_split
   split_viewviews::split
   views::counted
   common_viewviews::common
   reverse_viewviews::reverse
   as_const_viewviews::as_const
   (C++23)(C++23)
   elements_viewviews::elements
   keys_viewviews::keys
   values_viewviews::values
   enumerate_viewviews::enumerate
   (C++23)(C++23)
   zip_viewviews::zip
   (C++23)(C++23)
   zip_transform_viewviews::zip_transform
   (C++23)(C++23)
   adjacent_viewviews::adjacent
   (C++23)(C++23)
   views::pairwise
   (C++23)
   adjacent_transform_viewviews::adjacent_transform
   (C++23)(C++23)
   views::pairwise_transform
   (C++23)
   chunk_viewviews::chunk
   (C++23)(C++23)
   slide_viewviews::slide
   (C++23)(C++23)
   chunk_by_viewviews::chunk_by
   (C++23)(C++23)
   stride_viewviews::stride
   (C++23)(C++23)
   cartesian_product_viewviews::cartesian_product
   (C++23)(C++23)
   Range generators
   std::generator
   (C++23)
   Range adaptor objects
   Range adaptor closure objects
   range_adaptor_closure
   (C++23)
   Helper items
   copyable-box
   movable-box
   (until C++23)(C++23)
   simple-view
   non-propagating-cache

   std::ranges::lazy_split_view
   Member functions
   lazy_split_view::lazy_split_view
   lazy_split_view::base
   lazy_split_view::begin
   lazy_split_view::end
   Nested classes
   lazy_split_view::outer_iterator
   lazy_split_view::outer_iterator::value_type
   lazy_split_view::inner_iterator
   Deduction guides

   struct value_type : ranges::view_interface<value_type>
                                                         (since C++20)

   The value type of the iterator ranges::lazy_split_view<V,
   Pattern>::/*outer_iterator*/<Const>.

Data members

   Member name Definition
   i_ (private) An iterator of type outer_iterator into underlying view of
   the outer class.
   (exposition-only member object*)

Member functions

   (constructor)
   (C++20)
   constructs a value_type object
   (public member function)
   begin
   (C++20)
   returns an inner_iterator to the beginning of the inner range
   (public member function)
   end
   (C++20)
   returns a std::default_sentinel
   (public member function)

Inherited from std::ranges::view_interface

   empty
   (C++20)
   returns whether the derived view is empty. Provided if it satisfies
   sized_range or forward_range.
   (public member function of std::ranges::view_interface<D>)
   cbegin
   (C++23)
   returns a constant iterator to the beginning of the range.
   (public member function of std::ranges::view_interface<D>)
   cend
   (C++23)
   returns a sentinel for the constant iterator of the range.
   (public member function of std::ranges::view_interface<D>)
   operator bool
   (C++20)
   returns whether the derived view is not empty. Provided if
   ranges::empty is applicable to it.
   (public member function of std::ranges::view_interface<D>)
   front
   (C++20)
   returns the first element in the derived view. Provided if it satisfies
   forward_range.
   (public member function of std::ranges::view_interface<D>)

Member functions

std::ranges::lazy_split_view::outer_iterator::value_type::value_type

   value_type() = default;
   (1)                                                 (since C++20)
   constexpr explicit value_type(/*outer_iterator*/ i);
   (2)                                                 (since C++20)
   1) Value initializes the i_ via its default member initializer (=
   /*outer_iterator*/()).
   2) Initializes i_ with std::move(i).

std::ranges::lazy_split_view::outer_iterator::value_type::begin

   constexpr /*inner_iterator*/<Const> begin() const;
                                                     (since C++20)

   Equivalent to return /*inner_iterator*/<Const>{i_};.

std::ranges::lazy_split_view::outer_iterator::value_type::end

   constexpr std::default_sentinel_t end() const noexcept;
                                                          (since C++20)

   Returns std::default_sentinel.

Defect reports

   The following behavior-changing defect reports were applied
   retroactively to previously published C++ standards.
   DR Applied to Behavior as published Correct behavior
   LWG 3593 C++20 end always returns std::default_sentinel but might not
   be noexcept made noexcept
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/ranges/lazy_spli
   t_view/value_type&oldid=157812"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 3 September 2023, at 14:46.
     * This page has been accessed 4,473 times.
