std::multiset<Key,Compare,Allocator>::key_comp

   From cppreference.com
   < cpp | container | multiset


   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Containers library
   Sequence
   array
   (C++11)
   vector
   vector<bool>
   deque
   forward_list
   (C++11)
   list
   Associative
   set
   multiset
   map
   multimap
   Unordered associative
   unordered_set
   (C++11)
   unordered_multiset
   (C++11)
   unordered_map
   (C++11)
   unordered_multimap
   (C++11)
   Adaptors
   stack
   queue
   priority_queue
   flat_set
   (C++23)
   flat_multiset
   (C++23)
   flat_map
   (C++23)
   flat_multimap
   (C++23)
   Views
   span
   (C++20)
   mdspan
   (C++23)
   Iterator invalidation
   Member function table
   Non-member function table

   std::multiset
   Member functions
   multiset::multiset
   multiset::~multiset
   multiset::operator=
   multiset::get_allocator
   Iterators
   multiset::beginmultiset::cbegin
   (C++11)
   multiset::endmultiset::cend
   (C++11)
   multiset::rbeginmultiset::crbegin
   (C++11)
   multiset::rendmultiset::crend
   (C++11)
   Capacity
   multiset::size
   multiset::max_size
   multiset::empty
   Modifiers
   multiset::clear
   multiset::erase
   multiset::swap
   multiset::extract
   (C++17)
   multiset::merge
   (C++17)
   multiset::insert
   multiset::insert_range
   (C++23)
   multiset::emplace
   (C++11)
   multiset::emplace_hint
   (C++11)
   Lookup
   multiset::count
   multiset::find
   multiset::contains
   (C++20)
   multiset::equal_range
   multiset::lower_bound
   multiset::upper_bound
   Observers
   multiset::key_comp
   multiset::value_comp
   Non-member functions
   operator==operator!=operator<operator>operator<=operator>=operator<=>
   (until C++20)(until C++20)(until C++20)(until C++20)(until
   C++20)(C++20)
   std::swap(std::multiset)
   erase_if(std::multiset)
   (C++20)
   Deduction guides(C++17)

   key_compare key_comp() const;

   Returns the function object that compares the keys, which is a copy of
   this container's constructor argument comp. It is the same as
   value_comp.

Parameters

   (none)

Return value

   The key comparison function object.

Complexity

   Constant.

Example

   Run this code
#include <iostream>
#include <set>
#include <utility>

// Example module 97 key compare function
struct ModCmp
{
    bool operator()(int lhs, int rhs) const
    {
        return (lhs % 97) < (rhs % 97);
    }
};

int main()
{
    std::multiset<int, ModCmp> cont{1, 2, 3, 4, 5};

    auto comp_func = cont.key_comp();

    for (const int key : cont)
    {
        const bool before = comp_func(key, 100);
        const bool after = comp_func(100, key);

        std::cout << '(' << key << ") ";
        if (!before && !after)
            std::cout << "equivalent to key (100)\n";
        else if (before)
            std::cout << "goes before key (100)\n";
        else if (after)
            std::cout << "goes after key (100)\n";
        else
            std::unreachable();
    }
}

   Output:
Key (1) goes before key (100)
Key (2) goes before key (100)
Key (3) equivalent to key (100)
Key (4) goes after key (100)
Key (5) goes after key (100)

See also

   value_comp
   returns the function that compares keys in objects of type value_type
   (public member function)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/container/multis
   et/key_comp&oldid=135955"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 29 November 2021, at 20:38.
     * This page has been accessed 23,916 times.
