Comments

   From cppreference.com
   < cpp

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   C++ language
   General topics
   Preprocessor
   Comments
   Keywords
   Escape sequences
   Flow control
   Conditional execution statements
   if
   switch
   Iteration statements (loops)
   for
   range-for (C++11)
   while
   do-while
   Jump statements
   continue - break
   goto - return
   Functions
   Function declaration
   Lambda function expression
   inline specifier
   Dynamic exception specifications (until C++17*)
   noexcept specifier (C++11)
   Exceptions
   throw-expression
   try block
   handler
   Namespaces
   Namespace declaration
   Namespace aliases
   Types
   Fundamental types
   Enumeration types
   Function types
   Class/struct types
   Union types
   Specifiers
   const/volatile
   decltype (C++11)
   auto (C++11)
   constexpr (C++11)
   consteval (C++20)
   constinit (C++20)
   Storage duration specifiers
   Initialization
   Default-initialization
   Value-initialization
   Zero-initialization
   Copy-initialization
   Direct-initialization
   Aggregate initialization
   List-initialization (C++11)
   Constant initialization
   Reference initialization
   Expressions
   Value categories
   Order of evaluation
   Operators
   Operator precedence
   Alternative representations
   Literals
   Boolean - Integer - Floating-point
   Character - String - nullptr (C++11)
   User-defined (C++11)
   Utilities
   Attributes (C++11)
   Types
   typedef declaration
   Type alias declaration (C++11)
   Casts
   Implicit conversions
   static_cast
   const_cast
   Explicit conversions
   dynamic_cast
   reinterpret_cast
   Memory allocation
   new expression
   delete expression
   Classes
   Class declaration
   Constructors
   this pointer
   Access specifiers
   friend specifier
   Class-specific function properties
   Virtual function
   override specifier (C++11)
   final specifier (C++11)
   explicit (C++11)
   static
   Special member functions
   Default constructor
   Copy constructor
   Move constructor (C++11)
   Copy assignment
   Move assignment (C++11)
   Destructor
   Templates
   Class template
   Function template
   Template specialization
   Parameter packs (C++11)
   Miscellaneous
   Inline assembly
   History of C++

   Basic Concepts
   Comments
   ASCII
   Punctuation
   Names and identifiers
   Types
   Fundamental types
   Objects
   Scope
   Object lifetime
   Storage duration and linkage
   Definitions and ODR
   Name lookup
   Qualified name lookup
   Unqualified name lookup
   The as-if rule
   Undefined behavior
   Memory model
   Multi-threaded executions and data races (C++11)
   Character sets and encodings
   Phases of translation
   The main function
   Modules (C++20)

   Comments serve as a sort of in-code documentation. When inserted into a
   program, they are effectively ignored by the compiler; they are solely
   intended to be used as notes by the humans that read source code.
   Although specific documentation is not part of the C++ standard,
   several utilities exist that parse comments with different
   documentation formats.

Syntax

   /* comment */ (1)
   // comment    (2)
   1) Often known as "C-style" or "multi-line" comments.
   2) Often known as "C++-style" or "single-line" comments.

   All comments are removed from the program at translation phase 3 by
   replacing each comment with a single whitespace character.

C-style

   C-style comments are usually used to comment large blocks of text,
   however, they can be used to comment single lines. To insert a C-style
   comment, simply surround text with /* and */; this will cause the
   contents of the comment to be ignored by the compiler. Although it is
   not part of the C++ standard, /** and */ are often used to indicate
   documentation blocks; this is legal because the second asterisk is
   simply treated as part of the comment. C-style comments cannot be
   nested.

C++-style

   C++-style comments are usually used to comment single lines, however,
   multiple C++-style comments can be placed together to form multi-line
   comments. C++-style comments tell the compiler to ignore all content
   between // and a new line.

Notes

   Because comments are removed before the preprocessor stage, a macro
   cannot be used to form a comment and an unterminated C-style comment
   doesn't spill over from an #include'd file.

   Besides commenting out, other mechanisms used for source code exclusion
   are
#if 0
    std::cout << "this will not be executed or even compiled\n";
#endif

   and
if (false)
{
    std::cout << "this will not be executed\n";
}

Example

   Run this code
#include <iostream>

/* C-style comments can contain
multiple lines */
/* or just one */

/**************
 *  you can insert any *, but
 *  you can't make comments nested
 */

// C++-style comments can comment one line

// or, they can
// be strung together

int main()
{
    // comments are removed before preprocessing,
    // so ABC is "1", not "1//2134", and "1 hello world"
    // will be printed
#define ABC 1//2134
    std::cout << ABC << " hello world\n";

    // The below code won't be run
    // return 1;

    // The below code will be run
    return 0;
}

   Output:
1 hello world

See also

   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/comment&oldid=17
   2112"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 28 May 2024, at 08:35.
     * This page has been accessed 206,286 times.
