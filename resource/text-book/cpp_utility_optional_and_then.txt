std::optional<T>::and_then

   From cppreference.com
   < cpp | utility | optional

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Utilities library
   Language support
   Type support (basic types, RTTI)
   Library feature-test macros (C++20)
   Dynamic memory management
   Program utilities
   Coroutine support (C++20)
   Variadic functions
   is_constant_evaluated
   (C++20)
   is_within_lifetime
   (C++26)
   initializer_list
   (C++11)
   source_location
   (C++20)
   Debugging support
   is_debugger_present
   (C++26)
   breakpoint_if_debugging
   (C++26)
   breakpoint
   (C++26)
   Three-way comparison
   three_way_comparablethree_way_comparable_with
   (C++20)(C++20)
   strong_ordering
   (C++20)
   weak_ordering
   (C++20)
   partial_ordering
   (C++20)
   common_comparison_category
   (C++20)
   compare_three_way_result
   (C++20)
   compare_three_way
   (C++20)
   strong_order
   (C++20)
   weak_order
   (C++20)
   partial_order
   (C++20)
   compare_strong_order_fallback
   (C++20)
   compare_weak_order_fallback
   (C++20)
   compare_partial_order_fallback
   (C++20)
   is_eqis_ltis_lteq
   (C++20)(C++20)(C++20)
   is_neqis_gtis_gteq
   (C++20)(C++20)(C++20)
   General utilities
   Date and time
   Function objects
   Formatting library (C++20)
   bitset
   hash
   (C++11)
   Relational operators (deprecated in C++20)
   rel_ops::operator!=rel_ops::operator>

   rel_ops::operator<=rel_ops::operator>=
   Integer comparison functions
   cmp_equalcmp_lesscmp_less_than
   (C++20)(C++20)(C++20)
   cmp_not_equalcmp_greatercmp_greater_than
   (C++20)(C++20)(C++20)
   in_range
   (C++20)
   Swap and type operations
   swap
   ranges::swap
   (C++20)
   exchange
   (C++14)
   declval
   (C++11)
   to_underlying
   (C++23)
   forward
   (C++11)
   forward_like
   (C++23)
   move
   (C++11)
   move_if_noexcept
   (C++11)
   as_const
   (C++17)
   Common vocabulary types
   pair
   tuple
   (C++11)
   optional
   (C++17)
   any
   (C++17)
   variant
   (C++17)
   tuple_size
   (C++11)
   tuple_element
   (C++11)
   apply
   (C++17)
   make_from_tuple
   (C++17)
   expected
   (C++23)
   Elementary string conversions
   to_chars
   (C++17)
   from_chars
   (C++17)
   chars_format
   (C++17)
   to_chars_result
   (C++17)
   from_chars_result
   (C++17)

   std::optional
   Member functions
   optional::optional
   optional::~optional
   optional::operator=
   Observers
   optional::operator->optional::operator*
   optional::operator booloptional::has_value
   optional::value
   optional::value_or
   Monadic operations
   optional::and_then
   (C++23)
   optional::transform
   (C++23)
   optional::or_else
   (C++23)
   Modifiers
   optional::emplace
   optional::swap
   optional::reset
   Non-member functions
   operator==operator!=operator<operator<=operator>operator>=operator<=>
   (C++20)
   make_optional
   swap(std::optional)
   Deduction guides
   Helper classes
   hash<std::optional>
   nullopt_t
   in_place_t
   bad_optional_access
   Helper objects
   nullopt
   in_place

   template< class F >
   constexpr auto and_then( F&& f ) &;
   (1)                (since C++23)
   template< class F >
   constexpr auto and_then( F&& f ) const&;
   (2)                (since C++23)
   template< class F >
   constexpr auto and_then( F&& f ) &&;
   (3)                (since C++23)
   template< class F >
   constexpr auto and_then( F&& f ) const&&;
   (4)                (since C++23)

   If *this contains a value, invokes f with the contained value as an
   argument, and returns the result of that invocation; otherwise, returns
   an empty std::optional.

   The return type (see below) must be a specialization of std::optional
   (unlike transform()). Otherwise, the program is ill-formed.
   1) Equivalent to
if (*this)
    return std::invoke(std::forward<F>(f), **this);
else
    return std::remove_cvref_t<std::invoke_result_t<F, T&>>{};

   2) Equivalent to
if (*this)
    return std::invoke(std::forward<F>(f), **this);
else
    return std::remove_cvref_t<std::invoke_result_t<F, const T&>>{};

   3) Equivalent to
if (*this)
    return std::invoke(std::forward<F>(f), std::move(**this));
else
    return std::remove_cvref_t<std::invoke_result_t<F, T>>{};

   4) Equivalent to
if (*this)
    return std::invoke(std::forward<F>(f), std::move(**this));
else
    return std::remove_cvref_t<std::invoke_result_t<F, const T>>{};

Parameters

   f - a suitable function or Callable object that returns an
   std::optional

Return value

   The result of f or an empty std::optional, as described above.

Notes

   Some languages call this operation flatmap.
   Feature-test macro  Value    Std                 Feature
   __cpp_lib_optional 202110L (C++23) Monadic operations in std::optional

Example

   Run this code
#include <charconv>
#include <iomanip>
#include <iostream>
#include <optional>
#include <ranges>
#include <string>
#include <string_view>
#include <vector>

std::optional<int> to_int(std::string_view sv)
{
    int r{};
    auto [ptr, ec]{std::from_chars(sv.data(), sv.data() + sv.size(), r)};
    if (ec == std::errc())
        return r;
    else
        return std::nullopt;
}

int main()
{
    using namespace std::literals;

    const std::vector<std::optional<std::string>> v
    {
        "1234", "15 foo", "bar", "42", "5000000000", " 5", std::nullopt, "-43"
    };

    for (auto&& x : v | std::views::transform(
        [](auto&& o)
        {
            // debug print the content of input optional<string>
            std::cout << std::left << std::setw(13)
                      << std::quoted(o.value_or("nullopt")) << " -> ";

            return o
                // if optional is nullopt convert it to optional with "" string
                .or_else([]{ return std::optional{""s}; })
                // flatmap from strings to ints (making empty optionals where it
 fails)
                .and_then(to_int)
                // map int to int + 1
                .transform([](int n) { return n + 1; })
                // convert back to strings
                .transform([](int n) { return std::to_string(n); })
                // replace all empty optionals that were left by
                // and_then and ignored by transforms with "NaN"
                .value_or("NaN"s);
        }))
        std::cout << x << '\n';
}

   Output:
"1234"        -> 1235
"15 foo"      -> 16
"bar"         -> NaN
"42"          -> 43
"5000000000"  -> NaN
" 5"          -> NaN
"nullopt"     -> NaN
"-43"         -> -42

See also

   value_or
   returns the contained value if available, another value otherwise
   (public member function)
   transform
   (C++23)
   returns an optional containing the transformed contained value if it
   exists, or an empty optional otherwise
   (public member function)
   or_else
   (C++23)
   returns the optional itself if it contains a value, or the result of
   the given function otherwise
   (public member function)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/utility/optional
   /and_then&oldid=161383"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 25 October 2023, at 11:50.
     * This page has been accessed 55,038 times.
