std::shared_lock

   From cppreference.com
   < cpp | thread

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Concurrency support library
   Threads
   thread
   (C++11)
   jthread
   (C++20)
   stop_token
   (C++20)
   stop_source
   (C++20)
   stop_callback
   (C++20)
   hardware_destructive_interference_sizehardware_constructive_interferenc
   e_size
   (C++17)(C++17)
   this_thread namespace
   get_id
   (C++11)
   yield
   (C++11)
   sleep_for
   (C++11)
   sleep_until
   (C++11)
   Mutual exclusion
   mutex
   (C++11)
   recursive_mutex
   (C++11)
   shared_mutex
   (C++17)
   timed_mutex
   (C++11)
   recursive_timed_mutex
   (C++11)
   shared_timed_mutex
   (C++14)
   Generic lock management
   lock_guard
   (C++11)
   scoped_lock
   (C++17)
   unique_lock
   (C++11)
   shared_lock
   (C++14)
   defer_lock_ttry_to_lock_tadopt_lock_t
   (C++11)(C++11)(C++11)
   lock
   (C++11)
   try_lock
   (C++11)
   defer_locktry_to_lockadopt_lock
   (C++11)(C++11)(C++11)
   once_flag
   (C++11)
   call_once
   (C++11)
   Condition variables
   condition_variable
   (C++11)
   condition_variable_any
   (C++11)
   notify_all_at_thread_exit
   (C++11)
   cv_status
   (C++11)
   Semaphores
   counting_semaphorebinary_semaphore
   (C++20)(C++20)
   Latches and Barriers
   latch
   (C++20)
   barrier
   (C++20)
   Futures
   promise
   (C++11)
   future
   (C++11)
   shared_future
   (C++11)
   packaged_task
   (C++11)
   async
   (C++11)
   launch
   (C++11)
   future_status
   (C++11)
   future_error
   (C++11)
   future_category
   (C++11)
   future_errc
   (C++11)
   Safe Reclamation
   rcu_obj_base
   (C++26)
   rcu_domain
   (C++26)
   rcu_default_domain
   (C++26)
   rcu_synchronize
   (C++26)
   rcu_barrier
   (C++26)
   rcu_retire
   (C++26)
   Hazard Pointers
   hazard_pointer_obj_base
   (C++26)
   hazard_pointer
   (C++26)
   make_hazard_pointer
   (C++26)
   Atomic types
   atomic
   (C++11)
   atomic_ref
   (C++20)
   atomic_flag
   (C++11)
   Initialization of atomic types
   atomic_init
   (C++11)(deprecated in C++20)
   ATOMIC_VAR_INIT
   (C++11)(deprecated in C++20)
   ATOMIC_FLAG_INIT
   (C++11)
   Memory ordering
   memory_order
   (C++11)
   kill_dependency
   (C++11)
   atomic_thread_fence
   (C++11)
   atomic_signal_fence
   (C++11)
   Free functions for atomic operations
   atomic_storeatomic_store_explicit
   (C++11)(C++11)
   atomic_loadatomic_load_explicit
   (C++11)(C++11)
   atomic_exchangeatomic_exchange_explicit
   (C++11)(C++11)
   atomic_compare_exchange_weakatomic_compare_exchange_weak_explicitatomic
   _compare_exchange_strongatomic_compare_exchange_strong_explicit
   (C++11)(C++11)(C++11)(C++11)
   atomic_fetch_addatomic_fetch_add_explicit
   (C++11)(C++11)
   atomic_fetch_subatomic_fetch_sub_explicit
   (C++11)(C++11)
   atomic_fetch_andatomic_fetch_and_explicit
   (C++11)(C++11)
   atomic_fetch_oratomic_fetch_or_explicit
   (C++11)(C++11)
   atomic_fetch_xoratomic_fetch_xor_explicit
   (C++11)(C++11)
   atomic_fetch_maxatomic_fetch_max_explicit
   (C++26)(C++26)
   atomic_fetch_minatomic_fetch_min_explicit
   (C++26)(C++26)
   atomic_is_lock_free
   (C++11)
   atomic_waitatomic_wait_explicit
   (C++20)(C++20)
   atomic_notify_one
   (C++20)
   atomic_notify_all
   (C++20)
   Free functions for atomic flags
   atomic_flag_test_and_setatomic_flag_test_and_set_explicit
   (C++11)(C++11)
   atomic_flag_clearatomic_flag_clear_explicit
   (C++11)(C++11)
   atomic_flag_testatomic_flag_test_explicit
   (C++20)(C++20)
   atomic_flag_waitatomic_flag_wait_explicit
   (C++20)(C++20)
   atomic_flag_notify_one
   (C++20)
   atomic_flag_notify_all
   (C++20)

   std::shared_lock
   Member functions
   shared_lock::shared_lock
   shared_lock::~shared_lock
   shared_lock::operator=
   Shared locking
   shared_lock::lock
   shared_lock::try_lock
   shared_lock::try_lock_for
   shared_lock::try_lock_until
   shared_lock::unlock
   Modifiers
   shared_lock::swap
   shared_lock::release
   Observers
   shared_lock::mutex
   shared_lock::owns_lock
   shared_lock::operator bool
   Non-member functions
   swap(std::shared_lock)

   Defined in header <shared_mutex>
   template< class Mutex >
   class shared_lock;
                                   (since C++14)

   The class shared_lock is a general-purpose shared mutex ownership
   wrapper allowing deferred locking, timed locking and transfer of lock
   ownership. Locking a shared_lock locks the associated shared mutex in
   shared mode (to lock it in exclusive mode, std::unique_lock can be
   used).

   The shared_lock class is movable, but not copyable - it meets the
   requirements of MoveConstructible and MoveAssignable but not of
   CopyConstructible or CopyAssignable.

   shared_lock meets the Lockable requirements. If Mutex meets the
   SharedTimedLockable requirements, shared_lock also meets TimedLockable
   requirements.

   In order to wait in a shared mutex in shared ownership mode,
   std::condition_variable_any can be used (std::condition_variable
   requires std::unique_lock and so can only wait in unique ownership
   mode).

Template parameters

   Mutex - the type of the shared mutex to lock. The type must meet the
   SharedLockable requirements

Member types

   Type       Definition
   mutex_type Mutex

Member functions

   (constructor)
   constructs a shared_lock, optionally locking the supplied mutex
   (public member function)
   (destructor)
   unlocks the associated mutex
   (public member function)
   operator=
   unlocks the mutex, if owned, and acquires ownership of another
   (public member function)

Shared locking

   lock
   locks the associated mutex
   (public member function)
   try_lock
   tries to lock the associated mutex
   (public member function)
   try_lock_for
   tries to lock the associated mutex, for the specified duration
   (public member function)
   try_lock_until
   tries to lock the associated mutex, until a specified time point
   (public member function)
   unlock
   unlocks the associated mutex
   (public member function)

Modifiers

   swap
   swaps the data members with another shared_lock
   (public member function)
   release
   disassociates the mutex without unlocking
   (public member function)

Observers

   mutex
   returns a pointer to the associated mutex
   (public member function)
   owns_lock
   tests whether the lock owns its associated mutex
   (public member function)
   operator bool
   tests whether the lock owns its associated mutex
   (public member function)

Non-member functions

   std::swap(std::shared_lock)
   (C++14)
   specialization of std::swap for shared_lock
   (function template)

Defect reports

   The following behavior-changing defect reports were applied
   retroactively to previously published C++ standards.
   DR Applied to Behavior as published Correct behavior
   LWG 2981 C++17 redundant deduction guide from shared_lock<Mutex> was
   provided removed
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/thread/shared_lo
   ck&oldid=145750"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 22 December 2022, at 06:37.
     * This page has been accessed 320,466 times.
