C++ named requirements: BitmaskType

   From cppreference.com
   < cpp | named req

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   C++ named requirements
   Basic
   DefaultConstructible
   CopyAssignable
   CopyConstructible
   MoveAssignable
   (C++11)
   MoveConstructible
   (C++11)
   Destructible
   Type properties
   ScalarType
   TriviallyCopyable
   (C++11)
   StandardLayoutType
   (C++11)
   PODType
   TrivialType
   (C++11)
   ImplicitLifetimeType
   Library-Wide
   EqualityComparable
   LessThanComparable
   Swappable
   ValueSwappable
   (C++11)
   NullablePointer
   (C++11)
   Hash
   (C++11)
   Allocator
   FunctionObject
   Callable
   Predicate
   BinaryPredicate
   Compare
   Container
   Container
   SequenceContainer
   ContiguousContainer
   (C++17)
   ReversibleContainer
   AssociativeContainer
   AllocatorAwareContainer
   UnorderedAssociativeContainer
   (C++11)
   Container Elements
   DefaultInsertable
   (C++11)
   CopyInsertable
   (C++11)
   MoveInsertable
   (C++11)
   EmplaceConstructible
   (C++11)
   Erasable
   (C++11)
   Iterator
   LegacyIterator
   LegacyOutputIterator
   LegacyInputIterator
   LegacyForwardIterator
   LegacyBidirectionalIterator
   LegacyRandomAccessIterator
   LegacyContiguousIterator
   (C++17)
   ConstexprIterator
   (C++20)
   Stream I/O
   FormattedInputFunction
   UnformattedInputFunction
   FormattedOutputFunction
   UnformattedOutputFunction
   Formatters
   BasicFormatter
   (C++20)
   Formatter
   (C++20)
   Random Numbers
   SeedSequence
   (C++11)
   RandomNumberEngine
   (C++11)
   RandomNumberDistribution
   (C++11)
   UniformRandomBitGenerator
   (C++11)
   RandomNumberEngineAdaptor
   (C++11)
   Concurrency
   BasicLockable
   (C++11)
   Lockable
   (C++11)
   TimedLockable
   (C++11)
   SharedLockable
   (C++14)
   SharedTimedLockable
   (C++14)
   Mutex
   (C++11)
   TimedMutex
   (C++11)
   SharedMutex
   (C++17)
   SharedTimedMutex
   (C++14)
   Ranges
   RangeAdaptorObject
   (C++20)
   RangeAdaptorClosureObject
   (C++20)
   Other
   CharTraits
   RegexTraits
   (C++11)
   BitmaskType
   LiteralType
   (C++11)
   NumericType
   UnaryTypeTrait
   (C++11)
   BinaryTypeTrait
   (C++11)
   TransformationTrait
   (C++11)
   Clock
   (C++11)
   TrivialClock
   (C++11)

   Defines a type that can be used to represent a set of constant values
   or any combination of those values. This trait is typically implemented
   by integer types, std::bitset, or enumerations (scoped and unscoped)
   with additional operator overloads.

Requirements

   The bitmask type supports a finite number of bitmask elements, which
   are distinct non-zero values of the bitmask type, such that, for any
   pair Ci and Cj, Ci & Ci is nonzero and Ci & Cj is zero. In addition,
   the value 0 is used to represent an empty bitmask, with no values set.

   The bitwise operators operator&, operator|, operator^, operator~,
   operator&=, operator|=, and operator^= are defined for values of the
   bitmask type and have the same semantics as the corresponding built-in
   operators on unsigned integers would have if the bitmask elements were
   the distinct integer powers of two.

   The following expressions are well-formed and have the following
   meaning for any BitmaskType:
   X |= Y  sets the value Y in the object X
   X &= ~Y clears the value Y in the object X
   X & Y   nonzero result indicates that the value Y is set in the object X

   Each representable bitmask element is defined as a inline(since
   C++17)constexpr value of the bitmask type.

Usage

   The following standard library types satisfy BitmaskType:
     * std::chars_format (since C++17)
     * std::ctype_base::mask
     * std::ios_base::fmtflags
     * std::ios_base::iostate
     * std::ios_base::openmode
     * std::regex_traits::char_class_type (since C++11)
     * std::regex_constants::syntax_option_type (since C++11)
     * std::regex_constants::match_flag_type (since C++11)
     * std::launch (since C++11)
     * std::filesystem::perms (since C++17)
     * std::filesystem::perm_options (since C++17)
     * std::filesystem::copy_options (since C++17)
     * std::filesystem::directory_options (since C++17)

   Code that relies on some particular implementation option (e.g. int n =
   std::ios_base::hex), is nonportable because std::ios_base::fmtflags is
   not necessarily implicitly convertible to int.
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/named_req/Bitmas
   kType&oldid=144583"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 25 October 2022, at 13:01.
     * This page has been accessed 79,659 times.
