std::mutex

   From cppreference.com
   < cpp | thread

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Concurrency support library
   Threads
   thread
   (C++11)
   jthread
   (C++20)
   stop_token
   (C++20)
   stop_source
   (C++20)
   stop_callback
   (C++20)
   hardware_destructive_interference_sizehardware_constructive_interferenc
   e_size
   (C++17)(C++17)
   this_thread namespace
   get_id
   (C++11)
   yield
   (C++11)
   sleep_for
   (C++11)
   sleep_until
   (C++11)
   Mutual exclusion
   mutex
   (C++11)
   recursive_mutex
   (C++11)
   shared_mutex
   (C++17)
   timed_mutex
   (C++11)
   recursive_timed_mutex
   (C++11)
   shared_timed_mutex
   (C++14)
   Generic lock management
   lock_guard
   (C++11)
   scoped_lock
   (C++17)
   unique_lock
   (C++11)
   shared_lock
   (C++14)
   defer_lock_ttry_to_lock_tadopt_lock_t
   (C++11)(C++11)(C++11)
   lock
   (C++11)
   try_lock
   (C++11)
   defer_locktry_to_lockadopt_lock
   (C++11)(C++11)(C++11)
   once_flag
   (C++11)
   call_once
   (C++11)
   Condition variables
   condition_variable
   (C++11)
   condition_variable_any
   (C++11)
   notify_all_at_thread_exit
   (C++11)
   cv_status
   (C++11)
   Semaphores
   counting_semaphorebinary_semaphore
   (C++20)(C++20)
   Latches and Barriers
   latch
   (C++20)
   barrier
   (C++20)
   Futures
   promise
   (C++11)
   future
   (C++11)
   shared_future
   (C++11)
   packaged_task
   (C++11)
   async
   (C++11)
   launch
   (C++11)
   future_status
   (C++11)
   future_error
   (C++11)
   future_category
   (C++11)
   future_errc
   (C++11)
   Safe Reclamation
   rcu_obj_base
   (C++26)
   rcu_domain
   (C++26)
   rcu_default_domain
   (C++26)
   rcu_synchronize
   (C++26)
   rcu_barrier
   (C++26)
   rcu_retire
   (C++26)
   Hazard Pointers
   hazard_pointer_obj_base
   (C++26)
   hazard_pointer
   (C++26)
   make_hazard_pointer
   (C++26)
   Atomic types
   atomic
   (C++11)
   atomic_ref
   (C++20)
   atomic_flag
   (C++11)
   Initialization of atomic types
   atomic_init
   (C++11)(deprecated in C++20)
   ATOMIC_VAR_INIT
   (C++11)(deprecated in C++20)
   ATOMIC_FLAG_INIT
   (C++11)
   Memory ordering
   memory_order
   (C++11)
   kill_dependency
   (C++11)
   atomic_thread_fence
   (C++11)
   atomic_signal_fence
   (C++11)
   Free functions for atomic operations
   atomic_storeatomic_store_explicit
   (C++11)(C++11)
   atomic_loadatomic_load_explicit
   (C++11)(C++11)
   atomic_exchangeatomic_exchange_explicit
   (C++11)(C++11)
   atomic_compare_exchange_weakatomic_compare_exchange_weak_explicitatomic
   _compare_exchange_strongatomic_compare_exchange_strong_explicit
   (C++11)(C++11)(C++11)(C++11)
   atomic_fetch_addatomic_fetch_add_explicit
   (C++11)(C++11)
   atomic_fetch_subatomic_fetch_sub_explicit
   (C++11)(C++11)
   atomic_fetch_andatomic_fetch_and_explicit
   (C++11)(C++11)
   atomic_fetch_oratomic_fetch_or_explicit
   (C++11)(C++11)
   atomic_fetch_xoratomic_fetch_xor_explicit
   (C++11)(C++11)
   atomic_fetch_maxatomic_fetch_max_explicit
   (C++26)(C++26)
   atomic_fetch_minatomic_fetch_min_explicit
   (C++26)(C++26)
   atomic_is_lock_free
   (C++11)
   atomic_waitatomic_wait_explicit
   (C++20)(C++20)
   atomic_notify_one
   (C++20)
   atomic_notify_all
   (C++20)
   Free functions for atomic flags
   atomic_flag_test_and_setatomic_flag_test_and_set_explicit
   (C++11)(C++11)
   atomic_flag_clearatomic_flag_clear_explicit
   (C++11)(C++11)
   atomic_flag_testatomic_flag_test_explicit
   (C++20)(C++20)
   atomic_flag_waitatomic_flag_wait_explicit
   (C++20)(C++20)
   atomic_flag_notify_one
   (C++20)
   atomic_flag_notify_all
   (C++20)

   std::mutex
   Member functions
   mutex::mutex
   mutex::~mutex
   Locking
   mutex::lock
   mutex::try_lock
   mutex::unlock
   Native handle
   mutex::native_handle

   Defined in header <mutex>
   class mutex;
                            (since C++11)

   The mutex class is a synchronization primitive that can be used to
   protect shared data from being simultaneously accessed by multiple
   threads.

   mutex offers exclusive, non-recursive ownership semantics:
     * A calling thread owns a mutex from the time that it successfully
       calls either lock or try_lock until it calls unlock.
     * When a thread owns a mutex, all other threads will block (for calls
       to lock) or receive a false return value (for try_lock) if they
       attempt to claim ownership of the mutex.
     * A calling thread must not own the mutex prior to calling lock or
       try_lock.

   The behavior of a program is undefined if a mutex is destroyed while
   still owned by any threads, or a thread terminates while owning a
   mutex. The mutex class satisfies all requirements of Mutex and
   StandardLayoutType.

   std::mutex is neither copyable nor movable.

Nested types

   Name                           Definition
   native_handle_type (optional*) implementation-defined

Member functions

   (constructor)
   constructs the mutex
   (public member function)
   (destructor)
   destroys the mutex
   (public member function)
   operator=
   [deleted]
   not copy-assignable
   (public member function)

Locking

   lock
   locks the mutex, blocks if the mutex is not available
   (public member function)
   try_lock
   tries to lock the mutex, returns if the mutex is not available
   (public member function)
   unlock
   unlocks the mutex
   (public member function)

Native handle

   native_handle
   returns the underlying implementation-defined native handle object
   (public member function)

Notes

   std::mutex is usually not accessed directly: std::unique_lock,
   std::lock_guard, or std::scoped_lock(since C++17) manage locking in a
   more exception-safe manner.

Example

   This example shows how a mutex can be used to protect an std::map
   shared between two threads.
   Run this code
#include <chrono>
#include <iostream>
#include <map>
#include <mutex>
#include <string>
#include <thread>

std::map<std::string, std::string> g_pages;
std::mutex g_pages_mutex;

void save_page(const std::string& url)
{
    // simulate a long page fetch
    std::this_thread::sleep_for(std::chrono::seconds(2));
    std::string result = "fake content";

    std::lock_guard<std::mutex> guard(g_pages_mutex);
    g_pages[url] = result;
}

int main()
{
    std::thread t1(save_page, "http://foo");
    std::thread t2(save_page, "http://bar");
    t1.join();
    t2.join();

    // safe to access g_pages without lock now, as the threads are joined
    for (const auto& [url, page] : g_pages)
        std::cout << url << " => " << page << '\n';
}

   Output:
http://bar => fake content
http://foo => fake content

See also

   recursive_mutex
   (C++11)
   provides mutual exclusion facility which can be locked recursively by
   the same thread
   (class)
   lock_guard
   (C++11)
   implements a strictly scope-based mutex ownership wrapper
   (class template)
   unique_lock
   (C++11)
   implements movable mutex ownership wrapper
   (class template)
   scoped_lock
   (C++17)
   deadlock-avoiding RAII wrapper for multiple mutexes
   (class template)
   condition_variable
   (C++11)
   provides a condition variable associated with a std::unique_lock
   (class)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/thread/mutex&old
   id=170085"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 6 March 2024, at 18:53.
     * This page has been accessed 2,066,189 times.
