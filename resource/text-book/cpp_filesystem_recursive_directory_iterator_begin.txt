std::filesystem::begin(recursive_directory_iterator),
std::filesystem::end(recursive_directory_iterator)

   From cppreference.com
   < cpp | filesystem | recursive directory iterator

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Filesystem library
   Classes
   filesystem::path
   filesystem::filesystem_error
   filesystem::directory_entry
   filesystem::directory_iterator
   filesystem::recursive_directory_iterator

   filesystem::file_status
   filesystem::space_info
   filesystem::file_type
   filesystem::perms
   filesystem::perm_options
   filesystem::copy_options
   filesystem::directory_options
   filesystem::file_time_type
   Functions
   filesystem::absolute
   filesystem::canonicalfilesystem::weakly_canonical
   filesystem::relativefilesystem::proximate
   filesystem::copy
   filesystem::copy_file
   filesystem::copy_symlink
   filesystem::create_directory
   filesystem::create_directories
   filesystem::create_hard_link
   filesystem::create_symlink
   filesystem::create_directory_symlink
   filesystem::current_path
   filesystem::exists
   filesystem::equivalent
   filesystem::file_size
   filesystem::hard_link_count
   filesystem::last_write_time
   filesystem::permissions
   filesystem::read_symlink
   filesystem::remove
   filesystem::remove_all
   filesystem::rename
   filesystem::resize_file
   filesystem::space
   filesystem::status
   filesystem::symlink_status
   filesystem::temp_directory_path
   File types
   filesystem::is_block_file
   filesystem::is_character_file
   filesystem::is_directory
   filesystem::is_empty
   filesystem::status_known
   filesystem::is_fifo
   filesystem::is_other
   filesystem::is_regular_file
   filesystem::is_socket
   filesystem::is_symlink

   std::filesystem::recursive_directory_iterator
   Member functions
   recursive_directory_iterator::recursive_directory_iterator
   recursive_directory_iterator::operator*recursive_directory_iterator::op
   erator->
   recursive_directory_iterator::options
   recursive_directory_iterator::depth
   recursive_directory_iterator::recursion_pending
   recursive_directory_iterator::operator=
   recursive_directory_iterator::incrementrecursive_directory_iterator::op
   erator++
   recursive_directory_iterator::pop
   recursive_directory_iterator::disable_recursion_pending
   Non-member functions
   begin(std::filesystem::recursive_directory_iterator)end(std::filesystem
   ::recursive_directory_iterator)

   Defined in header <filesystem>
   recursive_directory_iterator begin( recursive_directory_iterator iter )
   noexcept;
   (1) (since C++17)
   recursive_directory_iterator end( recursive_directory_iterator )
   noexcept;
   (2) (since C++17)
   1) Returns iter unchanged.
   2) Returns a default-constructed recursive_directory_iterator, which
   serves as the end iterator. The argument is ignored.

   These non-member functions enable the use of
   recursive_directory_iterators with range-based for loops and make
   recursive_directory_iterator a range type(since C++20).

Parameters

   iter - a recursive_directory_iterator

Return value

   1) iter unchanged.
   2) End iterator (default-constructed recursive_directory_iterator).

Example

   Run this code
#include <cstdlib>
#include <filesystem>
#include <fstream>
#include <iostream>
namespace fs = std::filesystem;

int main()
{
    fs::current_path(fs::temp_directory_path());
    fs::create_directories("sandbox/a/b");
    std::ofstream("sandbox/file1.txt");
    fs::create_symlink("a", "sandbox/syma");

    std::cout << "Print dir structure using OS specific command 'tree':\n";
    std::system("tree --noreport sandbox");

    std::cout << "\nPrint dir structure using directory iterator:\n";
    for (auto& p : fs::recursive_directory_iterator("sandbox"))
        std::cout << p << '\n';

    fs::remove_all("sandbox");
}

   Possible output:
Print dir structure using OS specific command 'tree':
sandbox
+-- a
|   +-- b
+-- file1.txt
+-- syma -> a

Print dir structure using directory iterator:
"sandbox/syma"
"sandbox/file1.txt"
"sandbox/a"
"sandbox/a/b"

Defect reports

   The following behavior-changing defect reports were applied
   retroactively to previously published C++ standards.
   DR Applied to Behavior as published Correct behavior
   LWG 3480 C++17 end took the argument by reference takes the argument by
   value

See also

   begin(std::filesystem::directory_iterator)end(std::filesystem::director
   y_iterator)
   (C++17)
   range-based for loop support
   (function)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/filesystem/recur
   sive_directory_iterator/begin&oldid=158510"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 9 September 2023, at 00:02.
     * This page has been accessed 18,838 times.
