std::invocable, std::regular_invocable

   From cppreference.com
   < cpp | concepts

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Concepts library
   Core language concepts
   same_as
   derived_from
   convertible_to
   common_reference_with

   common_with
   integral
   signed_integral
   unsigned_integral
   floating_point
   swappableswappable_with
   destructible
   constructible_from
   default_initializable
   move_constructible
   copy_constructible
   assignable_from
   Comparison concepts
   equality_comparableequality_comparable_with
   totally_orderedtotally_ordered_with
   Object concepts
   movable
   copyable
   semiregular
   regular
   Callable concepts
   invocableregular_invocable
   predicate
   relation
   equivalence_relation
   strict_weak_order
   Exposition-only concepts
   boolean-testable

   Defined in header <concepts>
   template< class F, class... Args >

   concept invocable =
       requires(F&& f, Args&&... args) {
           std::invoke(std::forward<F>(f), std::forward<Args>(args)...);
               /* not required to be equality-preserving */
       };
                                     (since C++20)
   template< class F, class... Args >
   concept regular_invocable = std::invocable<F, Args...>;
                                     (since C++20)

   The invocable concept specifies that a callable type F can be called
   with a set of arguments Args... using the function template
   std::invoke.

   The regular_invocable concept adds to the invocable concept by
   requiring the invoke expression to be equality-preserving and not
   modify either the function object or the arguments.

Equality preservation

   Expressions declared in requires expressions of the standard library
   concepts are required to be equality-preserving (except where stated
   otherwise).

Notes

   The distinction between invocable and regular_invocable is purely
   semantic.

   A random number generator may satisfy invocable but cannot satisfy
   regular_invocable (comical ones excluded).

See also

   is_invocableis_invocable_ris_nothrow_invocableis_nothrow_invocable_r
   (C++17)
   checks if a type can be invoked (as if by std::invoke) with the given
   argument types
   (class template)

External links

   1.  A joke example of a random number generator that satisfies both
   invocable and regular_invocable.
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/concepts/invocab
   le&oldid=164857"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 4 December 2023, at 10:06.
     * This page has been accessed 90,455 times.
