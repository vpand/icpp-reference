operator<<,>>(std::bitset)

   From cppreference.com
   < cpp | utility | bitset

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Utilities library
   Language support
   Type support (basic types, RTTI)
   Library feature-test macros (C++20)
   Dynamic memory management
   Program utilities
   Coroutine support (C++20)
   Variadic functions
   is_constant_evaluated
   (C++20)
   is_within_lifetime
   (C++26)
   initializer_list
   (C++11)
   source_location
   (C++20)
   Debugging support
   is_debugger_present
   (C++26)
   breakpoint_if_debugging
   (C++26)
   breakpoint
   (C++26)
   Three-way comparison
   three_way_comparablethree_way_comparable_with
   (C++20)(C++20)
   strong_ordering
   (C++20)
   weak_ordering
   (C++20)
   partial_ordering
   (C++20)
   common_comparison_category
   (C++20)
   compare_three_way_result
   (C++20)
   compare_three_way
   (C++20)
   strong_order
   (C++20)
   weak_order
   (C++20)
   partial_order
   (C++20)
   compare_strong_order_fallback
   (C++20)
   compare_weak_order_fallback
   (C++20)
   compare_partial_order_fallback
   (C++20)
   is_eqis_ltis_lteq
   (C++20)(C++20)(C++20)
   is_neqis_gtis_gteq
   (C++20)(C++20)(C++20)
   General utilities
   Date and time
   Function objects
   Formatting library (C++20)
   bitset
   hash
   (C++11)
   Relational operators (deprecated in C++20)
   rel_ops::operator!=rel_ops::operator>

   rel_ops::operator<=rel_ops::operator>=
   Integer comparison functions
   cmp_equalcmp_lesscmp_less_than
   (C++20)(C++20)(C++20)
   cmp_not_equalcmp_greatercmp_greater_than
   (C++20)(C++20)(C++20)
   in_range
   (C++20)
   Swap and type operations
   swap
   ranges::swap
   (C++20)
   exchange
   (C++14)
   declval
   (C++11)
   to_underlying
   (C++23)
   forward
   (C++11)
   forward_like
   (C++23)
   move
   (C++11)
   move_if_noexcept
   (C++11)
   as_const
   (C++17)
   Common vocabulary types
   pair
   tuple
   (C++11)
   optional
   (C++17)
   any
   (C++17)
   variant
   (C++17)
   tuple_size
   (C++11)
   tuple_element
   (C++11)
   apply
   (C++17)
   make_from_tuple
   (C++17)
   expected
   (C++23)
   Elementary string conversions
   to_chars
   (C++17)
   from_chars
   (C++17)
   chars_format
   (C++17)
   to_chars_result
   (C++17)
   from_chars_result
   (C++17)

   std::bitset
   Member types
   bitset::reference
   Member functions
   bitset::bitset
   bitset::operator==bitset::operator!=
   (until C++20)
   Element access
   bitset::operator[]
   bitset::test
   bitset::allbitset::anybitset::none
   (C++11)
   bitset::count
   Capacity
   bitset::size
   Modifiers
   bitset::operator&=bitset::operator|=bitset::operator^=bitset::operator~
   bitset::operator<<=bitset::operator>>=bitset::operator<<bitset::operato
   r>>
   bitset::set
   bitset::reset
   bitset::flip
   Conversions
   bitset::to_string
   bitset::to_ulong
   bitset::to_ullong
   (C++11)
   Non-member functions
   operator&operator|operator^
   operator<<operator>>
   Helper classes
   std::hash
   (C++11)

   Defined in header <bitset>
   template< class CharT, class Traits, std::size_t N >

   std::basic_ostream<CharT, Traits>&
       operator<<( std::basic_ostream<CharT, Traits>& os, const
   std::bitset<N>& x );
   (1)
   template< class CharT, class Traits, std::size_t N >

   std::basic_istream<CharT, Traits>&
       operator>>( std::basic_istream<CharT, Traits>& is, std::bitset<N>&
   x );
   (2)

   Inserts or extracts a bitset from a character stream.
   1) Writes the bitset x to the character stream os as if by first
   converting it to a std::basic_string<CharT, Traits> using to_string(),
   and then writing it into os using the operator<< (which is a
   FormattedOutputFunction for strings). The characters to use for ones
   and zeroes are obtained from the currently-imbued locale by calling
   std::use_facet<std::ctype<CharT>>(os.getloc()).widen() with '1' and '0'
   as arguments.
   2) Behaves as a FormattedInputFunction. After constructing and checking
   the sentry object, which may skip leading whitespace, extracts up to N
   characters from is and stores the characters in the bitset x.

   Characters are extracted until either
     * N characters have been read,
     * end-of-file occurs in is, or
     * the next character is neither is.widen('0') nor is.widen('1').

   If N > 0 and no characters are extracted,
   is.setstate(ios_base::failbit) is called.

Parameters

   os - the character stream to write to
   is - the character stream to read from
   x  - the bitset to be read or written

Return value

   1) os
   2) is

Example

   Run this code
#include <bitset>
#include <iostream>
#include <sstream>

int main()
{
    std::string bit_string = "001101";
    std::istringstream bit_stream(bit_string);

    std::bitset<3> b1;
    bit_stream >> b1; // reads "001", stream still holds "101"
    std::cout << b1 << '\n';

    std::bitset<8> b2;
    bit_stream >> b2; // reads "101", populates the 8-bit set as "00000101"
    std::cout << b2 << '\n';
}

   Output:
001
00000101

Defect reports

   The following behavior-changing defect reports were applied
   retroactively to previously published C++ standards.
   DR Applied to Behavior as published Correct behavior
   LWG 303 C++98 single-byte characters were extracted from
   is, but CharT can have multiple bytes extracts CharT and compares
   it with widened '0' and '1'
   LWG 396 C++98 the content written by operator<< was locale-independent
   writes widened '0's and '1's
   LWG 3199 C++98 extracting a std::bitset<0> always sets failbit such
   extraction never sets failbit

See also

   operator<<=operator>>=operator<<operator>>
   performs binary shift left and shift right
   (public member function)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/utility/bitset/o
   perator_ltltgtgt2&oldid=147540"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 6 February 2023, at 23:38.
     * This page has been accessed 43,172 times.
