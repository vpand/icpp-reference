Diagnostic directives

   From cppreference.com
   < cpp | preprocessor

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   C++ language
   General topics
   Preprocessor
   Comments
   Keywords
   Escape sequences
   Flow control
   Conditional execution statements
   if
   switch
   Iteration statements (loops)
   for
   range-for (C++11)
   while
   do-while
   Jump statements
   continue - break
   goto - return
   Functions
   Function declaration
   Lambda function expression
   inline specifier
   Dynamic exception specifications (until C++17*)
   noexcept specifier (C++11)
   Exceptions
   throw-expression
   try block
   handler
   Namespaces
   Namespace declaration
   Namespace aliases
   Types
   Fundamental types
   Enumeration types
   Function types
   Class/struct types
   Union types
   Specifiers
   const/volatile
   decltype (C++11)
   auto (C++11)
   constexpr (C++11)
   consteval (C++20)
   constinit (C++20)
   Storage duration specifiers
   Initialization
   Default-initialization
   Value-initialization
   Zero-initialization
   Copy-initialization
   Direct-initialization
   Aggregate initialization
   List-initialization (C++11)
   Constant initialization
   Reference initialization
   Expressions
   Value categories
   Order of evaluation
   Operators
   Operator precedence
   Alternative representations
   Literals
   Boolean - Integer - Floating-point
   Character - String - nullptr (C++11)
   User-defined (C++11)
   Utilities
   Attributes (C++11)
   Types
   typedef declaration
   Type alias declaration (C++11)
   Casts
   Implicit conversions
   static_cast
   const_cast
   Explicit conversions
   dynamic_cast
   reinterpret_cast
   Memory allocation
   new expression
   delete expression
   Classes
   Class declaration
   Constructors
   this pointer
   Access specifiers
   friend specifier
   Class-specific function properties
   Virtual function
   override specifier (C++11)
   final specifier (C++11)
   explicit (C++11)
   static
   Special member functions
   Default constructor
   Copy constructor
   Move constructor (C++11)
   Copy assignment
   Move assignment (C++11)
   Destructor
   Templates
   Class template
   Function template
   Template specialization
   Parameter packs (C++11)
   Miscellaneous
   Inline assembly
   History of C++

   Preprocessor
   #if#ifdef#ifndef#else#elif#elifdef#elifndef#endif
   (C++23)(C++23)
   #define#undef#,## operators
   #include__has_include
   (C++17)
   #error#warning
   (C++23)
   #pragma_Pragma
   (C++11)
   #line

   Shows the given error message and renders the program ill-formed, or
   shows the given warning message without affecting the validity of the
   program(since C++23).

Syntax

   #error diagnostic-message   (1)
   #warning diagnostic-message (2) (since C++23)

Explanation

   1) After encountering the #error directive, an implementation displays
   the message diagnostic-message and renders the program ill-formed (the
   compilation stops).
   2) Same as (1), except the validity of the program is not affected and
   the compilation continues.

   diagnostic-message can consist of several words not necessarily in
   quotes.

Notes

   Before its standardization in C++23, #warning has been provided by many
   compilers in all modes as a conforming extension.

Example

   Run this code
#if __STDC_HOSTED__ != 1
#   error "Not a hosted implementation"
#endif

#if __cplusplus >= 202302L
#   warning "Using #warning as a standard feature"
#endif

#include <iostream>

int main()
{
    std::cout << "The implementation used is hosted\n";
}

   Possible output:
The implementation used is hosted

References

     * C++23 standard (ISO/IEC 14882:2023):

          + 15.8 Error directive [cpp.error]

     * C++20 standard (ISO/IEC 14882:2020):

          + 15.8 Error directive [cpp.error]

     * C++17 standard (ISO/IEC 14882:2017):

          + 19.5 Error directive [cpp.error]

     * C++14 standard (ISO/IEC 14882:2014):

          + 16.5 Error directive [cpp.error]

     * C++11 standard (ISO/IEC 14882:2011):

          + 16.5 Error directive [cpp.error]

     * C++03 standard (ISO/IEC 14882:2003):

          + 16.5 Error directive [cpp.error]

     * C++98 standard (ISO/IEC 14882:1998):

          + 16.5 Error directive [cpp.error]

See also

   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/preprocessor/err
   or&oldid=154629"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 9 July 2023, at 05:40.
     * This page has been accessed 95,010 times.
