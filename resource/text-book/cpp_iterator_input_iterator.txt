std::input_iterator

   From cppreference.com
   < cpp | iterator

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Iterator library
   Iterator concepts
   indirectly_readable
   (C++20)
   indirectly_writable
   (C++20)
   weakly_incrementable
   (C++20)
   incrementable
   (C++20)
   input_or_output_iterator
   (C++20)
   sentinel_for
   (C++20)
   sized_sentinel_for
   (C++20)
   input_iterator
   (C++20)
   output_iterator
   (C++20)
   forward_iterator
   (C++20)
   bidirectional_iterator
   (C++20)
   random_access_iterator
   (C++20)
   contiguous_iterator
   (C++20)
   Iterator primitives
   input_iterator_tagoutput_iterator_tagforward_iterator_tagbidirectional_
   iterator_tagrandom_access_iterator_tagcontiguous_iterator_tag
   (C++20)
   iter_value_titer_difference_titer_reference_titer_const_reference_titer
   _rvalue_reference_titer_common_reference_t
   (C++20)(C++20)(C++20)(C++23)(C++20)(C++20)
   iterator
   (deprecated in C++17)
   iterator_traits
   incrementable_traits
   (C++20)
   indirectly_readable_traits
   (C++20)
   Algorithm concepts and utilities
   Indirect callable concepts
   indirectly_unary_invocableindirectly_regular_unary_invocable
   (C++20)(C++20)
   indirect_unary_predicate
   (C++20)
   indirect_binary_predicate
   (C++20)
   indirect_equivalence_relation
   (C++20)
   indirect_strict_weak_order
   (C++20)
   Common algorithm requirements
   indirectly_movable
   (C++20)
   indirectly_movable_storable
   (C++20)
   indirectly_copyable
   (C++20)
   indirectly_copyable_storable
   (C++20)
   indirectly_swappable
   (C++20)
   indirectly_comparable
   (C++20)
   permutable
   (C++20)
   mergeable
   (C++20)
   sortable
   (C++20)
   Utilities
   indirect_result_t
   (C++20)
   projected
   (C++20)
   projected_value_t
   (C++26)
   Iterator adaptors
   reverse_iterator
   make_reverse_iterator
   (C++14)
   move_iterator
   (C++11)
   make_move_iterator
   (C++11)
   default_sentinel_tdefault_sentinel
   (C++20)(C++20)
   unreachable_sentinel_tunreachable_sentinel
   (C++20)(C++20)
   front_insert_iterator
   back_insert_iterator
   inserter
   insert_iterator
   front_inserter
   back_inserter
   move_sentinel
   (C++20)
   common_iterator
   (C++20)
   counted_iterator
   (C++20)
   basic_const_iterator
   (C++23)
   const_iterator
   (C++23)
   const_sentinel
   (C++23)
   make_const_iterator
   (C++23)
   make_const_sentinel
   (C++23)
   Stream iterators
   istream_iterator

   ostream_iterator
   istreambuf_iterator
   ostreambuf_iterator
   Iterator customization points
   ranges::iter_move
   (C++20)
   ranges::iter_swap
   (C++20)
   Iterator operations
   advance
   distance
   prev
   (C++11)
   next
   (C++11)
   ranges::advance
   (C++20)
   ranges::distance
   (C++20)
   ranges::prev
   (C++20)
   ranges::next
   (C++20)
   Range access
   begincbegin
   (C++11)(C++14)
   rbegincrbegin
   (C++14)(C++14)
   endcend
   (C++11)(C++14)
   rendcrend
   (C++14)(C++14)
   sizessize
   (C++17)(C++20)
   empty
   (C++17)
   data
   (C++17)

   Defined in header <iterator>
   template< class I >

       concept input_iterator =
           std::input_or_output_iterator<I> &&
           std::indirectly_readable<I> &&
           requires { typename /*ITER_CONCEPT*/<I>; } &&
           std::derived_from</*ITER_CONCEPT*/<I>,
   std::input_iterator_tag>;
                               (since C++20)

   The input_iterator concept is a refinement of input_or_output_iterator,
   adding the requirement that the referenced values can be read (via
   indirectly_readable) and the requirement that the iterator concept tag
   be present.

Iterator concept determination

   Definition of this concept is specified via an exposition-only alias
   template /*ITER_CONCEPT*/.

   In order to determine /*ITER_CONCEPT*/<I>, let ITER_TRAITS<I> denote I
   if the specialization std::iterator_traits<I> is generated from the
   primary template, or std::iterator_traits<I> otherwise:
     * If ITER_TRAITS<I>::iterator_concept is valid and names a type,
       /*ITER_CONCEPT*/<I> denotes the type.
     * Otherwise, if ITER_TRAITS<I>::iterator_category is valid and names
       a type, /*ITER_CONCEPT*/<I> denotes the type.
     * Otherwise, if std::iterator_traits<I> is generated from the primary
       template, /*ITER_CONCEPT*/<I> denotes
       std::random_access_iterator_tag.
     * Otherwise, /*ITER_CONCEPT*/<I> does not denote a type and results
       in a substitution failure.

Notes

   Unlike the LegacyInputIterator requirements, the input_iterator concept
   does not require equality_comparable, since input iterators are
   typically compared with sentinels.

Example

   A minimum input iterator.
#include <cstddef>
#include <iterator>

struct SimpleInputIterator
{
    using difference_type = std::ptrdiff_t;
    using value_type = int;

    int operator*() const;

    SimpleInputIterator& operator++();
    void operator++(int) { ++*this; }
};

static_assert(std::input_iterator<SimpleInputIterator>);

See also

   input_or_output_iterator
   (C++20)
   specifies that objects of a type can be incremented and dereferenced
   (concept)
   forward_iterator
   (C++20)
   specifies that an input_iterator is a forward iterator, supporting
   equality comparison and multi-pass
   (concept)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/input_i
   terator&oldid=171721"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 13 May 2024, at 14:33.
     * This page has been accessed 95,068 times.
