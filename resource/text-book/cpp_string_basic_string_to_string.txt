std::to_string

   From cppreference.com
   < cpp | string | basic string

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Strings library
   Null-terminated strings
   Byte strings
   Multibyte strings
   Wide strings
   Classes
   basic_string
   basic_string_view
   (C++17)
   char_traits

   std::basic_string
   Member functions
   basic_string::basic_string
   basic_string::~basic_string
   basic_string::operator=
   basic_string::assign
   basic_string::assign_range
   (C++23)
   basic_string::get_allocator
   Element access
   basic_string::at
   basic_string::operator[]
   basic_string::front
   (DR*)
   basic_string::back
   (DR*)
   basic_string::data
   basic_string::c_str
   basic_string::operator
    basic_string_view
   (C++17)
   Iterators
   basic_string::beginbasic_string::cbegin
   (C++11)
   basic_string::endbasic_string::cend
   (C++11)
   basic_string::rbeginbasic_string::crbegin
   (C++11)
   basic_string::rendbasic_string::crend
   (C++11)
   Capacity
   basic_string::empty
   basic_string::sizebasic_string::length
   basic_string::max_size
   basic_string::reserve
   basic_string::capacity
   basic_string::shrink_to_fit
   (DR*)
   Modifiers
   basic_string::clear
   basic_string::insert
   basic_string::insert_range
   (C++23)
   basic_string::erase
   basic_string::push_back
   basic_string::pop_back
   (DR*)
   basic_string::append
   basic_string::append_range
   (C++23)
   basic_string::operator+=
   basic_string::replace
   basic_string::replace_with_range
   (C++23)
   basic_string::copy
   basic_string::resize
   basic_string::resize_and_overwrite
   (C++23)
   basic_string::swap
   Search
   basic_string::find
   basic_string::rfind
   basic_string::find_first_of
   basic_string::find_first_not_of
   basic_string::find_last_of
   basic_string::find_last_not_of
   Operations
   basic_string::compare
   basic_string::starts_with
   (C++20)
   basic_string::ends_with
   (C++20)
   basic_string::contains
   (C++23)
   basic_string::substr
   Constants
   basic_string::npos
   Non-member functions
   operator+
   swap(std::basic_string)
   erase(std::basic_string)erase_if(std::basic_string)
   (C++20)(C++20)
   I/O
   operator<<operator>>
   getline
   Comparison
   operator==operator!=operator<operator>operator<=operator>=operator<=>
   (until C++20)(until C++20)(until C++20)(until C++20)(until
   C++20)(C++20)
   Numeric conversions
   stoistolstoll
   (C++11)(C++11)(C++11)
   stoulstoull
   (C++11)(C++11)
   stofstodstold
   (C++11)(C++11)(C++11)
   to_string
   (C++11)
   to_wstring
   (C++11)
   Literals
   operator""s
   (C++14)
   Helper classes
   hash<std::basic_string>
   (C++11)
   Deduction guides (C++17)

   Defined in header <string>
   std::string to_string( int value );
   (1)                                               (since C++11)
   std::string to_string( long value );
   (2)                                               (since C++11)
   std::string to_string( long long value );
   (3)                                               (since C++11)
   std::string to_string( unsigned value );
   (4)                                               (since C++11)
   std::string to_string( unsigned long value );
   (5)                                               (since C++11)
   std::string to_string( unsigned long long value );
   (6)                                               (since C++11)
   std::string to_string( float value );
   (7)                                               (since C++11)
   std::string to_string( double value );
   (8)                                               (since C++11)
   std::string to_string( long double value );
   (9)                                               (since C++11)

   Converts a numeric value to std::string.

   Let buf be an internal to the conversion functions buffer, sufficiently
   large to contain the result of conversion.
   1) Converts a signed integer to a string as if by std::sprintf(buf,
   "%d", value).
   2) Converts a signed integer to a string as if by std::sprintf(buf,
   "%ld", value).
   3) Converts a signed integer to a string as if by std::sprintf(buf,
   "%lld", value).
   4) Converts an unsigned integer to a string as if by std::sprintf(buf,
   "%u", value).
   5) Converts an unsigned integer to a string as if by std::sprintf(buf,
   "%lu", value).
   6) Converts an unsigned integer to a string as if by std::sprintf(buf,
   "%llu", value).
   7,8) Converts a floating point value to a string as if by
   std::sprintf(buf, "%f", value).
   9) Converts a floating point value to a string as if by
   std::sprintf(buf, "%Lf", value).
   (until C++26)
   1-9) Converts a numeric value to a string as if by std::format("{}",
   value).
   (since C++26)

Parameters

   value - a numeric value to convert

Return value

   A string holding the converted value.

Exceptions

   May throw std::bad_alloc from the std::string constructor.

Notes

     * With floating point types std::to_string may yield unexpected
       results as the number of significant digits in the returned string
       can be zero, see the example.
     * The return value may differ significantly from what std::cout
       prints by default, see the example.

     * std::to_string relies on the current C locale for formatting
       purposes, and therefore concurrent calls to std::to_string from
       multiple threads may result in partial serialization of calls.
          + The results of overloads for integer types do not rely on the
            current C locale, and thus implementations generally avoid
            access to the current C locale in these overloads for both
            correctness and performance. However, such avoidance is not
            guaranteed by the standard.

   (until C++26)

   C++17 provides std::to_chars as a higher-performance locale-independent
   alternative.
   Feature-test macro Value Std Feature
   __cpp_lib_to_string 202306L (C++26) Redefining std::to_string in terms
   of std::format

Example

   Run this code
#include <cstdio>
#include <format>
#include <initializer_list>
#include <iostream>
#include <string>

#if __cpp_lib_to_string >= 202306L
constexpr auto revision() { return " (post C++26)"; }
#else
constexpr auto revision() { return " (pre C++26)"; }
#endif

int main()
{
    for (const double f : {1.23456789555555, 23.43, 1e-9, 1e40, 1e-40, 123456789
.0})
    {
        std::cout << "to_string:\t" << std::to_string(f) << revision() << '\n';

        // Before C++26, the output of std::to_string matches std::printf.
        std::printf("printf:\t\t%f\n", f);

        // As of C++26, the output of std::to_string matches std::format.
        std::cout << std::format("format:\t\t{}\n", f);

        std::cout << "std::cout:\t" << f << "\n\n";
    }
}

   Possible output:
to_string:      1.234568 (pre C++26)
printf:         1.234568
format:         1.23456789555555
std::cout:      1.23457

to_string:      23.430000 (pre C++26)
printf:         23.430000
format:         23.43
std::cout:      23.43

to_string:      0.000000 (pre C++26)
printf:         0.000000
format:         1e-09
std::cout:      1e-09

to_string:      10000000000000000303786028427003666890752.000000 (pre C++26)
printf:         10000000000000000303786028427003666890752.000000
format:         1e+40
std::cout:      1e+40

to_string:      0.000000 (pre C++26)
printf:         0.000000
format:         1e-40
std::cout:      1e-40

to_string:      123456789.000000 (pre C++26)
printf:         123456789.000000
format:         123456789
std::cout:      1.23457e+08

See also

   to_wstring
   (C++11)
   converts an integral or floating-point value to wstring
   (function)
   stoulstoull
   (C++11)(C++11)
   converts a string to an unsigned integer
   (function)
   stoistolstoll
   (C++11)(C++11)(C++11)
   converts a string to a signed integer
   (function)
   stofstodstold
   (C++11)(C++11)(C++11)
   converts a string to a floating point value
   (function)
   to_chars
   (C++17)
   converts an integer or floating-point value to a character sequence
   (function)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/string/basic_str
   ing/to_string&oldid=171806"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 16 May 2024, at 13:29.
     * This page has been accessed 1,954,642 times.
