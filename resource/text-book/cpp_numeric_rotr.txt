std::rotr

   From cppreference.com
   < cpp | numeric

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Numerics library
   Common mathematical functions
   Mathematical special functions (C++17)
   Mathematical constants (C++20)
   Basic linear algebra algorithms (C++26)
   Floating-point environment (C++11)
   Complex numbers
   Numeric arrays
   Pseudo-random number generation
   Factor operations
   gcd
   (C++17)
   lcm
   (C++17)
   Interpolations
   midpoint
   (C++20)
   lerp
   (C++20)
   Saturation arithmetic
   add_sat
   (C++26)
   sub_sat
   (C++26)
   saturate_cast
   (C++26)
   mul_sat
   (C++26)
   div_sat
   (C++26)
   Generic numeric operations
   iota
   (C++11)
   ranges::iota
   (C++23)
   accumulate
   inner_product
   adjacent_difference
   partial_sum
   reduce
   (C++17)
   transform_reduce
   (C++17)
   inclusive_scan
   (C++17)
   exclusive_scan
   (C++17)
   transform_inclusive_scan
   (C++17)
   transform_exclusive_scan
   (C++17)
   Bit operations
   has_single_bit
   (C++20)
   bit_cast
   (C++20)
   bit_ceil
   (C++20)
   bit_floor
   (C++20)
   bit_width
   (C++20)
   rotl
   (C++20)
   rotr
   (C++20)
   popcount
   (C++20)
   countl_zero
   (C++20)
   countl_one
   (C++20)
   countr_zero
   (C++20)
   countr_one
   (C++20)
   byteswap
   (C++23)
   endian
   (C++20)

   Defined in header <bit>
   template< class T >
   [[nodiscard]] constexpr T rotr( T x, int s ) noexcept;
                          (since C++20)

   Computes the result of bitwise right-rotating the value of x by s
   positions. This operation is also known as a right circular shift.

   Formally, let N be std::numeric_limits<T>::digits, r be s % N.
     * If r is 0, returns x;
     * if r is positive, returns (x >> r) | (x << (N - r));
     * if r is negative, returns std::rotl(x, -r).

   This overload participates in overload resolution only if T is an
   unsigned integer type (that is, unsigned char, unsigned short, unsigned
   int, unsigned long, unsigned long long, or an extended unsigned integer
   type).

Parameters

   x - value of unsigned integer type
   s - number of positions to shift

Return value

   The result of bitwise right-rotating x by s positions.

Notes

   Feature-test macro  Value    Std      Feature
   __cpp_lib_bitops   201907L (C++20) Bit operations

Example

   Run this code
#include <bit>
#include <bitset>
#include <cstdint>
#include <iostream>

int main()
{
    const std::uint8_t i = 0b00011101;
    std::cout << "i          = " << std::bitset<8>(i) << '\n';
    std::cout << "rotr(i,0)  = " << std::bitset<8>(std::rotr(i, 0)) << '\n';
    std::cout << "rotr(i,1)  = " << std::bitset<8>(std::rotr(i, 1)) << '\n';
    std::cout << "rotr(i,9)  = " << std::bitset<8>(std::rotr(i, 9)) << '\n';
    std::cout << "rotr(i,-1) = " << std::bitset<8>(std::rotr(i, -1)) << '\n';
}

   Output:
i          = 00011101
rotr(i,0)  = 00011101
rotr(i,1)  = 10001110
rotr(i,9)  = 10001110
rotr(i,-1) = 00111010

See also

   rotl
   (C++20)
   computes the result of bitwise left-rotation
   (function template)
   operator<<=operator>>=operator<<operator>>
   performs binary shift left and shift right
   (public member function of std::bitset<N>)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/numeric/rotr&old
   id=151512"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 9 May 2023, at 11:12.
     * This page has been accessed 36,028 times.
