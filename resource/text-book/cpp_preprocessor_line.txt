Filename and line information

   From cppreference.com
   < cpp | preprocessor

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   C++ language
   General topics
   Preprocessor
   Comments
   Keywords
   Escape sequences
   Flow control
   Conditional execution statements
   if
   switch
   Iteration statements (loops)
   for
   range-for (C++11)
   while
   do-while
   Jump statements
   continue - break
   goto - return
   Functions
   Function declaration
   Lambda function expression
   inline specifier
   Dynamic exception specifications (until C++17*)
   noexcept specifier (C++11)
   Exceptions
   throw-expression
   try block
   handler
   Namespaces
   Namespace declaration
   Namespace aliases
   Types
   Fundamental types
   Enumeration types
   Function types
   Class/struct types
   Union types
   Specifiers
   const/volatile
   decltype (C++11)
   auto (C++11)
   constexpr (C++11)
   consteval (C++20)
   constinit (C++20)
   Storage duration specifiers
   Initialization
   Default-initialization
   Value-initialization
   Zero-initialization
   Copy-initialization
   Direct-initialization
   Aggregate initialization
   List-initialization (C++11)
   Constant initialization
   Reference initialization
   Expressions
   Value categories
   Order of evaluation
   Operators
   Operator precedence
   Alternative representations
   Literals
   Boolean - Integer - Floating-point
   Character - String - nullptr (C++11)
   User-defined (C++11)
   Utilities
   Attributes (C++11)
   Types
   typedef declaration
   Type alias declaration (C++11)
   Casts
   Implicit conversions
   static_cast
   const_cast
   Explicit conversions
   dynamic_cast
   reinterpret_cast
   Memory allocation
   new expression
   delete expression
   Classes
   Class declaration
   Constructors
   this pointer
   Access specifiers
   friend specifier
   Class-specific function properties
   Virtual function
   override specifier (C++11)
   final specifier (C++11)
   explicit (C++11)
   static
   Special member functions
   Default constructor
   Copy constructor
   Move constructor (C++11)
   Copy assignment
   Move assignment (C++11)
   Destructor
   Templates
   Class template
   Function template
   Template specialization
   Parameter packs (C++11)
   Miscellaneous
   Inline assembly
   History of C++

   Preprocessor
   #if#ifdef#ifndef#else#elif#elifdef#elifndef#endif
   (C++23)(C++23)
   #define#undef#,## operators
   #include__has_include
   (C++17)
   #error#warning
   (C++23)
   #pragma_Pragma
   (C++11)
   #line

   Changes the source code's line number and, optionally, the current file
   name, in the preprocessor.

Syntax

   #line lineno            (1)
   #line lineno "filename" (2)

Explanation

   1) Changes the current preprocessor line number to lineno. Expansions
   of the macro __LINE__ beyond this point will expand to lineno plus the
   number of actual source code lines encountered since.

   2) Also changes the current preprocessor file name to filename.
   Expansions of the macro __FILE__ from this point will produce filename.

   Any preprocessing tokens (macro constants or expressions) are permitted
   as arguments to #line as long as they expand to a valid decimal integer
   optionally following a valid character string.

   lineno must be a sequence of at least one decimal digit (the program is
   ill-formed, otherwise) and is always interpreted as decimal (even if it
   starts with 0).

   If lineno is 0 or greater than 32767(until C++11)2147483647(since
   C++11), the behavior is undefined.

Notes

   This directive is used by some automatic code generation tools which
   produce C++ source files from a file written in another language. In
   that case, #line directives may be inserted in the generated C++ file
   referencing line numbers and the file name of the original
   (human-editable) source file.

Example

   Run this code
#include <cassert>
#define FNAME "test.cc"
int main()
{
#line 777 FNAME
        assert(2+2 == 5);
}

   Possible output:
test: test.cc:777: int main(): Assertion `2+2 == 5' failed.

References

     * C++23 standard (ISO/IEC 14882:2023):

          + 15.7 Line control [cpp.line]

     * C++20 standard (ISO/IEC 14882:2020):

          + 15.7 Line control [cpp.line]

     * C++17 standard (ISO/IEC 14882:2017):

          + 19.4 Line control [cpp.line]

     * C++14 standard (ISO/IEC 14882:2014):

          + 16.4 Line control [cpp.line]

     * C++11 standard (ISO/IEC 14882:2011):

          + 16.4 Line control [cpp.line]

     * C++98 standard (ISO/IEC 14882:1998):

          + 16.4 Line control [cpp.line]

See also

   source_location
   (C++20)
   a class representing information about the source code, such as file
   names, line numbers, and function names
   (class)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/preprocessor/lin
   e&oldid=145337"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 1 December 2022, at 12:49.
     * This page has been accessed 92,825 times.
