break statement

   From cppreference.com
   < cpp | language

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   C++ language
   General topics
   Preprocessor
   Comments
   Keywords
   Escape sequences
   Flow control
   Conditional execution statements
   if
   switch
   Iteration statements (loops)
   for
   range-for (C++11)
   while
   do-while
   Jump statements
   continue - break
   goto - return
   Functions
   Function declaration
   Lambda function expression
   inline specifier
   Dynamic exception specifications (until C++17*)
   noexcept specifier (C++11)
   Exceptions
   throw-expression
   try block
   handler
   Namespaces
   Namespace declaration
   Namespace aliases
   Types
   Fundamental types
   Enumeration types
   Function types
   Class/struct types
   Union types
   Specifiers
   const/volatile
   decltype (C++11)
   auto (C++11)
   constexpr (C++11)
   consteval (C++20)
   constinit (C++20)
   Storage duration specifiers
   Initialization
   Default-initialization
   Value-initialization
   Zero-initialization
   Copy-initialization
   Direct-initialization
   Aggregate initialization
   List-initialization (C++11)
   Constant initialization
   Reference initialization
   Expressions
   Value categories
   Order of evaluation
   Operators
   Operator precedence
   Alternative representations
   Literals
   Boolean - Integer - Floating-point
   Character - String - nullptr (C++11)
   User-defined (C++11)
   Utilities
   Attributes (C++11)
   Types
   typedef declaration
   Type alias declaration (C++11)
   Casts
   Implicit conversions
   static_cast
   const_cast
   Explicit conversions
   dynamic_cast
   reinterpret_cast
   Memory allocation
   new expression
   delete expression
   Classes
   Class declaration
   Constructors
   this pointer
   Access specifiers
   friend specifier
   Class-specific function properties
   Virtual function
   override specifier (C++11)
   final specifier (C++11)
   explicit (C++11)
   static
   Special member functions
   Default constructor
   Copy constructor
   Move constructor (C++11)
   Copy assignment
   Move assignment (C++11)
   Destructor
   Templates
   Class template
   Function template
   Template specialization
   Parameter packs (C++11)
   Miscellaneous
   Inline assembly
   History of C++

   Statements
   Labels
   label : statement
   Expression statements
   expression ;
   Compound statements
   { statement... }
   Selection statements
   if
   switch
   Iteration statements
   while
   do while
   for
   range for (C++11)
   Jump statements
   break
   continue
   return
   goto
   Declaration statements
   declaration ;
   Try blocks
   try block
   Transactional memory
   synchronized, atomic_commit, etc (TM TS)

   Causes the enclosing for, range-for, while or do-while loop or switch
   statement to terminate.

   Used when it is otherwise awkward to terminate the loop using the
   condition expression and conditional statements.

Syntax

   attr¿(optional) break ;
   attr - (since C++11) any number of attributes

Explanation

   Appears only within the statement of a loop body (while, do-while, for)
   or within the statement of a switch. After this statement the control
   is transferred to the statement immediately following the enclosing
   loop or switch. As with any block exit, all automatic storage objects
   declared in enclosing compound statement or in the condition of a
   loop/switch are destroyed, in reverse order of construction, before the
   execution of the first line following the enclosing loop.

Keywords

   break

Notes

   A break statement cannot be used to break out of multiple nested loops.
   The goto statement may be used for this purpose.

Example

   Run this code
#include <iostream>

int main()
{
    int i = 2;
    switch (i)
    {
        case 1: std::cout << "1";   // <---- maybe warning: fall through
        case 2: std::cout << "2";   // execution starts at this case label (+war
ning)
        case 3: std::cout << "3";   // <---- maybe warning: fall through
        case 4:                     // <---- maybe warning: fall through
        case 5: std::cout << "45";  //
                break;              // execution of subsequent statements is ter
minated
        case 6: std::cout << "6";
    }
    std::cout << '\n';

    for (char c = 'a'; c < 'c'; c++)
    {
        for (int i = 0; i < 5; i++)      // only this loop is affected by break
        {                                //
            if (i == 2)                  //
                break;                   //
            std::cout << c << i << ' ';  //
        }
    }
    std::cout << '\n';
}

   Possible output:
2345
a0 a1 b0 b1

See also

   [[fallthrough]](C++17) indicates that the fall through from the
   previous case label is intentional and should not be diagnosed by a
   compiler that warns on fall-through
   (attribute specifier)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/language/break&o
   ldid=155229"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 19 July 2023, at 16:16.
     * This page has been accessed 266,837 times.
