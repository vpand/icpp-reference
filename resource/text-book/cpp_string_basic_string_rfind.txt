std::basic_string<CharT,Traits,Allocator>::rfind

   From cppreference.com
   < cpp | string | basic string

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Strings library
   Null-terminated strings
   Byte strings
   Multibyte strings
   Wide strings
   Classes
   basic_string
   basic_string_view
   (C++17)
   char_traits

   std::basic_string
   Member functions
   basic_string::basic_string
   basic_string::~basic_string
   basic_string::operator=
   basic_string::assign
   basic_string::assign_range
   (C++23)
   basic_string::get_allocator
   Element access
   basic_string::at
   basic_string::operator[]
   basic_string::front
   (DR*)
   basic_string::back
   (DR*)
   basic_string::data
   basic_string::c_str
   basic_string::operator
    basic_string_view
   (C++17)
   Iterators
   basic_string::beginbasic_string::cbegin
   (C++11)
   basic_string::endbasic_string::cend
   (C++11)
   basic_string::rbeginbasic_string::crbegin
   (C++11)
   basic_string::rendbasic_string::crend
   (C++11)
   Capacity
   basic_string::empty
   basic_string::sizebasic_string::length
   basic_string::max_size
   basic_string::reserve
   basic_string::capacity
   basic_string::shrink_to_fit
   (DR*)
   Modifiers
   basic_string::clear
   basic_string::insert
   basic_string::insert_range
   (C++23)
   basic_string::erase
   basic_string::push_back
   basic_string::pop_back
   (DR*)
   basic_string::append
   basic_string::append_range
   (C++23)
   basic_string::operator+=
   basic_string::replace
   basic_string::replace_with_range
   (C++23)
   basic_string::copy
   basic_string::resize
   basic_string::resize_and_overwrite
   (C++23)
   basic_string::swap
   Search
   basic_string::find
   basic_string::rfind
   basic_string::find_first_of
   basic_string::find_first_not_of
   basic_string::find_last_of
   basic_string::find_last_not_of
   Operations
   basic_string::compare
   basic_string::starts_with
   (C++20)
   basic_string::ends_with
   (C++20)
   basic_string::contains
   (C++23)
   basic_string::substr
   Constants
   basic_string::npos
   Non-member functions
   operator+
   swap(std::basic_string)
   erase(std::basic_string)erase_if(std::basic_string)
   (C++20)(C++20)
   I/O
   operator<<operator>>
   getline
   Comparison
   operator==operator!=operator<operator>operator<=operator>=operator<=>
   (until C++20)(until C++20)(until C++20)(until C++20)(until
   C++20)(C++20)
   Numeric conversions
   stoistolstoll
   (C++11)(C++11)(C++11)
   stoulstoull
   (C++11)(C++11)
   stofstodstold
   (C++11)(C++11)(C++11)
   to_string
   (C++11)
   to_wstring
   (C++11)
   Literals
   operator""s
   (C++14)
   Helper classes
   hash<std::basic_string>
   (C++11)
   Deduction guides (C++17)

   size_type rfind( const basic_string& str, size_type pos = npos ) const;
   (1) (noexcept since C++11)
   (constexpr since C++20)
   size_type rfind( const CharT* s, size_type pos, size_type count )
   const;
   (2) (constexpr since C++20)
   size_type rfind( const CharT* s, size_type pos = npos ) const;
   (3) (constexpr since C++20)
   size_type rfind( CharT ch, size_type pos = npos ) const;
   (4) (noexcept since C++11)
   (constexpr since C++20)
   template< class StringViewLike >

   size_type rfind( const StringViewLike& t,
                    size_type pos = npos ) const noexcept(/* see below
   */);
   (5) (since C++17)
   (constexpr since C++20)

   Finds the last substring that is equal to the given character sequence.
   The search begins at pos and proceeds from right to left (thus, the
   found substring, if any, cannot begin in a position following pos). If
   npos or any value not smaller than size() - 1 is passed as pos, the
   whole string will be searched.
   1) Finds the last substring equal to str.
   2) Finds the last substring equal to the range [s, s + count). This
   range can include null characters.
   If [s, s + count) is not a valid range, the behavior is undefined.
   3) Finds the last substring equal to the character string pointed to by
   s. The length of the string is determined by the first null character
   using Traits::length(s).
   If [s, s + Traits::length(s)) is not a valid range, the behavior is
   undefined.
   4) Finds the last character equal to ch.
   5) Implicitly converts t to a string view sv as if by
   std::basic_string_view<CharT, Traits> sv = t;, then finds the last
   substring equal to the contents of sv.
   This overload participates in overload resolution only if
   std::is_convertible_v<const StringViewLike&,
                         std::basic_string_view<CharT, Traits>> is true
   and std::is_convertible_v<const StringViewLike&, const CharT*> is
   false.

   In all cases, equality is checked by calling Traits::eq.

Parameters

   str   - string to search for
   pos   - position at which to begin searching
   count - length of substring to search for
   s     - pointer to a character string to search for
   ch    - character to search for
   t     - object (convertible to std::basic_string_view) to search for

Return value

   Position of the first character of the found substring or npos if no
   such substring is found. Note that this is an offset from the start of
   the string, not the end.

   If searching for an empty string (i.e., str.size(), count, or
   Traits::length(s) is zero), the empty string is found immediately and
   rfind returns:
     * pos, if pos < size();
     * size() otherwise, including the case where pos == npos.

   Otherwise, if size() is zero, npos is always returned.

Exceptions

   1,4) Throws nothing.
   5)
   noexcept specification:
   noexcept(std::is_nothrow_convertible_v<const T&,
   std::basic_string_view<CharT, Traits>>)

   If an exception is thrown for any reason, this function has no effect
   (strong exception safety guarantee).

Example

   Run this code
#include <iomanip>
#include <iostream>
#include <string>

void print(std::string::size_type n,
           std::string::size_type len,
           std::string const &s)
{
    if (n == std::string::npos)
        std::cout << "not found\n";
    else
        std::cout << "found: " << std::quoted(s.substr(n, len)) << " at " << n <
< '\n';
}

int main()
{
    std::string::size_type n;
    std::string const s = "This is a string";

    // search backwards from end of string
    n = s.rfind("is");
    print(n, 2, s);

    // search backwards from position 4
    n = s.rfind("is", 4);
    print(n, 2, s);

    // find a single character
    n = s.rfind('s');
    print(n, 1, s);

    // find a single character
    n = s.rfind('q');
    print(n, 1, s);

    // find the prefix (see also s.starts_with("This"))
    n = s.rfind("This", 0);
    print(n, 4, s);
}

   Output:
found: "is" at 5
found: "is" at 2
found: "s" at 10
not found
found: "This" at 0

Defect reports

   The following behavior-changing defect reports were applied
   retroactively to previously published C++ standards.
   DR Applied to Behavior as published Correct behavior
   LWG 847 C++98 there was no exception safety guarantee added strong
   exception safety guarantee
   LWG 2064 C++11 overloads (3,4) were noexcept removed
   LWG 2946 C++17 overload (5) caused ambiguity in some cases avoided by
   making it a template
   P1148R0 C++11
   C++17 noexcept for overloads (4,5) were
   accidently dropped by LWG2064/LWG2946 restored

See also

   find
   finds the first occurrence of the given substring
   (public member function)
   find_first_of
   find first occurrence of characters
   (public member function)
   find_first_not_of
   find first absence of characters
   (public member function)
   find_last_of
   find last occurrence of characters
   (public member function)
   find_last_not_of
   find last absence of characters
   (public member function)
   rfind
   find the last occurrence of a substring
   (public member function of std::basic_string_view<CharT,Traits>)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/string/basic_str
   ing/rfind&oldid=172147"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 30 May 2024, at 10:52.
     * This page has been accessed 198,931 times.
