std::deque<T,Allocator>::append_range

   From cppreference.com
   < cpp | container | deque


   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Containers library
   Sequence
   array
   (C++11)
   vector
   vector<bool>
   deque
   forward_list
   (C++11)
   list
   Associative
   set
   multiset
   map
   multimap
   Unordered associative
   unordered_set
   (C++11)
   unordered_multiset
   (C++11)
   unordered_map
   (C++11)
   unordered_multimap
   (C++11)
   Adaptors
   stack
   queue
   priority_queue
   flat_set
   (C++23)
   flat_multiset
   (C++23)
   flat_map
   (C++23)
   flat_multimap
   (C++23)
   Views
   span
   (C++20)
   mdspan
   (C++23)
   Iterator invalidation
   Member function table
   Non-member function table

   std::deque
   Member types
   Member functions
   deque::deque
   deque::~deque
   deque::operator=
   deque::assign
   deque::assign_range
   (C++23)
   deque::get_allocator
   Element access
   deque::at
   deque::operator[]
   deque::front
   deque::back
   Iterators
   deque::begindeque::cbegin
   (C++11)
   deque::enddeque::cend
   (C++11)
   deque::rbegindeque::crbegin
   (C++11)
   deque::renddeque::crend
   (C++11)
   Capacity
   deque::empty
   deque::size
   deque::max_size
   deque::shrink_to_fit
   (DR*)
   Modifiers
   deque::clear
   deque::insert
   deque::insert_range
   (C++23)
   deque::emplace
   deque::erase
   deque::push_front
   deque::emplace_front
   (C++11)
   deque::prepend_range
   (C++23)
   deque::pop_front
   deque::push_back
   deque::emplace_back
   (C++11)
   deque::append_range
   (C++23)
   deque::pop_back
   deque::resize
   deque::swap
   Non-member functions
   operator==operator!=operator<operator>operator<=operator>=operator<=>
   (until C++20)(until C++20)(until C++20)(until C++20)(until
   C++20)(C++20)
   swap(std::deque)
   erase(std::deque)erase_if(std::deque)
   (C++20)(C++20)
   Deduction guides(C++17)

   template< container-compatible-range<T> R >
   void append_range( R&& rg );
                                              (since C++23)

   Inserts copies of elements from the range rg before end(), in
   non-reversing order.

   All iterators (including the end() iterator) are invalidated. No
   references are invalidated.

   Each iterator in rg is dereferenced exactly once.

Parameters

   rg - a container compatible range, that is, an input_range whose
   elements are convertible to T
   Type requirements
   -
   T must be EmplaceConstructible into deque from *ranges::begin(rg).
   Otherwise, the behavior is undefined.

Return value

   (none)

Complexity

   Linear in size of rg. The number of calls to the constructor of T is
   exactly equal to the std::ranges::size(rg)).

Exceptions

   If an exception is thrown other than by the copy constructor, move
   constructor, assignment operator, or move assignment operator of T
   there are no effects. If an exception is thrown while inserting a
   single element at either end, there are no effects. Otherwise, if an
   exception is thrown by the move constructor of a non-CopyInsertable T,
   the effects are unspecified.

Notes

   Feature-test macro Value Std Feature
   __cpp_lib_containers_ranges 202202L (C++23) Ranges-aware construction
   and insertion

Example

   Run this code
#include <algorithm>
#include <cassert>
#include <deque>
#include <list>

int main()
{
    auto head = std::deque{1, 2, 3, 4};
    const auto tail = std::list{-5, -6, -7};
#ifdef __cpp_lib_containers_ranges
    head.append_range(tail);
#else
    head.insert(head.end(), tail.cbegin(), tail.cend());
#endif
    assert(std::ranges::equal(head, std::deque{1, 2, 3, 4, -5, -6, -7}));
}

See also

   prepend_range
   (C++23)
   adds a range of elements to the beginning
   (public member function)
   insert_range
   (C++23)
   inserts a range of elements
   (public member function)
   push_back
   adds an element to the end
   (public member function)
   emplace_back
   (C++11)
   constructs an element in-place at the end
   (public member function)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/container/deque/
   append_range&oldid=155588"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 27 July 2023, at 11:54.
     * This page has been accessed 2,506 times.
