std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::erase

   From cppreference.com
   < cpp | container | unordered multimap


   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Containers library
   Sequence
   array
   (C++11)
   vector
   vector<bool>
   deque
   forward_list
   (C++11)
   list
   Associative
   set
   multiset
   map
   multimap
   Unordered associative
   unordered_set
   (C++11)
   unordered_multiset
   (C++11)
   unordered_map
   (C++11)
   unordered_multimap
   (C++11)
   Adaptors
   stack
   queue
   priority_queue
   flat_set
   (C++23)
   flat_multiset
   (C++23)
   flat_map
   (C++23)
   flat_multimap
   (C++23)
   Views
   span
   (C++20)
   mdspan
   (C++23)
   Iterator invalidation
   Member function table
   Non-member function table

   std::unordered_multimap
   Member types
   Member functions
   unordered_multimap::unordered_multimap
   unordered_multimap::~unordered_multimap

   unordered_multimap::operator=
   unordered_multimap::get_allocator
   Iterators
   unordered_multimap::beginunordered_multimap::cbegin
   unordered_multimap::endunordered_multimap::cend
   Capacity
   unordered_multimap::size
   unordered_multimap::max_size
   unordered_multimap::empty
   Modifiers
   unordered_multimap::clear
   unordered_multimap::insert
   unordered_multimap::insert_range
   (C++23)
   unordered_multimap::emplace
   unordered_multimap::emplace_hint
   unordered_multimap::erase
   unordered_multimap::swap
   unordered_multimap::extract
   (C++17)
   unordered_multimap::merge
   (C++17)
   Lookup
   unordered_multimap::count
   unordered_multimap::find
   unordered_multimap::contains
   (C++20)
   unordered_multimap::equal_range
   Bucket interface
   unordered_multimap::begin(size_type)unordered_multimap::cbegin(size_typ
   e)
   unordered_multimap::end(size_type)unordered_multimap::cend(size_type)
   unordered_multimap::bucket_count
   unordered_multimap::max_bucket_count
   unordered_multimap::bucket_size
   unordered_multimap::bucket
   Hash policy
   unordered_multimap::load_factor
   unordered_multimap::max_load_factor
   unordered_multimap::rehash
   unordered_multimap::reserve
   Observers
   unordered_multimap::hash_function
   unordered_multimap::key_eq
   Non-member functions
   operator==operator!=
   (C++11)(C++11)(until C++20)
   std::swap(std::unordered_multimap)
   (C++11)
   erase_if(std::unordered_multimap)
   (C++20)
   Deduction guides (C++17)

   iterator erase( iterator pos );
   (1)                                                         (since C++11)
   iterator erase( const_iterator pos );
   (2)                                                         (since C++11)
   iterator erase( const_iterator first, const_iterator last );
   (3)                                                         (since C++11)
   size_type erase( const Key& key );
   (4)                                                         (since C++11)
   template< class K >
   size_type erase( K&& x );
   (5)                                                         (since C++23)

   Removes specified elements from the container. The order of the
   remaining elements is preserved. (This makes it possible to erase
   individual elements while iterating through the container.)
   1,2) Removes the element at pos.
   3) Removes the elements in the range [first, last), which must be a
   valid range in *this.
   4) Removes all elements with the key equivalent to key.
   5) Removes all elements with key that compares equivalent to the value
   x. This overload participates in overload resolution only if
   Hash::is_transparent and KeyEqual::is_transparent are valid and each
   denotes a type, and neither iterator nor const_iterator is implicitly
   convertible from K. This assumes that such Hash is callable with both K
   and Key type, and that the KeyEqual is transparent, which, together,
   allows calling this function without constructing an instance of Key.

   References and iterators to the erased elements are invalidated. Other
   iterators and references are not invalidated.

   The iterator pos must be valid and dereferenceable. Thus the end()
   iterator (which is valid, but is not dereferenceable) cannot be used as
   a value for pos.

Parameters

   pos - iterator to the element to remove
   first, last - range of elements to remove
   key - key value of the elements to remove
   x - a value of any type that can be transparently compared with a key
   denoting the elements to remove

Return value

   1-3) Iterator following the last removed element.
   4) Number of elements removed.
   5) Number of elements removed.

Exceptions

   1-3) Throws nothing.
   4,5) Any exceptions thrown by the Hash and KeyEqual object.

Complexity

   Given an instance c of unordered_multimap:
   1,2) Average case: constant, worst case: c.size().
   3) Average case: std::distance(first, last), worst case: c.size().
   4) Average case: c.count(key), worst case: c.size().
   5) Average case: c.count(x), worst case: c.size().

Notes

               Feature-test macro               Value    Std   Feature
   __cpp_lib_associative_heterogeneous_erasure 202110L (C++23)
   Heterogeneous erasure in associative containers and unordered
   associative containers; overload (5)

Example

   Run this code
#include <unordered_map>
#include <iostream>

int main()
{
    std::unordered_multimap<int, std::string> c =
    {
        {1, "one"}, {2, "two"}, {3, "three"},
        {4, "four"}, {5, "five"}, {6, "six"}
    };

    // erase all odd numbers from c
    for (auto it = c.begin(); it != c.end();)
    {
        if (it->first % 2 != 0)
            it = c.erase(it);
        else
            ++it;
    }

    for (auto& p : c)
        std::cout << p.second << ' ';
    std::cout << '\n';
}

   Possible output:
two four six

Defect reports

   The following behavior-changing defect reports were applied
   retroactively to previously published C++ standards.
   DR Applied to Behavior as published Correct behavior
   LWG 2059 C++11 there was ambiguity for overload (2) added overload (1)
   LWG 2356 C++11 the order of non-equivalent elements that are
   not erased was not guaranteed to be preserved required to be preserved

See also

   clear
   clears the contents
   (public member function)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/container/unorde
   red_multimap/erase&oldid=136067"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 4 December 2021, at 11:53.
     * This page has been accessed 43,453 times.
