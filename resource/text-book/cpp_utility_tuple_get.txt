std::get(std::tuple)

   From cppreference.com
   < cpp | utility | tuple

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Utilities library
   Language support
   Type support (basic types, RTTI)
   Library feature-test macros (C++20)
   Dynamic memory management
   Program utilities
   Coroutine support (C++20)
   Variadic functions
   is_constant_evaluated
   (C++20)
   is_within_lifetime
   (C++26)
   initializer_list
   (C++11)
   source_location
   (C++20)
   Debugging support
   is_debugger_present
   (C++26)
   breakpoint_if_debugging
   (C++26)
   breakpoint
   (C++26)
   Three-way comparison
   three_way_comparablethree_way_comparable_with
   (C++20)(C++20)
   strong_ordering
   (C++20)
   weak_ordering
   (C++20)
   partial_ordering
   (C++20)
   common_comparison_category
   (C++20)
   compare_three_way_result
   (C++20)
   compare_three_way
   (C++20)
   strong_order
   (C++20)
   weak_order
   (C++20)
   partial_order
   (C++20)
   compare_strong_order_fallback
   (C++20)
   compare_weak_order_fallback
   (C++20)
   compare_partial_order_fallback
   (C++20)
   is_eqis_ltis_lteq
   (C++20)(C++20)(C++20)
   is_neqis_gtis_gteq
   (C++20)(C++20)(C++20)
   General utilities
   Date and time
   Function objects
   Formatting library (C++20)
   bitset
   hash
   (C++11)
   Relational operators (deprecated in C++20)
   rel_ops::operator!=rel_ops::operator>

   rel_ops::operator<=rel_ops::operator>=
   Integer comparison functions
   cmp_equalcmp_lesscmp_less_than
   (C++20)(C++20)(C++20)
   cmp_not_equalcmp_greatercmp_greater_than
   (C++20)(C++20)(C++20)
   in_range
   (C++20)
   Swap and type operations
   swap
   ranges::swap
   (C++20)
   exchange
   (C++14)
   declval
   (C++11)
   to_underlying
   (C++23)
   forward
   (C++11)
   forward_like
   (C++23)
   move
   (C++11)
   move_if_noexcept
   (C++11)
   as_const
   (C++17)
   Common vocabulary types
   pair
   tuple
   (C++11)
   optional
   (C++17)
   any
   (C++17)
   variant
   (C++17)
   tuple_size
   (C++11)
   tuple_element
   (C++11)
   apply
   (C++17)
   make_from_tuple
   (C++17)
   expected
   (C++23)
   Elementary string conversions
   to_chars
   (C++17)
   from_chars
   (C++17)
   chars_format
   (C++17)
   to_chars_result
   (C++17)
   from_chars_result
   (C++17)

   std::tuple
   Member functions
   tuple::tuple
   tuple::operator=
   tuple::swap
   Non-member functions
   make_tuple
   tie
   forward_as_tuple
   tuple_cat
   operator==operator!=operator<operator<=operator>operator>=operator<=>
   (until C++20)(until C++20)(until C++20)(until C++20)(until
   C++20)(C++20)
   swap(std::tuple)
   get(std::tuple)
   Helper concepts
   tuple-like
   (C++23)
   Helper classes
   tuple_size<std::tuple>
   tuple_element<std::tuple>
   uses_allocator<std::tuple>
   basic_common_reference<std::tuple>
   (C++23)
   common_type<std::tuple>
   (C++23)
   formatter<std::tuple>
   (C++23)
   ignore
   Deduction guides(C++17)

   Defined in header <tuple>
   template< std::size_t I, class... Types >

   typename std::tuple_element<I, tuple<Types...> >::type&
       get( tuple<Types...>& t ) noexcept;
   (1) (since C++11)
   (constexpr since C++14)
   template< std::size_t I, class... Types >

   typename std::tuple_element<I, tuple<Types...> >::type&&
       get( tuple<Types...>&& t ) noexcept;
   (2) (since C++11)
   (constexpr since C++14)
   template< std::size_t I, class... Types >

   typename std::tuple_element<I, tuple<Types...> >::type const&
       get( const tuple<Types...>& t ) noexcept;
   (3) (since C++11)
   (constexpr since C++14)
   template< std::size_t I, class... Types >

   typename std::tuple_element<I, tuple<Types...> >::type const&&
       get( const tuple<Types...>&& t ) noexcept;
   (4) (since C++11)
   (constexpr since C++14)
   template< class T, class... Types >
   constexpr T& get( tuple<Types...>& t ) noexcept;
   (5) (since C++14)
   template< class T, class... Types >
   constexpr T&& get( tuple<Types...>&& t ) noexcept;
   (6) (since C++14)
   template< class T, class... Types >
   constexpr const T& get( const tuple<Types...>& t ) noexcept;
   (7) (since C++14)
   template< class T, class... Types >
   constexpr const T&& get( const tuple<Types...>&& t ) noexcept;
   (8) (since C++14)
   1-4) Extracts the I^th element from the tuple. I must be an integer
   value in [0, sizeof...(Types)).
   5-8) Extracts the element of the tuple t whose type is T. Fails to
   compile unless the tuple has exactly one element of that type.

Parameters

   t - tuple whose contents to extract

Return value

   A reference to the selected element of t.

Notes

      Feature-test macro     Value    Std            Feature
   __cpp_lib_tuples_by_type 201304L (C++14) Addressing tuples by type

Example

   Run this code
#include <iostream>
#include <string>
#include <tuple>

int main()
{
    auto t = std::make_tuple(1, "Foo", 3.14);

    // Index-based access
    std::cout << "( " << get<0>(t)
              << ", " << get<1>(t)
              << ", " << get<2>(t)
              << " )\n";

    // Type-based access (C++14 or later)
    std::cout << "( " << get<int>(t)
              << ", " << get<const char*>(t)
              << ", " << get<double>(t)
              << " )\n";

    // Note: std::tie and structured binding may also be used to decompose a tup
le.
}

   Output:
( 1, Foo, 3.14 )
( 1, Foo, 3.14 )

Defect reports

   The following behavior-changing defect reports were applied
   retroactively to previously published C++ standards.
   DR Applied to Behavior as published Correct behavior
   LWG 2485 C++11 (by index)
   C++14 (by type) there are no overloads for const tuple&& the overloads
   are added

See also

   Structured binding (C++17) binds the specified names to sub-objects or
   tuple elements of the initializer
   get(std::array)
   (C++11)
   accesses an element of an array
   (function template)
   get(std::pair)
   (C++11)
   accesses an element of a pair
   (function template)
   get(std::variant)
   (C++17)
   reads the value of the variant given the index or the type (if the type
   is unique), throws on error
   (function template)
   get(std::ranges::subrange)
   (C++20)
   obtains iterator or sentinel from a std::ranges::subrange
   (function template)
   get(std::complex)
   (C++26)
   obtains a reference to real or imaginary part from a std::complex
   (function template)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/utility/tuple/ge
   t&oldid=171347"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 26 April 2024, at 15:37.
     * This page has been accessed 918,024 times.
