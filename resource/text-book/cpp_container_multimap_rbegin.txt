std::multimap<Key,T,Compare,Allocator>::rbegin,
std::multimap<Key,T,Compare,Allocator>::crbegin

   From cppreference.com
   < cpp | container | multimap


   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Containers library
   Sequence
   array
   (C++11)
   vector
   vector<bool>
   deque
   forward_list
   (C++11)
   list
   Associative
   set
   multiset
   map
   multimap
   Unordered associative
   unordered_set
   (C++11)
   unordered_multiset
   (C++11)
   unordered_map
   (C++11)
   unordered_multimap
   (C++11)
   Adaptors
   stack
   queue
   priority_queue
   flat_set
   (C++23)
   flat_multiset
   (C++23)
   flat_map
   (C++23)
   flat_multimap
   (C++23)
   Views
   span
   (C++20)
   mdspan
   (C++23)
   Iterator invalidation
   Member function table
   Non-member function table

   std::multimap
   Member functions
   multimap::multimap
   multimap::~multimap
   multimap::operator=
   multimap::get_allocator
   Iterators
   multimap::beginmultimap::cbegin
   (C++11)
   multimap::endmultimap::cend
   (C++11)
   multimap::rbeginmultimap::crbegin
   (C++11)
   multimap::rendmultimap::crend
   (C++11)
   Capacity
   multimap::size
   multimap::max_size
   multimap::empty
   Modifiers
   multimap::clear
   multimap::insert
   multimap::erase
   multimap::swap
   multimap::merge
   (C++17)
   multimap::insert_range
   (C++23)
   multimap::emplace
   (C++11)
   multimap::emplace_hint
   (C++11)
   multimap::extract
   (C++17)
   Lookup
   multimap::count
   multimap::find
   multimap::contains
   (C++20)
   multimap::equal_range
   multimap::lower_bound
   multimap::upper_bound
   Observers
   multimap::key_comp
   multimap::value_comp
   Non-member functions
   operator==operator!=operator<operator>operator<=operator>=operator<=>
   (until C++20)(until C++20)(until C++20)(until C++20)(until
   C++20)(C++20)
   std::swap(std::multimap)
   erase_if(std::multimap)
   (C++20)
   Deduction guides(C++17)

   reverse_iterator rbegin();
   (1)                                             (noexcept since C++11)
   const_reverse_iterator rbegin() const;
   (2)                                             (noexcept since C++11)
   const_reverse_iterator crbegin() const noexcept;
   (3)                                             (since C++11)

   Returns a reverse iterator to the first element of the reversed
   multimap. It corresponds to the last element of the non-reversed
   multimap. If the multimap is empty, the returned iterator is equal to
   rend().

   range-rbegin-rend.svg

Parameters

   (none)

Return value

   Reverse iterator to the first element.

Complexity

   Constant.

Notes

   The underlying iterator of the returned reverse iterator is the end
   iterator. Hence the returned iterator is invalidated if and when the
   end iterator is invalidated.

   libc++ backports crbegin() to C++98 mode.

Example

   Run this code
#include <algorithm>
#include <iostream>
#include <string>
#include <map>

int main()
{
    std::multimap<std::string, int> map
    {
        {"FB", 1},
        {":S", 5},
        {".S", 3},
        {"?S", 7},
        {"?S", 8},
        {".S", 4},
        {":S", 6},
        {"FB", 2}
    };

    std::cout << "Print out in reverse order using const reverse iterators:\n";
    std::for_each(map.crbegin(), map.crend(),
        [](std::pair<const std::string, int> const& e)
        {
            std::cout << "{ \"" << e.first << "\", " << e.second << " };\n";
        });

    map.rbegin()->second = 42; // OK: non-const value is modifiable
//  map.crbegin()->second = 42; // Error: cannot modify the const value
}

   Possible output:
Print out in reverse order using const reverse iterators:
{ "?S", 8 };
{ "?S", 7 };
{ ":S", 6 };
{ ":S", 5 };
{ ".S", 4 };
{ ".S", 3 };
{ "FB", 2 };
{ "FB", 1 };

See also

   rendcrend
   (C++11)
   returns a reverse iterator to the end
   (public member function)
   rbegincrbegin
   (C++14)
   returns a reverse iterator to the beginning of a container or array
   (function template)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/container/multim
   ap/rbegin&oldid=122806"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 1 October 2020, at 13:17.
     * This page has been accessed 28,644 times.
