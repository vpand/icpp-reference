Standard library header <cstdlib>

   From cppreference.com
   < cpp | header

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Standard library headers
   Language support
   <cstddef>
   <cstdlib>
   <version> (C++20)
   <limits>
   <climits>
   <cfloat>
   <cstdint> (C++11)
   <stdfloat> (C++23)
   <new>
   <typeinfo>
   <source_location> (C++20)
   <exception>
   <initializer_list> (C++11)
   <compare> (C++20)
   <coroutine> (C++20)
   <csignal>
   <csetjmp>
   <cstdarg>
   Concepts
   <concepts> (C++20)
   Diagnostics
   <stdexcept>
   <stacktrace> (C++23)
   <cassert>
   <cerrno>
   <system_error> (C++11)
   Memory management
   <memory>
   <memory_resource> (C++17)
   <scoped_allocator> (C++11)
   Metaprogramming
   <type_traits> (C++11)
   <ratio> (C++11)
   General utilities
   <utility>
   <tuple> (C++11)
   <optional> (C++17)
   <variant> (C++17)
   <any> (C++17)
   <debugging> (C++26)
   <expected> (C++23)
   <bitset>
   <functional>
   <typeindex> (C++11)
   <execution> (C++17)
   <charconv> (C++17)
   <format> (C++20)
   <bit> (C++20)
   Strings
   <string_view> (C++17)
   <string>
   <cctype>
   <cwctype>
   <cstring>
   <cwchar>
   <cuchar> (C++11)
   Containers
   <array> (C++11)
   <deque>
   <forward_list> (C++11)
   <list>
   <vector>
   <map>
   <set>
   <unordered_map> (C++11)
   <unordered_set> (C++11)
   <queue>
   <stack>
   <flat_map> (C++23)
   <flat_set> (C++23)
   <span> (C++20)
   <mdspan> (C++23)
   Iterators
   <iterator>
   Ranges
   <ranges> (C++20)
   <generator> (C++23)
   Algorithms
   <algorithm>
   <numeric>
   Numerics
   <cfenv> (C++11)
   <complex>
   <random> (C++11)
   <valarray>
   <cmath>
   <linalg> (C++26)
   <numbers> (C++20)
   Time
   <chrono> (C++11)
   <ctime>
   Localization
   <locale>
   <clocale>
   <codecvt> (C++11/17/26*)
   <text_encoding> (C++26)
   Input/output
   <iosfwd>
   <iostream>
   <ios>
   <streambuf>
   <istream>
   <ostream>
   <iomanip>
   <print> (C++23)
   <sstream>
   <spanstream> (C++23)
   <fstream>
   <syncstream> (C++20)
   <filesystem> (C++17)
   <cstdio>
   <cinttypes> (C++11)
   <strstream> (C++98/26*)
   Regular expressions
   <regex> (C++11)
   Concurrency support
   <stop_token> (C++20)
   <thread> (C++11)
   <atomic> (C++11)
   <rcu> (C++26)
   <stdatomic.h> (C++23)
   <mutex> (C++11)
   <shared_mutex> (C++14)
   <condition_variable> (C++11)
   <semaphore> (C++20)
   <latch> (C++20)
   <barrier> (C++20)
   <future> (C++11)
   <hazard_pointer> (C++26)
   C compatibility
   <cstdbool> (C++11/17/20*)
   <ccomplex> (C++11/17/20*)
   <ctgmath> (C++11/17/20*)
   <cstdalign> (C++11/17/20*)
   <ciso646> (until C++20)

   This header was originally in the C standard library as <stdlib.h>.

   This header provides miscellaneous utilities. Symbols defined here are
   used by several library components.

Types

   div_t
   structure type, returned by std::div
   (typedef)
   ldiv_t
   structure type, returned by std::ldiv
   (typedef)
   lldiv_t
   (C++11)
   structure type, returned by std::lldiv
   (typedef)
   size_t
   unsigned integer type returned by the sizeof operator
   (typedef)

Macro constants

   EXIT_SUCCESSEXIT_FAILURE
   indicates program execution status
   (macro constant)
   MB_CUR_MAX
   maximum number of bytes in a multibyte character with the current
   locale
   (macro constant)
   NULL
   implementation-defined null pointer constant
   (macro constant)
   RAND_MAX
   maximum possible value generated by std::rand
   (macro constant)

Functions

Process control

   abort
   causes abnormal program termination (without cleaning up)
   (function)
   exit
   causes normal program termination with cleaning up
   (function)
   quick_exit
   (C++11)
   causes quick program termination without completely cleaning up
   (function)
   _Exit
   (C++11)
   causes normal program termination without cleaning up
   (function)
   atexit
   registers a function to be called on std::exit() invocation
   (function)
   at_quick_exit
   (C++11)
   registers a function to be called on std::quick_exit invocation
   (function)
   system
   calls the host environment's command processor
   (function)
   getenv
   access to the list of environment variables
   (function)

Memory management

   malloc
   allocates memory
   (function)
   aligned_alloc
   (C++17)
   allocates aligned memory
   (function)
   calloc
   allocates and zeroes memory
   (function)
   realloc
   expands or shrinks previously allocated memory block
   (function)
   free
   deallocates previously allocated memory
   (function)

Numeric string conversion

   atof
   converts a byte string to a floating point value
   (function)
   atoiatolatoll
   (C++11)
   converts a byte string to an integer value
   (function)
   strtolstrtoll
   (C++11)
   converts a byte string to an integer value
   (function)
   strtoulstrtoull
   (C++11)
   converts a byte string to an unsigned integer value
   (function)
   strtofstrtodstrtold
   converts a byte string to a floating-point value
   (function)

Wide string manipulation

   mblen
   returns the number of bytes in the next multibyte character
   (function)
   mbtowc
   converts the next multibyte character to wide character
   (function)
   wctomb
   converts a wide character to its multibyte representation
   (function)
   mbstowcs
   converts a narrow multibyte character string to wide string
   (function)
   wcstombs
   converts a wide string to narrow multibyte character string
   (function)

Miscellaneous algorithms and math

   rand
   generates a pseudo-random number
   (function)
   srand
   seeds pseudo-random number generator
   (function)
   qsort
   sorts a range of elements with unspecified type
   (function)
   bsearch
   searches an array for an element of unspecified type
   (function)
   abs(int)labsllabs
   (C++11)
   computes absolute value of an integral value (\(\small{|x|}\)|x|)
   (function)
   div(int)ldivlldiv
   (C++11)
   computes quotient and remainder of integer division
   (function)

Synopsis

namespace std {
  using size_t =  /* see description */; // freestanding
  using div_t =   /* see description */; // freestanding
  using ldiv_t =  /* see description */; // freestanding
  using lldiv_t = /* see description */; // freestanding
}

#define NULL         /* see description */ // freestanding
#define EXIT_FAILURE /* see description */ // freestanding
#define EXIT_SUCCESS /* see description */ // freestanding
#define RAND_MAX     /* see description */
#define MB_CUR_MAX   /* see description */

namespace std {
  // Exposition-only function type aliases
  extern "C" using /* c-atexit-handler */ = void(); // exposition only
  extern "C++" using /* atexit-handler */ = void(); // exposition only
  extern "C" using /* c-compare-pred */ =           // exposition only
    int(const void*, const void*);
  extern "C++" using /* compare-pred */ =           // exposition only
    int(const void*, const void*);

  // start and termination
  [[noreturn]] void abort() noexcept;                       // freestanding
  int atexit(/* c-atexit-handler */* func) noexcept;        // freestanding
  int atexit(/* atexit-handler */* func) noexcept;          // freestanding
  int at_quick_exit(/* c-atexit-handler */* func) noexcept; // freestanding
  int at_quick_exit(/* atexit-handler */* func) noexcept;   // freestanding
  [[noreturn]] void exit(int status);                       // freestanding
  [[noreturn]] void _Exit(int status) noexcept;             // freestanding
  [[noreturn]] void quick_exit(int status) noexcept;        // freestanding

  char* getenv(const char* name);
  int system(const char* string);

  // C library memory allocation
  void* aligned_alloc(size_t alignment, size_t size);
  void* calloc(size_t nmemb, size_t size);
  void free(void* ptr);
  void* malloc(size_t size);
  void* realloc(void* ptr, size_t size);

  double atof(const char* nptr);
  int atoi(const char* nptr);
  long int atol(const char* nptr);
  long long int atoll(const char* nptr);
  double strtod(const char* nptr, char** endptr);
  float strtof(const char* nptr, char** endptr);
  long double strtold(const char* nptr, char** endptr);
  long int strtol(const char* nptr, char** endptr, int base);
  long long int strtoll(const char* nptr, char** endptr, int base);
  unsigned long int strtoul(const char* nptr, char** endptr, int base);
  unsigned long long int strtoull(const char* nptr, char** endptr, int base);

  // multibyte / wide string and character conversion functions
  int mblen(const char* s, size_t n);
  int mbtowc(wchar_t* pwc, const char* s, size_t n);
  int wctomb(char* s, wchar_t wchar);
  size_t mbstowcs(wchar_t* pwcs, const char* s, size_t n);
  size_t wcstombs(char* s, const wchar_t* pwcs, size_t n);

  // C standard library algorithms
  void* bsearch(const void* key, const void* base,  // freestanding
                size_t nmemb, size_t size, /* c-compare-pred */* compar);
  void* bsearch(const void* key, const void* base,  // freestanding
                size_t nmemb, size_t size, /* compare-pred */* compar);
  void qsort(void* base, size_t nmemb, size_t size, // freestanding
             /* c-compare-pred */* compar);
  void qsort(void* base, size_t nmemb, size_t size, // freestanding
             /* compare-pred */* compar);

  // low-quality random number generation
  int rand();
  void srand(unsigned int seed);

  // absolute values
  constexpr int abs(int j);                       // freestanding
  constexpr long int abs(long int j);             // freestanding
  constexpr long long int abs(long long int j);   // freestanding
  constexpr /* floating-point-type */
    abs(/* floating-point-type */ j);             // freestanding-deleted

  constexpr long int labs(long int j);            // freestanding
  constexpr long long int llabs(long long int j); // freestanding

  constexpr div_t div(int numer, int denom);                         // freestan
ding
  constexpr ldiv_t div(long int numer, long int denom);              // freestan
ding
  constexpr lldiv_t div(long long int numer, long long int denom);   // freestan
ding
  constexpr ldiv_t ldiv(long int numer, long int denom);             // freestan
ding
  constexpr lldiv_t lldiv(long long int numer, long long int denom); // freestan
ding
}

Defect reports

   The following behavior-changing defect reports were applied
   retroactively to previously published C++ standards.
   DR Applied to Behavior as published Correct behavior
   LWG 286 C++98 the definition of size_t was not provided in <cstdlib>
   provided

See also

     * Program support utilities
     * Pseudo-random number generation
     * Common mathematical functions
     * Mathematical special functions
     * C memory management library
     * Null-terminated byte strings
     * Null-terminated multibyte strings
     * Algorithms library

   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/header/cstdlib&o
   ldid=158952"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 13 September 2023, at 00:53.
     * This page has been accessed 321,923 times.
