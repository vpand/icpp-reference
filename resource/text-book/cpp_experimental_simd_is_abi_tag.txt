std::experimental::is_abi_tag

   From cppreference.com
   < cpp | experimental | simd

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Experimental
   Technical Specification
   Filesystem library (filesystem TS)
   Library fundamentals (library fundamentals TS)
   Library fundamentals 2 (library fundamentals TS v2)
   Library fundamentals 3 (library fundamentals TS v3)
   Extensions for parallelism (parallelism TS)
   Extensions for parallelism 2 (parallelism TS v2)
   Extensions for concurrency (concurrency TS)
   Extensions for concurrency 2 (concurrency TS v2)
   Concepts (concepts TS)
   Ranges (ranges TS)
   Reflection (reflection TS)
   Mathematical special functions (special functions TR)
   Experimental Non-TS
   Pattern Matching
   Linear Algebra
   std::execution
   Contracts
   2D Graphics

   Extensions for parallelism v2
   Parallel exceptions
   exception_list
   Additional execution policies
   execution::vector_policy
   execution::unsequenced_policy
   Algorithms
   induction
   reductionreduction_plusreduction_minusreduction_multiplies

   reduction_bit_andreduction_bit_orreduction_bit_xorreduction_minreductio
   n_max

   for_loopfor_loop_stridedfor_loop_nfor_loop_n_strided
   execution::no_vec
   execution::ordered_update_t
   Task blocks
   task_block
   task_cancelled_exception
   define_task_blockdefine_task_block_restore_thread
   Data-parallel vectors

   SIMD library
   Main classes
   simd
   simd_mask
   ABI tags
   simd_abi::scalar
   simd_abi::fixed_size

   simd_abi::native
   simd_abi::compatible

   simd_abi::max_fixed_size
   simd_abi::deduce
   Alignment tags
   element_aligned_tagelement_aligned
   vector_aligned_tagvector_aligned
   overaligned_tagoveraligned
   Where expression
   where
   where_expression
   const_where_expression
   Casts
   simd_caststatic_simd_cast
   to_fixed_sizeto_compatibleto_native
   splitsplit_by
   concat
   Algorithms
   min
   max
   minmax
   clamp
   Reduction
   reducehminhmax
   Mask reduction
   all_ofany_ofnone_ofsome_of
   popcount
   find_first_setfind_last_set
   Traits
   is_simdis_simd_mask
   is_abi_tag
   is_simd_flag_type
   simd_size
   memory_alignment
   rebind_simdresize_simd
   Math functions

   Defined in header <experimental/simd>
   template< class T >
   struct is_abi_tag;
                                        (parallelism TS v2)

   If T is an ABI tag in the simd_abi namespace, provides the member
   constant value equal true. For any other type, value is false.

Template parameters

   T - a type to check

Helper variable template

   template< class T >
   inline constexpr bool is_abi_tag_v = is_abi_tag<T>::value;
                      (parallelism TS v2)

Inherited from std::integral_constant

Member constants

   value
   [static]
   true if T is an ABI tag type, false otherwise
   (public static member constant)

Member functions

   operator bool
   converts the object to bool, returns value
   (public member function)
   operator()
   (C++14)
   returns value
   (public member function)

Member types

   Type       Definition
   value_type bool
   type       std::integral_constant<bool, value>

Example

   Run this code
#include <experimental/simd>
#include <iostream>

int main()
{
    namespace stdx = std::experimental;
    std::cout << std::boolalpha
              << stdx::is_abi_tag_v<stdx::simd_abi::scalar> << '\n'
              << stdx::is_abi_tag_v<int> << '\n';
}

   Output:
true
false

See also

   is_simd_flag_type
   (parallelism TS v2)
   checks if a type is a simd flag type
   (class template)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/experimental/sim
   d/is_abi_tag&oldid=149670"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 24 March 2023, at 13:11.
     * This page has been accessed 6,259 times.
