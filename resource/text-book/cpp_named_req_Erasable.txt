C++ named requirements: Erasable (since C++11)

   From cppreference.com
   < cpp | named req

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   C++ named requirements
   Basic
   DefaultConstructible
   CopyAssignable
   CopyConstructible
   MoveAssignable
   (C++11)
   MoveConstructible
   (C++11)
   Destructible
   Type properties
   ScalarType
   TriviallyCopyable
   (C++11)
   StandardLayoutType
   (C++11)
   PODType
   TrivialType
   (C++11)
   ImplicitLifetimeType
   Library-Wide
   EqualityComparable
   LessThanComparable
   Swappable
   ValueSwappable
   (C++11)
   NullablePointer
   (C++11)
   Hash
   (C++11)
   Allocator
   FunctionObject
   Callable
   Predicate
   BinaryPredicate
   Compare
   Container
   Container
   SequenceContainer
   ContiguousContainer
   (C++17)
   ReversibleContainer
   AssociativeContainer
   AllocatorAwareContainer
   UnorderedAssociativeContainer
   (C++11)
   Container Elements
   DefaultInsertable
   (C++11)
   CopyInsertable
   (C++11)
   MoveInsertable
   (C++11)
   EmplaceConstructible
   (C++11)
   Erasable
   (C++11)
   Iterator
   LegacyIterator
   LegacyOutputIterator
   LegacyInputIterator
   LegacyForwardIterator
   LegacyBidirectionalIterator
   LegacyRandomAccessIterator
   LegacyContiguousIterator
   (C++17)
   ConstexprIterator
   (C++20)
   Stream I/O
   FormattedInputFunction
   UnformattedInputFunction
   FormattedOutputFunction
   UnformattedOutputFunction
   Formatters
   BasicFormatter
   (C++20)
   Formatter
   (C++20)
   Random Numbers
   SeedSequence
   (C++11)
   RandomNumberEngine
   (C++11)
   RandomNumberDistribution
   (C++11)
   UniformRandomBitGenerator
   (C++11)
   RandomNumberEngineAdaptor
   (C++11)
   Concurrency
   BasicLockable
   (C++11)
   Lockable
   (C++11)
   TimedLockable
   (C++11)
   SharedLockable
   (C++14)
   SharedTimedLockable
   (C++14)
   Mutex
   (C++11)
   TimedMutex
   (C++11)
   SharedMutex
   (C++17)
   SharedTimedMutex
   (C++14)
   Ranges
   RangeAdaptorObject
   (C++20)
   RangeAdaptorClosureObject
   (C++20)
   Other
   CharTraits
   RegexTraits
   (C++11)
   BitmaskType
   LiteralType
   (C++11)
   NumericType
   UnaryTypeTrait
   (C++11)
   BinaryTypeTrait
   (C++11)
   TransformationTrait
   (C++11)
   Clock
   (C++11)
   TrivialClock
   (C++11)

   Specifies that an object of the type can be destroyed by a given
   Allocator.

Requirements

   The type T is Erasable from the Container X whose value_type is
   identical to T if, given
   A an allocator type
   m an lvalue of type A
   p the pointer of type T* prepared by the container

   where X::allocator_type is identical to
   std::allocator_traits<A>::rebind_alloc<T>,

   the following expression is well-formed:
std::allocator_traits<A>::destroy(m, p);

   If X is not allocator-aware or is a std::basic_string specialization,
   the term is defined as if A were std::allocator<T>, except that no
   allocator object needs to be created, and user-defined specializations
   of std::allocator are not instantiated.

Notes

   All standard library containers require that their element type
   satisfies Erasable.

   With the default allocator, this requirement is equivalent to the
   validity of p->~T(), which accepts class types with accessible
   destructors and all scalar types, but rejects array types, function
   types, reference types, and void.
   (until C++20)

   With the default allocator, this requirement is equivalent to the
   validity of std::destroy_at(p), which accepts class types with
   accessible destructors and all scalar types, as well as arrays thereof.
   (since C++20)

   Although it is required that customized destroy is used when destroying
   elements of std::basic_string until C++23, all implementations only
   used the default mechanism. The requirement is corrected by P1072R10 to
   match existing practice.

See also

   CopyInsertable
   MoveInsertable
   EmplaceConstructible
   Destructible
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/named_req/Erasab
   le&oldid=144924"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 8 November 2022, at 13:15.
     * This page has been accessed 50,357 times.
