atof

   From cppreference.com
   < c | string | byte

   C
   Language
   Headers
   Type support
   Program utilities
   Variadic function support
   Error handling
   Dynamic memory management
   Strings library
   Algorithms
   Numerics
   Date and time utilities
   Input/output support
   Localization support
   Concurrency support (C11)
   Technical Specifications
   Symbol index

   Strings library
   Byte strings
   Multibyte strings
   Wide strings

   Null-terminated byte strings
   Functions
   Character manipulation
   isalnum
   isalpha
   islower
   isupper
   isdigit
   isxdigit
   isblank
   (C99)
   iscntrl
   isgraph
   isspace
   isprint
   ispunct
   tolower
   toupper
   Conversions to and from numeric formats
   atoiatolatoll
   (C99)
   atof
   strtolstrtoll
   (C99)
   strtoulstrtoull
   (C99)
   strtoimaxstrtoumax
   (C99)(C99)
   strtofstrtodstrtold
   (C99)(C99)
   strfromfstrfromdstrfroml
   (C23)(C23)(C23)
   String manipulation
   strcpystrcpy_s
   (C11)
   strncpystrncpy_s
   (C11)
   strcatstrcat_s
   (C11)
   strncatstrncat_s
   (C11)
   strxfrm
   strdup
   (C23)
   strndup
   (C23)
   String examination
   strlenstrnlen_s
   (C11)
   strcmp
   strncmp
   strcoll
   strchr
   strrchr
   strspn
   strcspn
   strpbrk
   strstr
   strtokstrtok_s
   (C11)
   Memory manipulation
   memchr
   memcmp
   memsetmemset_explicitmemset_s
   (C23)(C11)
   memcpymemcpy_s
   (C11)
   memmovememmove_s
   (C11)
   memccpy
   (C23)
   Miscellaneous
   strerrorstrerror_sstrerrorlen_s
   (C11)(C11)

   Defined in header <stdlib.h>
   double atof( const char* str );

   Interprets a floating-point value in a byte string pointed to by str.

   Function discards any whitespace characters (as determined by isspace)
   until first non-whitespace character is found. Then it takes as many
   characters as possible to form a valid floating-point representation
   and converts them to a floating-point value. The valid floating-point
   value can be one of the following:
     * decimal floating-point expression. It consists of the following
       parts:

          + (optional) plus or minus sign
          + nonempty sequence of decimal digits optionally containing
            decimal-point character (as determined by the current C
            locale) (defines significand)
          + (optional) e or E followed with optional minus or plus sign
            and nonempty sequence of decimal digits (defines exponent to
            base 10)

     * hexadecimal floating-point expression. It consists of the following
       parts:

          + (optional) plus or minus sign
          + 0x or 0X
          + nonempty sequence of hexadecimal digits optionally containing
            a decimal-point character (as determined by the current C
            locale) (defines significand)
          + (optional) p or P followed with optional minus or plus sign
            and nonempty sequence of decimal digits (defines exponent to
            base 2)

     * infinity expression. It consists of the following parts:

          + (optional) plus or minus sign
          + INF or INFINITY ignoring case

     * not-a-number expression. It consists of the following parts:

          + (optional) plus or minus sign
          + NAN or NAN(char_sequence) ignoring case of the NAN part.
            char_sequence can only contain digits, Latin letters, and
            underscores. The result is a quiet NaN floating-point value.

   (since C99)
     * any other expression that may be accepted by the currently
       installed C locale

Parameters

   str - pointer to the null-terminated byte string to be interpreted

Return value

   double value corresponding to the contents of str on success. If the
   converted value falls out of range of the return type, the return value
   is undefined. If no conversion can be performed, 0.0 is returned.

Notes

   The name stands for "ASCII to float".

Example

   Run this code
#include <stdlib.h>
#include <stdio.h>

int main(void)
{
    printf("%g\n", atof("  -0.0000000123junk"));
    printf("%g\n", atof("0.012"));
    printf("%g\n", atof("15e16"));
    printf("%g\n", atof("-0x1afp-2"));
    printf("%g\n", atof("inF"));
    printf("%g\n", atof("Nan"));
    printf("%g\n", atof("1.0e+309"));   // UB: out of range of double
    printf("%g\n", atof("0.0"));
    printf("%g\n", atof("junk"));       // no conversion can be performed
}

   Possible output:
-1.23e-08
0.012
1.5e+17
-107.75
inf
nan
inf
0
0

References

     * C11 standard (ISO/IEC 9899:2011):

          + 7.22.1.1 The atof function (p: 341)

     * C99 standard (ISO/IEC 9899:1999):

          + 7.20.1.1 The atof function (p: 307)

     * C89/C90 standard (ISO/IEC 9899:1990):

          + 4.10.1.1 The atof function

See also

   strtofstrtodstrtold
   (C99)(C99)
   converts a byte string to a floating-point value
   (function)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=c/string/byte/atof&o
   ldid=134444"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 11 October 2021, at 19:55.
     * This page has been accessed 48,739 times.
