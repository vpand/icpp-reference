std::scoped_allocator_adaptor<OuterAlloc,InnerAlloc...>::construct

   From cppreference.com
   < cpp | memory | scoped allocator adaptor

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Dynamic memory management
   Uninitialized memory algorithms
   uninitialized_copy
   uninitialized_fill
   uninitialized_move
   (C++17)
   uninitialized_default_construct
   (C++17)
   uninitialized_value_construct
   (C++17)
   destroy
   (C++17)
   destroy_at
   (C++17)
   voidify
   (C++20)
   uninitialized_copy_n
   (C++11)
   uninitialized_fill_n
   uninitialized_move_n
   (C++17)
   uninitialized_default_construct_n
   (C++17)
   uninitialized_value_construct_n
   (C++17)
   destroy_n
   (C++17)
   construct_at
   (C++20)
   Constrained uninitialized memory algorithms
   ranges::uninitialized_copy
   (C++20)
   ranges::uninitialized_fill
   (C++20)
   ranges::uninitialized_move
   (C++20)
   ranges::construct_at
   (C++20)
   ranges::destroy
   (C++20)
   ranges::destroy_n
   (C++20)
   ranges::destroy_at
   (C++20)
   ranges::uninitialized_copy_n
   (C++20)
   ranges::uninitialized_fill_n
   (C++20)
   ranges::uninitialized_move_n
   (C++20)
   ranges::uninitialized_default_construct
   (C++20)
   ranges::uninitialized_value_construct
   (C++20)
   ranges::uninitialized_default_construct_n
   (C++20)
   ranges::uninitialized_value_construct_n
   (C++20)
   Allocators
   allocator
   allocator_traits
   (C++11)
   allocation_result
   (C++23)
   allocator_arg
   (C++11)
   uses_allocator
   (C++11)
   uses_allocator_construction_args
   (C++20)
   make_obj_using_allocator
   (C++20)
   uninitialized_construct_using_allocator
   (C++20)
   scoped_allocator_adaptor
   (C++11)
   pmr::polymorphic_allocator
   (C++17)
   Memory resources
   pmr::memory_resource
   (C++17)
   pmr::get_default_resource
   (C++17)
   pmr::set_default_resource
   (C++17)
   pmr::new_delete_resource
   (C++17)
   pmr::null_memory_resource
   (C++17)
   pmr::synchronized_pool_resource
   (C++17)
   pmr::unsynchronized_pool_resource
   (C++17)
   pmr::monotonic_buffer_resource
   (C++17)
   pmr::pool_options
   (C++17)
   Garbage collection support
   declare_reachable
   (C++11)(until C++23)
   undeclare_reachable
   (C++11)(until C++23)
   declare_no_pointers
   (C++11)(until C++23)
   undeclare_no_pointers
   (C++11)(until C++23)
   pointer_safety
   (C++11)(until C++23)
   get_pointer_safety
   (C++11)(until C++23)
   Uninitialized storage
   raw_storage_iterator
   (until C++20*)
   get_temporary_buffer
   (until C++20*)
   return_temporary_buffer
   (until C++20*)
   Explicit lifetime management
   start_lifetime_asstart_lifetime_as_array
   (C++23)(C++23)
   Smart pointers
   unique_ptr
   (C++11)
   shared_ptr
   (C++11)
   weak_ptr
   (C++11)
   auto_ptr
   (until C++17*)
   owner_less
   (C++11)
   owner_less<void>
   (C++17)
   owner_hash
   (C++26)
   owner_equal
   (C++26)
   enable_shared_from_this
   (C++11)
   bad_weak_ptr
   (C++11)
   default_delete
   (C++11)
   out_ptr_t
   (C++23)
   inout_ptr_t
   (C++23)
   Low level memory
   management
   operator new
   operator new[]
   operator delete
   operator delete[]
   get_new_handler
   set_new_handler
   launder
   (C++17)
   bad_alloc
   bad_array_new_length
   nothrow_t
   align_val_t
   destroying_delete_t
   new_handler
   nothrow
   Miscellaneous
   pointer_traits
   (C++11)
   to_address
   (C++20)
   addressof
   (C++11)
   align
   (C++11)
   assume_aligned
   (C++20)
   C Library
   malloc
   calloc
   realloc

   aligned_alloc
   (C++17)
   free

   std::scoped_allocator_adaptor
   Member functions
   scoped_allocator_adaptor::scoped_allocator_adaptor
   scoped_allocator_adaptor::~scoped_allocator_adaptor
   scoped_allocator_adaptor::operator=
   scoped_allocator_adaptor::inner_allocator
   scoped_allocator_adaptor::outer_allocator
   scoped_allocator_adaptor::allocate
   scoped_allocator_adaptor::deallocate
   scoped_allocator_adaptor::max_size
   scoped_allocator_adaptor::construct
   scoped_allocator_adaptor::destroy
   scoped_allocator_adaptor::select_on_container_copy_construction
   Non-member functions
   operator==operator!=
   (until C++20)
   Deduction guides(C++17)

   Defined in header <scoped_allocator>
   template< class T, class... Args >
   void construct( T* p, Args&&... args );
   (1)
   template< class T1, class T2, class... Args1, class... Args2 >

   void construct( std::pair<T1, T2>* p,
                   std::piecewise_construct_t,
                   std::tuple<Args1...> x,
                   std::tuple<Args2...> y );
   (2)                                                           (until C++20)
   template< class T1, class T2 >
   void construct( std::pair<T1, T2>* p );
   (3)                                                           (until C++20)
   template< class T1, class T2, class U, class V >
   void construct( std::pair<T1, T2>* p, U&& x, V&& y );
   (4)                                                           (until C++20)
   template< class T1, class T2, class U, class V >
   void construct( std::pair<T1, T2>* p, const std::pair<U, V>& xy );
   (5)                                                           (until C++20)
   template< class T1, class T2, class U, class V >
   void construct( std::pair<T1, T2>* p, std::pair<U, V>&& xy );
   (6)                                                           (until C++20)
   template< class T1, class T2, class NonPair >
   void construct( std::pair<T1, T2>* p, NonPair&& non_pair );
   (7)                                                           (until C++20)

   Constructs an object in allocated, but not initialized storage pointed
   to by p using OuterAllocator and the provided constructor arguments. If
   the object is of type that itself uses allocators, or if it is
   std::pair, passes InnerAllocator down to the constructed object.

   First, retrieve the outermost allocator OUTERMOST by calling
   this->outer_allocator(), and then calling the outer_allocator() member
   function recursively on the result of this call until reaching an
   allocator that has no such member function.

   Define OUTERMOST_ALLOC_TRAITS(x) as
   std::allocator_traits<std::remove_reference_t<decltype(OUTERMOST(x))>>
   1) Creates an object of the given type T by means of uses-allocator
   construction at the uninitialized memory location indicated by p, using
   OUTERMOST as the allocator. After adjustment for uses-allocator
   convention expected by T's constructor, calls
   OUTERMOST_ALLOC_TRAITS(*this)::construct.
   This overload participates in overload resolution only if U is not a
   specialization of std::pair.
   (until C++20)
   Equivalent to
   std::apply(

       [p, this](auto&&... newargs)
       {
           OUTERMOST_ALLOC_TRAITS(*this)::construct(
               OUTERMOST(*this), p,
   std::forward<decltype(newargs)>(newargs)...);
       },
       std::uses_allocator_construction_args(
           inner_allocator(),
           std::forward<Args>(args)...
       )
   );
   (since C++20)
   2) First, if either T1 or T2 is allocator-aware, modifies the tuples x
   and y to include the appropriate inner allocator, resulting in the two
   new tuples xprime and yprime, according to the following three rules:
   2a) if T1 is not allocator-aware
   (std::uses_allocator<T1, inner_allocator_type>::value == false), then
   xprime is std::tuple<Args1&&...>(std::move(x)). (It is also required
   that std::is_constructible<T1, Args1...>::value == true).
   2b) if T1 is allocator-aware (std::uses_allocator<T1,
   inner_allocator_type>::value == true), and its constructor takes an
   allocator tag

   std::is_constructible<T1, std::allocator_arg_t,
                         inner_allocator_type&, Args1...>::value == true,
   then xprime is
   std::tuple_cat(std::tuple<std::allocator_arg_t, inner_allocator_type&>(
                       std::allocator_arg, inner_allocator()
                  ),
                  std::tuple<Args1&&...>(std::move(x)))
   2c) if T1 is allocator-aware (std::uses_allocator<T1,
   inner_allocator_type>::value == true), and its constructor takes the
   allocator as the last argument

   std::is_constructible<T1, Args1..., inner_allocator_type&>::value ==
   true,
   then xprime is
   std::tuple_cat(std::tuple<Args1&&...>(std::move(x)),
                  std::tuple<inner_allocator_type&>(inner_allocator())).
   Same rules apply to T2 and the replacement of y with yprime.
   Once xprime and yprime are constructed, constructs the pair p in
   allocated storage by calling
   std::allocator_traits<O>::construct(OUTERMOST,
                                       p,
                                       std::piecewise_construct,
                                       std::move(xprime),
                                       std::move(yprime));
   3) Equivalent to

   construct(p, std::piecewise_construct, std::tuple<>(), std::tuple<>()),
   that is, passes the inner allocator on to the pair's member types if
   they accept them.
   4) Equivalent to
   construct(p, std::piecewise_construct,
   std::forward_as_tuple(std::forward<U>(x)),

   std::forward_as_tuple(std::forward<V>(y)))
   5) Equivalent to
   construct(p, std::piecewise_construct, std::forward_as_tuple(xy.first),

   std::forward_as_tuple(xy.second))
   6) Equivalent to
   construct(p, std::piecewise_construct,
                std::forward_as_tuple(std::forward<U>(xy.first)),
                std::forward_as_tuple(std::forward<V>(xy.second)))
   7) This overload participates in overload resolution only if given the
   exposition-only function template

   template<class A, class B>
   void /*deduce-as-pair*/(const std::pair<A, B>&);,
   /*deduce-as-pair*/(non_pair) is ill-formed when considered as an
   unevaluated operand.
   Equivalent to construct<T1, T2, T1, T2>(p,
   std::forward<NonPair>(non_pair));.
   (until C++20)

Parameters

   p - pointer to allocated, but not initialized storage
   args... - the constructor arguments to pass to the constructor of T
   x - the constructor arguments to pass to the constructor of T1
   y - the constructor arguments to pass to the constructor of T2
   xy - the pair whose two members are the constructor arguments for T1
   and T2
   non_pair - non-pair argument to convert to pair for further
   construction

Return value

   (none)

Notes

   This function is called (through std::allocator_traits) by any
   allocator-aware object, such as std::vector, that was given a
   std::scoped_allocator_adaptor as the allocator to use. Since
   inner_allocator is itself an instance of std::scoped_allocator_adaptor,
   this function will also be called when the allocator-aware objects
   constructed through this function start constructing their own members.

Defect reports

   The following behavior-changing defect reports were applied
   retroactively to previously published C++ standards.
   DR Applied to Behavior as published Correct behavior
   LWG 2975 C++11 first overload is mistakenly used for pair construction
   in some cases constrained to not accept pairs
   P0475R1 C++11 pair piecewise construction may copy the arguments
   transformed to tuples of references to avoid copy
   LWG 3525 C++11 no overload could handle non-pair types convertible to
   pair reconstructing overload added

See also

   construct
   [static]
   constructs an object in the allocated storage
   (function template)
   construct
   (until C++20)
   constructs an object in allocated storage
   (public member function of std::allocator<T>)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/memory/scoped_al
   locator_adaptor/construct&oldid=153611"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 16 June 2023, at 02:43.
     * This page has been accessed 23,019 times.
