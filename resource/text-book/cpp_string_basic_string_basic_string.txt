std::basic_string<CharT,Traits,Allocator>::basic_string

   From cppreference.com
   < cpp | string | basic string

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Strings library
   Null-terminated strings
   Byte strings
   Multibyte strings
   Wide strings
   Classes
   basic_string
   basic_string_view
   (C++17)
   char_traits

   std::basic_string
   Member functions
   basic_string::basic_string
   basic_string::~basic_string
   basic_string::operator=
   basic_string::assign
   basic_string::assign_range
   (C++23)
   basic_string::get_allocator
   Element access
   basic_string::at
   basic_string::operator[]
   basic_string::front
   (DR*)
   basic_string::back
   (DR*)
   basic_string::data
   basic_string::c_str
   basic_string::operator
    basic_string_view
   (C++17)
   Iterators
   basic_string::beginbasic_string::cbegin
   (C++11)
   basic_string::endbasic_string::cend
   (C++11)
   basic_string::rbeginbasic_string::crbegin
   (C++11)
   basic_string::rendbasic_string::crend
   (C++11)
   Capacity
   basic_string::empty
   basic_string::sizebasic_string::length
   basic_string::max_size
   basic_string::reserve
   basic_string::capacity
   basic_string::shrink_to_fit
   (DR*)
   Modifiers
   basic_string::clear
   basic_string::insert
   basic_string::insert_range
   (C++23)
   basic_string::erase
   basic_string::push_back
   basic_string::pop_back
   (DR*)
   basic_string::append
   basic_string::append_range
   (C++23)
   basic_string::operator+=
   basic_string::replace
   basic_string::replace_with_range
   (C++23)
   basic_string::copy
   basic_string::resize
   basic_string::resize_and_overwrite
   (C++23)
   basic_string::swap
   Search
   basic_string::find
   basic_string::rfind
   basic_string::find_first_of
   basic_string::find_first_not_of
   basic_string::find_last_of
   basic_string::find_last_not_of
   Operations
   basic_string::compare
   basic_string::starts_with
   (C++20)
   basic_string::ends_with
   (C++20)
   basic_string::contains
   (C++23)
   basic_string::substr
   Constants
   basic_string::npos
   Non-member functions
   operator+
   swap(std::basic_string)
   erase(std::basic_string)erase_if(std::basic_string)
   (C++20)(C++20)
   I/O
   operator<<operator>>
   getline
   Comparison
   operator==operator!=operator<operator>operator<=operator>=operator<=>
   (until C++20)(until C++20)(until C++20)(until C++20)(until
   C++20)(C++20)
   Numeric conversions
   stoistolstoll
   (C++11)(C++11)(C++11)
   stoulstoull
   (C++11)(C++11)
   stofstodstold
   (C++11)(C++11)(C++11)
   to_string
   (C++11)
   to_wstring
   (C++11)
   Literals
   operator""s
   (C++14)
   Helper classes
   hash<std::basic_string>
   (C++11)
   Deduction guides (C++17)

   (1)
   basic_string();
   (until C++17)
   basic_string() noexcept(noexcept(Allocator()))
       : basic_string( Allocator() ) {}
   (since C++17)
   (constexpr since C++20)
   explicit basic_string( const Allocator& alloc );
   (2) (noexcept since C++17)
   (constexpr since C++20)
   basic_string( size_type count, CharT ch,
                 const Allocator& alloc = Allocator() );
   (3) (constexpr since C++20)
   basic_string( const basic_string& other, size_type pos,
                 const Allocator& alloc = Allocator() );
   (4) (constexpr since C++20)
   constexpr basic_string( basic_string&& other, size_type pos,
                           const Allocator& alloc = Allocator() );
   (5) (since C++23)
   basic_string( const basic_string& other,

                 size_type pos, size_type count,
                 const Allocator& alloc = Allocator() );
   (6) (since C++23)
   constexpr basic_string( basic_string&& other,

                           size_type pos, size_type count,
                           const Allocator& alloc = Allocator() );
   (7) (since C++23)
   basic_string( const CharT* s, size_type count,
                 const Allocator& alloc = Allocator() );
   (8) (constexpr since C++20)
   basic_string( const CharT* s, const Allocator& alloc = Allocator() );
   (9) (constexpr since C++20)
   template< class InputIt >

   basic_string( InputIt first, InputIt last,
                 const Allocator& alloc = Allocator() );
   (10) (constexpr since C++20)
   basic_string( const basic_string& other );
   (11) (constexpr since C++20)
   basic_string( const basic_string& other, const Allocator& alloc );
   (12) (since C++11)
   (constexpr since C++20)
   basic_string( basic_string&& other ) noexcept;
   (13) (since C++11)
   (constexpr since C++20)
   basic_string( basic_string&& other, const Allocator& alloc );
   (14) (since C++11)
   (constexpr since C++20)
   basic_string( std::initializer_list<CharT> ilist,
                 const Allocator& alloc = Allocator() );
   (15) (since C++11)
   (constexpr since C++20)
   template< class StringViewLike >

   explicit basic_string( const StringViewLike& t,
                          const Allocator& alloc = Allocator() );
   (16) (since C++17)
   (constexpr since C++20)
   template< class StringViewLike >

   basic_string( const StringViewLike& t, size_type pos, size_type n,
                 const Allocator& alloc = Allocator() );
   (17) (since C++17)
   (constexpr since C++20)
   basic_string( std::nullptr_t ) = delete;
   (18) (since C++23)
   template< container-compatible-range<CharT> R >

   constexpr basic_string( std::from_range_t, R&& rg,
                           const Allocator& = Allocator());
   (19) (since C++23)

   Constructs new string from a variety of data sources and optionally
   using user supplied allocator alloc.
   1,2) Default constructor. Constructs empty string (of zero size and
   unspecified capacity). If no allocator is supplied, allocator is
   obtained from a default-constructed instance.
   3) Constructs the string with count copies of character ch. This
   constructor is not used for class template argument deduction if the
   Allocator type that would be deduced does not qualify as an allocator.
   (since C++17)
   4-7) Constructs the string with a substring [pos, pos + count) of
   other. If count == npos, if count is not specified, or if the requested
   substring lasts past the end of the string, the resulting substring is
   [pos, other.size()). If other is an rvalue reference, it is left in a
   valid but unspecified state.(since C++23)
   8) Constructs the string with the first count characters of character
   string pointed to by s. s can contain null characters. The length of
   the string is count. The behavior is undefined if [s, s + count) is not
   a valid range.
   9) Constructs the string with the contents initialized with a copy of
   the null-terminated character string pointed to by s. The length of the
   string is determined by the first null character. The behavior is
   undefined if [s, s + Traits::length(s)) is not a valid range (for
   example, if s is a null pointer). This constructor is not used for
   class template argument deduction if the Allocator type that would be
   deduced does not qualify as an allocator. (since C++17)
   10) Constructs the string with the contents of the range [first, last).

   If InputIt is an integral type, equivalent to overload (2), as if by
   basic_string(static_cast<size_type>(first),
                static_cast<value_type>(last), alloc).
   (until C++11)

   This constructor only participates in overload resolution if InputIt
   satisfies LegacyInputIterator.
   (since C++11)
   11,12) Copy constructor. Constructs the string with a copy of the
   contents of other.
   13,14) Move constructor. Constructs the string with the contents of
   other using move semantics. other is left in valid, but unspecified
   state.
   15) Constructs the string with the contents of the initializer list
   ilist.
   16) Implicitly converts t to a string view sv as if by
   std::basic_string_view<CharT, Traits> sv = t;, then initializes the
   string with the contents of sv, as if by basic_string(sv.data(),
   sv.size(), alloc).
   This overload participates in overload resolution only if
   std::is_convertible_v<const StringViewLike&,
                         std::basic_string_view<CharT, Traits>> is true
   and std::is_convertible_v<const StringViewLike&, const CharT*> is
   false.
   17) Implicitly converts t to a string view sv as if by
   std::basic_string_view<CharT, Traits> sv = t;, then initializes the
   string with the subrange [pos, pos + n) of sv as if by
   basic_string(sv.substr(pos, n), alloc).
   This overload participates in overload resolution only if
   std::is_convertible_v<const StringViewLike&,
                         std::basic_string_view<CharT, Traits>> is true.
   18) std::basic_string cannot be constructed from nullptr.
   19) Constructs the string with the values contained in the range rg.

Parameters

   alloc - allocator to use for all memory allocations of this string
   count - size of the resulting string
   ch - value to initialize the string with
   pos - position of the first character to include
   first, last - range to copy the characters from
   s - pointer to an array of characters to use as source to initialize
   the string with
   other - another string to use as source to initialize the string with
   ilist - std::initializer_list to initialize the string with
   t - object (convertible to std::basic_string_view) to initialize the
   string with
   rg - a container compatible range

Complexity

   1,2) Constant.
   3-8) Linear in count.
   9) Linear in length of s.
   10) Linear in distance between first and last.
   11,12) Linear in size of other.
   13) Constant.
   14) Constant. If alloc is given and alloc != other.get_allocator(),
   then linear.
   15) Linear in size of ilist.
   16) Linear in size of t.
   17) Linear in size of assigned substring, i.e. std::min(std::size(t) -
   pos, n).
   19) Linear in size of rg.

Exceptions

   4-7) std::out_of_range if pos > other.size().
   13) Throws nothing.
   14) Throws nothing if alloc == str.get_allocator().
   17) std::out_of_range if pos is out of range.

   Throws std::length_error if the length of the constructed string would
   exceed max_size() (for example, if count > max_size() for (3)). Calls
   to Allocator::allocate may throw.

   If an exception is thrown for any reason, these functions have no
   effect (strong exception safety guarantee).

Notes

   Initialization with a string literal that contains embedded '\0'
   characters uses the overload (9), which stops at the first null
   character. This can be avoided by specifying a different constructor or
   by using operator""s:
std::string s1 = "ab\0\0cd";   // s1 contains "ab"
std::string s2{"ab\0\0cd", 6}; // s2 contains "ab\0\0cd"
std::string s3 = "ab\0\0cd"s;  // s3 contains "ab\0\0cd"

   Feature-test macro Value Std Feature
   __cpp_lib_containers_ranges 202202L (C++23) Tagged constructor (19) to
   construct from container compatible range

Example

   Run this code
#include <cassert>
#include <cctype>
#include <iomanip>
#include <iostream>
#include <iterator>
#include <string>

int main()
{
    std::cout << "1) string(); ";
    std::string s1;
    assert(s1.empty() && (s1.length() == 0) && (s1.size() == 0));
    std::cout << "s1.capacity(): " << s1.capacity() << '\n'; // unspecified

    std::cout << "2) string(size_type count, CharT ch): ";
    std::string s2(4, '=');
    std::cout << std::quoted(s2) << '\n'; // "===="

    std::cout << "3) string(const string& other, size_type pos, size_type count)
: ";
    std::string const other3("Exemplary");
    std::string s3(other3, 0, other3.length() - 1);
    std::cout << std::quoted(s3) << '\n'; // "Exemplar"

    std::cout << "4) string(const string& other, size_type pos): ";
    std::string const other4("Mutatis Mutandis");
    std::string s4(other4, 8);
    std::cout << std::quoted(s4) << '\n'; // "Mutandis", i.e. [8, 16)

    std::cout << "5) string(CharT const* s, size_type count): ";
    std::string s5("C-style string", 7);
    std::cout << std::quoted(s5) << '\n'; // "C-style", i.e. [0, 7)

    std::cout << "6) string(CharT const* s): ";
    std::string s6("C-style\0string");
    std::cout << std::quoted(s6) << '\n'; // "C-style"

    std::cout << "7) string(InputIt first, InputIt last): ";
    char mutable_c_str[] = "another C-style string";
    std::string s7(std::begin(mutable_c_str) + 8, std::end(mutable_c_str) - 1);
    std::cout << std::quoted(s7) << '\n'; // "C-style string"

    std::cout << "8) string(string&): ";
    std::string const other8("Exemplar");
    std::string s8(other8);
    std::cout << std::quoted(s8) << '\n'; // "Exemplar"

    std::cout << "9) string(string&&): ";
    std::string s9(std::string("C++ by ") + std::string("example"));
    std::cout << std::quoted(s9) << '\n'; // "C++ by example"

    std::cout << "a) string(std::initializer_list<CharT>): ";
    std::string sa({'C', '-', 's', 't', 'y', 'l', 'e'});
    std::cout << std::quoted(sa) << '\n'; // "C-style"

    // before C++11, overload resolution selects string(InputIt first, InputIt l
ast)
    // [with InputIt = int] which behaves *as if* string(size_type count, CharT
ch)
    // after C++11 the InputIt constructor is disabled for integral types and ca
lls:
    std::cout << "b) string(size_type count, CharT ch) is called: ";
    std::string sb(3, std::toupper('a'));
    std::cout << std::quoted(sb) << '\n'; // "AAA"

//  std::string sc(nullptr); // Before C++23: throws std::logic_error
                             // Since C++23: won't compile, see overload (18)
//  std::string sc(0); // Same as above, as literal 0 is a null pointer constant

    auto const range = {0x43, 43, 43};
#ifdef __cpp_lib_containers_ranges
    std::string sc(std::from_range, range); // tagged constructor (19)
    std::cout << "c) string(std::from_range, range) is called: ";
#else
    std::string sc(range.begin(), range.end()); // fallback to overload (12)
    std::cout << "c) string(range.begin(), range.end()) is called: ";
#endif
    std::cout << std::quoted(sc) << '\n'; // "C++"
}

   Possible output:
1) string(); s1.capacity(): 15
2) string(size_type count, CharT ch): "===="
3) string(const string& other, size_type pos, size_type count): "Exemplar"
4) string(const string& other, size_type pos): "Mutandis"
5) string(CharT const* s, size_type count): "C-style"
6) string(CharT const* s): "C-style"
7) string(InputIt first, InputIt last): "C-style string"
8) string(string&): "Exemplar"
9) string(string&&): "C++ by example"
a) string(std::initializer_list<CharT>): "C-style"
b) string(size_type count, CharT ch) is called: "AAA"
c) string(std::from_range, range) is called: "C++"

Defect reports

   The following behavior-changing defect reports were applied
   retroactively to previously published C++ standards.
   DR Applied to Behavior as published Correct behavior
   LWG 301 C++98 overload (10) did not use the parameter
   alloc if InputIt is an integral type use that parameter
   LWG 847 C++98 there was no exception safety guarantee added strong
   exception safety guarantee
   LWG 2193 C++11 the default constructor is explicit made non-explicit
   LWG 2583 C++98 there is no way to supply an allocator
   for basic_string(str, pos) there is a constructor for
   basic_string(str, pos, alloc)
   LWG 2946 C++17 overload (16) causes ambiguity in some cases avoided by
   making it a template
   LWG 3076 C++17 two constructors may cause ambiguities
   in class template argument deduction constrained

See also

   assign
   assign characters to a string
   (public member function)
   operator=
   assigns values to the string
   (public member function)
   to_string
   (C++11)
   converts an integral or floating-point value to string
   (function)
   to_wstring
   (C++11)
   converts an integral or floating-point value to wstring
   (function)
   (constructor)
   constructs a basic_string_view
   (public member function of std::basic_string_view<CharT,Traits>)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/string/basic_str
   ing/basic_string&oldid=171279"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 24 April 2024, at 15:37.
     * This page has been accessed 1,124,053 times.
