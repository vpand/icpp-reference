std::bidirectional_iterator

   From cppreference.com
   < cpp | iterator

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Iterator library
   Iterator concepts
   indirectly_readable
   (C++20)
   indirectly_writable
   (C++20)
   weakly_incrementable
   (C++20)
   incrementable
   (C++20)
   input_or_output_iterator
   (C++20)
   sentinel_for
   (C++20)
   sized_sentinel_for
   (C++20)
   input_iterator
   (C++20)
   output_iterator
   (C++20)
   forward_iterator
   (C++20)
   bidirectional_iterator
   (C++20)
   random_access_iterator
   (C++20)
   contiguous_iterator
   (C++20)
   Iterator primitives
   input_iterator_tagoutput_iterator_tagforward_iterator_tagbidirectional_
   iterator_tagrandom_access_iterator_tagcontiguous_iterator_tag
   (C++20)
   iter_value_titer_difference_titer_reference_titer_const_reference_titer
   _rvalue_reference_titer_common_reference_t
   (C++20)(C++20)(C++20)(C++23)(C++20)(C++20)
   iterator
   (deprecated in C++17)
   iterator_traits
   incrementable_traits
   (C++20)
   indirectly_readable_traits
   (C++20)
   Algorithm concepts and utilities
   Indirect callable concepts
   indirectly_unary_invocableindirectly_regular_unary_invocable
   (C++20)(C++20)
   indirect_unary_predicate
   (C++20)
   indirect_binary_predicate
   (C++20)
   indirect_equivalence_relation
   (C++20)
   indirect_strict_weak_order
   (C++20)
   Common algorithm requirements
   indirectly_movable
   (C++20)
   indirectly_movable_storable
   (C++20)
   indirectly_copyable
   (C++20)
   indirectly_copyable_storable
   (C++20)
   indirectly_swappable
   (C++20)
   indirectly_comparable
   (C++20)
   permutable
   (C++20)
   mergeable
   (C++20)
   sortable
   (C++20)
   Utilities
   indirect_result_t
   (C++20)
   projected
   (C++20)
   projected_value_t
   (C++26)
   Iterator adaptors
   reverse_iterator
   make_reverse_iterator
   (C++14)
   move_iterator
   (C++11)
   make_move_iterator
   (C++11)
   default_sentinel_tdefault_sentinel
   (C++20)(C++20)
   unreachable_sentinel_tunreachable_sentinel
   (C++20)(C++20)
   front_insert_iterator
   back_insert_iterator
   inserter
   insert_iterator
   front_inserter
   back_inserter
   move_sentinel
   (C++20)
   common_iterator
   (C++20)
   counted_iterator
   (C++20)
   basic_const_iterator
   (C++23)
   const_iterator
   (C++23)
   const_sentinel
   (C++23)
   make_const_iterator
   (C++23)
   make_const_sentinel
   (C++23)
   Stream iterators
   istream_iterator

   ostream_iterator
   istreambuf_iterator
   ostreambuf_iterator
   Iterator customization points
   ranges::iter_move
   (C++20)
   ranges::iter_swap
   (C++20)
   Iterator operations
   advance
   distance
   prev
   (C++11)
   next
   (C++11)
   ranges::advance
   (C++20)
   ranges::distance
   (C++20)
   ranges::prev
   (C++20)
   ranges::next
   (C++20)
   Range access
   begincbegin
   (C++11)(C++14)
   rbegincrbegin
   (C++14)(C++14)
   endcend
   (C++11)(C++14)
   rendcrend
   (C++14)(C++14)
   sizessize
   (C++17)(C++20)
   empty
   (C++17)
   data
   (C++17)

   Defined in header <iterator>
   template< class I >

       concept bidirectional_iterator =
           std::forward_iterator<I> &&
           std::derived_from</*ITER_CONCEPT*/<I>,
   std::bidirectional_iterator_tag> &&
           requires(I i) {
               { --i } -> std::same_as<I&>;
               { i-- } -> std::same_as<I>;
           };
                               (since C++20)

   The concept bidirectional_iterator refines forward_iterator by adding
   the ability to move an iterator backward.

Iterator concept determination

   Definition of this concept is specified via an exposition-only alias
   template /*ITER_CONCEPT*/.

   In order to determine /*ITER_CONCEPT*/<I>, let ITER_TRAITS<I> denote I
   if the specialization std::iterator_traits<I> is generated from the
   primary template, or std::iterator_traits<I> otherwise:
     * If ITER_TRAITS<I>::iterator_concept is valid and names a type,
       /*ITER_CONCEPT*/<I> denotes the type.
     * Otherwise, if ITER_TRAITS<I>::iterator_category is valid and names
       a type, /*ITER_CONCEPT*/<I> denotes the type.
     * Otherwise, if std::iterator_traits<I> is generated from the primary
       template, /*ITER_CONCEPT*/<I> denotes
       std::random_access_iterator_tag.
     * Otherwise, /*ITER_CONCEPT*/<I> does not denote a type and results
       in a substitution failure.

Semantic requirements

   A bidirectional iterator r is said to be decrementable if and only if
   there exists some s such that ++s == r.

   std::bidirectional_iterator<I> is modeled only if all the concepts it
   subsumes are modeled, and given two objects a and b of type I:
     * If a is decrementable, a is in the domain of the expressions --a
       and a--.
     * Pre-decrement yields an lvalue that refers to the operand:
       std::addressof(--a) == std::addressof(a).
     * Post-decrement yields the previous value of the operand: if bool(a
       == b), then bool(a-- == b).
     * Post-decrement and pre-decrement perform the same modification on
       its operand: If bool(a == b), then after evaluating both a-- and
       --b, bool(a == b) still holds.
     * Increment and decrement are inverses of each other:

          + If a is incrementable and bool(a == b), then bool(--(++a) ==
            b).
          + If a is decrementable and bool(a == b), then bool(++(--a) ==
            b).

Equality preservation

   Expressions declared in requires expressions of the standard library
   concepts are required to be equality-preserving (except where stated
   otherwise).

Notes

   Unlike the LegacyBidirectionalIterator requirements, the
   bidirectional_iterator concept does not require dereference to return
   an lvalue.

Example

   A minimum bidirectional iterator.
#include <cstddef>
#include <iterator>

struct SimpleBidiIterator
{
    using difference_type = std::ptrdiff_t;
    using value_type = int;

    int operator*() const;

    SimpleBidiIterator& operator++();

    SimpleBidiIterator operator++(int)
    {
        auto tmp = *this;
        ++*this;
        return tmp;
    }

    SimpleBidiIterator& operator--();

    SimpleBidiIterator operator--(int)
    {
        auto tmp = *this;
        --*this;
        return tmp;
    }

    bool operator==(const SimpleBidiIterator&) const;
};

static_assert(std::bidirectional_iterator<SimpleBidiIterator>);

See also

   forward_iterator
   (C++20)
   specifies that an input_iterator is a forward iterator, supporting
   equality comparison and multi-pass
   (concept)
   random_access_iterator
   (C++20)
   specifies that a bidirectional_iterator is a random-access iterator,
   supporting advancement in constant time and subscripting
   (concept)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/bidirec
   tional_iterator&oldid=171722"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 13 May 2024, at 14:34.
     * This page has been accessed 57,920 times.
