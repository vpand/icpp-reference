std::ranges::views::counted

   From cppreference.com
   < cpp | ranges

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Ranges library
   Range access
   begin
   cbegin
   end
   cend
   rbegin
   crbegin
   rend
   crend
   size
   ssize
   data
   cdata
   empty
   Range conversions
   std::from_range_t
   std::from_range
   (C++23)(C++23)
   to
   (C++23)
   Range primitives
   range_size_trange_difference_trange_value_trange_reference_t
   iterator_tconst_iterator_tsentinel_tconst_sentinel_t
   (C++23)(C++23)
   range_const_reference_trange_rvalue_reference_trange_common_reference_t
   (C++23)
   elements_of
   (C++23)
   Dangling iterator handling
   dangling
   borrowed_iterator_t
   borrowed_subrange_t
   Range concepts
   range
   borrowed_range
   sized_range
   constant_range
   (C++23)
   common_range
   view
   viewable_range
   input_range
   output_range
   forward_range
   bidirectional_range
   random_access_range
   contiguous_range
   Views
   view_interface
   subrange
   Range factories
   empty_viewviews::empty
   single_viewviews::single
   iota_viewviews::iota
   repeat_viewviews::repeat
   (C++23)(C++23)
   basic_istream_viewviews::istream
   Range adaptors
   views::all_tviews::all
   ref_view
   owning_view
   as_rvalue_viewviews::as_rvalue
   (C++23)(C++23)
   filter_viewviews::filter
   transform_viewviews::transform
   take_viewviews::take
   take_while_viewviews::take_while
   concat_viewviews::concat
   (C++26)(C++26)
   drop_viewviews::drop
   drop_while_viewviews::drop_while
   join_viewviews::join
   join_with_viewviews::join_with
   (C++23)(C++23)
   lazy_split_viewviews::lazy_split
   split_viewviews::split
   views::counted
   common_viewviews::common
   reverse_viewviews::reverse
   as_const_viewviews::as_const
   (C++23)(C++23)
   elements_viewviews::elements
   keys_viewviews::keys
   values_viewviews::values
   enumerate_viewviews::enumerate
   (C++23)(C++23)
   zip_viewviews::zip
   (C++23)(C++23)
   zip_transform_viewviews::zip_transform
   (C++23)(C++23)
   adjacent_viewviews::adjacent
   (C++23)(C++23)
   views::pairwise
   (C++23)
   adjacent_transform_viewviews::adjacent_transform
   (C++23)(C++23)
   views::pairwise_transform
   (C++23)
   chunk_viewviews::chunk
   (C++23)(C++23)
   slide_viewviews::slide
   (C++23)(C++23)
   chunk_by_viewviews::chunk_by
   (C++23)(C++23)
   stride_viewviews::stride
   (C++23)(C++23)
   cartesian_product_viewviews::cartesian_product
   (C++23)(C++23)
   Range generators
   std::generator
   (C++23)
   Range adaptor objects
   Range adaptor closure objects
   range_adaptor_closure
   (C++23)
   Helper items
   copyable-box
   movable-box
   (until C++23)(C++23)
   simple-view
   non-propagating-cache

   Defined in header <ranges>
   inline constexpr /*unspecified*/ counted = /*unspecified*/;
                                                              (since C++20)
   Call signature
   template< class Iterator, class DifferenceType >

       requires /* see below */
   constexpr /*span-or-subrange*/ counted( Iterator&& it, DifferenceType&&
   count );
                                                              (since C++20)

   A counted view presents a view of the elements of the counted range
   [i, n) for some iterator i and non-negative integer n.

   A counted range [i, n) is the n elements starting with the element
   pointed to by i and up to but not including the element, if any,
   pointed to by the result of n applications of ++i.

   If n == 0, the counted range is valid and empty. Otherwise, the counted
   range is only valid if n is positive, i is dereferenceable, and
   [++i, --n) is a valid counted range.

   Formally, if it and count are expressions, T is
   std::decay_t<decltype((it))>, and D is std::iter_difference_t<T>, then

          if T models input_or_output_iterator and decltype((count))
          models std::convertible_to<D>,

          + if T models contiguous_iterator, then views::counted(it,
            count) is expression-equivalent to
            std::span(std::to_address(it),
            static_cast<std::size_t>(static_cast<D>(count))),
          + otherwise, if T models random_access_iterator, then
            views::counted(it, count) is expression-equivalent to
            ranges::subrange(it, it + static_cast<D>(count)),
          + otherwise, views::counted(it, count) is expression-equivalent
            to ranges::subrange(std::counted_iterator(it, count),
            std::default_sentinel).

          Otherwise, views::counted(it, count) is ill-formed.

Customization point objects

   The name views::counted denotes a customization point object, which is
   a const function object of a literal semiregular class type. For
   exposition purposes, the cv-unqualified version of its type is denoted
   as __counted_fn.

   All instances of __counted_fn are equal. The effects of invoking
   different instances of type __counted_fn on the same arguments are
   equivalent, regardless of whether the expression denoting the instance
   is an lvalue or rvalue, and is const-qualified or not (however, a
   volatile-qualified instance is not required to be invocable). Thus,
   views::counted can be copied freely and its copies can be used
   interchangeably.

   Given a set of types Args..., if std::declval<Args>()... meet the
   requirements for arguments to views::counted above, __counted_fn models
     * std::invocable<__counted_fn, Args...>,
     * std::invocable<const __counted_fn, Args...>,
     * std::invocable<__counted_fn&, Args...>, and
     * std::invocable<const __counted_fn&, Args...>.

   Otherwise, no function call operator of __counted_fn participates in
   overload resolution.

Notes

   views::counted does not check if the range is long enough to provide
   all count elements: use views::take if that check is necessary.

Example

   Run this code
#include <iostream>
#include <ranges>

int main()
{
    const int a[]{1, 2, 3, 4, 5, 6, 7};
    for (int i : std::views::counted(a, 3))
        std::cout << i << ' ';
    std::cout << '\n';

    const auto il = {1, 2, 3, 4, 5};
    for (int i : std::views::counted(il.begin() + 1, 3))
        std::cout << i << ' ';
    std::cout << '\n';
}

   Output:
1 2 3
2 3 4

Defect reports

   The following behavior-changing defect reports were applied
   retroactively to previously published C++ standards.
   DR Applied to Behavior as published Correct behavior
   P2393R1 C++20 implicit conversion from an integer-class type to
   std::size_t might be invalid made explicit

See also

   ranges::take_viewviews::take
   (C++20)
   a view consisting of the first N elements of another view
   (class template) (range adaptor object)
   ranges::subrange
   (C++20)
   combines an iterator-sentinel pair into a view
   (class template)
   counted_iterator
   (C++20)
   iterator adaptor that tracks the distance to the end of the range
   (class template)
   ranges::countranges::count_if
   (C++20)(C++20)
   returns the number of elements satisfying specific criteria
   (niebloid)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/ranges/view_coun
   ted&oldid=160989"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 20 October 2023, at 13:50.
     * This page has been accessed 42,146 times.
