std::move

   From cppreference.com
   < cpp | utility

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Utilities library
   Language support
   Type support (basic types, RTTI)
   Library feature-test macros (C++20)
   Dynamic memory management
   Program utilities
   Coroutine support (C++20)
   Variadic functions
   is_constant_evaluated
   (C++20)
   is_within_lifetime
   (C++26)
   initializer_list
   (C++11)
   source_location
   (C++20)
   Debugging support
   is_debugger_present
   (C++26)
   breakpoint_if_debugging
   (C++26)
   breakpoint
   (C++26)
   Three-way comparison
   three_way_comparablethree_way_comparable_with
   (C++20)(C++20)
   strong_ordering
   (C++20)
   weak_ordering
   (C++20)
   partial_ordering
   (C++20)
   common_comparison_category
   (C++20)
   compare_three_way_result
   (C++20)
   compare_three_way
   (C++20)
   strong_order
   (C++20)
   weak_order
   (C++20)
   partial_order
   (C++20)
   compare_strong_order_fallback
   (C++20)
   compare_weak_order_fallback
   (C++20)
   compare_partial_order_fallback
   (C++20)
   is_eqis_ltis_lteq
   (C++20)(C++20)(C++20)
   is_neqis_gtis_gteq
   (C++20)(C++20)(C++20)
   General utilities
   Date and time
   Function objects
   Formatting library (C++20)
   bitset
   hash
   (C++11)
   Relational operators (deprecated in C++20)
   rel_ops::operator!=rel_ops::operator>

   rel_ops::operator<=rel_ops::operator>=
   Integer comparison functions
   cmp_equalcmp_lesscmp_less_than
   (C++20)(C++20)(C++20)
   cmp_not_equalcmp_greatercmp_greater_than
   (C++20)(C++20)(C++20)
   in_range
   (C++20)
   Swap and type operations
   swap
   ranges::swap
   (C++20)
   exchange
   (C++14)
   declval
   (C++11)
   to_underlying
   (C++23)
   forward
   (C++11)
   forward_like
   (C++23)
   move
   (C++11)
   move_if_noexcept
   (C++11)
   as_const
   (C++17)
   Common vocabulary types
   pair
   tuple
   (C++11)
   optional
   (C++17)
   any
   (C++17)
   variant
   (C++17)
   tuple_size
   (C++11)
   tuple_element
   (C++11)
   apply
   (C++17)
   make_from_tuple
   (C++17)
   expected
   (C++23)
   Elementary string conversions
   to_chars
   (C++17)
   from_chars
   (C++17)
   chars_format
   (C++17)
   to_chars_result
   (C++17)
   from_chars_result
   (C++17)

   Defined in header <utility>
   template< class T >
   typename std::remove_reference<T>::type&& move( T&& t ) noexcept;
   (since C++11)
   (until C++14)
   template< class T >
   constexpr std::remove_reference_t<T>&& move( T&& t ) noexcept;
                              (since C++14)

   std::move is used to indicate that an object t may be "moved from",
   i.e. allowing the efficient transfer of resources from t to another
   object.

   In particular, std::move produces an xvalue expression that identifies
   its argument t. It is exactly equivalent to a static_cast to an rvalue
   reference type.

Parameters

   t - the object to be moved

Return value

   static_cast<typename std::remove_reference<T>::type&&>(t)

Notes

   The functions that accept rvalue reference parameters (including move
   constructors, move assignment operators, and regular member functions
   such as std::vector::push_back) are selected, by overload resolution,
   when called with rvalue arguments (either prvalues such as a temporary
   object or xvalues such as the one produced by std::move). If the
   argument identifies a resource-owning object, these overloads have the
   option, but aren't required, to move any resources held by the
   argument. For example, a move constructor of a linked list might copy
   the pointer to the head of the list and store nullptr in the argument
   instead of allocating and copying individual nodes.

   Names of rvalue reference variables are lvalues and have to be
   converted to xvalues to be bound to the function overloads that accept
   rvalue reference parameters, which is why move constructors and move
   assignment operators typically use std::move:
// Simple move constructor
A(A&& arg) : member(std::move(arg.member)) // the expression "arg.member" is lva
lue
{}

// Simple move assignment operator
A& operator=(A&& other)
{
    member = std::move(other.member);
    return *this;
}

   One exception is when the type of the function parameter is a
   forwarding reference (which looks like an rvalue reference to type
   template parameter), in which case std::forward is used instead.

   Unless otherwise specified, all standard library objects that have been
   moved from are placed in a "valid but unspecified state", meaning the
   object's class invariants hold (so functions without preconditions,
   such as the assignment operator, can be safely used on the object after
   it was moved from):
std::vector<std::string> v;
std::string str = "example";
v.push_back(std::move(str)); // str is now valid but unspecified
str.back(); // undefined behavior if size() == 0: back() has a precondition !emp
ty()
if (!str.empty())
    str.back(); // OK, empty() has no precondition and back() precondition is me
t

str.clear(); // OK, clear() has no preconditions

   Also, the standard library functions called with xvalue arguments may
   assume the argument is the only reference to the object; if it was
   constructed from an lvalue with std::move, no aliasing checks are made.
   However, self-move-assignment of standard library types is guaranteed
   to place the object in a valid (but usually unspecified) state:
std::vector<int> v = {2, 3, 3};
v = std::move(v); // the value of v is unspecified

Example

   Run this code
#include <iomanip>
#include <iostream>
#include <string>
#include <utility>
#include <vector>

int main()
{
    std::string str = "Salut";
    std::vector<std::string> v;

    // uses the push_back(const T&) overload, which means
    // we'll incur the cost of copying str
    v.push_back(str);
    std::cout << "After copy, str is " << std::quoted(str) << '\n';

    // uses the rvalue reference push_back(T&&) overload,
    // which means no strings will be copied; instead, the contents
    // of str will be moved into the vector. This is less
    // expensive, but also means str might now be empty.
    v.push_back(std::move(str));
    std::cout << "After move, str is " << std::quoted(str) << '\n';

    std::cout << "The contents of the vector are {" << std::quoted(v[0])
              << ", " << std::quoted(v[1]) << "}\n";
}

   Possible output:
After copy, str is "Salut"
After move, str is ""
The contents of the vector are {"Salut", "Salut"}

See also

   forward
   (C++11)
   forwards a function argument
   (function template)
   move_if_noexcept
   (C++11)
   obtains an rvalue reference if the move constructor does not throw
   (function template)
   move
   (C++11)
   moves a range of elements to a new location
   (function template)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/utility/move&old
   id=170528"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 29 March 2024, at 05:47.
     * This page has been accessed 2,238,410 times.
