std::hash<std::filesystem::path>

   From cppreference.com
   < cpp | filesystem | path

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Filesystem library
   Classes
   filesystem::path
   filesystem::filesystem_error
   filesystem::directory_entry
   filesystem::directory_iterator
   filesystem::recursive_directory_iterator

   filesystem::file_status
   filesystem::space_info
   filesystem::file_type
   filesystem::perms
   filesystem::perm_options
   filesystem::copy_options
   filesystem::directory_options
   filesystem::file_time_type
   Functions
   filesystem::absolute
   filesystem::canonicalfilesystem::weakly_canonical
   filesystem::relativefilesystem::proximate
   filesystem::copy
   filesystem::copy_file
   filesystem::copy_symlink
   filesystem::create_directory
   filesystem::create_directories
   filesystem::create_hard_link
   filesystem::create_symlink
   filesystem::create_directory_symlink
   filesystem::current_path
   filesystem::exists
   filesystem::equivalent
   filesystem::file_size
   filesystem::hard_link_count
   filesystem::last_write_time
   filesystem::permissions
   filesystem::read_symlink
   filesystem::remove
   filesystem::remove_all
   filesystem::rename
   filesystem::resize_file
   filesystem::space
   filesystem::status
   filesystem::symlink_status
   filesystem::temp_directory_path
   File types
   filesystem::is_block_file
   filesystem::is_character_file
   filesystem::is_directory
   filesystem::is_empty
   filesystem::status_known
   filesystem::is_fifo
   filesystem::is_other
   filesystem::is_regular_file
   filesystem::is_socket
   filesystem::is_symlink

   std::filesystem::path
   Constants
   path::native_formatpath::generic_formatpath::auto_format
   Member functions
   path::path
   path::~path
   path::operator=
   path::assign
   path::appendpath::operator/=
   path::concatpath::operator+=
   path::clear
   path::make_preferred
   path::remove_filename
   path::replace_filename
   path::replace_extension

   path::swap
   path::compare
   path::beginpath::end
   path::c_strpath::nativepath::operator string_type
   path::stringpath::u8stringpath::u16stringpath::u32stringpath::wstring
   path::generic_stringpath::generic_u8stringpath::generic_u16stringpath::
   generic_u32stringpath::generic_wstring
   path::lexically_normalpath::lexically_relativepath::lexically_proximate
   Path decomposition
   path::root_name
   path::root_directory
   path::root_path
   path::relative_path
   path::parent_path
   path::filename
   path::stem
   path::extension
   path::empty
   path::has_root_pathpath::has_root_namepath::has_root_directorypath::has
   _relative_pathpath::has_parent_pathpath::has_filenamepath::has_stempath
   ::has_extension
   path::is_absolutepath::is_relative
   Non-member functions
   operator==operator!=operator<operator<=operator>operator>=operator<=>
   (until C++20)(until C++20)(until C++20)(until C++20)(until
   C++20)(C++20)
   operator/
   operator<<operator>>
   swap(std::filesystem::path)
   hash_value
   u8path
   Helper Classes
   hash<std::filesystem::path>
   formatter<std::filesystem::path>
   (C++26)

   Defined in header <filesystem>
   template<>
   struct hash<std::filesystem::path>;
                                 (since C++17)

   The template specialization of std::hash for std::filesystem::path
   allows users to obtain hash values of std::filesystem::path.

   The operator() of this specialization is noexcept. For every
   std::filesystem::path value p, std::hash<std::filesystem::path>{}(p) is
   equal to std::filesystem::hash_value(p).

   This specialization was absent from the C++17 standard publication, see
   LWG issue 3657.

Example

   Run this code
#include <cassert>
#include <cstddef>
#include <filesystem>
#include <iomanip>
#include <iostream>
#include <unordered_set>
namespace fs = std::filesystem;

void show_hash(fs::path const& p)
{
    std::cout << std::hex << std::uppercase << std::setw(16)
              << std::hash<fs::path>{}(p) << " : " << p << '\n';
}

int main()
{
    auto tmp1 = fs::path{"/tmp"};
    auto tmp2 = fs::path{"/tmp/../tmp"};
    assert(!(tmp1 == tmp2));
    assert(fs::equivalent(tmp1, tmp2));
    show_hash(tmp1);
    show_hash(tmp2);

    for (auto s : {"/a///b", "/a//b", "/a/c", "...", "..", ".", ""})
        show_hash(s);

    std::unordered_set<fs::path, std::hash<fs::path>> dirs{
        "/bin", "/bin", "/lib", "/lib", "/opt", "/opt", "/tmp", "/tmp/../tmp"};
    for (fs::path const& p : dirs)
        std::cout << p << ' ';
    std::cout << '\n';
}

   Possible output:
6050C47ADB62DFE5 : "/tmp"
62795A58B69AD90A : "/tmp/../tmp"
FF302110C9991974 : "/a///b"
FF302110C9991974 : "/a//b"
FD6167277915D464 : "/a/c"
C42040F82CD8B542 : "..."
D2D30154E0B78BBC : ".."
D18C722215ED0530 : "."
               0 : ""
"/tmp/../tmp" "/opt" "/lib" "/tmp" "/bin"

See also

   hash
   (C++11)
   hash function object
   (class template)
   hash_value
   (C++17)
   calculates a hash value for a path object
   (function)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/filesystem/path/
   hash&oldid=172269"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 6 June 2024, at 09:02.
     * This page has been accessed 13,032 times.
