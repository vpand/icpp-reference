std::discard_block_engine

   From cppreference.com
   < cpp | numeric | random

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Numerics library
   Common mathematical functions
   Mathematical special functions (C++17)
   Mathematical constants (C++20)
   Basic linear algebra algorithms (C++26)
   Floating-point environment (C++11)
   Complex numbers
   Numeric arrays
   Pseudo-random number generation
   Factor operations
   gcd
   (C++17)
   lcm
   (C++17)
   Interpolations
   midpoint
   (C++20)
   lerp
   (C++20)
   Saturation arithmetic
   add_sat
   (C++26)
   sub_sat
   (C++26)
   saturate_cast
   (C++26)
   mul_sat
   (C++26)
   div_sat
   (C++26)
   Generic numeric operations
   iota
   (C++11)
   ranges::iota
   (C++23)
   accumulate
   inner_product
   adjacent_difference
   partial_sum
   reduce
   (C++17)
   transform_reduce
   (C++17)
   inclusive_scan
   (C++17)
   exclusive_scan
   (C++17)
   transform_inclusive_scan
   (C++17)
   transform_exclusive_scan
   (C++17)
   Bit operations
   has_single_bit
   (C++20)
   bit_cast
   (C++20)
   bit_ceil
   (C++20)
   bit_floor
   (C++20)
   bit_width
   (C++20)
   rotl
   (C++20)
   rotr
   (C++20)
   popcount
   (C++20)
   countl_zero
   (C++20)
   countl_one
   (C++20)
   countr_zero
   (C++20)
   countr_one
   (C++20)
   byteswap
   (C++23)
   endian
   (C++20)

   Pseudo-random number generation
   Uniform random bit generators
   uniform_random_bit_generator
   (C++20)
   Random number engines
   linear_congruential_engine
   (C++11)
   mersenne_twister_engine
   (C++11)
   subtract_with_carry_engine
   (C++11)
   Random number engine adaptors
   discard_block_engine
   (C++11)
   independent_bits_engine
   (C++11)
   shuffle_order_engine
   (C++11)
   Predefined random number generators
   Non-deterministic random numbers
   random_device
   (C++11)
   Random number distributions
   Uniform distributions
   uniform_int_distribution
   (C++11)
   uniform_real_distribution
   (C++11)
   generate_canonical
   (C++11)
   Bernoulli distributions
   bernoulli_distribution
   (C++11)
   binomial_distribution
   (C++11)
   negative_binomial_distribution
   (C++11)
   geometric_distribution
   (C++11)
   Poisson distributions
   poisson_distribution
   (C++11)
   exponential_distribution
   (C++11)
   gamma_distribution
   (C++11)
   weibull_distribution
   (C++11)
   extreme_value_distribution
   (C++11)
   Normal distributions
   normal_distribution
   (C++11)
   lognormal_distribution
   (C++11)
   chi_squared_distribution
   (C++11)
   cauchy_distribution
   (C++11)
   fisher_f_distribution
   (C++11)
   student_t_distribution
   (C++11)
   Sampling distributions
   discrete_distribution
   (C++11)
   piecewise_constant_distribution
   (C++11)
   piecewise_linear_distribution
   (C++11)
   Utilities
   generate_canonical
   (C++11)
   seed_seq
   (C++11)
   Random number algorithms
   ranges::generate_random
   (C++26)
   C random library
   rand
   srand
   RAND_MAX

   std::discard_block_engine
   Member functions
   discard_block_engine::discard_block_engine
   (C++11)
   discard_block_engine::seed
   (C++11)
   discard_block_engine::base
   (C++11)
   Generation
   discard_block_engine::operator()
   (C++11)
   discard_block_engine::discard
   (C++11)
   Characteristics
   discard_block_engine::min
   (C++11)
   discard_block_engine::max
   (C++11)
   Non-member functions
   operator==operator!=
   (C++11)(C++11)(until C++20)
   operator<<operator>>
   (C++11)(C++11)

   Defined in header <random>
   template<

       class Engine,
       std::size_t P, std::size_t R
   > class discard_block_engine;
                             (since C++11)

   discard_block_engine is a pseudo-random number engine adaptor that
   discards a certain amount of data produced by the base engine. From
   each block of size P generated by the base engine, the adaptor keeps
   only R numbers, discarding the rest.

Template parameters

   Engine - the type of the wrapped engine.
   P - the size of a block. Expected that \(\small{P>0}\)P > 0.
   R - the number of used numbers per block. Expected that \(\small{0<R\le
   P}\)0 < R <= P.
   Type requirements
   -
   Engine must meet the requirements of RandomNumberEngine.

Member types

   Member type         Definition
   result_type (C++11) Engine::result_type

Member functions

   (constructor)
   (C++11)
   constructs the engine adaptor
   (public member function)
   seed
   (C++11)
   sets the state of the underlying engine
   (public member function)
   base
   (C++11)
   returns the underlying engine
   (public member function)

Generation

   operator()
   (C++11)
   advances the state of the underlying engine and returns the generated
   value
   (public member function)
   discard
   (C++11)
   advances the adaptor's state by a specified amount
   (public member function)

Characteristics

   min
   [static] (C++11)
   gets the smallest possible value in the output range of the underlying
   engine.
   (public static member function)
   max
   [static] (C++11)
   gets the largest possible value in the output range of the underlying
   engine.
   (public static member function)

Non-member functions

   operator==operator!=
   (C++11)(C++11)(removed in C++20)
   compares the internal states of the adaptors and underlying engines
   (function)
   operator<<operator>>
   (C++11)
   performs stream input and output on pseudo-random number engine adaptor
   (function)

Member constants

   constexpr size_t block_size
   [static] (C++11)
   the size of the block, P
   (public static member constant)
   constexpr size_t used_block
   [static] (C++11)
   the number of used numbers per block, R
   (public static member constant)

Example

   This section is incomplete
   Reason: no example
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/numeric/random/d
   iscard_block_engine&oldid=151151"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 28 April 2023, at 14:24.
     * This page has been accessed 35,537 times.
