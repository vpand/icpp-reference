std::flat_map<Key,T,Compare,KeyContainer,MappedContainer>::at

   From cppreference.com
   < cpp | container | flat map


   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Containers library
   Sequence
   array
   (C++11)
   vector
   vector<bool>
   deque
   forward_list
   (C++11)
   list
   Associative
   set
   multiset
   map
   multimap
   Unordered associative
   unordered_set
   (C++11)
   unordered_multiset
   (C++11)
   unordered_map
   (C++11)
   unordered_multimap
   (C++11)
   Adaptors
   stack
   queue
   priority_queue
   flat_set
   (C++23)
   flat_multiset
   (C++23)
   flat_map
   (C++23)
   flat_multimap
   (C++23)
   Views
   span
   (C++20)
   mdspan
   (C++23)
   Iterator invalidation
   Member function table
   Non-member function table

   std::flat_map
   Member types
   Member functions
   flat_map::flat_map
   flat_map::operator=
   Element access
   flat_map::at
   flat_map::operator[]
   Iterators
   flat_map::beginflat_map::cbegin
   flat_map::endflat_map::cend
   flat_map::rbeginflat_map::crbegin
   flat_map::rendflat_map::crend
   Capacity
   flat_map::size
   flat_map::max_size
   flat_map::empty
   Modifiers
   flat_map::clear
   flat_map::erase
   flat_map::swap
   flat_map::emplace
   flat_map::extract
   flat_map::replace
   flat_map::insert
   flat_map::insert_range
   flat_map::insert_or_assign
   flat_map::emplace_hint
   flat_map::try_emplace
   Lookup
   flat_map::count
   flat_map::find
   flat_map::contains
   flat_map::equal_range
   flat_map::lower_bound
   flat_map::upper_bound
   Observers
   flat_map::key_comp
   flat_map::keys
   flat_map::value_comp
   flat_map::values
   Non-member functions
   operator==operator<=>
   (C++23)(C++23)
   swap(std::flat_map)
   (C++23)
   erase_if(std::flat_map)
   (C++23)
   Helper classes
   uses_allocator<std::flat_map>
   (C++23)
   Tags
   sorted_unique
   (C++23)
   sorted_unique_t
   (C++23)
   Deduction guides

   T& at( const Key& key );
   (1)                                 (since C++23)
   const T& at( const Key& key ) const;
   (2)                                 (since C++23)
   template< class K >
   T& at( const K& x );
   (3)                                 (since C++23)
   template< class K >
   const T& at( const K& x ) const;
   (4)                                 (since C++23)

   Returns a reference to the mapped value of the element with specified
   key. If no such element exists, an exception of type std::out_of_range
   is thrown.
   1,2) The key is equivalent to key.
   3,4) The key compares equivalent to the value x. The reference to the
   mapped value is obtained as if by expression this->find(x)->second.
   The expression this->find(x) must be well-formed and have well-defined
   behavior, otherwise the behavior is undefined.
   These overloads participate in overload resolution only if the
   qualified-id Compare::is_transparent is valid and denotes a type. It
   allows calling this function without constructing an instance of Key.

Parameters

   key - the key of the element to find
   x   - a value of any type that can be transparently compared with a key

Return value

   A reference to the mapped value of the requested element.

Exceptions

   1,2) std::out_of_range if the container does not have an element with
   the specified key.
   3,4) std::out_of_range if the container does not have the specified
   element, that is, if find(x) == end() is true.

Complexity

   Logarithmic in the size of the container.

Example

   This section is incomplete
   Reason: no example

See also

   operator[]
   access or insert specified element
   (public member function)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/container/flat_m
   ap/at&oldid=168896"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 23 January 2024, at 08:05.
     * This page has been accessed 805 times.
