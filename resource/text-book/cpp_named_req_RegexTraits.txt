C++ named requirements: RegexTraits (since C++11)

   From cppreference.com
   < cpp | named req

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   C++ named requirements
   Basic
   DefaultConstructible
   CopyAssignable
   CopyConstructible
   MoveAssignable
   (C++11)
   MoveConstructible
   (C++11)
   Destructible
   Type properties
   ScalarType
   TriviallyCopyable
   (C++11)
   StandardLayoutType
   (C++11)
   PODType
   TrivialType
   (C++11)
   ImplicitLifetimeType
   Library-Wide
   EqualityComparable
   LessThanComparable
   Swappable
   ValueSwappable
   (C++11)
   NullablePointer
   (C++11)
   Hash
   (C++11)
   Allocator
   FunctionObject
   Callable
   Predicate
   BinaryPredicate
   Compare
   Container
   Container
   SequenceContainer
   ContiguousContainer
   (C++17)
   ReversibleContainer
   AssociativeContainer
   AllocatorAwareContainer
   UnorderedAssociativeContainer
   (C++11)
   Container Elements
   DefaultInsertable
   (C++11)
   CopyInsertable
   (C++11)
   MoveInsertable
   (C++11)
   EmplaceConstructible
   (C++11)
   Erasable
   (C++11)
   Iterator
   LegacyIterator
   LegacyOutputIterator
   LegacyInputIterator
   LegacyForwardIterator
   LegacyBidirectionalIterator
   LegacyRandomAccessIterator
   LegacyContiguousIterator
   (C++17)
   ConstexprIterator
   (C++20)
   Stream I/O
   FormattedInputFunction
   UnformattedInputFunction
   FormattedOutputFunction
   UnformattedOutputFunction
   Formatters
   BasicFormatter
   (C++20)
   Formatter
   (C++20)
   Random Numbers
   SeedSequence
   (C++11)
   RandomNumberEngine
   (C++11)
   RandomNumberDistribution
   (C++11)
   UniformRandomBitGenerator
   (C++11)
   RandomNumberEngineAdaptor
   (C++11)
   Concurrency
   BasicLockable
   (C++11)
   Lockable
   (C++11)
   TimedLockable
   (C++11)
   SharedLockable
   (C++14)
   SharedTimedLockable
   (C++14)
   Mutex
   (C++11)
   TimedMutex
   (C++11)
   SharedMutex
   (C++17)
   SharedTimedMutex
   (C++14)
   Ranges
   RangeAdaptorObject
   (C++20)
   RangeAdaptorClosureObject
   (C++20)
   Other
   CharTraits
   RegexTraits
   (C++11)
   BitmaskType
   LiteralType
   (C++11)
   NumericType
   UnaryTypeTrait
   (C++11)
   BinaryTypeTrait
   (C++11)
   TransformationTrait
   (C++11)
   Clock
   (C++11)
   TrivialClock
   (C++11)

   RegexTraits is a traits class that abstracts operations needed for a
   given character type when as template type parameters for
   std::basic_regex.

Requirements

   Given
     * CharT, a character type
     * X, a RegexTraits type for type CharT
     * u, an object of type X
     * v, an object of type const X
     * p, a value of type const CharT*
     * I1, I2, input iterators
     * F1, F2, forward iterators
     * c, a value of type const CharT
     * s, an object of type X::string_type
     * cs, an object of type const X::string_type
     * b, a value of type bool
     * I, a value of type int
     * cl, an object of type X::char_class_type
     * loc, an object of type X::locale_type

   expression return type semantics
   X::char_type CharT Used to refer to the character type.
   X::string_type std::basic_string<CharT>
   X::locale_type A CopyConstructible type that represents the locale used
   by the traits class.
   X::char_class_type A BitmaskType type that represents a particular
   character classification.
   X::length(p) std::size_t Returns: the smallest i such that p[i] == 0.
   Complexity is linear in i.
   v.translate(c) X::char_type Returns: a character such that for any
   character d considered to be equivalent to c, then v.translate(c) ==
   v.translate(d).
   v.translate_nocase(c) X::char_type Returns: a character such that for
   any character C considered to be equivalent to c without regard to
   case, then v.translate_nocase(c) == v.translate_nocase(C).
   v.transform(F1, F2) X::string_type Returns: a sort key for the
   character sequence designated by the iterator range [F1, F2) such that
   if the character sequence [G1, G2) sorts before the character sequence
   [H1, H2), then v.transform(G1, G2) < v.transform(H1, H2).
   v.transform_primary(F1, F2) X::string_type Returns: a sort key for the
   character sequence designated by the iterator range [F1, F2) such that
   if the character sequence [G1, G2) sorts before the character sequence
   [H1, H2) without regard to case, then v.transform_primary(G1, G2) <
   v.transform_primary(H1, H2).
   v.lookup_collatename(F1, F2) X::string_type Returns:
     * An empty string if the character sequence is not a valid collating
       element
     * A sequence of characters that represents the collating element
       consisting of the character sequence designated by the iterator
       range [F1, F2) otherwise

   v.lookup_classname(F1, F2, b) X::char_class_type
     * Converts the character sequence designated by the iterator range
       [F1, F2) into a value of a BitmaskType that can subsequently be
       passed to isctype
     * Values returned from lookup_classname can be bitwise or'ed
       together; the resulting value represents membership in either of
       the corresponding character classes
     * If b is true, the returned bitmask is suitable for matching
       characters without regard to their case.
     * Returns 0 if the character sequence is not the name of a character
       class recognized by X.
     * The value returned shall be independent of the case of the
       characters in the sequence.

   v.isctype(c, cl) bool Returns: whether c is a member of one of the
   character classes designated by cl or not.
   v.value(c, I) int Returns:
     * The value represented by the digit c in base I if the character c
       is a valid digit in base I
     * -1 otherwise

   u.imbue(loc) X::locale_type
     * Imbues u with the locale loc
     * Returns: The previous locale used by u if any

   v.getloc() X::locale_type Returns: The previous locale used by v if
   any.

Standard library

   RegexTraits is satisfied by the following standard library classes:
   template<> class regex_traits<char>;
   template<> class regex_traits<wchar_t>;
   (since C++11)
   (since C++11)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/named_req/RegexT
   raits&oldid=144946"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 8 November 2022, at 13:29.
     * This page has been accessed 13,504 times.
