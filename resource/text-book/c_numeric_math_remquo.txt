remquo, remquof, remquol

   From cppreference.com
   < c | numeric | math

   C
   Language
   Headers
   Type support
   Program utilities
   Variadic function support
   Error handling
   Dynamic memory management
   Strings library
   Algorithms
   Numerics
   Date and time utilities
   Input/output support
   Localization support
   Concurrency support (C11)
   Technical Specifications
   Symbol index

   Numerics
   Common mathematical functions
   Floating-point environment (C99)
   Pseudo-random number generation
   Complex number arithmetic (C99)
   Type-generic math (C99)

   Common mathematical functions
   Types
   div_tldiv_tlldiv_timaxdiv_t
   (C99)(C99)
   float_tdouble_t
   (C99)(C99)
   _Decimal32_t_Decimal64_t
   (C23)(C23)
   Functions
   Basic operations
   abslabsllabsimaxabs
   (C99)(C99)
   fabs
   divldivlldivimaxdiv
   (C99)(C99)
   fmod
   remainder
   (C99)
   remquo
   (C99)
   fma
   (C99)
   fdim
   (C99)
   nannanfnanlnandN
   (C99)(C99)(C99)(C23)
   Maximum/minimum operations
   fmax
   (C99)
   fmaximum
   (C23)
   fmaximum_mag
   (C23)
   fmaximum_num
   (C23)
   fmaximum_mag_num
   (C23)
   fmin
   (C99)
   fminimum
   (C23)
   fminimum_mag
   (C23)
   fminimum_num
   (C23)
   fminimum_mag_num
   (C23)
   Exponential functions
   exp
   exp10
   (C23)
   exp2
   (C99)
   expm1
   (C99)
   exp10m1
   (C23)
   exp2m1
   (C23)
   log
   log10
   log2
   (C99)
   log1plogp1
   (C99)(C23)
   log10p1
   (C23)
   log2p1
   (C23)
   Power functions
   sqrt
   cbrt
   (C99)
   rootn
   (C23)
   rsqrt
   (C23)
   hypot
   (C99)
   compound
   (C23)
   pow
   pown
   (C23)
   powr
   (C23)
   Trigonometric and hyperbolic functions
   sin
   cos
   tan
   asin
   acos
   atan
   atan2
   sinpi
   (C23)
   cospi
   (C23)
   tanpi
   (C23)
   asinpi
   (C23)
   acospi
   (C23)
   atanpi
   (C23)
   atan2pi
   (C23)
   sinh
   cosh
   tanh
   asinh
   (C99)
   acosh
   (C99)
   atanh
   (C99)
   Error and gamma functions
   erf
   (C99)
   erfc
   (C99)
   lgamma
   (C99)
   tgamma
   (C99)
   Nearest integer floating-point operations
   ceil
   floor
   roundlroundllround
   (C99)(C99)(C99)
   roundeven
   (C23)
   trunc
   (C99)
   nearbyint
   (C99)
   rintlrintllrint
   (C99)(C99)(C99)
   fromfpfromfpxufromfpufromfpx
   (C23)(C23)(C23)(C23)
   Floating-point manipulation functions
   ldexp
   frexp
   scalbnscalbln
   (C99)(C99)
   ilogbllogb
   (C99)(C23)
   logb
   (C99)
   modf
   nextafternexttoward
   (C99)(C99)
   nextupnextdown
   (C23)(C23)
   copysign
   (C99)
   canonicalize
   (C23)
   Narrowing operations
   fadd
   (C23)
   fsub
   (C23)
   fmul
   (C23)
   fdiv
   (C23)
   ffma
   (C23)
   fsqrt
   (C23)
   Quantum and quantum exponent functions
   quantizedN
   (C23)
   samequantumdN
   (C23)
   quantumdN
   (C23)
   llquantexpdN
   (C23)
   Decimal re-encoding functions
   encodedecdN
   (C23)
   decodedecdN
   (C23)
   encodebindN
   (C23)
   decodebindN
   (C23)
   Total order and payload functions
   totalorder
   (C23)
   getpayload
   (C23)
   setpayload
   (C23)
   setpayloadsig
   (C23)
   Classification
   fpclassify
   (C99)
   iscanonical
   (C23)
   isfinite
   (C99)
   isinf
   (C99)
   isnan
   (C99)
   isnormal
   (C99)
   signbit
   (C99)
   issubnormal
   (C23)
   iszero
   (C23)
   isgreater
   (C99)
   isgreaterequal
   (C99)
   isless
   (C99)
   islessequal
   (C99)
   islessgreater
   (C99)
   isunordered
   (C99)
   issignaling
   (C23)
   iseqsig
   (C23)
   Macro constants
   Special floating-point values
   HUGE_VALFHUGE_VALHUGE_VALLHUGE_VALDN
   (C99)(C99)(C23)
   INFINITYDEC_INFINITY
   (C99)(C23)
   NANDEC_NAN
   (C99)(C23)
   Arguments and return values
   FP_ILOGB0FP_ILOGBNAN
   (C99)(C99)
   FP_INT_UPWARDFP_INT_DOWNWARDFP_INT_TOWARDZEROFP_INT_TONEARESTFROMZEROFP
   _INT_TONEAREST
   (C23)(C23)(C23)(C23)(C23)
   FP_LLOGB0FP_LLOGBNAN
   (C23)(C23)
   FP_NORMALFP_SUBNORMALFP_ZEROFP_INFINITEFP_NAN
   (C99)(C99)(C99)(C99)(C99)
   Error handling
   MATH_ERRNOMATH_ERRNOEXCEPT
   (C99)(C99)
   math_errhandling
   (C99)
   Fast operation indicators
   FP_FAST_FMAFFP_FAST_FMA
   (C99)(C99)
   FP_FAST_FADDFP_FAST_FADDLFP_FAST_DADDLFP_FAST_DMADDDN
   (C23)(C23)(C23)(C23)
   FP_FAST_FMULFP_FAST_FMULLFP_FAST_DMULLFP_FAST_DMMULDN
   (C23)(C23)(C23)(C23)
   FP_FAST_FFMAFP_FAST_FFMALFP_FAST_DFMALFP_FAST_DMFMADN
   (C23)(C23)(C23)(C23)
   FP_FAST_FMALFP_FAST_FMADN
   (C99)(C23)
   FP_FAST_FSUBFP_FAST_FSUBLFP_FAST_DSUBLFP_FAST_DMSUBDN
   (C23)(C23)(C23)(C23)
   FP_FAST_FDIVFP_FAST_FDIVLFP_FAST_DDIVLFP_FAST_DMDIVDN
   (C23)(C23)(C23)(C23)
   FP_FAST_FSQRTFP_FAST_FSQRTLFP_FAST_DSQRTLFP_FAST_DMSQRTDN
   (C23)(C23)(C23)(C23)

   Defined in header <math.h>
   float       remquof( float x, float y, int *quo );
   (1)                                                           (since C99)
   double      remquo( double x, double y, int *quo );
   (2)                                                           (since C99)
   long double remquol( long double x, long double y, int *quo );
   (3)                                                           (since C99)
   Defined in header <tgmath.h>
   #define remquo( x, y, quo )
   (4)                                                           (since C99)
   1-3) Computes the floating-point remainder of the division operation
   x/y as the remainder() function does. Additionally, the sign and at
   least the three of the last bits of x/y will be stored in quo,
   sufficient to determine the octant of the result within a period.
   4) Type-generic macro: If any non-pointer argument has type long
   double, remquol is called. Otherwise, if any non-pointer argument has
   integer type or has type double, remquo is called. Otherwise, remquof
   is called.

Parameters

   x, y - floating-point values
   quo - pointer to an integer value to store the sign and some bits of
   x/y

Return value

   If successful, returns the floating-point remainder of the division x/y
   as defined in remainder, and stores, in *quo, the sign and at least
   three of the least significant bits of x/y (formally, stores a value
   whose sign is the sign of x/y and whose magnitude is congruent modulo
   2n
   to the magnitude of the integral quotient of x/y, where n is an
   implementation-defined integer greater than or equal to 3).

   If y is zero, the value stored in *quo is unspecified.

   If a domain error occurs, an implementation-defined value is returned
   (NaN where supported).

   If a range error occurs due to underflow, the correct result is
   returned if subnormals are supported.

   If y is zero, but the domain error does not occur, zero is returned.

Error handling

   Errors are reported as specified in math_errhandling.

   Domain error may occur if y is zero.

   If the implementation supports IEEE floating-point arithmetic (IEC
   60559),
     * The current rounding mode has no effect.
     * FE_INEXACT is never raised
     * If x is ±infty and y is not NaN, NaN is returned and FE_INVALID is
       raised
     * If y is ±0 and x is not NaN, NaN is returned and FE_INVALID is
       raised
     * If either x or y is NaN, NaN is returned

Notes

   POSIX requires that a domain error occurs if x is infinite or y is
   zero.

   This function is useful when implementing periodic functions with the
   period exactly representable as a floating-point value: when
   calculating sin(px) for a very large x, calling sin directly may result
   in a large error, but if the function argument is first reduced with
   remquo, the low-order bits of the quotient may be used to determine the
   sign and the octant of the result within the period, while the
   remainder may be used to calculate the value with high precision.

   On some platforms this operation is supported by hardware (and, for
   example, on Intel CPU, FPREM1 leaves exactly 3 bits of precision in the
   quotient).

Example

   Run this code
#include <fenv.h>
#include <math.h>
#include <stdio.h>

#ifndef __GNUC__
#pragma STDC FENV_ACCESS ON
#endif

double cos_pi_x_naive(double x)
{
    const double pi = acos(-1);
    return cos(pi * x);
}

// the period is 2, values are (0;0.5) positive, (0.5;1.5) negative, (1.5,2) pos
itive
double cos_pi_x_smart(double x)
{
    const double pi = acos(-1);
    int extremum;
    double rem = remquo(x, 1, &extremum);
    extremum = (unsigned)extremum % 2; // keep 1 bit to determine nearest extrem
um
    return extremum ? -cos(pi * rem) : cos(pi * rem);
}

int main(void)
{
    printf("cos(pi * 0.25) = %f\n", cos_pi_x_naive(0.25));
    printf("cos(pi * 1.25) = %f\n", cos_pi_x_naive(1.25));
    printf("cos(pi * 1000000000000.25) = %f\n", cos_pi_x_naive(1000000000000.25)
);
    printf("cos(pi * 1000000000001.25) = %f\n", cos_pi_x_naive(1000000000001.25)
);
    printf("cos(pi * 1000000000000.25) = %f\n", cos_pi_x_smart(1000000000000.25)
);
    printf("cos(pi * 1000000000001.25) = %f\n", cos_pi_x_smart(1000000000001.25)
);

    // error handling
    feclearexcept(FE_ALL_EXCEPT);
    int quo;
    printf("remquo(+Inf, 1) = %.1f\n", remquo(INFINITY, 1, &quo));
    if (fetestexcept(FE_INVALID))
        puts("    FE_INVALID raised");
}

   Possible output:
cos(pi * 0.25) = 0.707107
cos(pi * 1.25) = -0.707107
cos(pi * 1000000000000.25) = 0.707123
cos(pi * 1000000000001.25) = -0.707117
cos(pi * 1000000000000.25) = 0.707107
cos(pi * 1000000000001.25) = -0.707107
remquo(+Inf, 1) = -nan
    FE_INVALID raised

References

     * C23 standard (ISO/IEC 9899:2023):

          + 7.12.10.3 The remquo functions (p: TBD)

          + 7.25 Type-generic math <tgmath.h> (p: TBD)

          + F.10.7.3 The remquo functions (p: TBD)

     * C17 standard (ISO/IEC 9899:2018):

          + 7.12.10.3 The remquo functions (p: 186)

          + 7.25 Type-generic math <tgmath.h> (p: 272-273)

          + F.10.7.3 The remquo functions (p: 385)

     * C11 standard (ISO/IEC 9899:2011):

          + 7.12.10.3 The remquo functions (p: 255)

          + 7.25 Type-generic math <tgmath.h> (p: 373-375)

          + F.10.7.3 The remquo functions (p: 529)

     * C99 standard (ISO/IEC 9899:1999):

          + 7.12.10.3 The remquo functions (p: 236)

          + 7.22 Type-generic math <tgmath.h> (p: 335-337)

          + F.9.7.3 The remquo functions (p: 465)

See also

   divldivlldiv
   (C99)
   computes quotient and remainder of integer division
   (function)
   fmodfmodffmodl
   (C99)(C99)
   computes remainder of the floating-point division operation
   (function)
   remainderremainderfremainderl
   (C99)(C99)(C99)
   computes signed remainder of the floating-point division operation
   (function)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=c/numeric/math/remqu
   o&oldid=172057"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 23 May 2024, at 20:43.
     * This page has been accessed 23,382 times.
