std::basic_stacktrace<Allocator>::basic_stacktrace

   From cppreference.com
   < cpp | utility | basic stacktrace

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Diagnostics library
   Exception handling
   exception
   uncaught_exceptionuncaught_exceptions
   (until C++20*)(C++17)
   exception_ptr
   (C++11)
   make_exception_ptr
   (C++11)
   current_exception
   (C++11)
   rethrow_exception
   (C++11)
   nested_exception
   (C++11)
   throw_with_nested
   (C++11)
   rethrow_if_nested
   (C++11)
   Exception handling failures
   terminate
   terminate_handler
   get_terminate
   (C++11)
   set_terminate
   bad_exception
   unexpected
   (until C++17*)
   unexpected_handler
   (until C++17*)
   get_unexpected
   (C++11)(until C++17*)
   set_unexpected
   (until C++17*)
   Error codes
   Error codes
   errno
   Exception categories
   logic_error
   invalid_argument
   domain_error
   length_error
   out_of_range
   runtime_error
   range_error
   overflow_error
   underflow_error
   tx_exception
   (TM TS)
   System error support
   error_category
   (C++11)
   generic_category
   (C++11)
   system_category
   (C++11)
   error_condition
   (C++11)
   errc
   (C++11)
   error_code
   (C++11)
   system_error
   (C++11)
   Assertions
   assert
   Stacktrace
   stacktrace_entry
   (C++23)
   basic_stacktrace
   (C++23)

   std::basic_stacktrace
   Member functions
   basic_stacktrace::basic_stacktrace
   basic_stacktrace::~basic_stacktrace
   basic_stacktrace::operator=
   basic_stacktrace::current
   basic_stacktrace::get_allocator
   Iterators
   basic_stacktrace::beginbasic_stacktrace::cbegin
   basic_stacktrace::endbasic_stacktrace::cend
   basic_stacktrace::rbeginbasic_stacktrace::crbegin
   basic_stacktrace::rendbasic_stacktrace::crend
   Capacity
   basic_stacktrace::empty
   basic_stacktrace::size
   basic_stacktrace::max_size
   Element access
   basic_stacktrace::operator[]
   basic_stacktrace::at
   Modifiers
   basic_stacktrace::swap
   Non-member functions
   operator==
   operator<=>
   swap(std::basic_stacktrace)
   to_string(std::basic_stacktrace)
   operator<<
   Helper classes
   hash<std::basic_stacktrace>
   formatter<std::basic_stacktrace>

   basic_stacktrace() noexcept(/* see below */);
   (1) (since C++23)
   explicit basic_stacktrace( const allocator_type& alloc ) noexcept;
   (2) (since C++23)
   basic_stacktrace( const basic_stacktrace& other );
   (3) (since C++23)
   basic_stacktrace( basic_stacktrace&& other ) noexcept;
   (4) (since C++23)
   basic_stacktrace( const basic_stacktrace& other,
                     const allocator_type& alloc );
   (5) (since C++23)
   basic_stacktrace( basic_stacktrace&& other, const allocator_type& alloc
   );
   (6) (since C++23)

   Constructs an empty basic_stacktrace, or copy/move from other.
   1) Default constructor. Constructs an empty basic_stacktrace with a
   default-constructed allocator.
   2) Constructs an empty basic_stacktrace using alloc as the allocator.
   3) Copy constructor. Constructs a basic_stacktrace with the copy of the
   contents of other, the allocator is obtained as if by calling
   std::allocator_traits<allocator_type>::select_on_container_copy_constru
   ction(other.get_allocator()).
   4) Move constructor. Constructs a basic_stacktrace with the contents of
   other using move semantics. Allocator is move-constructed from that of
   other. After construction, other is left in a valid but unspecified
   state.
   5) Same as the copy constructor, except that alloc is used as the
   allocator.
   6) Behaves same as the move constructor if alloc ==
   other.get_allocator(). Otherwise, allocates memory with alloc and
   performs element-wise move. alloc is used as the allocator.

   (3,5,6) may throw an exception or construct an empty basic_stacktrace
   on allocation failure.

Parameters

   alloc - allocator to use for all memory allocations of the constructed
   basic_stacktrace
   other - another basic_stacktrace to copy/move from

Exceptions

   1)
   noexcept specification:
   noexcept(std::is_nothrow_default_constructible_v<allocator_type>)
   3,5,6) May propagate the exception thrown on allocation failure.

Complexity

   1,2) Constant.
   3) Linear in size of other.
   4) Constant.
   5) Linear in size of other.
   6) Linear in size of other if alloc != other.get_allocator(), otherwise
   constant.

Notes

   After container move construction (overload (4)), references, pointers,
   and iterators (other than the end iterator) to other remain valid, but
   refer to elements that are now in *this. The current standard makes
   this guarantee via the blanket statement in [container.reqmts]/67, and
   a more direct guarantee is under consideration via LWG issue 2321.

Example

   This section is incomplete
   Reason: no example

See also

   operator=
   assigns to the basic_stacktrace
   (public member function)
   current
   [static]
   obtains the current stacktrace or its given part
   (public static member function)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/utility/basic_st
   acktrace/basic_stacktrace&oldid=159097"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 15 September 2023, at 11:13.
     * This page has been accessed 9,376 times.
