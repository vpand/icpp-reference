std::common_iterator<I,S>::operator*,->

   From cppreference.com
   < cpp | iterator | common iterator

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Iterator library
   Iterator concepts
   indirectly_readable
   (C++20)
   indirectly_writable
   (C++20)
   weakly_incrementable
   (C++20)
   incrementable
   (C++20)
   input_or_output_iterator
   (C++20)
   sentinel_for
   (C++20)
   sized_sentinel_for
   (C++20)
   input_iterator
   (C++20)
   output_iterator
   (C++20)
   forward_iterator
   (C++20)
   bidirectional_iterator
   (C++20)
   random_access_iterator
   (C++20)
   contiguous_iterator
   (C++20)
   Iterator primitives
   input_iterator_tagoutput_iterator_tagforward_iterator_tagbidirectional_
   iterator_tagrandom_access_iterator_tagcontiguous_iterator_tag
   (C++20)
   iter_value_titer_difference_titer_reference_titer_const_reference_titer
   _rvalue_reference_titer_common_reference_t
   (C++20)(C++20)(C++20)(C++23)(C++20)(C++20)
   iterator
   (deprecated in C++17)
   iterator_traits
   incrementable_traits
   (C++20)
   indirectly_readable_traits
   (C++20)
   Algorithm concepts and utilities
   Indirect callable concepts
   indirectly_unary_invocableindirectly_regular_unary_invocable
   (C++20)(C++20)
   indirect_unary_predicate
   (C++20)
   indirect_binary_predicate
   (C++20)
   indirect_equivalence_relation
   (C++20)
   indirect_strict_weak_order
   (C++20)
   Common algorithm requirements
   indirectly_movable
   (C++20)
   indirectly_movable_storable
   (C++20)
   indirectly_copyable
   (C++20)
   indirectly_copyable_storable
   (C++20)
   indirectly_swappable
   (C++20)
   indirectly_comparable
   (C++20)
   permutable
   (C++20)
   mergeable
   (C++20)
   sortable
   (C++20)
   Utilities
   indirect_result_t
   (C++20)
   projected
   (C++20)
   projected_value_t
   (C++26)
   Iterator adaptors
   reverse_iterator
   make_reverse_iterator
   (C++14)
   move_iterator
   (C++11)
   make_move_iterator
   (C++11)
   default_sentinel_tdefault_sentinel
   (C++20)(C++20)
   unreachable_sentinel_tunreachable_sentinel
   (C++20)(C++20)
   front_insert_iterator
   back_insert_iterator
   inserter
   insert_iterator
   front_inserter
   back_inserter
   move_sentinel
   (C++20)
   common_iterator
   (C++20)
   counted_iterator
   (C++20)
   basic_const_iterator
   (C++23)
   const_iterator
   (C++23)
   const_sentinel
   (C++23)
   make_const_iterator
   (C++23)
   make_const_sentinel
   (C++23)
   Stream iterators
   istream_iterator

   ostream_iterator
   istreambuf_iterator
   ostreambuf_iterator
   Iterator customization points
   ranges::iter_move
   (C++20)
   ranges::iter_swap
   (C++20)
   Iterator operations
   advance
   distance
   prev
   (C++11)
   next
   (C++11)
   ranges::advance
   (C++20)
   ranges::distance
   (C++20)
   ranges::prev
   (C++20)
   ranges::next
   (C++20)
   Range access
   begincbegin
   (C++11)(C++14)
   rbegincrbegin
   (C++14)(C++14)
   endcend
   (C++11)(C++14)
   rendcrend
   (C++14)(C++14)
   sizessize
   (C++17)(C++20)
   empty
   (C++17)
   data
   (C++17)

   std::common_iterator
   Member functions
   common_iterator::common_iterator
   (C++20)
   common_iterator::operator=
   (C++20)
   common_iterator::operator*common_iterator::operator->
   (C++20)(C++20)
   common_iterator::operator++common_iterator::operator++(int)
   (C++20)(C++20)
   Non-member functions
   operator==
   (C++20)
   operator-
   (C++20)
   iter_move
   (C++20)
   iter_swap
   (C++20)
   Helper classes
   incrementable_traits
   (C++20)
   iterator_traits
   (C++20)

   constexpr decltype(auto) operator*();
   (1)                                       (since C++20)
   constexpr decltype(auto) operator*() const
       requires /*dereferenceable*/<const I>;
   (2)                                       (since C++20)
   constexpr auto operator->() const
       requires /* see description */;
   (3)                                       (since C++20)
   Helper types
   class /*proxy*/ {

       std::iter_value_t<I> keep_;
       constexpr proxy(std::iter_reference_t<I>&& x)
           : keep_(std::move(x)) {}
   public:
       constexpr const std::iter_value_t<I>* operator->() const noexcept {
           return std::addressof(keep_);
       }
   };
   (4)                                       (exposition only*)

   Returns pointer or reference to the current element, or a proxy holding
   it.

   The behavior is undefined if the underlying std::variant member object
   var does not hold an object of type I, i.e.
   std::holds_alternative<I>(var) is equal to false.

   Let it denote the iterator of type I held by var, that is
   std::get<I>(var).
   1,2) Returns the result of dereferencing it.
   3) Returns a pointer or underlying iterator to the current element, or
   a proxy holding it:
     * Equivalent to return it;, if I is a pointer type or if the
       expression it.operator->() is well-formed.
     * Otherwise, equivalent to auto&& tmp = *it; return
       std::addressof(tmp);, if std::iter_reference_t<I> is a reference
       type.
     * Otherwise, equivalent to return proxy(*it);, where proxy is an
       exposition only class (4).

   The expression in the requires-clause is equivalent to
   std::indirectly_readable<const I> && (

       requires(const I& i) { i.operator->(); } ||
       std::is_reference_v<std::iter_reference_t<I>> ||
       std::constructible_from<std::iter_value_t<I>,
   std::iter_reference_t<I>>
   ).

Parameters

   (none)

Return value

   1,2) Reference to the current element, or prvalue temporary. Equivalent
   to *it.
   3) Pointer or iterator to the current element or proxy holding it as
   described above.

Example

   Run this code
#include <complex>
#include <initializer_list>
#include <iostream>
#include <iterator>

using std::complex_literals::operator""i;

int main()
{
    const auto il = {1i, 3.14 + 2i, 3i, 4i, 5i};

    using CI = std::common_iterator<
        std::counted_iterator<decltype(il)::iterator>,
        std::default_sentinel_t>;

    CI ci{std::counted_iterator{std::next(begin(il), 1), std::ssize(il) - 1}};

    std::cout << *ci << ' ' << ci->real() << '\n';
}

   Output:
(3.14,2) 3.14

Defect reports

   The following behavior-changing defect reports were applied
   retroactively to previously published C++ standards.
   DR Applied to Behavior as published Correct behavior
   LWG 3574 C++20 variant was fully constexpr (P2231R1) but
   common_iterator was not also made constexpr
   LWG 3595 C++20 functions of the proxy type lacked constexpr and
   noexcept added
   LWG 3672 C++20 operator-> might return by reference in usual cases
   always returns by value

See also

   (constructor)
   (C++20)
   constructs a new iterator adaptor
   (public member function)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/common_
   iterator/operator*&oldid=159364"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 18 September 2023, at 12:14.
     * This page has been accessed 4,892 times.
