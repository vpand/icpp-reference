operator<<,>>(std::complex)

   From cppreference.com
   < cpp | numeric | complex

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Numerics library
   Common mathematical functions
   Mathematical special functions (C++17)
   Mathematical constants (C++20)
   Basic linear algebra algorithms (C++26)
   Floating-point environment (C++11)
   Complex numbers
   Numeric arrays
   Pseudo-random number generation
   Factor operations
   gcd
   (C++17)
   lcm
   (C++17)
   Interpolations
   midpoint
   (C++20)
   lerp
   (C++20)
   Saturation arithmetic
   add_sat
   (C++26)
   sub_sat
   (C++26)
   saturate_cast
   (C++26)
   mul_sat
   (C++26)
   div_sat
   (C++26)
   Generic numeric operations
   iota
   (C++11)
   ranges::iota
   (C++23)
   accumulate
   inner_product
   adjacent_difference
   partial_sum
   reduce
   (C++17)
   transform_reduce
   (C++17)
   inclusive_scan
   (C++17)
   exclusive_scan
   (C++17)
   transform_inclusive_scan
   (C++17)
   transform_exclusive_scan
   (C++17)
   Bit operations
   has_single_bit
   (C++20)
   bit_cast
   (C++20)
   bit_ceil
   (C++20)
   bit_floor
   (C++20)
   bit_width
   (C++20)
   rotl
   (C++20)
   rotr
   (C++20)
   popcount
   (C++20)
   countl_zero
   (C++20)
   countl_one
   (C++20)
   countr_zero
   (C++20)
   countr_one
   (C++20)
   byteswap
   (C++23)
   endian
   (C++20)

   std::complex
   Member functions
   complex::complex
   complex::operator=
   complex::real
   complex::imag
   complex::operator+=complex::operator-=complex::operator*=complex::opera
   tor/=
   Non-member functions
   operator+operator-
   operator+operator-operator*operator/
   operator==operator!=
   (until C++20)
   operator<<operator>>
   get(std::complex)
   (C++26)
   real
   imag
   abs
   arg
   norm
   conj
   proj
   (C++11)
   polar
   operator""ioperator""ifoperator""il
   (C++14)(C++14)(C++14)
   Exponential functions
   log

   log10

   exp
   Power functions
   pow

   sqrt
   Trigonometric functions
   sin

   cos
   tan
   asin
   (C++11)
   acos
   (C++11)
   atan
   (C++11)
   Hyperbolic functions
   sinh

   cosh
   tanh
   asinh
   (C++11)
   acosh
   (C++11)
   atanh
   (C++11)
   Helper types
   tuple_size<std::complex>
   (C++26)
   tuple_element<std::complex>
   (C++26)

   Defined in header <complex>
   template< class T, class CharT, class Traits >

   std::basic_ostream<CharT, Traits>&
       operator<<( std::basic_ostream<CharT, Traits>& os, const
   std::complex<T>& x );
   (1)
   template< class T, class CharT, class Traits >

   std::basic_istream<CharT, Traits>&
       operator>>( std::basic_istream<CharT, Traits>& is, std::complex<T>&
   x );
   (2)
   1) Writes to os the complex number in the form (real, imaginary).
   2) Reads a complex number from is. The supported formats are
     * real
     * (real)
     * (real, imaginary)

   where the input for real and imaginary must be convertible to T.
   If an error occurs calls is.setstate(ios_base::failbit).

Exceptions

   May throw std::ios_base::failure on stream errors.

Parameters

   os - a character output stream
   is - a character input stream
   x  - the complex number to be inserted or extracted

Return value

   1) os
   2) is

Notes

   1) As the comma may be used in the current locale as decimal separator,
   the output may be ambiguous. This can be solved with std::showpoint
   which forces the decimal separator to be visible.
   2) The input is performed as a series of simple formatted extractions.
   Whitespace skipping is the same for each of them.

Possible implementation

template<class T, class CharT, class Traits>
basic_ostream<CharT, Traits>&
    operator<<(basic_ostream<CharT, Traits>& o, const complex<T>& x)
{
    basic_ostringstream<CharT, Traits> s;
    s.flags(o.flags());
    s.imbue(o.getloc());
    s.precision(o.precision());
    s << '(' << x.real() << ',' << x.imag() << ')';
    return o << s.str();
}

Example

   Run this code
#include <complex>
#include <iostream>

int main()
{
    std::cout << std::complex<double> {3.14, 2.71} << '\n';
}

   Possible output:
(3.14,2.71)

   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/numeric/complex/
   operator_ltltgtgt&oldid=150875"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 22 April 2023, at 11:19.
     * This page has been accessed 34,096 times.
