std::runtime_format

   From cppreference.com
   < cpp | utility | format

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Utilities library
   Language support
   Type support (basic types, RTTI)
   Library feature-test macros (C++20)
   Dynamic memory management
   Program utilities
   Coroutine support (C++20)
   Variadic functions
   is_constant_evaluated
   (C++20)
   is_within_lifetime
   (C++26)
   initializer_list
   (C++11)
   source_location
   (C++20)
   Debugging support
   is_debugger_present
   (C++26)
   breakpoint_if_debugging
   (C++26)
   breakpoint
   (C++26)
   Three-way comparison
   three_way_comparablethree_way_comparable_with
   (C++20)(C++20)
   strong_ordering
   (C++20)
   weak_ordering
   (C++20)
   partial_ordering
   (C++20)
   common_comparison_category
   (C++20)
   compare_three_way_result
   (C++20)
   compare_three_way
   (C++20)
   strong_order
   (C++20)
   weak_order
   (C++20)
   partial_order
   (C++20)
   compare_strong_order_fallback
   (C++20)
   compare_weak_order_fallback
   (C++20)
   compare_partial_order_fallback
   (C++20)
   is_eqis_ltis_lteq
   (C++20)(C++20)(C++20)
   is_neqis_gtis_gteq
   (C++20)(C++20)(C++20)
   General utilities
   Date and time
   Function objects
   Formatting library (C++20)
   bitset
   hash
   (C++11)
   Relational operators (deprecated in C++20)
   rel_ops::operator!=rel_ops::operator>

   rel_ops::operator<=rel_ops::operator>=
   Integer comparison functions
   cmp_equalcmp_lesscmp_less_than
   (C++20)(C++20)(C++20)
   cmp_not_equalcmp_greatercmp_greater_than
   (C++20)(C++20)(C++20)
   in_range
   (C++20)
   Swap and type operations
   swap
   ranges::swap
   (C++20)
   exchange
   (C++14)
   declval
   (C++11)
   to_underlying
   (C++23)
   forward
   (C++11)
   forward_like
   (C++23)
   move
   (C++11)
   move_if_noexcept
   (C++11)
   as_const
   (C++17)
   Common vocabulary types
   pair
   tuple
   (C++11)
   optional
   (C++17)
   any
   (C++17)
   variant
   (C++17)
   tuple_size
   (C++11)
   tuple_element
   (C++11)
   apply
   (C++17)
   make_from_tuple
   (C++17)
   expected
   (C++23)
   Elementary string conversions
   to_chars
   (C++17)
   from_chars
   (C++17)
   chars_format
   (C++17)
   to_chars_result
   (C++17)
   from_chars_result
   (C++17)

   Formatting library
   Standard format specification
   Formatting functions
   format
   (C++20)
   format_to
   (C++20)
   format_to_n
   (C++20)
   formatted_size
   (C++20)
   vformat
   (C++20)
   vformat_to
   (C++20)
   Format strings
   basic_format_stringformat_stringwformat_string
   (C++20)(C++20)(C++20)
   runtime_format
   (C++26)
   Formatting concepts
   formattable
   (C++23)
   Formatter
   formatter
   (C++20)
   formatter<pair-or-tuple>
   (C++23)
   formatter<range>
   (C++23)
   range_formatter
   (C++23)
   enable_nonlocking_formatter_optimization
   (C++23)
   basic_format_parse_contextformat_parse_contextwformat_parse_context
   (C++20)(C++20)(C++20)
   basic_format_contextformat_contextwformat_context
   (C++20)(C++20)(C++20)
   range_format
   (C++23)
   format_kind
   (C++23)
   Formatting arguments
   basic_format_arg
   (C++20)
   basic_format_arg::handle
   (C++20)
   basic_format_argsformat_argswformat_args
   (C++20)(C++20)(C++20)
   visit_format_arg
   (C++20) (deprecated in C++26)
   make_format_argsmake_wformat_args
   (C++20)(C++20)
   Format error
   format_error
   (C++20)

   Defined in header <format>
   /*runtime-format-string*/<char> runtime_format( std::string_view fmt )
   noexcept;
   (1) (since C++26)
   /*runtime-format-string*/<wchar_t> runtime_format( std::wstring_view
   fmt ) noexcept;
   (2) (since C++26)

   Returns an object that stores a runtime format string directly usable
   in user-oriented formatting functions and can be implicitly converted
   to std::basic_format_string.

Parameters

   fmt - a string view

Return value

   An object holding the runtime format string of the exposition-only
   type:

Class template runtime-format-string <CharT>

   template< class CharT >
   struct /*runtime-format-string*/;
                          (exposition only*)

Member objects

   The returned object contains an exposition-only non-static data member
   str of type std::basic_string_view<CharT>.

Constructors and assignments

   /*runtime-format-string*/( std::basic_string_view<CharT> s ) noexcept;
   (1)
   /*runtime-format-string*/( const /*runtime-format-string*/& ) = delete;
   (2)
   /*runtime-format-string*/& operator=( const /*runtime-format-string*/&
   ) = delete;
   (3)
   1) Initializes str with s.
   2) Copy constructor is explicitly deleted. The type is neither copyable
   nor movable.
   3) The assignment is explicitly deleted.

Notes

   Since the return type of runtime_format is neither copyable nor
   movable, an attempt of passing runtime_fmt as glvalue inhibits the
   construction of std::basic_format_string which results in program
   ill-formed. To construct std::basic_format_string with runtime_format,
   the returned value of runtime_format is passed directly on
   std::basic_format_string as prvalue where copy elision is guaranteed.
auto runtime_fmt = std::runtime_format("{}");

auto s0 = std::format(runtime_fmt, 1); // error
auto s1 = std::format(std::move(runtime_fmt), 1); // still error
auto s2 = std::format(std::runtime_format("{}"), 1); // ok

   Feature-test macro  Value    Std          Feature
   __cpp_lib_format   202311L (C++26) Runtime format strings

Example

   Run this code
#include <format>
#include <print>
#include <string>
#include <string_view>

int main()
{
    std::print("Hello {}!\n", "world");

    std::string fmt;
    for (int i{}; i != 3; ++i)
    {
        fmt += "{} "; // constructs the formatting string
        std::print("{} : ", fmt);
        std::println(std::runtime_format(fmt), "alpha", 'Z', 3.14, "unused");
    }
}

   Output:
Hello world!
{}  : alpha
{} {}  : alpha Z
{} {} {}  : alpha Z 3.14

See also

   format
   (C++20)
   stores formatted representation of the arguments in a new string
   (function template)
   vformat
   (C++20)
   non-template variant of std::format using type-erased argument
   representation
   (function)
   basic_format_stringformat_stringwformat_string
   (C++20)(C++20)(C++20)
   class template that performs compile-time format string checks at
   construction time
   (class template)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/utility/format/r
   untime_format&oldid=171993"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 23 May 2024, at 03:38.
     * This page has been accessed 2,554 times.
