operator==, !=, <, <=, >, >=, <=> (std::shared_ptr)

   From cppreference.com
   < cpp | memory | shared ptr

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Utilities library
   Language support
   Type support (basic types, RTTI)
   Library feature-test macros (C++20)
   Dynamic memory management
   Program utilities
   Coroutine support (C++20)
   Variadic functions
   is_constant_evaluated
   (C++20)
   is_within_lifetime
   (C++26)
   initializer_list
   (C++11)
   source_location
   (C++20)
   Debugging support
   is_debugger_present
   (C++26)
   breakpoint_if_debugging
   (C++26)
   breakpoint
   (C++26)
   Three-way comparison
   three_way_comparablethree_way_comparable_with
   (C++20)(C++20)
   strong_ordering
   (C++20)
   weak_ordering
   (C++20)
   partial_ordering
   (C++20)
   common_comparison_category
   (C++20)
   compare_three_way_result
   (C++20)
   compare_three_way
   (C++20)
   strong_order
   (C++20)
   weak_order
   (C++20)
   partial_order
   (C++20)
   compare_strong_order_fallback
   (C++20)
   compare_weak_order_fallback
   (C++20)
   compare_partial_order_fallback
   (C++20)
   is_eqis_ltis_lteq
   (C++20)(C++20)(C++20)
   is_neqis_gtis_gteq
   (C++20)(C++20)(C++20)
   General utilities
   Date and time
   Function objects
   Formatting library (C++20)
   bitset
   hash
   (C++11)
   Relational operators (deprecated in C++20)
   rel_ops::operator!=rel_ops::operator>

   rel_ops::operator<=rel_ops::operator>=
   Integer comparison functions
   cmp_equalcmp_lesscmp_less_than
   (C++20)(C++20)(C++20)
   cmp_not_equalcmp_greatercmp_greater_than
   (C++20)(C++20)(C++20)
   in_range
   (C++20)
   Swap and type operations
   swap
   ranges::swap
   (C++20)
   exchange
   (C++14)
   declval
   (C++11)
   to_underlying
   (C++23)
   forward
   (C++11)
   forward_like
   (C++23)
   move
   (C++11)
   move_if_noexcept
   (C++11)
   as_const
   (C++17)
   Common vocabulary types
   pair
   tuple
   (C++11)
   optional
   (C++17)
   any
   (C++17)
   variant
   (C++17)
   tuple_size
   (C++11)
   tuple_element
   (C++11)
   apply
   (C++17)
   make_from_tuple
   (C++17)
   expected
   (C++23)
   Elementary string conversions
   to_chars
   (C++17)
   from_chars
   (C++17)
   chars_format
   (C++17)
   to_chars_result
   (C++17)
   from_chars_result
   (C++17)

   Dynamic memory management
   Uninitialized memory algorithms
   uninitialized_copy
   uninitialized_fill
   uninitialized_move
   (C++17)
   uninitialized_default_construct
   (C++17)
   uninitialized_value_construct
   (C++17)
   destroy
   (C++17)
   destroy_at
   (C++17)
   voidify
   (C++20)
   uninitialized_copy_n
   (C++11)
   uninitialized_fill_n
   uninitialized_move_n
   (C++17)
   uninitialized_default_construct_n
   (C++17)
   uninitialized_value_construct_n
   (C++17)
   destroy_n
   (C++17)
   construct_at
   (C++20)
   Constrained uninitialized memory algorithms
   ranges::uninitialized_copy
   (C++20)
   ranges::uninitialized_fill
   (C++20)
   ranges::uninitialized_move
   (C++20)
   ranges::construct_at
   (C++20)
   ranges::destroy
   (C++20)
   ranges::destroy_n
   (C++20)
   ranges::destroy_at
   (C++20)
   ranges::uninitialized_copy_n
   (C++20)
   ranges::uninitialized_fill_n
   (C++20)
   ranges::uninitialized_move_n
   (C++20)
   ranges::uninitialized_default_construct
   (C++20)
   ranges::uninitialized_value_construct
   (C++20)
   ranges::uninitialized_default_construct_n
   (C++20)
   ranges::uninitialized_value_construct_n
   (C++20)
   Allocators
   allocator
   allocator_traits
   (C++11)
   allocation_result
   (C++23)
   allocator_arg
   (C++11)
   uses_allocator
   (C++11)
   uses_allocator_construction_args
   (C++20)
   make_obj_using_allocator
   (C++20)
   uninitialized_construct_using_allocator
   (C++20)
   scoped_allocator_adaptor
   (C++11)
   pmr::polymorphic_allocator
   (C++17)
   Memory resources
   pmr::memory_resource
   (C++17)
   pmr::get_default_resource
   (C++17)
   pmr::set_default_resource
   (C++17)
   pmr::new_delete_resource
   (C++17)
   pmr::null_memory_resource
   (C++17)
   pmr::synchronized_pool_resource
   (C++17)
   pmr::unsynchronized_pool_resource
   (C++17)
   pmr::monotonic_buffer_resource
   (C++17)
   pmr::pool_options
   (C++17)
   Garbage collection support
   declare_reachable
   (C++11)(until C++23)
   undeclare_reachable
   (C++11)(until C++23)
   declare_no_pointers
   (C++11)(until C++23)
   undeclare_no_pointers
   (C++11)(until C++23)
   pointer_safety
   (C++11)(until C++23)
   get_pointer_safety
   (C++11)(until C++23)
   Uninitialized storage
   raw_storage_iterator
   (until C++20*)
   get_temporary_buffer
   (until C++20*)
   return_temporary_buffer
   (until C++20*)
   Explicit lifetime management
   start_lifetime_asstart_lifetime_as_array
   (C++23)(C++23)
   Smart pointers
   unique_ptr
   (C++11)
   shared_ptr
   (C++11)
   weak_ptr
   (C++11)
   auto_ptr
   (until C++17*)
   owner_less
   (C++11)
   owner_less<void>
   (C++17)
   owner_hash
   (C++26)
   owner_equal
   (C++26)
   enable_shared_from_this
   (C++11)
   bad_weak_ptr
   (C++11)
   default_delete
   (C++11)
   out_ptr_t
   (C++23)
   inout_ptr_t
   (C++23)
   Low level memory
   management
   operator new
   operator new[]
   operator delete
   operator delete[]
   get_new_handler
   set_new_handler
   launder
   (C++17)
   bad_alloc
   bad_array_new_length
   nothrow_t
   align_val_t
   destroying_delete_t
   new_handler
   nothrow
   Miscellaneous
   pointer_traits
   (C++11)
   to_address
   (C++20)
   addressof
   (C++11)
   align
   (C++11)
   assume_aligned
   (C++20)
   C Library
   malloc
   calloc
   realloc

   aligned_alloc
   (C++17)
   free

   std::shared_ptr
   Member functions
   shared_ptr::shared_ptr
   shared_ptr::~shared_ptr
   shared_ptr::operator=
   Modifiers
   shared_ptr::reset
   shared_ptr::swap
   Observers
   shared_ptr::get
   shared_ptr::operator*shared_ptr::operator->
   shared_ptr::operator[]
   (C++17)
   shared_ptr::use_count
   shared_ptr::unique
   (until C++20*)
   shared_ptr::operator bool
   shared_ptr::owner_before
   shared_ptr::owner_hash
   (C++26)
   shared_ptr::owner_equal
   (C++26)
   Non-member functions
   swap(std::shared_ptr)
   make_sharedmake_shared_for_overwrite
   (C++20)
   allocate_sharedallocate_shared_for_overwrite
   (C++20)
   static_pointer_castdynamic_pointer_castconst_pointer_castreinterpret_po
   inter_cast
   (C++17)
   get_deleter
   operator==operator!=operator<operator<=operator>operator>=operator<=>
   (until C++20)(until C++20)(until C++20)(until C++20)(until
   C++20)(C++20)
   operator<<
   atomic_xxx
   functions (until C++26*)
   atomic<std::shared_ptr>
   (C++20)
   hash<std::shared_ptr>
   Deduction guides(C++17)

   Defined in header <memory>
   Compare two shared_ptr objects.
   template< class T, class U >

   bool operator==( const std::shared_ptr<T>& lhs,
                    const std::shared_ptr<U>& rhs ) noexcept;
   (1) (since C++11)
   template< class T, class U >

   bool operator!=( const std::shared_ptr<T>& lhs,
                    const std::shared_ptr<U>& rhs ) noexcept;
   (2) (since C++11)
   (until C++20)
   template< class T, class U >

   bool operator<( const std::shared_ptr<T>& lhs,
                   const std::shared_ptr<U>& rhs ) noexcept;
   (3) (since C++11)
   (until C++20)
   template< class T, class U >

   bool operator>( const std::shared_ptr<T>& lhs,
                   const std::shared_ptr<U>& rhs ) noexcept;
   (4) (since C++11)
   (until C++20)
   template< class T, class U >

   bool operator<=( const std::shared_ptr<T>& lhs,
                    const std::shared_ptr<U>& rhs ) noexcept;
   (5) (since C++11)
   (until C++20)
   template< class T, class U >

   bool operator>=( const std::shared_ptr<T>& lhs,
                    const std::shared_ptr<U>& rhs ) noexcept;
   (6) (since C++11)
   (until C++20)
   template< class T, class U >

   std::strong_ordering operator<=>( const std::shared_ptr<T>& lhs,
                                     const std::shared_ptr<U>& rhs )
   noexcept;
   (7) (since C++20)
   Compare a shared_ptr with a null pointer.
   template< class T >
   bool operator==( const std::shared_ptr<T>& lhs, std::nullptr_t )
   noexcept;
   (8) (since C++11)
   template< class T >
   bool operator==( std::nullptr_t, const std::shared_ptr<T>& rhs )
   noexcept;
   (9) (since C++11)
   (until C++20)
   template< class T >
   bool operator!=( const std::shared_ptr<T>& lhs, std::nullptr_t )
   noexcept;
   (10) (since C++11)
   (until C++20)
   template< class T >
   bool operator!=( std::nullptr_t, const std::shared_ptr<T>& rhs )
   noexcept;
   (11) (since C++11)
   (until C++20)
   template< class T >
   bool operator<( const std::shared_ptr<T>& lhs, std::nullptr_t )
   noexcept;
   (12) (since C++11)
   (until C++20)
   template< class T >
   bool operator<( std::nullptr_t, const std::shared_ptr<T>& rhs )
   noexcept;
   (13) (since C++11)
   (until C++20)
   template< class T >
   bool operator>( const std::shared_ptr<T>& lhs, std::nullptr_t )
   noexcept;
   (14) (since C++11)
   (until C++20)
   template< class T >
   bool operator>( std::nullptr_t, const std::shared_ptr<T>& rhs )
   noexcept;
   (15) (since C++11)
   (until C++20)
   template< class T >
   bool operator<=( const std::shared_ptr<T>& lhs, std::nullptr_t )
   noexcept;
   (16) (since C++11)
   (until C++20)
   template< class T >
   bool operator<=( std::nullptr_t, const std::shared_ptr<T>& rhs )
   noexcept;
   (17) (since C++11)
   (until C++20)
   template< class T >
   bool operator>=( const std::shared_ptr<T>& lhs, std::nullptr_t )
   noexcept;
   (18) (since C++11)
   (until C++20)
   template< class T >
   bool operator>=( std::nullptr_t, const std::shared_ptr<T>& rhs )
   noexcept;
   (19) (since C++11)
   (until C++20)
   template< class T >

   std::strong_ordering operator<=>( const std::shared_ptr<T>& lhs,
                                     std::nullptr_t ) noexcept;
   (20) (since C++20)

   Compares two shared_ptr<T> objects or compares shared_ptr<T> with a
   null pointer.

   Note that the comparison operators for shared_ptr simply compare
   pointer values; the actual objects pointed to are not compared. Having
   operator< defined for shared_ptr allows shared_ptrs to be used as keys
   in associative containers, like std::map and std::set.

   The <, <=, >, >=, and != operators are synthesized from operator<=> and
   operator== respectively.
   (since C++20)

Parameters

   lhs - the left-hand shared_ptr to compare
   rhs - the right-hand shared_ptr to compare

Return value

   1) lhs.get() == rhs.get()
   2) !(lhs == rhs)
   3) std::less<V>()(lhs.get(), rhs.get()), where V is the composite
   pointer type of std::shared_ptr<T>::element_type* and
   std::shared_ptr<U>::element_type*.
   4) rhs < lhs
   5) !(rhs < lhs)
   6) !(lhs < rhs)
   7) std::compare_three_way{}(x.get(), y.get())
   8) !lhs
   9) !rhs
   10) (bool)lhs
   11) (bool)rhs
   12) std::less<std::shared_ptr<T>::element_type*>()(lhs.get(), nullptr)
   13) std::less<std::shared_ptr<T>::element_type*>()(nullptr, rhs.get())
   14) nullptr < lhs
   15) rhs < nullptr
   16) !(nullptr < lhs)
   17) !(rhs < nullptr)
   18) !(lhs < nullptr)
   19) !(nullptr < rhs)
   20) std::compare_three_way{}(x.get(),
   static_cast<std::shared_ptr<T>::element_type*>(nullptr))

Notes

   In all cases, it is the stored pointer (the one returned by get()) that
   is compared, rather than the managed pointer (the one passed to the
   deleter when use_count goes to zero). The two pointers may differ in a
   shared_ptr created using the aliasing constructor.

Example

   Run this code
#include <iostream>
#include <memory>

int main()
{
    std::shared_ptr<int> p1(new int(42));
    std::shared_ptr<int> p2(new int(42));

    std::cout << std::boolalpha
        << "(p1 == p1)       : " << (p1 == p1) << '\n'
        << "(p1 <=> p1) == 0 : " << ((p1 <=> p1) == 0) << '\n' // Since C++20

    // p1 and p2 point to different memory locations, so p1 != p2
        << "(p1 == p2)       : " << (p1 == p2) << '\n'
        << "(p1 < p2)        : " << (p1 < p2) << '\n'
        << "(p1 <=> p2) < 0  : " << ((p1 <=> p2) < 0) << '\n'   // Since C++20
        << "(p1 <=> p2) == 0 : " << ((p1 <=> p2) == 0) << '\n'; // Since C++20
}

   Possible output:
(p1 == p1)       : true
(p1 <=> p1) == 0 : true
(p1 == p2)       : false
(p1 < p2)        : true
(p1 <=> p2) < 0  : true
(p1 <=> p2) == 0 : false

Defect reports

   The following behavior-changing defect reports were applied
   retroactively to previously published C++ standards.
   DR Applied to Behavior as published Correct behavior
   LWG 3427 C++20 operator<=>(shared_ptr, nullptr_t) was ill-formed
   definition fixed

See also

   get
   returns the stored pointer
   (public member function)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/memory/shared_pt
   r/operator_cmp&oldid=153804"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 20 June 2023, at 11:26.
     * This page has been accessed 152,680 times.
