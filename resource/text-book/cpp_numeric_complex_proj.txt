std::proj(std::complex)

   From cppreference.com
   < cpp | numeric | complex

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Numerics library
   Common mathematical functions
   Mathematical special functions (C++17)
   Mathematical constants (C++20)
   Basic linear algebra algorithms (C++26)
   Floating-point environment (C++11)
   Complex numbers
   Numeric arrays
   Pseudo-random number generation
   Factor operations
   gcd
   (C++17)
   lcm
   (C++17)
   Interpolations
   midpoint
   (C++20)
   lerp
   (C++20)
   Saturation arithmetic
   add_sat
   (C++26)
   sub_sat
   (C++26)
   saturate_cast
   (C++26)
   mul_sat
   (C++26)
   div_sat
   (C++26)
   Generic numeric operations
   iota
   (C++11)
   ranges::iota
   (C++23)
   accumulate
   inner_product
   adjacent_difference
   partial_sum
   reduce
   (C++17)
   transform_reduce
   (C++17)
   inclusive_scan
   (C++17)
   exclusive_scan
   (C++17)
   transform_inclusive_scan
   (C++17)
   transform_exclusive_scan
   (C++17)
   Bit operations
   has_single_bit
   (C++20)
   bit_cast
   (C++20)
   bit_ceil
   (C++20)
   bit_floor
   (C++20)
   bit_width
   (C++20)
   rotl
   (C++20)
   rotr
   (C++20)
   popcount
   (C++20)
   countl_zero
   (C++20)
   countl_one
   (C++20)
   countr_zero
   (C++20)
   countr_one
   (C++20)
   byteswap
   (C++23)
   endian
   (C++20)

   std::complex
   Member functions
   complex::complex
   complex::operator=
   complex::real
   complex::imag
   complex::operator+=complex::operator-=complex::operator*=complex::opera
   tor/=
   Non-member functions
   operator+operator-
   operator+operator-operator*operator/
   operator==operator!=
   (until C++20)
   operator<<operator>>
   get(std::complex)
   (C++26)
   real
   imag
   abs
   arg
   norm
   conj
   proj
   (C++11)
   polar
   operator""ioperator""ifoperator""il
   (C++14)(C++14)(C++14)
   Exponential functions
   log

   log10

   exp
   Power functions
   pow

   sqrt
   Trigonometric functions
   sin

   cos
   tan
   asin
   (C++11)
   acos
   (C++11)
   atan
   (C++11)
   Hyperbolic functions
   sinh

   cosh
   tanh
   asinh
   (C++11)
   acosh
   (C++11)
   atanh
   (C++11)
   Helper types
   tuple_size<std::complex>
   (C++26)
   tuple_element<std::complex>
   (C++26)

   Defined in header <complex>
   template< class T >
   std::complex<T> proj( const std::complex<T>& z );
   (1)                                       (since C++11)
   Additional overloads (since C++11)
   Defined in header <complex>
                                             (A)
   std::complex<float>       proj( float f );

   std::complex<double>      proj( double f );
   std::complex<long double> proj( long double f );
                                                           (until C++23)
   template< class FloatingPoint >
   std::complex<FloatingPoint> proj( FloatingPoint f );
                                                           (since C++23)
   template< class Integer >
   std::complex<double> proj( Integer i );
   (B)
   1) Returns the projection of the complex number z onto the Riemann
   sphere.
   For most z, std::proj(z) == z, but all complex infinities, even the
   numbers where one component is infinite and the other is NaN, become
   positive real infinity, (INFINITY, 0.0) or (INFINITY, -0.0). The sign
   of the imaginary (zero) component is the sign of std::imag(z).
   A,B) Additional overloads are provided for all integer and
   floating-point types, which are treated as complex numbers with
   positive zero imaginary component.

Parameters

   z - complex value
   f - floating-point value
   i - integer value

Return value

   1) The projection of z onto the Riemann sphere.
   A) The projection of std::complex(f) onto the Riemann sphere.
   B) The projection of std::complex<double>(i) onto the Riemann sphere.

Notes

   The proj function helps model the Riemann sphere by mapping all
   infinities to one (give or take the sign of the imaginary zero), and
   should be used just before any operation, especially comparisons, that
   might give spurious results for any of the other infinities.

   The additional overloads are not required to be provided exactly as
   (A,B). They only need to be sufficient to ensure that for their
   argument num:
     * If num has a standard(until C++23) floating-point type T, then
       std::proj(num) has the same effect as
       std::proj(std::complex<T>(num)).
     * Otherwise, if num has an integer type, then std::proj(num) has the
       same effect as std::proj(std::complex<double>(num)).

Example

   Run this code
#include <complex>
#include <iostream>

int main()
{
    std::complex<double> c1(1, 2);
    std::cout << "proj" << c1 << " = " << std::proj(c1) << '\n';

    std::complex<double> c2(INFINITY, -1);
    std::cout << "proj" << c2 << " = " << std::proj(c2) << '\n';

    std::complex<double> c3(0, -INFINITY);
    std::cout << "proj" << c3 << " = " << std::proj(c3) << '\n';
}

   Output:
proj(1,2) = (1,2)
proj(inf,-1) = (inf,-0)
proj(0,-inf) = (inf,-0)

See also

   abs(std::complex)
   returns the magnitude of a complex number
   (function template)
   norm
   returns the squared magnitude
   (function template)
   polar
   constructs a complex number from magnitude and phase angle
   (function template)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/numeric/complex/
   proj&oldid=150886"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 22 April 2023, at 18:39.
     * This page has been accessed 29,562 times.
