std::jthread

   From cppreference.com
   < cpp | thread

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Concurrency support library
   Threads
   thread
   (C++11)
   jthread
   (C++20)
   stop_token
   (C++20)
   stop_source
   (C++20)
   stop_callback
   (C++20)
   hardware_destructive_interference_sizehardware_constructive_interferenc
   e_size
   (C++17)(C++17)
   this_thread namespace
   get_id
   (C++11)
   yield
   (C++11)
   sleep_for
   (C++11)
   sleep_until
   (C++11)
   Mutual exclusion
   mutex
   (C++11)
   recursive_mutex
   (C++11)
   shared_mutex
   (C++17)
   timed_mutex
   (C++11)
   recursive_timed_mutex
   (C++11)
   shared_timed_mutex
   (C++14)
   Generic lock management
   lock_guard
   (C++11)
   scoped_lock
   (C++17)
   unique_lock
   (C++11)
   shared_lock
   (C++14)
   defer_lock_ttry_to_lock_tadopt_lock_t
   (C++11)(C++11)(C++11)
   lock
   (C++11)
   try_lock
   (C++11)
   defer_locktry_to_lockadopt_lock
   (C++11)(C++11)(C++11)
   once_flag
   (C++11)
   call_once
   (C++11)
   Condition variables
   condition_variable
   (C++11)
   condition_variable_any
   (C++11)
   notify_all_at_thread_exit
   (C++11)
   cv_status
   (C++11)
   Semaphores
   counting_semaphorebinary_semaphore
   (C++20)(C++20)
   Latches and Barriers
   latch
   (C++20)
   barrier
   (C++20)
   Futures
   promise
   (C++11)
   future
   (C++11)
   shared_future
   (C++11)
   packaged_task
   (C++11)
   async
   (C++11)
   launch
   (C++11)
   future_status
   (C++11)
   future_error
   (C++11)
   future_category
   (C++11)
   future_errc
   (C++11)
   Safe Reclamation
   rcu_obj_base
   (C++26)
   rcu_domain
   (C++26)
   rcu_default_domain
   (C++26)
   rcu_synchronize
   (C++26)
   rcu_barrier
   (C++26)
   rcu_retire
   (C++26)
   Hazard Pointers
   hazard_pointer_obj_base
   (C++26)
   hazard_pointer
   (C++26)
   make_hazard_pointer
   (C++26)
   Atomic types
   atomic
   (C++11)
   atomic_ref
   (C++20)
   atomic_flag
   (C++11)
   Initialization of atomic types
   atomic_init
   (C++11)(deprecated in C++20)
   ATOMIC_VAR_INIT
   (C++11)(deprecated in C++20)
   ATOMIC_FLAG_INIT
   (C++11)
   Memory ordering
   memory_order
   (C++11)
   kill_dependency
   (C++11)
   atomic_thread_fence
   (C++11)
   atomic_signal_fence
   (C++11)
   Free functions for atomic operations
   atomic_storeatomic_store_explicit
   (C++11)(C++11)
   atomic_loadatomic_load_explicit
   (C++11)(C++11)
   atomic_exchangeatomic_exchange_explicit
   (C++11)(C++11)
   atomic_compare_exchange_weakatomic_compare_exchange_weak_explicitatomic
   _compare_exchange_strongatomic_compare_exchange_strong_explicit
   (C++11)(C++11)(C++11)(C++11)
   atomic_fetch_addatomic_fetch_add_explicit
   (C++11)(C++11)
   atomic_fetch_subatomic_fetch_sub_explicit
   (C++11)(C++11)
   atomic_fetch_andatomic_fetch_and_explicit
   (C++11)(C++11)
   atomic_fetch_oratomic_fetch_or_explicit
   (C++11)(C++11)
   atomic_fetch_xoratomic_fetch_xor_explicit
   (C++11)(C++11)
   atomic_fetch_maxatomic_fetch_max_explicit
   (C++26)(C++26)
   atomic_fetch_minatomic_fetch_min_explicit
   (C++26)(C++26)
   atomic_is_lock_free
   (C++11)
   atomic_waitatomic_wait_explicit
   (C++20)(C++20)
   atomic_notify_one
   (C++20)
   atomic_notify_all
   (C++20)
   Free functions for atomic flags
   atomic_flag_test_and_setatomic_flag_test_and_set_explicit
   (C++11)(C++11)
   atomic_flag_clearatomic_flag_clear_explicit
   (C++11)(C++11)
   atomic_flag_testatomic_flag_test_explicit
   (C++20)(C++20)
   atomic_flag_waitatomic_flag_wait_explicit
   (C++20)(C++20)
   atomic_flag_notify_one
   (C++20)
   atomic_flag_notify_all
   (C++20)

   std::jthread
   Member functions
   jthread::jthread
   jthread::~jthread
   jthread::operator=
   Observers
   jthread::joinable
   jthread::get_id
   jthread::native_handle
   jthread::hardware_concurrency
   Operations
   jthread::join
   jthread::detach
   jthread::swap
   Stop token handling
   jthread::get_stop_source
   jthread::get_stop_token
   jthread::request_stop
   Non-member functions
   swap(std::jthread)

   Defined in header <thread>
   class jthread;
                             (since C++20)

   The class jthread represents a single thread of execution. It has the
   same general behavior as std::thread, except that jthread automatically
   rejoins on destruction, and can be cancelled/stopped in certain
   situations.

   Threads begin execution immediately upon construction of the associated
   thread object (pending any OS scheduling delays), starting at the
   top-level function provided as a constructor argument. The return value
   of the top-level function is ignored and if it terminates by throwing
   an exception, std::terminate is called. The top-level function may
   communicate its return value or an exception to the caller via
   std::promise or by modifying shared variables (which may require
   synchronization, see std::mutex and std::atomic).

   Unlike std::thread, the jthread logically holds an internal private
   member of type std::stop_source, which maintains a shared stop-state.
   The jthread constructor accepts a function that takes a std::stop_token
   as its first argument, which will be passed in by the jthread from its
   internal std::stop_source. This allows the function to check if stop
   has been requested during its execution, and return if it has.

   std::jthread objects may also be in the state that does not represent
   any thread (after default construction, move from, detach, or join),
   and a thread of execution may be not associated with any jthread
   objects (after detach).

   No two std::jthread objects may represent the same thread of execution;
   std::jthread is not CopyConstructible or CopyAssignable, although it is
   MoveConstructible and MoveAssignable.

Member types

   Member type                    Definition
   id                             std::thread::id
   native_handle_type (optional*) std::thread::native_handle_type

Member functions

   (constructor)
   constructs new jthread object
   (public member function)
   (destructor)
   if the thread is joinable, then a stop is requested and the thread
   joins
   (public member function)
   operator=
   moves the jthread object
   (public member function)

Observers

   joinable
   checks whether the thread is joinable, i.e. potentially running in
   parallel context
   (public member function)
   get_id
   returns the id of the thread
   (public member function)
   native_handle
   returns the underlying implementation-defined thread handle
   (public member function)
   hardware_concurrency
   [static]
   returns the number of concurrent threads supported by the
   implementation
   (public static member function)

Operations

   join
   waits for the thread to finish its execution
   (public member function)
   detach
   permits the thread to execute independently from the thread handle
   (public member function)
   swap
   swaps two jthread objects
   (public member function)

Stop token handling

   get_stop_source
   returns a stop_source object associated with the shared stop state of
   the thread
   (public member function)
   get_stop_token
   returns a stop_token associated with the shared stop state of the
   thread
   (public member function)
   request_stop
   requests execution stop via the shared stop state of the thread
   (public member function)

Non-member functions

   swap(std::jthread)
   (C++20)
   specializes the std::swap algorithm
   (function)

Notes

   Feature-test macro  Value    Std              Feature
   __cpp_lib_jthread  201911L (C++20) Stop token and joining thread

See also

   thread
   (C++11)
   manages a separate thread
   (class)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/thread/jthread&o
   ldid=151008"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 26 April 2023, at 07:30.
     * This page has been accessed 325,473 times.
