std::ctype<CharT>::is, std::ctype<CharT>::do_is

   From cppreference.com
   < cpp | locale | ctype

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Localization library
   Locales and facets
   Locales
   has_facet
   use_facet
   locale
   Facet category base classes
   ctype_base
   codecvt_base
   messages_base

   time_base
   money_base
   ctype facets
   ctype
   ctype<char>
   ctype_byname
   codecvt
   codecvt_byname
   numeric facets
   num_get
   num_put
   numpunct
   numpunct_byname
   collate facets
   collate
   collate_byname
   time facets
   time_get
   time_put
   time_get_byname
   time_put_byname
   monetary facets
   money_get
   money_put
   moneypunct
   moneypunct_byname

   messages facets
   messages
   messages_byname
   Character classification and conversion
   Character classification
   isspace
   isblank
   (C++11)
   iscntrl
   isupper
   islower
   isalpha
   ispunct
   isdigit
   isxdigit
   isalnum
   isprint
   isgraph
   Character conversions
   toupper

   tolower
   String and stream conversions
   wstring_convert
   (C++11/17/26*)
   wbuffer_convert
   (C++11/17/26*)
   Text encoding identifications
   text_encoding
   (C++26)
   Unicode conversion facets
   codecvt_utf8
   (C++11/17/26*)
   codecvt_utf16
   (C++11/17/26*)
   codecvt_utf8_utf16
   (C++11/17/26*)
   codecvt_mode
   (C++11/17/26*)
   C library locales
   LC_ALLLC_COLLATELC_CTYPELC_MONETARYLC_NUMERICLC_TIME

   setlocale
   localeconv
   lconv

   std::ctype
   Member functions
   ctype::ctype
   ctype::~ctype
   ctype::isctype::do_is
   ctype::scan_isctype::do_scan_is
   ctype::scan_notctype::do_scan_not
   ctype::toupperctype::do_toupper
   ctype::tolowerctype::do_tolower
   ctype::widenctype::do_widen
   ctype::narrowctype::do_narrow
   Member functions of ctype<char>
   ctype<char>::ctype
   ctype<char>::~ctype
   ctype<char>::table
   ctype<char>::classic_table
   ctype<char>::is
   ctype<char>::scan_is
   ctype<char>::scan_not

   Defined in header <locale>
   public:
   bool is( mask m, CharT c ) const;
   (1)
   public:
   const CharT* is( const CharT* low, const CharT* high, mask* vec )
   const;
   (2)
   protected:
   virtual bool do_is( mask m, CharT c ) const;
   (3)
   protected:
   virtual const CharT* do_is( const CharT* low, const CharT* high, mask*
   vec ) const;
   (4)
   1,2) Public member function, calls the protected virtual member
   function do_is of the most derived class.
   3) Checks if the character c is classified by the mask m.
   4) For every character in the character array [low, high), identifies
   the complete classification mask (e.g. digit|xdigit|alnum|print|graph
   for the digit '0' in the default locale), and stores the masks in the
   corresponding elements of the array pointed to by vec.

Parameters

   c - character to classify
   m - mask to use for classifying a single character
   low - pointer to the first character in an array of characters to
   classify
   high - one past the end pointer for the array of characters to classify
   vec - pointer to the first element of the array of masks to fill

Return value

   1,3) true if c is classified by m.
   2,4) high

Example

   Run this code
#include <cstddef>
#include <iostream>
#include <locale>
#include <utility>
#include <vector>

// utility wrapper to make locale-bound facets destructible
template<class Facet>
struct deletable_facet : Facet
{
    template<class ...Args>
    deletable_facet(Args&& ...args) : Facet(std::forward<Args>(args)...) {}
    ~deletable_facet() {}
};

int main()
{
    // classify a single character using the default locale
    auto& f = std::use_facet<std::ctype<char>>(std::locale());
    char c = '0';
    if (f.is(std::ctype_base::digit, c)) // or isdigit(c, locale());
        std::cout << '\'' << c << "' is a digit\n";

    // classify every character in a string using a named locale
    deletable_facet<std::ctype_byname<wchar_t>> f2("en_US.utf8");
    std::wstring str = L"z\u00df\u6c34\U0001d10b";
    std::vector<std::ctype_base::mask> vec(str.size());
    f2.is(&str[0], &str[0] + str.size(), &vec[0]);

    for (std::size_t n = 0; n < str.size(); ++n)
    {
        std::cout << std::hex << "U+" << static_cast<wint_t>(str[n]) << " is: ";
        if (vec[n] & std::ctype_base::alnum)
            std::cout << "alnum";
        if (vec[n] & std::ctype_base::punct)
            std::cout << "punct";
        std::cout << '\n';
    }
}

   Output:
'0' is a digit
U+7a is: alnum
U+df is: alnum
U+6c34 is: alnum
U+1d10b is: punct

See also

   is
   classifies a character or a character sequence, using the
   classification table
   (public member function of std::ctype<char>)
   iswctype
   classifies a wide character according to the specified LC_CTYPE
   category
   (function)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/locale/ctype/is&
   oldid=160116"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 4 October 2023, at 06:11.
     * This page has been accessed 22,320 times.
