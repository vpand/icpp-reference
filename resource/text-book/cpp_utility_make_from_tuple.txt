std::make_from_tuple

   From cppreference.com
   < cpp | utility

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Utilities library
   Language support
   Type support (basic types, RTTI)
   Library feature-test macros (C++20)
   Dynamic memory management
   Program utilities
   Coroutine support (C++20)
   Variadic functions
   is_constant_evaluated
   (C++20)
   is_within_lifetime
   (C++26)
   initializer_list
   (C++11)
   source_location
   (C++20)
   Debugging support
   is_debugger_present
   (C++26)
   breakpoint_if_debugging
   (C++26)
   breakpoint
   (C++26)
   Three-way comparison
   three_way_comparablethree_way_comparable_with
   (C++20)(C++20)
   strong_ordering
   (C++20)
   weak_ordering
   (C++20)
   partial_ordering
   (C++20)
   common_comparison_category
   (C++20)
   compare_three_way_result
   (C++20)
   compare_three_way
   (C++20)
   strong_order
   (C++20)
   weak_order
   (C++20)
   partial_order
   (C++20)
   compare_strong_order_fallback
   (C++20)
   compare_weak_order_fallback
   (C++20)
   compare_partial_order_fallback
   (C++20)
   is_eqis_ltis_lteq
   (C++20)(C++20)(C++20)
   is_neqis_gtis_gteq
   (C++20)(C++20)(C++20)
   General utilities
   Date and time
   Function objects
   Formatting library (C++20)
   bitset
   hash
   (C++11)
   Relational operators (deprecated in C++20)
   rel_ops::operator!=rel_ops::operator>

   rel_ops::operator<=rel_ops::operator>=
   Integer comparison functions
   cmp_equalcmp_lesscmp_less_than
   (C++20)(C++20)(C++20)
   cmp_not_equalcmp_greatercmp_greater_than
   (C++20)(C++20)(C++20)
   in_range
   (C++20)
   Swap and type operations
   swap
   ranges::swap
   (C++20)
   exchange
   (C++14)
   declval
   (C++11)
   to_underlying
   (C++23)
   forward
   (C++11)
   forward_like
   (C++23)
   move
   (C++11)
   move_if_noexcept
   (C++11)
   as_const
   (C++17)
   Common vocabulary types
   pair
   tuple
   (C++11)
   optional
   (C++17)
   any
   (C++17)
   variant
   (C++17)
   tuple_size
   (C++11)
   tuple_element
   (C++11)
   apply
   (C++17)
   make_from_tuple
   (C++17)
   expected
   (C++23)
   Elementary string conversions
   to_chars
   (C++17)
   from_chars
   (C++17)
   chars_format
   (C++17)
   to_chars_result
   (C++17)
   from_chars_result
   (C++17)

   Defined in header <tuple>
   template< class T, class Tuple >
   constexpr T make_from_tuple( Tuple&& t );
   (since C++17)
   (until C++23)
   template< class T, tuple-like Tuple >
   constexpr T make_from_tuple( Tuple&& t );
                                        (since C++23)

   Construct an object of type T, using the elements of the tuple t as the
   arguments to the constructor.

   Given the exposition-only function /*make-from-tuple-impl*/ defined as
   follows:
   template<class T, tuple-like Tuple, std::size_t... I> // no constraint
   on Tuple before C++23
   constexpr T /*make-from-tuple-impl*/(Tuple&& t,
   std::index_sequence<I...>)
   {
       return T(std::get<I>(std::forward<Tuple>(t))...);
   }

   The effect is equivalent to:
   return /*make-from-tuple-impl*/<T>(
       std::forward<Tuple>(t),

   std::make_index_sequence<std::tuple_size_v<std::remove_reference_t<Tupl
   e>>>{}
   );.

   If
     * std::tuple_size_v<std::remove_reference_t<Tuple>> is 1 and
       std::reference_constructs_from_temporary_v<
           T, decltype(std::get<0>(std::declval<Tuple>()))> is true, or

   (since C++23)
     * std::is_constructible_v<T,
       decltype(std::get<I>(std::declval<Tuple>()))...> is false,

   the program is ill-formed.

Parameters

   t - tuple whose elements to be used as arguments to the constructor of
   T

Return value

   The constructed T object or reference.

Notes

   Tuple need not be std::tuple, and instead may be anything that supports
   std::get and std::tuple_size; in particular, std::array and std::pair
   may be used.
   (until C++23)

   Tuple is constrained to be tuple-like, i.e. each type therein is
   required to be a specialization of std::tuple or another type (such as
   std::array and std::pair) that models tuple-like.
   (since C++23)

   Due to guaranteed copy elision, T need not be movable.
      Feature-test macro      Value    Std         Feature
   __cpp_lib_make_from_tuple 201606L (C++17) std::make_from_tuple

Example

   Run this code
#include <iostream>
#include <tuple>

struct Foo
{
    Foo(int first, float second, int third)
    {
        std::cout << first << ", " << second << ", " << third << '\n';
    }
};

int main()
{
    auto tuple = std::make_tuple(42, 3.14f, 0);
    std::make_from_tuple<Foo>(std::move(tuple));
}

   Output:
42, 3.14, 0

Defect reports

   The following behavior-changing defect reports were applied
   retroactively to previously published C++ standards.
   DR Applied to Behavior as published Correct behavior
   LWG 3528 C++17 cast containing reinterpret_cast etc. was allowed in the
   case of 1-tuple prohibited

See also

   make_tuple
   (C++11)
   creates a tuple object of the type defined by the argument types
   (function template)
   forward_as_tuple
   (C++11)
   creates a tuple of forwarding references
   (function template)
   apply
   (C++17)
   calls a function with a tuple of arguments
   (function template)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/utility/make_fro
   m_tuple&oldid=157348"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 25 August 2023, at 14:17.
     * This page has been accessed 85,392 times.
