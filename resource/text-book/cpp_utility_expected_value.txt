std::expected<T,E>::value

   From cppreference.com
   < cpp | utility | expected

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Utilities library
   Language support
   Type support (basic types, RTTI)
   Library feature-test macros (C++20)
   Dynamic memory management
   Program utilities
   Coroutine support (C++20)
   Variadic functions
   is_constant_evaluated
   (C++20)
   is_within_lifetime
   (C++26)
   initializer_list
   (C++11)
   source_location
   (C++20)
   Debugging support
   is_debugger_present
   (C++26)
   breakpoint_if_debugging
   (C++26)
   breakpoint
   (C++26)
   Three-way comparison
   three_way_comparablethree_way_comparable_with
   (C++20)(C++20)
   strong_ordering
   (C++20)
   weak_ordering
   (C++20)
   partial_ordering
   (C++20)
   common_comparison_category
   (C++20)
   compare_three_way_result
   (C++20)
   compare_three_way
   (C++20)
   strong_order
   (C++20)
   weak_order
   (C++20)
   partial_order
   (C++20)
   compare_strong_order_fallback
   (C++20)
   compare_weak_order_fallback
   (C++20)
   compare_partial_order_fallback
   (C++20)
   is_eqis_ltis_lteq
   (C++20)(C++20)(C++20)
   is_neqis_gtis_gteq
   (C++20)(C++20)(C++20)
   General utilities
   Date and time
   Function objects
   Formatting library (C++20)
   bitset
   hash
   (C++11)
   Relational operators (deprecated in C++20)
   rel_ops::operator!=rel_ops::operator>

   rel_ops::operator<=rel_ops::operator>=
   Integer comparison functions
   cmp_equalcmp_lesscmp_less_than
   (C++20)(C++20)(C++20)
   cmp_not_equalcmp_greatercmp_greater_than
   (C++20)(C++20)(C++20)
   in_range
   (C++20)
   Swap and type operations
   swap
   ranges::swap
   (C++20)
   exchange
   (C++14)
   declval
   (C++11)
   to_underlying
   (C++23)
   forward
   (C++11)
   forward_like
   (C++23)
   move
   (C++11)
   move_if_noexcept
   (C++11)
   as_const
   (C++17)
   Common vocabulary types
   pair
   tuple
   (C++11)
   optional
   (C++17)
   any
   (C++17)
   variant
   (C++17)
   tuple_size
   (C++11)
   tuple_element
   (C++11)
   apply
   (C++17)
   make_from_tuple
   (C++17)
   expected
   (C++23)
   Elementary string conversions
   to_chars
   (C++17)
   from_chars
   (C++17)
   chars_format
   (C++17)
   to_chars_result
   (C++17)
   from_chars_result
   (C++17)

   std::expected
   Member functions
   expected::expected
   expected::~expected
   expected::operator=
   Observers
   expected::operator->expected::operator*
   expected::operator boolexpected::has_value
   expected::value
   expected::error
   expected::value_or
   Monadic operations
   expected::and_then
   expected::or_else
   expected::transform
   expected::transform_error
   Modifiers
   expected::emplace
   expected::swap
   Non-member functions
   operator==
   swap(std::expected)
   Helper classes
   unexpected
   bad_expected_access
   unexpect_tunexpect

   T is not (possibly cv-qualified) void
   constexpr T& value() &;
   (1)                                  (since C++23)
   constexpr const T& value() const&;
   (2)                                  (since C++23)
   constexpr T&& value() &&;
   (3)                                  (since C++23)
   constexpr const T&& value() const&&;
   (4)                                  (since C++23)
   T is (possibly cv-qualified) void
   constexpr void value() const&;
   (5)                                  (since C++23)
   constexpr void value() &&;
   (6)                                  (since C++23)

   If *this contains an expected value, returns a reference to the
   contained value. Returns nothing if T is (possibly cv-qualified) void.

   Otherwise, throws an exception of type
   std::bad_expected_access<std::decay_t<E>> that contains a copy of
   error().
   1,2) If std::is_copy_constructible_v<E> is false, the program is
   ill-formed.
   3,4) If std::is_copy_constructible_v<E> or std::is_constructible_v<E,
   decltype(std::move(error()))> is false, the program is ill-formed.
   5) If std::is_copy_constructible_v<E> is false, the program is
   ill-formed.
   6) If std::is_move_constructible_v<E> is false, the program is
   ill-formed.

Parameters

   (none)

Return value

   1-4) The expected value contained in *this.
   5,6) (none)

Exceptions

   1,2,5) Throws std::bad_expected_access(std::as_const(error())) if *this
   contains an unexpected value.
   3,4,6) Throws std::bad_expected_access(std::move(error())) if *this
   contains an unexpected value.

Example

   This section is incomplete
   Reason: no example

Defect reports

   The following behavior-changing defect reports were applied
   retroactively to previously published C++ standards.
   DR Applied to Behavior as published Correct behavior
   LWG 3940 C++23 E was not required to be copy/move-constructible for
   overloads (5,6) required

See also

   value_or
   returns the expected value if present, another value otherwise
   (public member function)
   operator->operator*
   accesses the expected value
   (public member function)
   error
   returns the unexpected value
   (public member function)
   bad_expected_access
   (C++23)
   exception indicating checked access to an expected that contains an
   unexpected value
   (class template)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/utility/expected
   /value&oldid=162323"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 8 November 2023, at 07:16.
     * This page has been accessed 14,054 times.
