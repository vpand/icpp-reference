std::experimental::filesystem::recursive_directory_iterator::operator++,
increment

   From cppreference.com
   < cpp | experimental | fs | recursive directory iterator

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Experimental
   Technical Specification
   Filesystem library (filesystem TS)
   Library fundamentals (library fundamentals TS)
   Library fundamentals 2 (library fundamentals TS v2)
   Library fundamentals 3 (library fundamentals TS v3)
   Extensions for parallelism (parallelism TS)
   Extensions for parallelism 2 (parallelism TS v2)
   Extensions for concurrency (concurrency TS)
   Extensions for concurrency 2 (concurrency TS v2)
   Concepts (concepts TS)
   Ranges (ranges TS)
   Reflection (reflection TS)
   Mathematical special functions (special functions TR)
   Experimental Non-TS
   Pattern Matching
   Linear Algebra
   std::execution
   Contracts
   2D Graphics

   Filesystem library
   Classes
   filesystem::path
   filesystem::filesystem_error
   filesystem::directory_entry
   filesystem::directory_iterator
   filesystem::recursive_directory_iterator
   filesystem::file_status
   filesystem::space_info
   filesystem::file_type
   filesystem::perms
   filesystem::copy_options
   filesystem::directory_options
   filesystem::file_time_type
   Functions
   filesystem::absolute
   filesystem::system_complete
   filesystem::canonical
   filesystem::copy
   filesystem::copy_file
   filesystem::copy_symlink
   filesystem::create_directory
   filesystem::create_directories
   filesystem::create_hard_link
   filesystem::create_symlink
   filesystem::create_directory_symlink
   filesystem::current_path
   filesystem::exists
   filesystem::equivalent
   filesystem::file_size
   filesystem::hard_link_count
   filesystem::last_write_time
   filesystem::permissions
   filesystem::read_symlink
   filesystem::remove
   filesystem::remove_all
   filesystem::rename
   filesystem::resize_file
   filesystem::space
   filesystem::status
   filesystem::symlink_status
   filesystem::temp_directory_path
   File types
   filesystem::is_block_file
   filesystem::is_character_file
   filesystem::is_directory
   filesystem::is_empty
   filesystem::status_known
   filesystem::is_fifo
   filesystem::is_other
   filesystem::is_regular_file
   filesystem::is_socket
   filesystem::is_symlink

   recursive_directory_iterator
   Member functions
   recursive_directory_iterator::recursive_directory_iterator
   recursive_directory_iterator::operator*recursive_directory_iterator::op
   erator->
   recursive_directory_iterator::options
   recursive_directory_iterator::depth
   recursive_directory_iterator::recursion_pending
   recursive_directory_iterator::operator=
   recursive_directory_iterator::incrementrecursive_directory_iterator::op
   erator++
   recursive_directory_iterator::pop
   recursive_directory_iterator::disable_recursion_pending
   Non-member functions
   begin(recursive_directory_iterator)end(recursive_directory_iterator)

   recursive_directory_iterator& operator++();
                                                             (filesystem TS)
   recursive_directory_iterator& increment( error_code& ec );
                                                             (filesystem TS)

   Advances the iterator to the next entry.

   If there are no more entries left in the currently iterated directory,
   the iteration is resumed over the parent directory. The process is
   repeated if the parent directory has no sibling entries that can to be
   iterated on. If the parent of the directory hierarchy that has been
   recursively iterated on is reached (there are no candidate entries at
   depth() == 0), *this is set to an end iterator.

   Otherwise, if *this refers to a directory, it is iterated into if the
   following conditions are met:
     * disable_recursion_pending() has not been called before this
       increment, i.e. recursion_pending() == true.
     * The directory is not a symlink or following symlinks is enabled,
       i.e.

          !is_symlink(this->symlink_status()) ||
              (options() & directory_options::follow_directory_symlink) !=
          0).

Parameters

   ec - error code to store the error status to

Return value

   *this

Exceptions

   1) filesystem_error if an error occurs. The error code is set to an
   appropriate error code for the error that caused the failure.
   2)
   noexcept specification:
   noexcept

   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/experimental/fs/
   recursive_directory_iterator/increment&oldid=154943"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 16 July 2023, at 15:36.
     * This page has been accessed 10,646 times.
