std::tuple

   From cppreference.com
   < cpp | utility

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Utilities library
   Language support
   Type support (basic types, RTTI)
   Library feature-test macros (C++20)
   Dynamic memory management
   Program utilities
   Coroutine support (C++20)
   Variadic functions
   is_constant_evaluated
   (C++20)
   is_within_lifetime
   (C++26)
   initializer_list
   (C++11)
   source_location
   (C++20)
   Debugging support
   is_debugger_present
   (C++26)
   breakpoint_if_debugging
   (C++26)
   breakpoint
   (C++26)
   Three-way comparison
   three_way_comparablethree_way_comparable_with
   (C++20)(C++20)
   strong_ordering
   (C++20)
   weak_ordering
   (C++20)
   partial_ordering
   (C++20)
   common_comparison_category
   (C++20)
   compare_three_way_result
   (C++20)
   compare_three_way
   (C++20)
   strong_order
   (C++20)
   weak_order
   (C++20)
   partial_order
   (C++20)
   compare_strong_order_fallback
   (C++20)
   compare_weak_order_fallback
   (C++20)
   compare_partial_order_fallback
   (C++20)
   is_eqis_ltis_lteq
   (C++20)(C++20)(C++20)
   is_neqis_gtis_gteq
   (C++20)(C++20)(C++20)
   General utilities
   Date and time
   Function objects
   Formatting library (C++20)
   bitset
   hash
   (C++11)
   Relational operators (deprecated in C++20)
   rel_ops::operator!=rel_ops::operator>

   rel_ops::operator<=rel_ops::operator>=
   Integer comparison functions
   cmp_equalcmp_lesscmp_less_than
   (C++20)(C++20)(C++20)
   cmp_not_equalcmp_greatercmp_greater_than
   (C++20)(C++20)(C++20)
   in_range
   (C++20)
   Swap and type operations
   swap
   ranges::swap
   (C++20)
   exchange
   (C++14)
   declval
   (C++11)
   to_underlying
   (C++23)
   forward
   (C++11)
   forward_like
   (C++23)
   move
   (C++11)
   move_if_noexcept
   (C++11)
   as_const
   (C++17)
   Common vocabulary types
   pair
   tuple
   (C++11)
   optional
   (C++17)
   any
   (C++17)
   variant
   (C++17)
   tuple_size
   (C++11)
   tuple_element
   (C++11)
   apply
   (C++17)
   make_from_tuple
   (C++17)
   expected
   (C++23)
   Elementary string conversions
   to_chars
   (C++17)
   from_chars
   (C++17)
   chars_format
   (C++17)
   to_chars_result
   (C++17)
   from_chars_result
   (C++17)

   std::tuple
   Member functions
   tuple::tuple
   tuple::operator=
   tuple::swap
   Non-member functions
   make_tuple
   tie
   forward_as_tuple
   tuple_cat
   operator==operator!=operator<operator<=operator>operator>=operator<=>
   (until C++20)(until C++20)(until C++20)(until C++20)(until
   C++20)(C++20)
   swap(std::tuple)
   get(std::tuple)
   Helper concepts
   tuple-like
   (C++23)
   Helper classes
   tuple_size<std::tuple>
   tuple_element<std::tuple>
   uses_allocator<std::tuple>
   basic_common_reference<std::tuple>
   (C++23)
   common_type<std::tuple>
   (C++23)
   formatter<std::tuple>
   (C++23)
   ignore
   Deduction guides(C++17)

   Defined in header <tuple>
   template< class... Types >
   class tuple;
                             (since C++11)

   Class template std::tuple is a fixed-size collection of heterogeneous
   values. It is a generalization of std::pair.

   If std::is_trivially_destructible<Ti>::value is true for every Ti in
   Types, the destructor of std::tuple is trivial.

   If a program declares an explicit or partial specialization of
   std::tuple, the program is ill-formed, no diagnostic required.

Template parameters

   Types... - the types of the elements that the tuple stores. Empty list
   is supported.

Member functions

   (constructor)
   constructs a new tuple
   (public member function)
   operator=
   assigns the contents of one tuple to another
   (public member function)
   swap
   swaps the contents of two tuples
   (public member function)

Non-member functions

   make_tuple
   (C++11)
   creates a tuple object of the type defined by the argument types
   (function template)
   tie
   (C++11)
   creates a tuple of lvalue references or unpacks a tuple into individual
   objects
   (function template)
   forward_as_tuple
   (C++11)
   creates a tuple of forwarding references
   (function template)
   tuple_cat
   (C++11)
   creates a tuple by concatenating any number of tuples
   (function template)
   get(std::tuple)
   (C++11)
   tuple accesses specified element
   (function template)
   operator==operator!=operator<operator<=operator>operator>=operator<=>
   (removed in C++20)(removed in C++20)(removed in C++20)(removed in
   C++20)(removed in C++20)(C++20)
   lexicographically compares the values in the tuple
   (function template)
   std::swap(std::tuple)
   (C++11)
   specializes the std::swap algorithm
   (function template)

Helper concepts

   tuple-likepair-like
   (C++23)
   specifies that a type implemented the tuple protocol
   (std::get, std::tuple_element, std::tuple_size)
   (exposition-only concept*)

Helper classes

   std::tuple_size<std::tuple>
   (C++11)
   obtains the size of tuple at compile time
   (class template specialization)
   std::tuple_element<std::tuple>
   (C++11)
   obtains the type of the specified element
   (class template specialization)
   std::uses_allocator<std::tuple>
   (C++11)
   specializes the std::uses_allocator type trait
   (class template specialization)
   std::basic_common_reference<tuple-like>
   (C++23)
   determines the common reference type of a tuple and a tuple-like type
   (class template specialization)
   std::common_type<tuple-like>
   (C++23)
   determines the common type of a tuple and a tuple-like type
   (class template specialization)
   std::formatter<std::tuple>
   (C++23)
   formatting support for tuple
   (class template specialization)
   ignore
   (C++11)
   placeholder to skip an element when unpacking a tuple using tie
   (constant)

Deduction guides (since C++17)

Notes

   Since the "shape" of a tuple - its size, the types of its elements, and
   the ordering of those types - are part of its type signature, they must
   all be available at compile time and can only depend on other
   compile-time information. This means that many conditional operations
   on tuples - in particular, conditional prepend/append and filter - are
   only possible if the conditions can be evaluated at compile time. For
   example, given a std::tuple<int, double, int>, it is possible to filter
   on types - e.g. returning a std::tuple<int, int> - but not to filter on
   whether or not each element is positive (which would have a different
   type signature depending on runtime values of the tuple), unless all
   the elements were themselves constexpr.

   As a workaround, one can work with tuples of std::optional, but there
   is still no way to adjust the size based on runtime information.

   Until N4387 (applied as a defect report for C++11), a function could
   not return a tuple using copy-list-initialization:
std::tuple<int, int> foo_tuple()
{
    return {1, -1};  // Error until N4387
    return std::tuple<int, int>{1, -1}; // Always works
    return std::make_tuple(1, -1); // Always works
}

Example

   Run this code
#include <iostream>
#include <stdexcept>
#include <string>
#include <tuple>

std::tuple<double, char, std::string> get_student(int id)
{
    switch (id)
    {
        case 0: return {3.8, 'A', "Lisa Simpson"};
        case 1: return {2.9, 'C', "Milhouse Van Houten"};
        case 2: return {1.7, 'D', "Ralph Wiggum"};
        case 3: return {0.6, 'F', "Bart Simpson"};
    }

    throw std::invalid_argument("id");
}

int main()
{
    const auto student0 = get_student(0);
    std::cout << "ID: 0, "
              << "GPA: " << std::get<0>(student0) << ", "
              << "grade: " << std::get<1>(student0) << ", "
              << "name: " << std::get<2>(student0) << '\n';

    const auto student1 = get_student(1);
    std::cout << "ID: 1, "
              << "GPA: " << std::get<double>(student1) << ", "
              << "grade: " << std::get<char>(student1) << ", "
              << "name: " << std::get<std::string>(student1) << '\n';

    double gpa2;
    char grade2;
    std::string name2;
    std::tie(gpa2, grade2, name2) = get_student(2);
    std::cout << "ID: 2, "
              << "GPA: " << gpa2 << ", "
              << "grade: " << grade2 << ", "
              << "name: " << name2 << '\n';

    // C++17 structured binding:
    const auto [gpa3, grade3, name3] = get_student(3);
    std::cout << "ID: 3, "
              << "GPA: " << gpa3 << ", "
              << "grade: " << grade3 << ", "
              << "name: " << name3 << '\n';
}

   Output:
ID: 0, GPA: 3.8, grade: A, name: Lisa Simpson
ID: 1, GPA: 2.9, grade: C, name: Milhouse Van Houten
ID: 2, GPA: 1.7, grade: D, name: Ralph Wiggum
ID: 3, GPA: 0.6, grade: F, name: Bart Simpson

Defect reports

   The following behavior-changing defect reports were applied
   retroactively to previously published C++ standards.
   DR Applied to Behavior as published Correct behavior
   LWG 2796 C++11 triviality of the destructor of std::tuple was
   unspecified specified
   LWG 3990 C++11 a program could declare an explicit or
   partial specialization of std::tuple the program is ill-formed in this
   case (no diagnostic required)

References

     * C++23 standard (ISO/IEC 14882:2023):

          + 22.4 Tuples [tuple]

     * C++20 standard (ISO/IEC 14882:2020):

          + 20.5 Tuples [tuple]

     * C++17 standard (ISO/IEC 14882:2017):

          + 23.5 Tuples [tuple]

     * C++14 standard (ISO/IEC 14882:2014):

          + 20.4 Tuples [tuple]

     * C++11 standard (ISO/IEC 14882:2011):

          + 20.4 Tuples [tuple]

See also

   pair
   implements binary tuple, i.e. a pair of values
   (class template)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/utility/tuple&ol
   did=170666"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 6 April 2024, at 09:21.
     * This page has been accessed 2,723,207 times.
