operator==(std::expected)

   From cppreference.com
   < cpp | utility | expected

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Utilities library
   Language support
   Type support (basic types, RTTI)
   Library feature-test macros (C++20)
   Dynamic memory management
   Program utilities
   Coroutine support (C++20)
   Variadic functions
   is_constant_evaluated
   (C++20)
   is_within_lifetime
   (C++26)
   initializer_list
   (C++11)
   source_location
   (C++20)
   Debugging support
   is_debugger_present
   (C++26)
   breakpoint_if_debugging
   (C++26)
   breakpoint
   (C++26)
   Three-way comparison
   three_way_comparablethree_way_comparable_with
   (C++20)(C++20)
   strong_ordering
   (C++20)
   weak_ordering
   (C++20)
   partial_ordering
   (C++20)
   common_comparison_category
   (C++20)
   compare_three_way_result
   (C++20)
   compare_three_way
   (C++20)
   strong_order
   (C++20)
   weak_order
   (C++20)
   partial_order
   (C++20)
   compare_strong_order_fallback
   (C++20)
   compare_weak_order_fallback
   (C++20)
   compare_partial_order_fallback
   (C++20)
   is_eqis_ltis_lteq
   (C++20)(C++20)(C++20)
   is_neqis_gtis_gteq
   (C++20)(C++20)(C++20)
   General utilities
   Date and time
   Function objects
   Formatting library (C++20)
   bitset
   hash
   (C++11)
   Relational operators (deprecated in C++20)
   rel_ops::operator!=rel_ops::operator>

   rel_ops::operator<=rel_ops::operator>=
   Integer comparison functions
   cmp_equalcmp_lesscmp_less_than
   (C++20)(C++20)(C++20)
   cmp_not_equalcmp_greatercmp_greater_than
   (C++20)(C++20)(C++20)
   in_range
   (C++20)
   Swap and type operations
   swap
   ranges::swap
   (C++20)
   exchange
   (C++14)
   declval
   (C++11)
   to_underlying
   (C++23)
   forward
   (C++11)
   forward_like
   (C++23)
   move
   (C++11)
   move_if_noexcept
   (C++11)
   as_const
   (C++17)
   Common vocabulary types
   pair
   tuple
   (C++11)
   optional
   (C++17)
   any
   (C++17)
   variant
   (C++17)
   tuple_size
   (C++11)
   tuple_element
   (C++11)
   apply
   (C++17)
   make_from_tuple
   (C++17)
   expected
   (C++23)
   Elementary string conversions
   to_chars
   (C++17)
   from_chars
   (C++17)
   chars_format
   (C++17)
   to_chars_result
   (C++17)
   from_chars_result
   (C++17)

   std::expected
   Member functions
   expected::expected
   expected::~expected
   expected::operator=
   Observers
   expected::operator->expected::operator*
   expected::operator boolexpected::has_value
   expected::value
   expected::error
   expected::value_or
   Monadic operations
   expected::and_then
   expected::or_else
   expected::transform
   expected::transform_error
   Modifiers
   expected::emplace
   expected::swap
   Non-member functions
   operator==
   swap(std::expected)
   Helper classes
   unexpected
   bad_expected_access
   unexpect_tunexpect

   template< class T2, class E2 >

     requires (!std::is_void_v<T2>)
   friend constexpr bool operator==( const expected& lhs,
                                     const std::expected<T2, E2>& rhs );
   (1) (since C++23)
   (T is not cv void)
   template< class T2, class E2 >

     requires std::is_void_v<T2>
   friend constexpr bool operator==( const expected& lhs,
                                     const std::expected<T2, E2>& rhs );
   (2) (since C++23)
   (T is cv void)
   template< class T2 >
   friend constexpr bool operator==( const expected& x, const T2& val );
   (3) (since C++23)
   (T is not cv void)
   template< class E2 >

   friend constexpr bool operator==( const expected& x,
                                     const unexpected<E2>& e );
   (4) (since C++23)

   Performs comparison operations on expected objects.
   1,2) Compares two expected objects. The objects compare equal if and
   only if lhs.has_value() and rhs.has_value() are equal, and the
   contained values are equal.
     * For overload (1), if the expressions *lhs == *rhs and lhs.error()
       == rhs.error() are not well-formed, or if their results are not
       convertible to bool, the program is ill-formed.
     * For overload (2), if the expressions lhs.error() == rhs.error() is
       not well-formed, or if its result is not convertible to bool, the
       program is ill-formed.

   3) Compares expected object with a value. The objects compare equal if
   and only if x contains an expected value, and the contained value is
   equal to val.
     * If the expression *x == val is not well-formed, or if its result is
       not convertible to bool, the program is ill-formed.

   4) Compares expected object with an unexpected value. The objects
   compare equal if and only if x contains an unexpected value, and the
   contained value is equal to e.error().
     * If the expression x.error() == e.error() is not well-formed, or if
       its result is not convertible to bool, the program is ill-formed.

   These functions are not visible to ordinary unqualified or qualified
   lookup, and can only be found by argument-dependent lookup when
   std::expected<T, E> is an associated class of the arguments.

   The != operator is synthesized from operator==.

Parameters

   lhs, rhs, x - expected object to compare
   val         - value to compare to the expected value contained in x
   e           - value to compare to the unexpected value contained in x

Return value

   1) If lhs.has_value() != rhs.has_value(), returns false. Otherwise, if
   lhs.has_value() is true, returns *lhs == *rhs. Otherwise, returns
   lhs.error() ==  rhs.error().
   2) If lhs.has_value() != rhs.has_value(), returns false. Otherwise, if
   lhs.has_value() is true, returns true. Otherwise, returns lhs.error()
   ==  rhs.error().
   3) Returns x.has_value() && static_cast<bool>(*x == val).
   4) Returns !x.has_value() && static_cast<bool>(x.error() == e.error()).

Exceptions

   Throws when and what the comparison throws.

Example

   This section is incomplete
   Reason: no example

See also

   unexpected
   (C++23)
   represented as an unexpected value
   (class template)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/utility/expected
   /operator_cmp&oldid=150821"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 21 April 2023, at 07:45.
     * This page has been accessed 5,472 times.
