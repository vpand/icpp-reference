std::filesystem::filesystem_error

   From cppreference.com
   < cpp | filesystem

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Filesystem library
   Classes
   filesystem::path
   filesystem::filesystem_error
   filesystem::directory_entry
   filesystem::directory_iterator
   filesystem::recursive_directory_iterator

   filesystem::file_status
   filesystem::space_info
   filesystem::file_type
   filesystem::perms
   filesystem::perm_options
   filesystem::copy_options
   filesystem::directory_options
   filesystem::file_time_type
   Functions
   filesystem::absolute
   filesystem::canonicalfilesystem::weakly_canonical
   filesystem::relativefilesystem::proximate
   filesystem::copy
   filesystem::copy_file
   filesystem::copy_symlink
   filesystem::create_directory
   filesystem::create_directories
   filesystem::create_hard_link
   filesystem::create_symlink
   filesystem::create_directory_symlink
   filesystem::current_path
   filesystem::exists
   filesystem::equivalent
   filesystem::file_size
   filesystem::hard_link_count
   filesystem::last_write_time
   filesystem::permissions
   filesystem::read_symlink
   filesystem::remove
   filesystem::remove_all
   filesystem::rename
   filesystem::resize_file
   filesystem::space
   filesystem::status
   filesystem::symlink_status
   filesystem::temp_directory_path
   File types
   filesystem::is_block_file
   filesystem::is_character_file
   filesystem::is_directory
   filesystem::is_empty
   filesystem::status_known
   filesystem::is_fifo
   filesystem::is_other
   filesystem::is_regular_file
   filesystem::is_socket
   filesystem::is_symlink

   filesystem_error
   Member functions
   filesystem_error::filesystem_error
   filesystem_error::operator=
   filesystem_error::path1filesystem_error::path2
   filesystem_error::what
   Inherited from std::system_error
   system_error::code

   Defined in header <filesystem>
   class filesystem_error;
                                 (since C++17)

   The class std::filesystem::filesystem_error defines an exception object
   that is thrown on failure by the throwing overloads of the functions in
   the filesystem library.
   std-filesystem-filesystem error-inheritance.svg

   Inheritance diagram

Member functions

   (constructor)
   constructs the exception object
   (public member function)
   operator=
   replaces the exception object
   (public member function)
   path1path2
   returns the paths that were involved in the operation that caused the
   error
   (public member function)
   what
   returns the explanatory string
   (public member function)

Inherited from std::system_error

Member functions

   code
   returns error code
   (public member function of std::system_error)
   what
   [virtual]
   returns an explanatory string
   (virtual public member function of std::system_error)

Inherited from std::runtime_error

Inherited from std::exception

Member functions

   (destructor)
   [virtual]
   destroys the exception object
   (virtual public member function of std::exception)
   what
   [virtual]
   returns an explanatory string
   (virtual public member function of std::exception)

Notes

   In order to ensure that copy functions of filesystem_error are
   noexcept, typical implementations store an object holding the return
   value of what() and two std::filesystem::path objects referenced by
   path1() and path2() respectively in a separately-allocated
   reference-counted storage.

   Currently the MS STL implementation is non-conforming: objects
   mentioned above are stored directly in the filesystem object, which
   makes the copy functions not noexcept.

Example

   Run this code
#include <filesystem>
#include <iostream>
#include <system_error>

int main()
{
    const std::filesystem::path from{"/none1/a"}, to{"/none2/b"};

    try
    {
        std::filesystem::copy_file(from, to); // throws: files do not exist
    }
    catch (std::filesystem::filesystem_error const& ex)
    {
        std::cout << "what():  " << ex.what() << '\n'
                  << "path1(): " << ex.path1() << '\n'
                  << "path2(): " << ex.path2() << '\n'
                  << "code().value():    " << ex.code().value() << '\n'
                  << "code().message():  " << ex.code().message() << '\n'
                  << "code().category(): " << ex.code().category().name() << '\n
';
    }

    // All functions have non-throwing equivalents
    std::error_code ec;
    std::filesystem::copy_file(from, to, ec); // does not throw
    std::cout << "\nNon-throwing form sets error_code: " << ec.message() << '\n'
;
}

   Possible output:
what():  filesystem error: cannot copy file: No such file or directory [/none1/a
] [/none2/b]
path1(): "/none1/a"
path2(): "/none2/b"
code().value():    2
code().message():  No such file or directory
code().category(): generic

Non-throwing form sets error_code: No such file or directory

   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/filesystem/files
   ystem_error&oldid=158002"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 5 September 2023, at 10:39.
     * This page has been accessed 117,881 times.
