Exposition-only Symbol Index

   From cppreference.com
   < cpp | symbol index

   C++

   Symbol Index
   std
   std::chrono
   (C++11)
   std::execution
   (C++17)
   std::filesystem
   (C++17)
   std::literals
   (C++14)
   std::numbers
   (C++20)
   std::placeholders
   (C++11)
   std::pmr
   (C++17)
   std::ranges
   (C++20)
   std::regex_constants
   (C++11)
   std::rel_ops
   (deprecated in C++20)
   std::this_thread
   (C++11)
   Macros
   Removed symbols (Zombie names)
   Exposition-only symbols

   This page tries to list all the exposition-only symbols that are
   defined in the standards. Their definitions are only provided for
   exposition: such definitions are not actually present in
   implementations. The symbols are written as follows:
     * Function names with ().
     * Templates with <>.

     A B C D E F G H I J K L M N O P Q R S T U V W X Y Z

   This section is incomplete
   Reason: Link the following symbols to their corresponding pages. The
   symbol list may not be accurate: some symbols may be missing, and some
   symbols in the list may have little value to be linked.

A

   advanceable<>
   all-bidirectional<>
   all-forward<>
   all-random-access<>
   as-lvalue<>()
   atexit-handler

B

   bidirectional-common<>
   bitmask
   boolean-testable<>
   boolean-testable-impl<>

C

   c-atexit-handler
   c-compare-pred
   can-reference<>
   cartesian-is-sized-sentinel<>
   cartesian-product-common-arg<>
   cartesian-product-is-bidirectional<>
   cartesian-product-is-common<>
   cartesian-product-is-random-access<>
   cartesian-product-is-sized<>
   compare-pred
   compares-as<>
   comparison-common-type-with<>
   comparison-common-type-with-impl<>
   compatible-joinable-ranges<>
   cond-value-type<>
   const-formattable-range<>
   constant-iterator<>
   container-compatible-range<>
   container-insertable<>
   container-inserter<>
   convertible-to-non-slicing<>
   converts-from-any-cvref<>
   cpp17-bidirectional-iterator<>
   cpp17-forward-iterator<>
   cpp17-input-iterator<>
   cpp17-iterator<>
   cpp17-random-access-iterator<>

D

   decay-copy<>()
   decrementable<>
   dereferenceable<>
   different-from<>
   div-ceil<>()

E

F

   fmt-maybe-const<>
   format-arg-store<>
   formattable-with<>

G

H

   has-arrow<>
   has-elem-type<>
   has-member-element-type<>
   has-member-value-type<>
   has-tuple-element<>

I

   index-type
   indirect-value-t<>
   indirectly-binary-left-foldable<>
   indirectly-binary-left-foldable-impl<>
   indirectly-binary-right-foldable<>
   indirectly-readable-impl<>
   input-iterator<>
   insert-return-type<>
   integer-like-with-usable-difference-type<>
   is-callable-from<>
   is-default-initializable<>
   is-derived-from-optional<>
   is-derived-from-view-interface<>
   is-extents<>
   is-initializer-list<>
   is-integer-like<>
   is-ref-wrapper<>
   is-signed-integer-like<>
   is-vector-bool-reference<>
   iter-key-type<>
   iter-mapped-type<>
   iter-to-alloc-type<>
   iter-value-type<>

J

K

L

   layout-mapping-alike<>
   local-time-format-t<>

M

   maybe-const<>
   maybe-const-adaptor
   maybe-const-container
   maybe-const-map
   maybe-const-r
   maybe-const-set
   movable-box<>

N

   ncmp
   node-handle<>
   non-propagating-cache<>
   not-a-const-iterator<>
   nothrow-forward-iterator<>
   nothrow-forward-range<>
   nothrow-input-iterator<>
   nothrow-input-range<>
   nothrow-sentinel-for<>

O

   ord

P

   pair-like<>
   pair-like-convertible-from<>
   partially-ordered-with<>
   possibly-const-range<>
   ptr-traits-elem<>

Q

R

   range-default-formatter<>
   range-key-type<>
   range-mapped-type<>
   range-to-alloc-type<>
   range-with-movable-references<>
   ref-wrap-common-reference-exists-with<>
   reinit-expected<>
   require-constant<>
   reservable-container<>
   returnable-element<>

S

   same-as-impl<>
   signal-handler
   simple-view<>
   slide-caches-first<>
   slide-caches-last<>
   slide-caches-nothing<>
   stream-extractable<>
   synth-three-way
   synth-three-way-result<>

T

   tiny-range<>
   tuple-for-each<>()
   tuple-like<>
   tuple-transform<>()

U

   uses-nonqualification-pointer-conversion<>

V

   voidify<>()

W

   weakly-equality-comparable-with<>
   with-reference<>

X

Y

Z

   zip-is-common<>
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/symbol_index/exp
   os&oldid=152322"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 26 May 2023, at 02:48.
     * This page has been accessed 2,211 times.
