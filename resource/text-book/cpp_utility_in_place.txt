std::in_place, std::in_place_type, std::in_place_index, std::in_place_t,
std::in_place_type_t, std::in_place_index_t

   From cppreference.com
   < cpp | utility

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Utilities library
   Language support
   Type support (basic types, RTTI)
   Library feature-test macros (C++20)
   Dynamic memory management
   Program utilities
   Coroutine support (C++20)
   Variadic functions
   is_constant_evaluated
   (C++20)
   is_within_lifetime
   (C++26)
   initializer_list
   (C++11)
   source_location
   (C++20)
   Debugging support
   is_debugger_present
   (C++26)
   breakpoint_if_debugging
   (C++26)
   breakpoint
   (C++26)
   Three-way comparison
   three_way_comparablethree_way_comparable_with
   (C++20)(C++20)
   strong_ordering
   (C++20)
   weak_ordering
   (C++20)
   partial_ordering
   (C++20)
   common_comparison_category
   (C++20)
   compare_three_way_result
   (C++20)
   compare_three_way
   (C++20)
   strong_order
   (C++20)
   weak_order
   (C++20)
   partial_order
   (C++20)
   compare_strong_order_fallback
   (C++20)
   compare_weak_order_fallback
   (C++20)
   compare_partial_order_fallback
   (C++20)
   is_eqis_ltis_lteq
   (C++20)(C++20)(C++20)
   is_neqis_gtis_gteq
   (C++20)(C++20)(C++20)
   General utilities
   Date and time
   Function objects
   Formatting library (C++20)
   bitset
   hash
   (C++11)
   Relational operators (deprecated in C++20)
   rel_ops::operator!=rel_ops::operator>

   rel_ops::operator<=rel_ops::operator>=
   Integer comparison functions
   cmp_equalcmp_lesscmp_less_than
   (C++20)(C++20)(C++20)
   cmp_not_equalcmp_greatercmp_greater_than
   (C++20)(C++20)(C++20)
   in_range
   (C++20)
   Swap and type operations
   swap
   ranges::swap
   (C++20)
   exchange
   (C++14)
   declval
   (C++11)
   to_underlying
   (C++23)
   forward
   (C++11)
   forward_like
   (C++23)
   move
   (C++11)
   move_if_noexcept
   (C++11)
   as_const
   (C++17)
   Common vocabulary types
   pair
   tuple
   (C++11)
   optional
   (C++17)
   any
   (C++17)
   variant
   (C++17)
   tuple_size
   (C++11)
   tuple_element
   (C++11)
   apply
   (C++17)
   make_from_tuple
   (C++17)
   expected
   (C++23)
   Elementary string conversions
   to_chars
   (C++17)
   from_chars
   (C++17)
   chars_format
   (C++17)
   to_chars_result
   (C++17)
   from_chars_result
   (C++17)

   Defined in header <utility>
   struct in_place_t { explicit in_place_t() = default; };
   (1)                                                    (since C++17)
   inline constexpr std::in_place_t in_place {};
   (2)                                                    (since C++17)
   template< class T >
   struct in_place_type_t { explicit in_place_type_t() = default; };
   (3)                                                    (since C++17)
   template< class T >
   inline constexpr std::in_place_type_t<T> in_place_type {};
   (4)                                                    (since C++17)
   template< std::size_t I >
   struct in_place_index_t { explicit in_place_index_t() = default; };
   (5)                                                    (since C++17)
   template< std::size_t I >
   inline constexpr std::in_place_index_t<I> in_place_index {};
   (6)                                                    (since C++17)
   1,3,5) The type/type templates std::in_place_t, std::in_place_type_t
   and std::in_place_index_t can be used in the constructor's parameter
   list to match the intended tag.
   2,4,6) The corresponding std::in_place, std::in_place_type, and
   std::in_place_index instances of (1,3,5) are disambiguation tags that
   can be passed to the constructors of std::expected, std::optional,
   std::variant, and std::any to indicate that the contained object should
   be constructed in-place, and (for the latter two) the type of the
   object to be constructed.

Standard library

   The following standard library vocabulary types use (1-6) as
   disambiguation tags:
   expected
   (C++23)
   a wrapper that contains either an expected or error value
   (class template)
   optional
   (C++17)
   a wrapper that may or may not hold an object
   (class template)
   variant
   (C++17)
   a type-safe discriminated union
   (class template)
   any
   (C++17)
   objects that hold instances of any CopyConstructible type
   (class)

See also

   sorted_uniquesorted_unique_t
   (C++23)
   indicates that elements of a range are sorted and unique
   (tag)
   sorted_equivalentsorted_equivalent_t
   (C++23)
   indicates that elements of a range are sorted (uniqueness is not
   required)
   (tag)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/utility/in_place
   &oldid=170242"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 20 March 2024, at 07:13.
     * This page has been accessed 172,545 times.
