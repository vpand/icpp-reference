std::breakpoint

   From cppreference.com
   < cpp | utility

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Utilities library
   Language support
   Type support (basic types, RTTI)
   Library feature-test macros (C++20)
   Dynamic memory management
   Program utilities
   Coroutine support (C++20)
   Variadic functions
   is_constant_evaluated
   (C++20)
   is_within_lifetime
   (C++26)
   initializer_list
   (C++11)
   source_location
   (C++20)
   Debugging support
   is_debugger_present
   (C++26)
   breakpoint_if_debugging
   (C++26)
   breakpoint
   (C++26)
   Three-way comparison
   three_way_comparablethree_way_comparable_with
   (C++20)(C++20)
   strong_ordering
   (C++20)
   weak_ordering
   (C++20)
   partial_ordering
   (C++20)
   common_comparison_category
   (C++20)
   compare_three_way_result
   (C++20)
   compare_three_way
   (C++20)
   strong_order
   (C++20)
   weak_order
   (C++20)
   partial_order
   (C++20)
   compare_strong_order_fallback
   (C++20)
   compare_weak_order_fallback
   (C++20)
   compare_partial_order_fallback
   (C++20)
   is_eqis_ltis_lteq
   (C++20)(C++20)(C++20)
   is_neqis_gtis_gteq
   (C++20)(C++20)(C++20)
   General utilities
   Date and time
   Function objects
   Formatting library (C++20)
   bitset
   hash
   (C++11)
   Relational operators (deprecated in C++20)
   rel_ops::operator!=rel_ops::operator>

   rel_ops::operator<=rel_ops::operator>=
   Integer comparison functions
   cmp_equalcmp_lesscmp_less_than
   (C++20)(C++20)(C++20)
   cmp_not_equalcmp_greatercmp_greater_than
   (C++20)(C++20)(C++20)
   in_range
   (C++20)
   Swap and type operations
   swap
   ranges::swap
   (C++20)
   exchange
   (C++14)
   declval
   (C++11)
   to_underlying
   (C++23)
   forward
   (C++11)
   forward_like
   (C++23)
   move
   (C++11)
   move_if_noexcept
   (C++11)
   as_const
   (C++17)
   Common vocabulary types
   pair
   tuple
   (C++11)
   optional
   (C++17)
   any
   (C++17)
   variant
   (C++17)
   tuple_size
   (C++11)
   tuple_element
   (C++11)
   apply
   (C++17)
   make_from_tuple
   (C++17)
   expected
   (C++23)
   Elementary string conversions
   to_chars
   (C++17)
   from_chars
   (C++17)
   chars_format
   (C++17)
   to_chars_result
   (C++17)
   from_chars_result
   (C++17)

   Defined in header <debugging>
   void breakpoint() noexcept;
                                (since C++26)

   Unconditional breakpoint: attempts to temporarily halt the execution of
   the program and transfer control to the debugger whether or not it's
   not possible to determine if the debugger is present.

   Formally, the behavior of this function is completely
   implementation-defined.

Notes

   The intent of this function is allowing for runtime control of
   breakpoints beyond what might be available from a debugger while not
   causing the program to exit. For example, breaking when an infrequent
   non-critical condition is detected, allowing programmatic control with
   complex runtime sensitive conditions, breaking on user input to inspect
   context in interactive programs without needing to switch to the
   debugger application, etc.

   This function standardizes many similar existing facilities:
   __builtin_debugtrap from LLVM, __debugbreak from Win32 API,
   debugger_break from boost.test, assert(false), _asm { int 3 } (MSVC)
   and asm("int3") (GCC/clang) for x86 targets, etc.
   Feature-test macro   Value    Std                 Feature
   __cpp_lib_debugging 202311L (C++26) Debugging support library
                       202403L (C++26) Replaceable std::is_debugger_present

Example

   This section is incomplete
   Reason: no example

See also

   is_debugger_present
   (C++26)
   checks whether a program is running under the control of a debugger
   (function)
   breakpoint_if_debugging
   (C++26)
   calls std::breakpoint if std::is_debugger_present returns true
   (function)

External links

   1.  armKEIL: __breakpoint intrinsic
   2.  Portable Snippets: Debugging assertions and traps
   3.  EASTL: EASTL_DEBUG_BREAK
   4.  Catch2: CATCH_TRAP and CATCH_BREAK_INTO_DEBUGGER
   5.  Unreal Engine: DebugBreak
   6.  JUCE: JUCE_BREAK_IN_DEBUGGER
   7.  Dear ImGui: IM_DEBUG_BREAK
   8.  AWS C Common: aws_debug_break
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/utility/breakpoi
   nt&oldid=171424"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 30 April 2024, at 02:51.
     * This page has been accessed 6,089 times.
