std::move_only_function::move_only_function

   From cppreference.com
   < cpp | utility | functional | move only function

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Utilities library
   Language support
   Type support (basic types, RTTI)
   Library feature-test macros (C++20)
   Dynamic memory management
   Program utilities
   Coroutine support (C++20)
   Variadic functions
   is_constant_evaluated
   (C++20)
   is_within_lifetime
   (C++26)
   initializer_list
   (C++11)
   source_location
   (C++20)
   Debugging support
   is_debugger_present
   (C++26)
   breakpoint_if_debugging
   (C++26)
   breakpoint
   (C++26)
   Three-way comparison
   three_way_comparablethree_way_comparable_with
   (C++20)(C++20)
   strong_ordering
   (C++20)
   weak_ordering
   (C++20)
   partial_ordering
   (C++20)
   common_comparison_category
   (C++20)
   compare_three_way_result
   (C++20)
   compare_three_way
   (C++20)
   strong_order
   (C++20)
   weak_order
   (C++20)
   partial_order
   (C++20)
   compare_strong_order_fallback
   (C++20)
   compare_weak_order_fallback
   (C++20)
   compare_partial_order_fallback
   (C++20)
   is_eqis_ltis_lteq
   (C++20)(C++20)(C++20)
   is_neqis_gtis_gteq
   (C++20)(C++20)(C++20)
   General utilities
   Date and time
   Function objects
   Formatting library (C++20)
   bitset
   hash
   (C++11)
   Relational operators (deprecated in C++20)
   rel_ops::operator!=rel_ops::operator>

   rel_ops::operator<=rel_ops::operator>=
   Integer comparison functions
   cmp_equalcmp_lesscmp_less_than
   (C++20)(C++20)(C++20)
   cmp_not_equalcmp_greatercmp_greater_than
   (C++20)(C++20)(C++20)
   in_range
   (C++20)
   Swap and type operations
   swap
   ranges::swap
   (C++20)
   exchange
   (C++14)
   declval
   (C++11)
   to_underlying
   (C++23)
   forward
   (C++11)
   forward_like
   (C++23)
   move
   (C++11)
   move_if_noexcept
   (C++11)
   as_const
   (C++17)
   Common vocabulary types
   pair
   tuple
   (C++11)
   optional
   (C++17)
   any
   (C++17)
   variant
   (C++17)
   tuple_size
   (C++11)
   tuple_element
   (C++11)
   apply
   (C++17)
   make_from_tuple
   (C++17)
   expected
   (C++23)
   Elementary string conversions
   to_chars
   (C++17)
   from_chars
   (C++17)
   chars_format
   (C++17)
   to_chars_result
   (C++17)
   from_chars_result
   (C++17)

   Function objects
   Function wrappers
   function
   (C++11)
   move_only_function
   (C++23)
   copyable_function
   (C++26)
   function_ref
   (C++26)
   mem_fn
   (C++11)
   bad_function_call
   (C++11)
   Partial function application
   bind_frontbind_back
   (C++20)(C++23)
   bind
   (C++11)
   is_bind_expression
   (C++11)
   is_placeholder
   (C++11)
   _1, _2, _3, ...
   (C++11)
   Function invocation
   invokeinvoke_r
   (C++17)(C++23)
   Identity function object
   identity
   (C++20)
   Reference wrappers
   reference_wrapper
   (C++11)
   refcref
   (C++11)(C++11)
   unwrap_referenceunwrap_ref_decay
   (C++20)(C++20)
   Operator wrappers
   plus
   minus
   negate
   multiplies
   divides
   modulus
   bit_and
   bit_or
   bit_not
   (C++14)
   bit_xor
   equal_to
   not_equal_to
   greater
   less
   greater_equal
   less_equal
   logical_and
   logical_or
   logical_not
   Transparent operator wrappers
   plus<>
   (C++14)
   minus<>
   (C++14)
   negate<>
   (C++14)
   multiplies<>
   (C++14)
   divides<>
   (C++14)
   modulus<>
   (C++14)
   bit_and<>
   (C++14)
   bit_or<>
   (C++14)
   bit_not<>
   (C++14)
   bit_xor<>
   (C++14)
   equal_to<>
   (C++14)
   not_equal_to<>
   (C++14)
   greater<>
   (C++14)
   less<>
   (C++14)
   greater_equal<>
   (C++14)
   less_equal<>
   (C++14)
   logical_and<>
   (C++14)
   logical_or<>
   (C++14)
   logical_not<>
   (C++14)
   Negators
   not_fn
   (C++17)
   Searchers
   default_searcher
   (C++17)
   boyer_moore_searcher
   (C++17)
   boyer_moore_horspool_searcher
   (C++17)
   Constrained comparators
   ranges::equal_to
   (C++20)
   ranges::not_equal_to
   (C++20)
   ranges::greater
   (C++20)
   ranges::less
   (C++20)
   ranges::greater_equal
   (C++20)
   ranges::less_equal
   (C++20)
   compare_three_way
   (C++20)
   Old binders and adaptors
   unary_function
   (until C++17*)
   binary_function
   (until C++17*)
   ptr_fun
   (until C++17*)
   pointer_to_unary_function
   (until C++17*)
   pointer_to_binary_function
   (until C++17*)
   mem_fun
   (until C++17*)
   mem_fun_tmem_fun1_tconst_mem_fun_tconst_mem_fun1_t
   (until C++17*)(until C++17*)(until C++17*)(until C++17*)
   not1
   (until C++20*)
   not2
   (until C++20*)
   binder1stbinder2nd
   (until C++17*)(until C++17*)
   bind1stbind2nd
   (until C++17*)(until C++17*)
   mem_fun_ref
   (until C++17*)
   mem_fun_ref_tmem_fun1_ref_tconst_mem_fun_ref_tconst_mem_fun1_ref_t
   (until C++17*)(until C++17*)(until C++17*)(until C++17*)
   unary_negate
   (until C++20*)
   binary_negate
   (until C++20*)

   std::move_only_function
   Member functions
   move_only_function::move_only_function
   move_only_function::~move_only_function
   move_only_function::operator=
   move_only_function::swap
   move_only_function::operator bool
   move_only_function::operator()
   Non-member functions
   operator==
   swap(std::move_only_function)

   move_only_function() noexcept;
   (1)                                                       (since C++23)
   move_only_function( std::nullptr_t ) noexcept;
   (2)                                                       (since C++23)
   move_only_function( move_only_function&& other ) noexcept;
   (3)                                                       (since C++23)
   move_only_function( const move_only_function& ) = delete;
   (4)                                                       (since C++23)
   template< class F >
   move_only_function( F&& f );
   (5)                                                       (since C++23)
   template< class T, class... CArgs >
   explicit move_only_function( std::in_place_type_t<T>, CArgs&&... args
   );
   (6)                                                       (since C++23)
   template< class T, class U, class... CArgs >

   explicit move_only_function( std::in_place_type_t<T>,
                                std::initializer_list<U> il, CArgs&&...
   args );
   (7)                                                       (since C++23)

   Creates a new std::move_only_function.
   1,2) Default constructor and the constructor taking nullptr construct
   an empty std::move_only_function.
   3) Move constructor constructs a std::move_only_function whose target
   is that of other. other is in a valid but unspecified state after move
   construction.
   4) Copy constructor is deleted. std::move_only_function does not
   satisfy CopyConstructible.
   5) Let VT be std::decay_t<F>. If f is a null function pointer, a null
   pointer to member value, or an empty std::move_only_function (may be
   any specialization), then constructs an empty std::move_only_function.
   Otherwise, constructs a std::move_only_function whose target is of type
   VT and direct-non-list-initialized with std::forward<F>(f).
     * This overload participates in overload resolution only if VT is
       neither same as move_only_function nor a specialization of
       std::in_place_type_t, and /*is-callable-from*/<VT> (see below) is
       true.
     * The program is ill-formed if std::is_constructible_v<VT, F> is not
       true.

   6) Let VT be std::decay_t<T>. Constructs a std::move_only_function
   whose target is of type VT and direct-non-list-initialized with
   std::forward<CArgs>(args)....
     * This overload participates in overload resolution only if both
       std::is_constructible_v<VT, CArgs...> and /*is-callable-from*/<VT>
       (see below) are true.
     * The program is ill-formed if VT is not the same type as T.

   7) Let VT be std::decay_t<T>. Constructs a std::move_only_function
   whose target is of type VT and direct-non-list-initialized with il,
   std::forward<CArgs>(args)....
     * This overload participates in overload resolution only if both
       std::is_constructible_v<VT, std::initializer_list<U>&, CArgs...>
       and /*is-callable-from*/<VT> (see below) are true.
     * The program is ill-formed if VT is not the same type as T.

   For constructors (5-7), the behavior is undefined if VT does not
   satisfy the Destructible requirements, or
   std::is_move_constructible_v<VT> is true but VT does not satisfy the
   MoveConstructible requirements.

   The constant /*is-callable-from*/<VT> is dependent on cv, ref, and noex
   in the template parameter of std::move_only_function as below:
   cv ref noexcept(noex) /*is-callable-from*/<VT>
   noexcept(false) std::is_invocable_r_v<R, VT, Args...> &&

   std::is_invocable_r_v<R, VT&, Args...>
   noexcept(true) std::is_nothrow_invocable_r_v<R, VT, Args...> &&

   std::is_nothrow_invocable_r_v<R, VT&, Args...>
   const noexcept(false) std::is_invocable_r_v<R, const VT, Args...> &&

   std::is_invocable_r_v<R, const VT&, Args...>
   const noexcept(true) std::is_nothrow_invocable_r_v<R, const VT,
   Args...> &&

   std::is_nothrow_invocable_r_v<R, const VT&, Args...>
   & noexcept(false) std::is_invocable_r_v<R, VT&, Args...>
   & noexcept(true) std::is_nothrow_invocable_r_v<R, VT&, Args...>
   const & noexcept(false) std::is_invocable_r_v<R, const VT&, Args...>
   const & noexcept(true) std::is_nothrow_invocable_r_v<R, const VT&,
   Args...>
   && noexcept(false) std::is_invocable_r_v<R, VT, Args...>
   && noexcept(true) std::is_nothrow_invocable_r_v<R, VT, Args...>
   const && noexcept(false) std::is_invocable_r_v<R, const VT, Args...>
   const && noexcept(true) std::is_nothrow_invocable_r_v<R, const VT,
   Args...>

Parameters

   other - another std::move_only_function to move from
   f     - a function or a Callable object to wrap
   args  - arguments to construct the target object
   il    - std::initializer_list to construct the target object

Exceptions

   5-7) May throw std::bad_alloc on allocation failure or propagate the
   exception thrown by the initialization of the target. No exception is
   thrown if VT is a function pointer type or a specialization of
   std::reference_wrapper.

Example

   This section is incomplete
   Reason: no example

See also

   (constructor)
   constructs a new std::function instance
   (public member function of std::function<R(Args...)>)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/utility/function
   al/move_only_function/move_only_function&oldid=161379"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 25 October 2023, at 11:33.
     * This page has been accessed 20,910 times.
