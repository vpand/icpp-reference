operator==,!=,<,<=,>,>=,<=>(std::move_iterator)

   From cppreference.com
   < cpp | iterator | move iterator


   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Iterator library
   Iterator concepts
   indirectly_readable
   (C++20)
   indirectly_writable
   (C++20)
   weakly_incrementable
   (C++20)
   incrementable
   (C++20)
   input_or_output_iterator
   (C++20)
   sentinel_for
   (C++20)
   sized_sentinel_for
   (C++20)
   input_iterator
   (C++20)
   output_iterator
   (C++20)
   forward_iterator
   (C++20)
   bidirectional_iterator
   (C++20)
   random_access_iterator
   (C++20)
   contiguous_iterator
   (C++20)
   Iterator primitives
   input_iterator_tagoutput_iterator_tagforward_iterator_tagbidirectional_
   iterator_tagrandom_access_iterator_tagcontiguous_iterator_tag
   (C++20)
   iter_value_titer_difference_titer_reference_titer_const_reference_titer
   _rvalue_reference_titer_common_reference_t
   (C++20)(C++20)(C++20)(C++23)(C++20)(C++20)
   iterator
   (deprecated in C++17)
   iterator_traits
   incrementable_traits
   (C++20)
   indirectly_readable_traits
   (C++20)
   Algorithm concepts and utilities
   Indirect callable concepts
   indirectly_unary_invocableindirectly_regular_unary_invocable
   (C++20)(C++20)
   indirect_unary_predicate
   (C++20)
   indirect_binary_predicate
   (C++20)
   indirect_equivalence_relation
   (C++20)
   indirect_strict_weak_order
   (C++20)
   Common algorithm requirements
   indirectly_movable
   (C++20)
   indirectly_movable_storable
   (C++20)
   indirectly_copyable
   (C++20)
   indirectly_copyable_storable
   (C++20)
   indirectly_swappable
   (C++20)
   indirectly_comparable
   (C++20)
   permutable
   (C++20)
   mergeable
   (C++20)
   sortable
   (C++20)
   Utilities
   indirect_result_t
   (C++20)
   projected
   (C++20)
   projected_value_t
   (C++26)
   Iterator adaptors
   reverse_iterator
   make_reverse_iterator
   (C++14)
   move_iterator
   (C++11)
   make_move_iterator
   (C++11)
   default_sentinel_tdefault_sentinel
   (C++20)(C++20)
   unreachable_sentinel_tunreachable_sentinel
   (C++20)(C++20)
   front_insert_iterator
   back_insert_iterator
   inserter
   insert_iterator
   front_inserter
   back_inserter
   move_sentinel
   (C++20)
   common_iterator
   (C++20)
   counted_iterator
   (C++20)
   basic_const_iterator
   (C++23)
   const_iterator
   (C++23)
   const_sentinel
   (C++23)
   make_const_iterator
   (C++23)
   make_const_sentinel
   (C++23)
   Stream iterators
   istream_iterator

   ostream_iterator
   istreambuf_iterator
   ostreambuf_iterator
   Iterator customization points
   ranges::iter_move
   (C++20)
   ranges::iter_swap
   (C++20)
   Iterator operations
   advance
   distance
   prev
   (C++11)
   next
   (C++11)
   ranges::advance
   (C++20)
   ranges::distance
   (C++20)
   ranges::prev
   (C++20)
   ranges::next
   (C++20)
   Range access
   begincbegin
   (C++11)(C++14)
   rbegincrbegin
   (C++14)(C++14)
   endcend
   (C++11)(C++14)
   rendcrend
   (C++14)(C++14)
   sizessize
   (C++17)(C++20)
   empty
   (C++17)
   data
   (C++17)

   std::move_iterator
   Member functions
   move_iterator::move_iterator
   move_iterator::operator=
   move_iterator::base
   move_iterator::operator*move_iterator::operator->
   move_iterator::operator[]
   move_iterator::operator++move_iterator::operator+move_iterator::operato
   r+=move_iterator::operator--move_iterator::operator-move_iterator::oper
   ator-=
   Non-member functions
   operator==operator!=operator<operator<=operator>operator>=operator<=>
   (until C++20)(C++20)
   operator==(move_sentinel)
   (C++20)
   operator+
   operator-
   operator-(move_sentinel)
   (C++20)
   iter_move
   (C++20)
   iter_swap
   (C++20)
   make_move_iterator
   (C++11)

   (1)
   template< class Iterator1, class Iterator2 >

   bool operator==( const std::move_iterator<Iterator1>& lhs,
                    const std::move_iterator<Iterator2>& rhs );
   (until C++17)
   template< class Iterator1, class Iterator2 >

   constexpr bool operator==( const std::move_iterator<Iterator1>& lhs,
                              const std::move_iterator<Iterator2>& rhs );
   (since C++17)
   (2)
   template< class Iterator1, class Iterator2 >

   bool operator!=( const std::move_iterator<Iterator1>& lhs,
                    const std::move_iterator<Iterator2>& rhs );
   (until C++17)
   template< class Iterator1, class Iterator2 >

   constexpr bool operator!=( const std::move_iterator<Iterator1>& lhs,
                              const std::move_iterator<Iterator2>& rhs );
   (since C++17)
   (until C++20)
   (3)
   template< class Iterator1, class Iterator2 >

   bool operator<( const std::move_iterator<Iterator1>& lhs,
                   const std::move_iterator<Iterator2>& rhs );
   (until C++17)
   template< class Iterator1, class Iterator2 >

   constexpr bool operator<( const std::move_iterator<Iterator1>& lhs,
                             const std::move_iterator<Iterator2>& rhs );
   (since C++17)
   (4)
   template< class Iterator1, class Iterator2 >

   bool operator<=( const std::move_iterator<Iterator1>& lhs,
                    const std::move_iterator<Iterator2>& rhs );
   (until C++17)
   template< class Iterator1, class Iterator2 >

   constexpr bool operator<=( const std::move_iterator<Iterator1>& lhs,
                              const std::move_iterator<Iterator2>& rhs );
   (since C++17)
   (5)
   template< class Iterator1, class Iterator2 >

   bool operator>( const std::move_iterator<Iterator1>& lhs,
                   const std::move_iterator<Iterator2>& rhs );
   (until C++17)
   template< class Iterator1, class Iterator2 >

   constexpr bool operator>( const std::move_iterator<Iterator1>& lhs,
                             const std::move_iterator<Iterator2>& rhs );
   (since C++17)
   (6)
   template< class Iterator1, class Iterator2 >

   bool operator>=( const std::move_iterator<Iterator1>& lhs,
                    const std::move_iterator<Iterator2>& rhs );
   (until C++17)
   template< class Iterator1, class Iterator2 >

   constexpr bool operator>=( const std::move_iterator<Iterator1>& lhs,
                              const std::move_iterator<Iterator2>& rhs );
   (since C++17)
   template< class Iterator1, std::three_way_comparable_with<Iterator1>
   Iterator2 >

   constexpr std::compare_three_way_result_t<Iterator1, Iterator2>
       operator<=>( const std::move_iterator<Iterator1>& lhs,
                    const std::move_iterator<Iterator2>& rhs );
   (7) (since C++20)

   Compares the underlying iterators.

   (1-6) Only participate in overload resolution if their underlying
   comparison expressions (see below) are well-formed and convertible to
   bool.

   The != operator is synthesized from operator==.
   (since C++20)

Parameters

   lhs, rhs - iterator adaptors to compare

Return value

   1) lhs.base() == rhs.base()
   2) !(lhs == rhs)
   3) lhs.base() < rhs.base()
   4) !(rhs < lhs)
   5) rhs < lhs
   6) !(lhs < rhs)
   7) lhs.base() <=> rhs.base()

Example

   Run this code
#include <compare>
#include <iostream>
#include <iterator>

int main()
{
    int a[]{9, 8, 7, 6};
    //            |  +----- x, y
    //            +-------- z

    std::move_iterator<int*>
        x{std::end(a) - 1},
        y{std::end(a) - 1},
        z{std::end(a) - 2};

    std::cout
        << std::boolalpha
        << "*x == " << *x << '\n' // 6
        << "*y == " << *y << '\n' // 6
        << "*z == " << *z << '\n' // 7
        << "x == y ? " << (x == y) << '\n' // true
        << "x != y ? " << (x != y) << '\n' // false
        << "x <  y ? " << (x <  y) << '\n' // false
        << "x <= y ? " << (x <= y) << '\n' // true
        << "x == z ? " << (x == z) << '\n' // false
        << "x != z ? " << (x != z) << '\n' // true
        << "x <  z ? " << (x <  z) << '\n' // false
        << "x <= z ? " << (x <= z) << '\n' // false
        << "x <=> y == 0 ? " << (x <=> y == 0) << '\n' // true
        << "x <=> y <  0 ? " << (x <=> y <  0) << '\n' // false
        << "x <=> y >  0 ? " << (x <=> y >  0) << '\n' // false
        << "x <=> z == 0 ? " << (x <=> z == 0) << '\n' // false
        << "x <=> z <  0 ? " << (x <=> z <  0) << '\n' // true
        << "x <=> z >  0 ? " << (x <=> z >  0) << '\n' // false
        ;
}

   Output:
*x == 6
*y == 6
*z == 7
x == y ? true
x != y ? false
x <  y ? false
x <= y ? true
x == z ? false
x != z ? true
x <  z ? false
x <= z ? false
x <=> y == 0 ? true
x <=> y <  0 ? false
x <=> y >  0 ? false
x <=> z == 0 ? false
x <=> z <  0 ? false
x <=> z >  0 ? true

See also

   operator==(std::move_sentinel)
   (C++20)
   compares the underlying iterator and the underlying sentinel
   (function template)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/move_it
   erator/operator_cmp&oldid=159930"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 1 October 2023, at 06:46.
     * This page has been accessed 18,654 times.
