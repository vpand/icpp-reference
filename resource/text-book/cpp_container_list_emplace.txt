std::list<T,Allocator>::emplace

   From cppreference.com
   < cpp | container | list


   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Containers library
   Sequence
   array
   (C++11)
   vector
   vector<bool>
   deque
   forward_list
   (C++11)
   list
   Associative
   set
   multiset
   map
   multimap
   Unordered associative
   unordered_set
   (C++11)
   unordered_multiset
   (C++11)
   unordered_map
   (C++11)
   unordered_multimap
   (C++11)
   Adaptors
   stack
   queue
   priority_queue
   flat_set
   (C++23)
   flat_multiset
   (C++23)
   flat_map
   (C++23)
   flat_multimap
   (C++23)
   Views
   span
   (C++20)
   mdspan
   (C++23)
   Iterator invalidation
   Member function table
   Non-member function table

   std::list
   Member functions
   list::list
   list::~list
   list::operator=
   list::assign
   list::assign_range
   (C++23)
   list::get_allocator
   Element access
   list::front
   list::back
   Iterators
   list::beginlist::cbegin
   (C++11)
   list::endlist::cend
   (C++11)
   list::rbeginlist::crbegin
   (C++11)
   list::rendlist::crend
   (C++11)
   Capacity
   list::size
   list::empty
   list::max_size
   Modifiers
   list::clear
   list::insert
   list::insert_range
   (C++23)
   list::emplace
   (C++11)
   list::erase
   list::push_front
   list::emplace_front
   (C++11)
   list::prepend_range
   (C++23)
   list::pop_front
   list::push_back
   list::emplace_back
   (C++11)
   list::append_range
   (C++23)
   list::pop_back
   list::resize
   list::swap
   Operations
   list::merge
   list::splice
   list::removelist::remove_if
   list::reverse
   list::unique
   list::sort
   Non-member functions
   operator==operator!=operator<operator>operator<=operator>=operator<=>
   (until C++20)(until C++20)(until C++20)(until C++20)(until
   C++20)(C++20)
   swap(std::list)
   erase(std::list)erase_if(std::list)
   (C++20)(C++20)
   Deduction guides(C++17)

   template< class... Args >
   iterator emplace( const_iterator pos, Args&&... args );
                            (since C++11)

   Inserts a new element into the container directly before pos.

   The element is constructed through std::allocator_traits::construct,
   which uses placement-new to construct the element in-place at a
   location provided by the container.

   The arguments args... are forwarded to the constructor as
   std::forward<Args>(args).... args... may directly or indirectly refer
   to a value in the container.

   No iterators or references are invalidated.

Parameters

   pos  - iterator before which the new element will be constructed
   args - arguments to forward to the constructor of the element
   Type requirements
   -
   T (the container's element type) must meet the requirements of
   EmplaceConstructible.

Return value

   Iterator pointing to the emplaced element.

Complexity

   Constant.

Exceptions

   If an exception is thrown (e.g. by the constructor), the container is
   left unmodified, as if this function was never called (strong exception
   guarantee).

Example

   Run this code
#include <iostream>
#include <string>
#include <list>

struct A
{
    std::string s;

    A(std::string str) : s(std::move(str)) { std::cout << " constructed\n"; }

    A(const A& o) : s(o.s) { std::cout << " copy constructed\n"; }

    A(A&& o) : s(std::move(o.s)) { std::cout << " move constructed\n"; }

    A& operator=(const A& other)
    {
        s = other.s;
        std::cout << " copy assigned\n";
        return *this;
    }

    A& operator=(A&& other)
    {
        s = std::move(other.s);
        std::cout << " move assigned\n";
        return *this;
    }
};

int main()
{
    std::list<A> container;

    std::cout << "construct 2 times A:\n";
    A two { "two" };
    A three { "three" };

    std::cout << "emplace:\n";
    container.emplace(container.end(), "one");

    std::cout << "emplace with A&:\n";
    container.emplace(container.end(), two);

    std::cout << "emplace with A&&:\n";
    container.emplace(container.end(), std::move(three));

    std::cout << "content:\n";
    for (const auto& obj : container)
        std::cout << ' ' << obj.s;
    std::cout << '\n';
}

   Output:
construct 2 times A:
 constructed
 constructed
emplace:
 constructed
emplace with A&:
 copy constructed
emplace with A&&:
 move constructed
content:
 one two three

Defect reports

   The following behavior-changing defect reports were applied
   retroactively to previously published C++ standards.
   DR Applied to Behavior as published Correct behavior
   LWG 2164 C++11 it was not clear whether the arguments can refer to the
   container clarified

See also

   insert
   inserts elements
   (public member function)
   emplace_back
   (C++11)
   constructs an element in-place at the end
   (public member function)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/container/list/e
   mplace&oldid=124996"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 15 December 2020, at 04:24.
     * This page has been accessed 114,324 times.
