std::inner_product

   From cppreference.com
   < cpp | algorithm

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Algorithm library
   Constrained algorithms and algorithms on ranges (C++20)
   Constrained algorithms, e.g. ranges::copy, ranges::sort, ...
   Execution policies (C++17)
   is_execution_policy
   (C++17)
   execution::seqexecution::parexecution::par_unseqexecution::unseq
   (C++17)    (C++17)(C++17)(C++20)
   execution::sequenced_policyexecution::parallel_policyexecution::paralle
   l_unsequenced_policyexecution::parallel_unsequenced
   (C++17)(C++17)(C++17)(C++20)
   Non-modifying sequence operations
   Batch operations
   for_each
   for_each_n
   (C++17)
   Search operations
   all_ofany_ofnone_of
   (C++11)                (C++11)(C++11)
   countcount_if
   mismatch
   equal
   findfind_iffind_if_not
   (C++11)
   find_end
   find_first_of
   adjacent_find
   search
   search_n
   Modifying sequence operations
   Copy operations
   copycopy_if
   (C++11)
   copy_backward
   copy_n
   (C++11)
   move
   (C++11)
   move_backward
   (C++11)
   Swap operations
   swap
   iter_swap
   swap_ranges
   Transformation operations
   replacereplace_if
   transform
   replace_copyreplace_copy_if
   Generation operations
   fill
   fill_n
   generate
   generate_n
   Removing operations
   removeremove_if
   unique
   remove_copyremove_copy_if
   unique_copy
   Order-changing operations
   reverse
   reverse_copy
   rotate
   rotate_copy
   random_shuffleshuffle
   (until C++17)(C++11)
   shift_leftshift_right
   (C++20)(C++20)
   Sampling operations
   sample
   (C++17)
   Sorting and related operations
   Partitioning operations
   partition
   partition_copy
   (C++11)
   stable_partition
   is_partitioned
   (C++11)
   partition_point
   (C++11)
   Sorting operations
   sort
   stable_sort
   partial_sort
   partial_sort_copy
   is_sorted
   (C++11)
   is_sorted_until
   (C++11)
   nth_element
   Binary search operations
   (on partitioned ranges)
   lower_bound
   upper_bound
   equal_range
   binary_search
   Set operations (on sorted ranges)
   includes
   set_union
   set_intersection
   set_difference
   set_symmetric_difference
   Merge operations (on sorted ranges)
   merge
   inplace_merge
   Heap operations
   push_heap
   pop_heap
   make_heap
   sort_heap
   is_heap
   (C++11)
   is_heap_until
   (C++11)
   Minimum/maximum operations
   max
   min
   minmax
   (C++11)
   clamp
   (C++17)
   max_element
   min_element
   minmax_element
   (C++11)
   Lexicographical comparison operations
   lexicographical_compare
   lexicographical_compare_three_way
   (C++20)
   Permutation operations
   next_permutation
   prev_permutation
   is_permutation
   (C++11)
   C library
   qsort
   bsearch
   Numeric operations
   iota
   (C++11)
   inner_product
   adjacent_difference

   accumulate
   reduce
   (C++17)
   transform_reduce
   (C++17)
   partial_sum
   inclusive_scan
   (C++17)
   exclusive_scan
   (C++17)
   transform_inclusive_scan
   (C++17)
   transform_exclusive_scan
   (C++17)
   Operations on uninitialized memory
   uninitialized_copy
   uninitialized_move
   (C++17)
   uninitialized_fill
   uninitialized_copy_n
   (C++11)
   uninitialized_move_n
   (C++17)
   uninitialized_fill_n
   destroy
   (C++17)
   destroy_n
   (C++17)
   destroy_at
   (C++17)
   construct_at
   (C++20)
   uninitialized_default_construct
   (C++17)
   uninitialized_value_construct
   (C++17)
   uninitialized_default_construct_n
   (C++17)
   uninitialized_value_construct_n
   (C++17)

   Numerics library
   Common mathematical functions
   Mathematical special functions (C++17)
   Mathematical constants (C++20)
   Basic linear algebra algorithms (C++26)
   Floating-point environment (C++11)
   Complex numbers
   Numeric arrays
   Pseudo-random number generation
   Factor operations
   gcd
   (C++17)
   lcm
   (C++17)
   Interpolations
   midpoint
   (C++20)
   lerp
   (C++20)
   Saturation arithmetic
   add_sat
   (C++26)
   sub_sat
   (C++26)
   saturate_cast
   (C++26)
   mul_sat
   (C++26)
   div_sat
   (C++26)
   Generic numeric operations
   iota
   (C++11)
   ranges::iota
   (C++23)
   accumulate
   inner_product
   adjacent_difference
   partial_sum
   reduce
   (C++17)
   transform_reduce
   (C++17)
   inclusive_scan
   (C++17)
   exclusive_scan
   (C++17)
   transform_inclusive_scan
   (C++17)
   transform_exclusive_scan
   (C++17)
   Bit operations
   has_single_bit
   (C++20)
   bit_cast
   (C++20)
   bit_ceil
   (C++20)
   bit_floor
   (C++20)
   bit_width
   (C++20)
   rotl
   (C++20)
   rotr
   (C++20)
   popcount
   (C++20)
   countl_zero
   (C++20)
   countl_one
   (C++20)
   countr_zero
   (C++20)
   countr_one
   (C++20)
   byteswap
   (C++23)
   endian
   (C++20)

   Defined in header <numeric>
   template< class InputIt1, class InputIt2, class T >

   T inner_product( InputIt1 first1, InputIt1 last1,
                    InputIt2 first2, T init );
   (1)                                                (constexpr since C++20)
   template< class InputIt1, class InputIt2, class T,

             class BinaryOp1, class BinaryOp2 >
   T inner_product( InputIt1 first1, InputIt1 last1,
                    InputIt2 first2, T init,
                    BinaryOp1 op1, BinaryOp2 op2 );
   (2)                                                (constexpr since C++20)

   Computes inner product (i.e. sum of products) or performs ordered
   map/reduce operation on the range [first1, last1) and the range of
   std::distance(first1, first2) elements beginning at first2.
   1) Initializes the accumulator acc (of type T) with the initial value
   init and then modifies it with the expression acc = acc + (*i1) *
   (*i2)(until C++11)acc = std::move(acc) + (*i1) * (*i2)(since C++11) for
   every iterator i1 in the range [first1, last1) in order and its
   corresponding iterator i2 in the range beginning at first2. For
   built-in meaning of + and *, this computes inner product of the two
   ranges.
   2) Initializes the accumulator acc (of type T) with the initial value
   init and then modifies it with the expression acc = op1(acc, op2(*i1,
   *i2))(until C++11)acc = op1(std::move(acc), op2(*i1, *i2))(since C++11)
   for every iterator i1 in the range [first1, last1) in order and its
   corresponding iterator i2 in the range beginning at first2.

   Given last2 as the std::distance(first1, last1)
   th next iterator of first2, if any of the following conditions is
   satisfied, the behavior is undefined:
     * T is not CopyConstructible.
     * T is not CopyAssignable.
     * op1 or op2 modifies any element of [first1, last1) or
       [first2, last2).
     * op1 or op2 invalidates any iterator or subrange in [first1, last1]
       or [first2, last2].

Parameters

   first1, last1 - the first range of elements
   first2 - the beginning of the second range of elements
   init - initial value of the sum of the products
   op1 - binary operation function object that will be applied. This "sum"
   function takes a value returned by op2 and the current value of the
   accumulator and produces a new value to be stored in the accumulator.

   The signature of the function should be equivalent to the following:

    Ret fun(const Type1 &a, const Type2 &b);

   The signature does not need to have const &.
   The types  Type1 and  Type2 must be such that objects of types T and
   Type3 can be implicitly converted to  Type1 and  Type2 respectively.
   The type Ret must be such that an object of type T can be assigned a
   value of type Ret.
   op2 - binary operation function object that will be applied. This
   "product" function takes one value from each range and produces a new
   value.

   The signature of the function should be equivalent to the following:

    Ret fun(const Type1 &a, const Type2 &b);

   The signature does not need to have const &.
   The types  Type1 and  Type2 must be such that objects of types InputIt1
   and InputIt2 can be dereferenced and then implicitly converted to
   Type1 and  Type2 respectively. The type Ret must be such that an object
   of type Type3 can be assigned a value of type Ret.
   Type requirements
   -
   InputIt1, InputIt2 must meet the requirements of LegacyInputIterator.
   -
   ForwardIt1, ForwardIt2 must meet the requirements of
   LegacyForwardIterator.

Return value

   acc after all modifications.

Possible implementation

                  inner_product (1)
template<class InputIt1, class InputIt2, class T>
constexpr // since C++20
T inner_product(InputIt1 first1, InputIt1 last1, InputIt2 first2, T init)
{
    while (first1 != last1)
    {
        init = std::move(init) + (*first1) * (*first2); // std::move since C++11
        ++first1;
        ++first2;
    }

    return init;
}

                  inner_product (2)
template<class InputIt1, class InputIt2, class T,
         class BinaryOp1, class BinaryOp2>
constexpr // since C++20
T inner_product(InputIt1 first1, InputIt1 last1, InputIt2 first2, T init,
                BinaryOp1 op1, BinaryOp2 op2)
{
    while (first1 != last1)
    {
        init = op1(std::move(init), op2(*first1, *first2)); // std::move since C
++11
        ++first1;
        ++first2;
    }

    return init;
}

Notes

   The parallelizable version of this algorithm, std::transform_reduce,
   requires op1 and op2 to be commutative and associative, but
   std::inner_product makes no such requirement, and always performs the
   operations in the order given.

Example

   Run this code
#include <functional>
#include <iostream>
#include <numeric>
#include <vector>

int main()
{
    std::vector<int> a{0, 1, 2, 3, 4};
    std::vector<int> b{5, 4, 2, 3, 1};

    int r1 = std::inner_product(a.begin(), a.end(), b.begin(), 0);
    std::cout << "Inner product of a and b: " << r1 << '\n';

    int r2 = std::inner_product(a.begin(), a.end(), b.begin(), 0,
                                std::plus<>(), std::equal_to<>());
    std::cout << "Number of pairwise matches between a and b: " <<  r2 << '\n';
}

   Output:
Inner product of a and b: 21
Number of pairwise matches between a and b: 2

Defect reports

   The following behavior-changing defect reports were applied
   retroactively to previously published C++ standards.
   DR Applied to Behavior as published Correct behavior
   LWG 242 C++98 op1 and op2 could not have side effects they cannot
   modify the ranges involved
   LWG 2055
   (P0616R0) C++11 acc was not moved while being accumulated it is moved

See also

   transform_reduce
   (C++17)
   applies an invocable, then reduces out of order
   (function template)
   accumulate
   sums up or folds a range of elements
   (function template)
   partial_sum
   computes the partial sum of a range of elements
   (function template)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/algorithm/inner_
   product&oldid=170942"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 15 April 2024, at 19:26.
     * This page has been accessed 300,323 times.
