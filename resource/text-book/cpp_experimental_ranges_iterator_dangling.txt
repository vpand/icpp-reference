std::experimental::ranges::dangling,
std::experimental::ranges::safe_iterator_t

   From cppreference.com
   < cpp | experimental | ranges

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Experimental
   Technical Specification
   Filesystem library (filesystem TS)
   Library fundamentals (library fundamentals TS)
   Library fundamentals 2 (library fundamentals TS v2)
   Library fundamentals 3 (library fundamentals TS v3)
   Extensions for parallelism (parallelism TS)
   Extensions for parallelism 2 (parallelism TS v2)
   Extensions for concurrency (concurrency TS)
   Extensions for concurrency 2 (concurrency TS v2)
   Concepts (concepts TS)
   Ranges (ranges TS)
   Reflection (reflection TS)
   Mathematical special functions (special functions TR)
   Experimental Non-TS
   Pattern Matching
   Linear Algebra
   std::execution
   Contracts
   2D Graphics

   Ranges
   Concepts
   General utilities
   Iterators
   Ranges
   Algorithms

   Iterators library
   Iterator concepts
   Readable
   Writable
   WeaklyIncrementable
   Incrementable
   Iterator
   Sentinel
   SizedSentinel
   InputIterator
   ForwardIterator
   BidirectionalIterator
   RandomAccessIterator
   OutputIterator
   Indirect callable concepts
   IndirectUnaryInvocableIndirectRegularUnaryInvocable
   IndirectUnaryPredicate

   IndirectRelation

   IndirectStrictWeakOrder

   Common algorithm requirements
   IndirectlyMovable
   IndirectlyMovableStorable

   IndirectlyCopyable
   IndirectlyCopyableStorable
   IndirectlySwappable
   IndirectlyComparable
   Permutable
   Mergeable
   Sortable
   Concept utilities
   indirect_result_of
   projected
   Iterator utilities and operations
   iter_move
   iter_swap
   advance
   distance
   next
   prev
   Iterator traits
   difference_type
   value_type
   reference_trvalue_reference_titer_common_reference_t
   iterator_category
   input_iterator_tagoutput_iterator_tagforward_iterator_tagbidirectional_
   iterator_tagrandom_access_iterator_tag
   ranges::iterator_traits
   std::iterator_traits<InputIterator>std::iterator_traits<OutputIterator>
   Iterator adaptors
   reverse_iterator
   move_iterator
   move_sentinel
   back_insert_iterator
   front_insert_iterator
   insert_iterator
   common_iterator
   counted_iterator
   default_sentinel
   danglingborrowed_iterator_t
   unreachable
   Stream iterators
   istream_iterator
   ostream_iterator
   istreambuf_iterator
   ostreambuf_iterator

   Defined in header <experimental/ranges/iterator>
   template< CopyConstructible T >

   class dangling {
   public:
       dangling() requires DefaultConstructible<T>();
       dangling(T t);
       T get_unsafe() const;
   };
                                                   (ranges TS)
   template< Range R >

   using safe_iterator_t =
   std::conditional_t<std::is_lvalue_reference<R>::value,
                                              ranges::iterator_t<R>,

   ranges::dangling<ranges::iterator_t<R>>;
                                                   (ranges TS)

   The class template dangling is a simple wrapper around an object to
   indicate that the wrapped object may be dangling, that is, it refers to
   another object whose lifetime may have ended.

   The alias template safe_iterator_t returns the iterator type of R,
   wrapped in dangling if the range was an rvalue range (as indicated by R
   not being an lvalue reference type).

   They are used by range algorithms that accept rvalue ranges and return
   iterators into them.

Member functions

std::experimental::ranges::dangling::dangling

   dangling() requires DefaultConstructible<T>();
   (1)
   dangling(T t);
   (2)
   1) Default constructor. Value-initializes the wrapped object.
   2) Initializes the wrapped object with t. Note that this constructor
   defines an implicit conversion from T to dangling<T>.

std::experimental::ranges::dangling::get_unsafe

   T get_unsafe() const;

   Returns a copy of the wrapped object.
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/experimental/ran
   ges/iterator/dangling&oldid=155388"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 24 July 2023, at 11:04.
     * This page has been accessed 10,941 times.
