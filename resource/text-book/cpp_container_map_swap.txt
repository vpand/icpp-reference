std::map<Key,T,Compare,Allocator>::swap

   From cppreference.com
   < cpp | container | map


   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Containers library
   Sequence
   array
   (C++11)
   vector
   vector<bool>
   deque
   forward_list
   (C++11)
   list
   Associative
   set
   multiset
   map
   multimap
   Unordered associative
   unordered_set
   (C++11)
   unordered_multiset
   (C++11)
   unordered_map
   (C++11)
   unordered_multimap
   (C++11)
   Adaptors
   stack
   queue
   priority_queue
   flat_set
   (C++23)
   flat_multiset
   (C++23)
   flat_map
   (C++23)
   flat_multimap
   (C++23)
   Views
   span
   (C++20)
   mdspan
   (C++23)
   Iterator invalidation
   Member function table
   Non-member function table

   std::map
   Member functions
   map::map
   map::~map
   map::operator=
   map::get_allocator
   Element access
   map::at
   map::operator[]
   Iterators
   map::beginmap::cbegin
   (C++11)
   map::endmap::cend
   (C++11)
   map::rbeginmap::crbegin
   (C++11)
   map::rendmap::crend
   (C++11)
   Capacity
   map::size
   map::max_size
   map::empty
   Modifiers
   map::clear
   map::insert
   map::erase
   map::swap
   map::extract
   (C++17)
   map::merge
   (C++17)
   map::insert_range
   (C++23)
   map::insert_or_assign
   (C++17)
   map::emplace
   (C++11)
   map::emplace_hint
   (C++11)
   map::try_emplace
   (C++17)
   Lookup
   map::count
   map::find
   map::contains
   (C++20)
   map::equal_range
   map::lower_bound
   map::upper_bound
   Observers
   map::key_comp
   map::value_comp
   Non-member functions
   operator==operator!=operator<operator>operator<=operator>=operator<=>
   (until C++20)(until C++20)(until C++20)(until C++20)(until
   C++20)(C++20)
   std::swap(std::map)
   erase_if(std::map)
   (C++20)
   Deduction guides (C++17)

   void swap( map& other );
                                                     (until C++17)
   void swap( map& other ) noexcept(/* see below */);
                                                     (since C++17)

   Exchanges the contents of the container with those of other. Does not
   invoke any move, copy, or swap operations on individual elements.

   All iterators and references remain valid. The end() iterator is
   invalidated.

   The Compare objects must be Swappable, and they are exchanged using
   unqualified call to non-member swap.

   If
   std::allocator_traits<allocator_type>::propagate_on_container_swap::val
   ue is true, then the allocators are exchanged using an unqualified call
   to non-member swap. Otherwise, they are not swapped (and if
   get_allocator() != other.get_allocator(), the behavior is undefined).
   (since C++11)

Parameters

   other - container to exchange the contents with

Return value

   (none)

Exceptions

   Any exception thrown by the swap of the Compare objects.
   (until C++17)
   noexcept specification:
   noexcept(std::allocator_traits<Allocator>::is_always_equal::value
   && std::is_nothrow_swappable<Compare>::value)
   (since C++17)

Complexity

   Constant.

Example

   Run this code
#include <iostream>
#include <string>
#include <utility>
#include <map>

// print out a std::pair
template<class Os, class U, class V>
Os& operator<<(Os& os, const std::pair<U, V>& p)
{
    return os << p.first << ':' << p.second;
}

// print out a container
template<class Os, class Co>
Os& operator<<(Os& os, const Co& co)
{
    os << '{';
    for (auto const& i : co)
        os << ' ' << i;
    return os << " }\n";
}

int main()
{
    std::map<std::string, std::string>
        m1{{"g", "gamma"}, {"b", "beta"}, {"a", "alpha"}, {"g", "gamma"}},
        m2{{"e", "epsilon"}, {"d", "delta"}, {"e", "epsilon"}};

    const auto& ref = *(m1.begin());
    const auto iter = std::next(m1.cbegin());

    std::cout << "-------- before swap --------\n"
              << "m1: " << m1 << "m2: " << m2 << "ref: " << ref
              << "\niter: " << *iter << '\n';

    m1.swap(m2);

    std::cout << "-------- after swap --------\n"
              << "m1: " << m1 << "m2: " << m2 << "ref: " << ref
              << "\niter: " << *iter << '\n';

    // Note that every iterator referring to an element in one container before
    // the swap refers to the same element in the other container after the swap
.
    // Same is true for references.
}

   Output:
-------- before swap --------
m1: { a:alpha b:beta g:gamma }
m2: { d:delta e:epsilon }
ref: a:alpha
iter: b:beta
-------- after swap --------
m1: { d:delta e:epsilon }
m2: { a:alpha b:beta g:gamma }
ref: a:alpha
iter: b:beta

See also

   std::swap(std::map)
   specializes the std::swap algorithm
   (function template)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/container/map/sw
   ap&oldid=135927"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 29 November 2021, at 19:48.
     * This page has been accessed 71,345 times.
