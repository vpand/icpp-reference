std::ranges::views::transform, std::ranges::transform_view

   From cppreference.com
   < cpp | ranges

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Ranges library
   Range access
   begin
   cbegin
   end
   cend
   rbegin
   crbegin
   rend
   crend
   size
   ssize
   data
   cdata
   empty
   Range conversions
   std::from_range_t
   std::from_range
   (C++23)(C++23)
   to
   (C++23)
   Range primitives
   range_size_trange_difference_trange_value_trange_reference_t
   iterator_tconst_iterator_tsentinel_tconst_sentinel_t
   (C++23)(C++23)
   range_const_reference_trange_rvalue_reference_trange_common_reference_t
   (C++23)
   elements_of
   (C++23)
   Dangling iterator handling
   dangling
   borrowed_iterator_t
   borrowed_subrange_t
   Range concepts
   range
   borrowed_range
   sized_range
   constant_range
   (C++23)
   common_range
   view
   viewable_range
   input_range
   output_range
   forward_range
   bidirectional_range
   random_access_range
   contiguous_range
   Views
   view_interface
   subrange
   Range factories
   empty_viewviews::empty
   single_viewviews::single
   iota_viewviews::iota
   repeat_viewviews::repeat
   (C++23)(C++23)
   basic_istream_viewviews::istream
   Range adaptors
   views::all_tviews::all
   ref_view
   owning_view
   as_rvalue_viewviews::as_rvalue
   (C++23)(C++23)
   filter_viewviews::filter
   transform_viewviews::transform
   take_viewviews::take
   take_while_viewviews::take_while
   concat_viewviews::concat
   (C++26)(C++26)
   drop_viewviews::drop
   drop_while_viewviews::drop_while
   join_viewviews::join
   join_with_viewviews::join_with
   (C++23)(C++23)
   lazy_split_viewviews::lazy_split
   split_viewviews::split
   views::counted
   common_viewviews::common
   reverse_viewviews::reverse
   as_const_viewviews::as_const
   (C++23)(C++23)
   elements_viewviews::elements
   keys_viewviews::keys
   values_viewviews::values
   enumerate_viewviews::enumerate
   (C++23)(C++23)
   zip_viewviews::zip
   (C++23)(C++23)
   zip_transform_viewviews::zip_transform
   (C++23)(C++23)
   adjacent_viewviews::adjacent
   (C++23)(C++23)
   views::pairwise
   (C++23)
   adjacent_transform_viewviews::adjacent_transform
   (C++23)(C++23)
   views::pairwise_transform
   (C++23)
   chunk_viewviews::chunk
   (C++23)(C++23)
   slide_viewviews::slide
   (C++23)(C++23)
   chunk_by_viewviews::chunk_by
   (C++23)(C++23)
   stride_viewviews::stride
   (C++23)(C++23)
   cartesian_product_viewviews::cartesian_product
   (C++23)(C++23)
   Range generators
   std::generator
   (C++23)
   Range adaptor objects
   Range adaptor closure objects
   range_adaptor_closure
   (C++23)
   Helper items
   copyable-box
   movable-box
   (until C++23)(C++23)
   simple-view
   non-propagating-cache

   std::ranges::transform_view
   Member functions
   transform_view::transform_view
   transform_view::base
   transform_view::begin
   transform_view::end
   transform_view::size
   Deduction guides
   Iterator
   transform_view::iterator::iterator
   transform_view::iterator::base
   transform_view::iterator::operator*
   transform_view::iterator::operator[]
   transform_view::iterator::operator++
   transform_view::iterator::operator++(int)
   transform_view::iterator::operator--
   transform_view::iterator::operator--(int)
   transform_view::iterator::operator+=
   transform_view::iterator::operator-=
   operator==(transform_view::iterator)
   operator<(transform_view::iterator)
   operator>(transform_view::iterator)
   operator<=(transform_view::iterator)
   operator>=(transform_view::iterator)
   operator<=>(transform_view::iterator)
   operator+(transform_view::iterator)
   operator-(transform_view::iterator)
   iter_move(transform_view::iterator)
   Sentinel
   transform_view::sentinel::sentinel
   transform_view::sentinel::base
   operator==(transform_view::iterator,transform_view::sentinel)
   operator-(transform_view::iterator,transform_view::sentinel)

   Defined in header <ranges>
                                                (1)
   template< ranges::input_range V,

             std::copy_constructible F >
       requires ranges::view<V> &&
                std::is_object_v<F> &&
                std::regular_invocable<F&, ranges::range_reference_t<V>>
   &&
                /* invoke_result_t<F&, range_reference_t<V>>& is a valid
   type */
   class transform_view
       : public ranges::view_interface<transform_view<V, F>>
   (since C++20)
   (until C++23)
   template< ranges::input_range V,

             std::move_constructible F >
       requires ranges::view<V> &&
                std::is_object_v<F> &&
                std::regular_invocable<F&, ranges::range_reference_t<V>>
   &&
                /* invoke_result_t<F&, range_reference_t<V>>& is a valid
   type */
   class transform_view
       : public ranges::view_interface<transform_view<V, F>>
                                                              (since C++23)
   namespace views {

       inline constexpr /*unspecified*/ transform = /*unspecified*/;
   }
   (2)                                          (since C++20)
   Call signature
   template< ranges::viewable_range R, class F >

       requires /* see below */
   constexpr ranges::view auto transform( R&& r, F&& fun );
                                                (since C++20)
   template< class F >
   constexpr /*range adaptor closure*/ transform( F&& fun );
                                                (since C++20)
   1) A range adaptor that represents view of an underlying sequence after
   applying a transformation function to each element.
   2) RangeAdaptorObject. The expression views::transform(e, f) is
   expression-equivalent to transform_view(e, f) for any suitable
   subexpressions e and f.

   transform_view models the concepts random_access_range,
   bidirectional_range, forward_range, input_range, common_range, and
   sized_range when the underlying view V models respective concepts.

Member functions

   (constructor)
   (C++20)
   constructs a transform_view
   (public member function)
   base
   (C++20)
   returns a copy of the underlying (adapted) view
   (public member function)
   begin
   (C++20)
   returns an iterator to the beginning
   (public member function)
   end
   (C++20)
   returns an iterator or a sentinel to the end
   (public member function)
   size
   (C++20)
   returns the number of elements. Provided only if the underlying
   (adapted) range satisfies sized_range.
   (public member function)

Inherited from std::ranges::view_interface

   empty
   (C++20)
   returns whether the derived view is empty. Provided if it satisfies
   sized_range or forward_range.
   (public member function of std::ranges::view_interface<D>)
   cbegin
   (C++23)
   returns a constant iterator to the beginning of the range.
   (public member function of std::ranges::view_interface<D>)
   cend
   (C++23)
   returns a sentinel for the constant iterator of the range.
   (public member function of std::ranges::view_interface<D>)
   operator bool
   (C++20)
   returns whether the derived view is not empty. Provided if
   ranges::empty is applicable to it.
   (public member function of std::ranges::view_interface<D>)
   front
   (C++20)
   returns the first element in the derived view. Provided if it satisfies
   forward_range.
   (public member function of std::ranges::view_interface<D>)
   back
   (C++20)
   returns the last element in the derived view. Provided if it satisfies
   bidirectional_range and common_range.
   (public member function of std::ranges::view_interface<D>)
   operator[]
   (C++20)
   returns the n^th element in the derived view. Provided if it satisfies
   random_access_range.
   (public member function of std::ranges::view_interface<D>)

Deduction guides

Nested classes

   iterator
   (C++20)
   the iterator type
   (exposition-only member class template*)
   sentinel
   (C++20)
   the sentinel type
   (exposition-only member class template*)

Example

   Run this code
#include <algorithm>
#include <cstdio>
#include <iterator>
#include <ranges>
#include <string>

char rot13a(const char x, const char a)
{
    return a + (x - a + 13) % 26;
}

char rot13(const char x)
{
    if ('Z' >= x and x >= 'A')
        return rot13a(x, 'A');

    if ('z' >= x and x >= 'a')
        return rot13a(x, 'a');

    return x;
}

int main()
{
    auto show = [](const unsigned char x) { std::putchar(x); };

    std::string in{"cppreference.com\n"};
    std::ranges::for_each(in, show);
    std::ranges::for_each(in | std::views::transform(rot13), show);

    std::string out;
    std::ranges::copy(std::views::transform(in, rot13), std::back_inserter(out))
;
    std::ranges::for_each(out, show);
    std::ranges::for_each(out | std::views::transform(rot13), show);
}

   Output:
cppreference.com
pccersrerapr.pbz
pccersrerapr.pbz
cppreference.com

See also

   ranges::transform
   (C++20)
   applies a function to a range of elements
   (niebloid)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/ranges/transform
   _view&oldid=168757"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 17 January 2024, at 00:50.
     * This page has been accessed 117,583 times.
