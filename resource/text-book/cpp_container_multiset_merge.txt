std::multiset<Key,Compare,Allocator>::merge

   From cppreference.com
   < cpp | container | multiset


   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Containers library
   Sequence
   array
   (C++11)
   vector
   vector<bool>
   deque
   forward_list
   (C++11)
   list
   Associative
   set
   multiset
   map
   multimap
   Unordered associative
   unordered_set
   (C++11)
   unordered_multiset
   (C++11)
   unordered_map
   (C++11)
   unordered_multimap
   (C++11)
   Adaptors
   stack
   queue
   priority_queue
   flat_set
   (C++23)
   flat_multiset
   (C++23)
   flat_map
   (C++23)
   flat_multimap
   (C++23)
   Views
   span
   (C++20)
   mdspan
   (C++23)
   Iterator invalidation
   Member function table
   Non-member function table

   std::multiset
   Member functions
   multiset::multiset
   multiset::~multiset
   multiset::operator=
   multiset::get_allocator
   Iterators
   multiset::beginmultiset::cbegin
   (C++11)
   multiset::endmultiset::cend
   (C++11)
   multiset::rbeginmultiset::crbegin
   (C++11)
   multiset::rendmultiset::crend
   (C++11)
   Capacity
   multiset::size
   multiset::max_size
   multiset::empty
   Modifiers
   multiset::clear
   multiset::erase
   multiset::swap
   multiset::extract
   (C++17)
   multiset::merge
   (C++17)
   multiset::insert
   multiset::insert_range
   (C++23)
   multiset::emplace
   (C++11)
   multiset::emplace_hint
   (C++11)
   Lookup
   multiset::count
   multiset::find
   multiset::contains
   (C++20)
   multiset::equal_range
   multiset::lower_bound
   multiset::upper_bound
   Observers
   multiset::key_comp
   multiset::value_comp
   Non-member functions
   operator==operator!=operator<operator>operator<=operator>=operator<=>
   (until C++20)(until C++20)(until C++20)(until C++20)(until
   C++20)(C++20)
   std::swap(std::multiset)
   erase_if(std::multiset)
   (C++20)
   Deduction guides(C++17)

   template< class C2 >
   void merge( std::set<Key, C2, Allocator>& source );
   (1)                 (since C++17)
   template< class C2 >
   void merge( std::set<Key, C2, Allocator>&& source );
   (2)                 (since C++17)
   template< class C2 >
   void merge( std::multiset<Key, C2, Allocator>& source );
   (3)                 (since C++17)
   template< class C2 >
   void merge( std::multiset<Key, C2, Allocator>&& source );
   (4)                 (since C++17)

   Attempts to extract ("splice") each element in source and insert it
   into *this using the comparison object of *this.

   No elements are copied or moved, only the internal pointers of the
   container nodes are repointed. All pointers and references to the
   transferred elements remain valid, but now refer into *this, not into
   source.

   The behavior is undefined if get_allocator() != source.get_allocator().

Parameters

   source - compatible container to transfer the nodes from

Return value

   (none)

Exceptions

   Does not throw unless comparison throws.

Complexity

   N * log(size() + N)), where N is source.size().

Example

   Run this code
#include <iostream>
#include <set>

// print out a container
template<class Os, class K>
Os& operator<<(Os& os, const std::multiset<K>& v)
{
    os << '[' << v.size() << "] {";
    bool o{};
    for (const auto& e : v)
        os << (o ? ", " : (o = 1, " ")) << e;
    return os << " }\n";
}

int main()
{
    std::multiset<char>
        p{'C', 'B', 'B', 'A'},
        q{'E', 'D', 'E', 'C'};

    std::cout << "p: " << p << "q: " << q;

    p.merge(q);

    std::cout << "p.merge(q);\n" << "p: " << p << "q: " << q;
}

   Output:
p: [4] { A, B, B, C }
q: [4] { C, D, E, E }
p.merge(q);
p: [8] { A, B, B, C, C, D, E, E }
q: [0] { }

See also

   extract
   (C++17)
   extracts nodes from the container
   (public member function)
   insert
   inserts elements or nodes(since C++17)
   (public member function)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/container/multis
   et/merge&oldid=135724"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 28 November 2021, at 07:58.
     * This page has been accessed 20,104 times.
