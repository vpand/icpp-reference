std::ranges::slide_view<V>::end

   From cppreference.com
   < cpp | ranges | slide view

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Ranges library
   Range access
   begin
   cbegin
   end
   cend
   rbegin
   crbegin
   rend
   crend
   size
   ssize
   data
   cdata
   empty
   Range conversions
   std::from_range_t
   std::from_range
   (C++23)(C++23)
   to
   (C++23)
   Range primitives
   range_size_trange_difference_trange_value_trange_reference_t
   iterator_tconst_iterator_tsentinel_tconst_sentinel_t
   (C++23)(C++23)
   range_const_reference_trange_rvalue_reference_trange_common_reference_t
   (C++23)
   elements_of
   (C++23)
   Dangling iterator handling
   dangling
   borrowed_iterator_t
   borrowed_subrange_t
   Range concepts
   range
   borrowed_range
   sized_range
   constant_range
   (C++23)
   common_range
   view
   viewable_range
   input_range
   output_range
   forward_range
   bidirectional_range
   random_access_range
   contiguous_range
   Views
   view_interface
   subrange
   Range factories
   empty_viewviews::empty
   single_viewviews::single
   iota_viewviews::iota
   repeat_viewviews::repeat
   (C++23)(C++23)
   basic_istream_viewviews::istream
   Range adaptors
   views::all_tviews::all
   ref_view
   owning_view
   as_rvalue_viewviews::as_rvalue
   (C++23)(C++23)
   filter_viewviews::filter
   transform_viewviews::transform
   take_viewviews::take
   take_while_viewviews::take_while
   concat_viewviews::concat
   (C++26)(C++26)
   drop_viewviews::drop
   drop_while_viewviews::drop_while
   join_viewviews::join
   join_with_viewviews::join_with
   (C++23)(C++23)
   lazy_split_viewviews::lazy_split
   split_viewviews::split
   views::counted
   common_viewviews::common
   reverse_viewviews::reverse
   as_const_viewviews::as_const
   (C++23)(C++23)
   elements_viewviews::elements
   keys_viewviews::keys
   values_viewviews::values
   enumerate_viewviews::enumerate
   (C++23)(C++23)
   zip_viewviews::zip
   (C++23)(C++23)
   zip_transform_viewviews::zip_transform
   (C++23)(C++23)
   adjacent_viewviews::adjacent
   (C++23)(C++23)
   views::pairwise
   (C++23)
   adjacent_transform_viewviews::adjacent_transform
   (C++23)(C++23)
   views::pairwise_transform
   (C++23)
   chunk_viewviews::chunk
   (C++23)(C++23)
   slide_viewviews::slide
   (C++23)(C++23)
   chunk_by_viewviews::chunk_by
   (C++23)(C++23)
   stride_viewviews::stride
   (C++23)(C++23)
   cartesian_product_viewviews::cartesian_product
   (C++23)(C++23)
   Range generators
   std::generator
   (C++23)
   Range adaptor objects
   Range adaptor closure objects
   range_adaptor_closure
   (C++23)
   Helper items
   copyable-box
   movable-box
   (until C++23)(C++23)
   simple-view
   non-propagating-cache

   std::ranges::slide_view
   Member functions
   slide_view::slide_view
   slide_view::begin
   slide_view::end
   slide_view::size
   Deduction guides
   Iterator
   Member functions
   slide_view::iterator::iterator
   slide_view::iterator::operator*
   slide_view::iterator::operator[]
   slide_view::iterator::operator++
   slide_view::iterator::operator++(int)
   slide_view::iterator::operator--
   slide_view::iterator::operator--(int)
   slide_view::iterator::operator+=
   slide_view::iterator::operator-=
   Non-member functions
   operator==(slide_view::iterator)
   operator<(slide_view::iterator)
   operator>(slide_view::iterator)
   operator<=(slide_view::iterator)
   operator>=(slide_view::iterator)
   operator<=>(slide_view::iterator)
   operator+(slide_view::iterator)
   operator-(slide_view::iterator)
   Sentinel
   Member functions
   slide_view::sentinel::sentinel
   Non-member functions
   operator==(slide_view::iterator,slide_view::sentinel)
   operator-(slide_view::iterator,slide_view::sentinel)

   constexpr auto end()
       requires (!(__simple_view<V> && __slide_caches_nothing<const V>));
   (1)                       (since C++23)
   constexpr auto end() const
       requires __slide_caches_nothing<const V>;
   (2)                       (since C++23)

   Returns a sentinel or an iterator representing the end of the
   slide_view.
   1) Let base_ and n_ be the underlying data members. Equivalent to:
     * If V models __slide_caches_nothing, return
       iterator<false>(ranges::begin(base_) +
       ranges::range_difference_t<V>(size()), n_);.
     * Otherwise, if V models __slide_caches_last, return
       iterator<false>(ranges::prev(ranges::end(base_), n_ - 1,
       ranges::begin(base_)), n_);.
     * Otherwise, if V models common_range, return
       iterator<false>(ranges::end(base_), ranges::end(base_), n_);.
     * Otherwise, return sentinel(ranges::end(base_));.

   If V models __slide_caches_last, this function caches the result within
   the slide_view::cached_end_ for use on subsequent calls. This is
   necessary to provide the amortized constant-time complexity required by
   the range.
   2) Equivalent to begin() + ranges::range_difference_t<const V>(size()).

Parameters

   (none)

Return value

   A sentinel or an iterator representing the end of the slide_view.

Example

   Run this code
#include <iostream>
#include <ranges>

int main()
{
    static constexpr auto source = {'A', 'B', 'C', 'D'};

    for (const auto subrange: source | std::views::slide(3))
    {
        std::cout << "[ ";
        for (auto it = subrange.begin(); it != subrange.end(); ++it)
            std::cout << *it << ' ';
        std::cout << "]\n";
    }
}

   Output:
[ A B C ]
[ B C D ]

See also

   begin
   (C++23)
   returns an iterator to the beginning
   (public member function)
   ranges::begin
   (C++20)
   returns an iterator to the beginning of a range
   (customization point object)
   ranges::end
   (C++20)
   returns a sentinel indicating the end of a range
   (customization point object)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/ranges/slide_vie
   w/end&oldid=156884"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 16 August 2023, at 23:26.
     * This page has been accessed 2,505 times.
