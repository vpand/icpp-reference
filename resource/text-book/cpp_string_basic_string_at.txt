std::basic_string<CharT,Traits,Allocator>::at

   From cppreference.com
   < cpp | string | basic string

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Strings library
   Null-terminated strings
   Byte strings
   Multibyte strings
   Wide strings
   Classes
   basic_string
   basic_string_view
   (C++17)
   char_traits

   std::basic_string
   Member functions
   basic_string::basic_string
   basic_string::~basic_string
   basic_string::operator=
   basic_string::assign
   basic_string::assign_range
   (C++23)
   basic_string::get_allocator
   Element access
   basic_string::at
   basic_string::operator[]
   basic_string::front
   (DR*)
   basic_string::back
   (DR*)
   basic_string::data
   basic_string::c_str
   basic_string::operator
    basic_string_view
   (C++17)
   Iterators
   basic_string::beginbasic_string::cbegin
   (C++11)
   basic_string::endbasic_string::cend
   (C++11)
   basic_string::rbeginbasic_string::crbegin
   (C++11)
   basic_string::rendbasic_string::crend
   (C++11)
   Capacity
   basic_string::empty
   basic_string::sizebasic_string::length
   basic_string::max_size
   basic_string::reserve
   basic_string::capacity
   basic_string::shrink_to_fit
   (DR*)
   Modifiers
   basic_string::clear
   basic_string::insert
   basic_string::insert_range
   (C++23)
   basic_string::erase
   basic_string::push_back
   basic_string::pop_back
   (DR*)
   basic_string::append
   basic_string::append_range
   (C++23)
   basic_string::operator+=
   basic_string::replace
   basic_string::replace_with_range
   (C++23)
   basic_string::copy
   basic_string::resize
   basic_string::resize_and_overwrite
   (C++23)
   basic_string::swap
   Search
   basic_string::find
   basic_string::rfind
   basic_string::find_first_of
   basic_string::find_first_not_of
   basic_string::find_last_of
   basic_string::find_last_not_of
   Operations
   basic_string::compare
   basic_string::starts_with
   (C++20)
   basic_string::ends_with
   (C++20)
   basic_string::contains
   (C++23)
   basic_string::substr
   Constants
   basic_string::npos
   Non-member functions
   operator+
   swap(std::basic_string)
   erase(std::basic_string)erase_if(std::basic_string)
   (C++20)(C++20)
   I/O
   operator<<operator>>
   getline
   Comparison
   operator==operator!=operator<operator>operator<=operator>=operator<=>
   (until C++20)(until C++20)(until C++20)(until C++20)(until
   C++20)(C++20)
   Numeric conversions
   stoistolstoll
   (C++11)(C++11)(C++11)
   stoulstoull
   (C++11)(C++11)
   stofstodstold
   (C++11)(C++11)(C++11)
   to_string
   (C++11)
   to_wstring
   (C++11)
   Literals
   operator""s
   (C++14)
   Helper classes
   hash<std::basic_string>
   (C++11)
   Deduction guides (C++17)

   CharT& at( size_type pos );
   (1)                                    (constexpr since C++20)
   const CharT& at( size_type pos ) const;
   (2)                                    (constexpr since C++20)

   Returns a reference to the character at specified location pos. Bounds
   checking is performed, exception of type std::out_of_range will be
   thrown on invalid access.

Parameters

   pos - position of the character to return

Return value

   Reference to the requested character.

Exceptions

   Throws std::out_of_range if pos >= size().

   If an exception is thrown for any reason, these functions have no
   effect (strong exception safety guarantee).

Complexity

   Constant.

Example

   Run this code
#include <iostream>
#include <stdexcept>
#include <string>

int main()
{
    std::string s("message"); // for capacity

    s = "abc";
    s.at(2) = 'x'; // OK
    std::cout << s << '\n';

    std::cout << "string size = " << s.size() << '\n';
    std::cout << "string capacity = " << s.capacity() << '\n';

    try
    {
        // This will throw since the requested offset is greater than the curren
t size.
        s.at(3) = 'x';
    }
    catch (std::out_of_range const& exc)
    {
        std::cout << exc.what() << '\n';
    }
}

   Possible output:
abx
string size = 3
string capacity = 7
basic_string::at

Defect reports

   The following behavior-changing defect reports were applied
   retroactively to previously published C++ standards.
   DR Applied to Behavior as published Correct behavior
   LWG 847 C++98 there was no exception safety guarantee added strong
   exception safety guarantee

See also

   operator[]
   accesses the specified character
   (public member function)
   at
   accesses the specified character with bounds checking
   (public member function of std::basic_string_view<CharT,Traits>)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/string/basic_str
   ing/at&oldid=172153"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 30 May 2024, at 11:04.
     * This page has been accessed 122,122 times.
