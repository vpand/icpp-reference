C++ named requirements: RangeAdaptorObject (since C++20)

   From cppreference.com
   < cpp | named req

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   C++ named requirements
   Basic
   DefaultConstructible
   CopyAssignable
   CopyConstructible
   MoveAssignable
   (C++11)
   MoveConstructible
   (C++11)
   Destructible
   Type properties
   ScalarType
   TriviallyCopyable
   (C++11)
   StandardLayoutType
   (C++11)
   PODType
   TrivialType
   (C++11)
   ImplicitLifetimeType
   Library-Wide
   EqualityComparable
   LessThanComparable
   Swappable
   ValueSwappable
   (C++11)
   NullablePointer
   (C++11)
   Hash
   (C++11)
   Allocator
   FunctionObject
   Callable
   Predicate
   BinaryPredicate
   Compare
   Container
   Container
   SequenceContainer
   ContiguousContainer
   (C++17)
   ReversibleContainer
   AssociativeContainer
   AllocatorAwareContainer
   UnorderedAssociativeContainer
   (C++11)
   Container Elements
   DefaultInsertable
   (C++11)
   CopyInsertable
   (C++11)
   MoveInsertable
   (C++11)
   EmplaceConstructible
   (C++11)
   Erasable
   (C++11)
   Iterator
   LegacyIterator
   LegacyOutputIterator
   LegacyInputIterator
   LegacyForwardIterator
   LegacyBidirectionalIterator
   LegacyRandomAccessIterator
   LegacyContiguousIterator
   (C++17)
   ConstexprIterator
   (C++20)
   Stream I/O
   FormattedInputFunction
   UnformattedInputFunction
   FormattedOutputFunction
   UnformattedOutputFunction
   Formatters
   BasicFormatter
   (C++20)
   Formatter
   (C++20)
   Random Numbers
   SeedSequence
   (C++11)
   RandomNumberEngine
   (C++11)
   RandomNumberDistribution
   (C++11)
   UniformRandomBitGenerator
   (C++11)
   RandomNumberEngineAdaptor
   (C++11)
   Concurrency
   BasicLockable
   (C++11)
   Lockable
   (C++11)
   TimedLockable
   (C++11)
   SharedLockable
   (C++14)
   SharedTimedLockable
   (C++14)
   Mutex
   (C++11)
   TimedMutex
   (C++11)
   SharedMutex
   (C++17)
   SharedTimedMutex
   (C++14)
   Ranges
   RangeAdaptorObject
   (C++20)
   RangeAdaptorClosureObject
   (C++20)
   Other
   CharTraits
   RegexTraits
   (C++11)
   BitmaskType
   LiteralType
   (C++11)
   NumericType
   UnaryTypeTrait
   (C++11)
   BinaryTypeTrait
   (C++11)
   TransformationTrait
   (C++11)
   Clock
   (C++11)
   TrivialClock
   (C++11)

   Range adaptor objects are customization point objects that accept
   viewable_range as their first arguments and return a view. Some range
   adaptor objects are unary, i.e. they take one viewable_range as their
   only argument. Other range adaptor objects take a viewable_range and
   other trailing arguments.

   If a range adaptor object takes only one argument, it is also a
   RangeAdaptorClosureObject.

   If a range adaptor object takes more than one argument, it also
   supports partial application: let
     * a be such a range adaptor object, and
     * args... be arguments (generally suitable for trailing arguments),

   expression a(args...) has following properties:
     * it is valid if and only if for every argument e in args... such
       that E is decltype((e)), std::is_constructible_v<std::decay_t<E>,
       E> is true,
     * when the call is valid, its result object stores a subobject of
       type std::decay_t<E> direct-non-list-initialized with
       std::forward<E>(e), for every argument e in args... (in other
       words, range adaptor objects bind arguments by value),
     * the result object is a RangeAdaptorClosureObject,
     * calling the RangeAdaptorClosureObject forwards the bound arguments
       (if any) to the associated range adaptor object. The bound
       arguments (if any) are considered to have the value category and
       cv-qualification of the RangeAdaptorClosureObject. In other words,
       a(args...)(r) is equivalent to std::bind_back(a, args...)(r) (but
       the former also supports the pipe syntax).(since C++23)

   Like other customization point objects, let
     * a be an object of the cv-unqualified version of the type of any
       range adaptor objects,
     * args... be any group of arguments that satisfies the constraints of
       the operator() of the type of a,

   calls to
     * a(args...),
     * std::as_const(a)(args...),
     * std::move(a)(args...), and
     * std::move(std::as_const(a))(args...)

   are all equivalent.

   The result object of each of these expressions is either a view object
   or a RangeAdaptorClosureObject.

Notes

   operator() is unsupported for volatile-qualified or
   const-volatile-qualified version of range adaptor object types. Arrays
   and functions are converted to pointers while binding.
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/named_req/RangeA
   daptorObject&oldid=159992"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 2 October 2023, at 07:56.
     * This page has been accessed 7,992 times.
