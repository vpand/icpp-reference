std::scoped_allocator_adaptor<OuterAlloc,InnerAlloc...>::scoped_allocator_ada
ptor

   From cppreference.com
   < cpp | memory | scoped allocator adaptor

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Dynamic memory management
   Uninitialized memory algorithms
   uninitialized_copy
   uninitialized_fill
   uninitialized_move
   (C++17)
   uninitialized_default_construct
   (C++17)
   uninitialized_value_construct
   (C++17)
   destroy
   (C++17)
   destroy_at
   (C++17)
   voidify
   (C++20)
   uninitialized_copy_n
   (C++11)
   uninitialized_fill_n
   uninitialized_move_n
   (C++17)
   uninitialized_default_construct_n
   (C++17)
   uninitialized_value_construct_n
   (C++17)
   destroy_n
   (C++17)
   construct_at
   (C++20)
   Constrained uninitialized memory algorithms
   ranges::uninitialized_copy
   (C++20)
   ranges::uninitialized_fill
   (C++20)
   ranges::uninitialized_move
   (C++20)
   ranges::construct_at
   (C++20)
   ranges::destroy
   (C++20)
   ranges::destroy_n
   (C++20)
   ranges::destroy_at
   (C++20)
   ranges::uninitialized_copy_n
   (C++20)
   ranges::uninitialized_fill_n
   (C++20)
   ranges::uninitialized_move_n
   (C++20)
   ranges::uninitialized_default_construct
   (C++20)
   ranges::uninitialized_value_construct
   (C++20)
   ranges::uninitialized_default_construct_n
   (C++20)
   ranges::uninitialized_value_construct_n
   (C++20)
   Allocators
   allocator
   allocator_traits
   (C++11)
   allocation_result
   (C++23)
   allocator_arg
   (C++11)
   uses_allocator
   (C++11)
   uses_allocator_construction_args
   (C++20)
   make_obj_using_allocator
   (C++20)
   uninitialized_construct_using_allocator
   (C++20)
   scoped_allocator_adaptor
   (C++11)
   pmr::polymorphic_allocator
   (C++17)
   Memory resources
   pmr::memory_resource
   (C++17)
   pmr::get_default_resource
   (C++17)
   pmr::set_default_resource
   (C++17)
   pmr::new_delete_resource
   (C++17)
   pmr::null_memory_resource
   (C++17)
   pmr::synchronized_pool_resource
   (C++17)
   pmr::unsynchronized_pool_resource
   (C++17)
   pmr::monotonic_buffer_resource
   (C++17)
   pmr::pool_options
   (C++17)
   Garbage collection support
   declare_reachable
   (C++11)(until C++23)
   undeclare_reachable
   (C++11)(until C++23)
   declare_no_pointers
   (C++11)(until C++23)
   undeclare_no_pointers
   (C++11)(until C++23)
   pointer_safety
   (C++11)(until C++23)
   get_pointer_safety
   (C++11)(until C++23)
   Uninitialized storage
   raw_storage_iterator
   (until C++20*)
   get_temporary_buffer
   (until C++20*)
   return_temporary_buffer
   (until C++20*)
   Explicit lifetime management
   start_lifetime_asstart_lifetime_as_array
   (C++23)(C++23)
   Smart pointers
   unique_ptr
   (C++11)
   shared_ptr
   (C++11)
   weak_ptr
   (C++11)
   auto_ptr
   (until C++17*)
   owner_less
   (C++11)
   owner_less<void>
   (C++17)
   owner_hash
   (C++26)
   owner_equal
   (C++26)
   enable_shared_from_this
   (C++11)
   bad_weak_ptr
   (C++11)
   default_delete
   (C++11)
   out_ptr_t
   (C++23)
   inout_ptr_t
   (C++23)
   Low level memory
   management
   operator new
   operator new[]
   operator delete
   operator delete[]
   get_new_handler
   set_new_handler
   launder
   (C++17)
   bad_alloc
   bad_array_new_length
   nothrow_t
   align_val_t
   destroying_delete_t
   new_handler
   nothrow
   Miscellaneous
   pointer_traits
   (C++11)
   to_address
   (C++20)
   addressof
   (C++11)
   align
   (C++11)
   assume_aligned
   (C++20)
   C Library
   malloc
   calloc
   realloc

   aligned_alloc
   (C++17)
   free

   std::scoped_allocator_adaptor
   Member functions
   scoped_allocator_adaptor::scoped_allocator_adaptor
   scoped_allocator_adaptor::~scoped_allocator_adaptor
   scoped_allocator_adaptor::operator=
   scoped_allocator_adaptor::inner_allocator
   scoped_allocator_adaptor::outer_allocator
   scoped_allocator_adaptor::allocate
   scoped_allocator_adaptor::deallocate
   scoped_allocator_adaptor::max_size
   scoped_allocator_adaptor::construct
   scoped_allocator_adaptor::destroy
   scoped_allocator_adaptor::select_on_container_copy_construction
   Non-member functions
   operator==operator!=
   (until C++20)
   Deduction guides(C++17)

   Defined in header <scoped_allocator>
   scoped_allocator_adaptor();
   (1)                                 (since C++11)
   template< class OuterA2 >

   scoped_allocator_adaptor(
       OuterA2&& outerAlloc, const InnerAllocs&... innerAllocs
   ) noexcept;
   (2)                                 (since C++11)
   scoped_allocator_adaptor(

       const scoped_allocator_adaptor& other
   ) noexcept;
   (3)                                 (since C++11)
   scoped_allocator_adaptor(

       scoped_allocator_adaptor&& other
   ) noexcept;
   (4)                                 (since C++11)
   template< class OuterA2 >

   scoped_allocator_adaptor(
       const scoped_allocator_adaptor<OuterA2, InnerAllocs...>& other
   ) noexcept;
   (5)                                 (since C++11)
   template< class OuterA2 >

   scoped_allocator_adaptor(
       scoped_allocator_adaptor<OuterA2, InnerAllocs...>&& other
   ) noexcept;
   (6)                                 (since C++11)
   1) Default constructor: value-initializes the OuterAlloc base class and
   the inner allocator member object, if used by the implementation.
   2) Constructs the base class OuterAlloc from
   std::forward<OuterA2>(outerAlloc), and the inner allocators with
   innerAllocs.... This overload participates in overload resolution only
   if std::is_constructible<OuterAlloc, OuterA2>::value is true.
   3) Copy-constructor: initializes each allocator from the corresponding
   allocator of other.
   4) Move-constructor: moves each allocator from the corresponding
   allocator of other into *this.
   5) Initializes each allocator from the corresponding allocator of
   other. This overload participates in overload resolution only if
   std::is_constructible<OuterAlloc, const OuterA2&>::value is true.
   6) Initializes each allocator from the corresponding allocator of
   other, using move semantics. This overload participates in overload
   resolution only if std::is_constructible<OuterAlloc, OuterA2>::value is
   true.

Parameters

   outerAlloc     - constructor argument for the outer allocator
   innerAllocs... - constructor arguments for the inner allocators
   other          - another std::scoped_allocator_adaptor

Defect reports

   The following behavior-changing defect reports were applied
   retroactively to previously published C++ standards.
   DR Applied to Behavior as published Correct behavior
   LWG 2782 C++11 constructors taking OuterA2 weren't constrained,
   interfering with metaprogramming constraint added

See also

   allocate
   allocates uninitialized storage using the outer allocator
   (public member function)
   construct
   constructs an object in allocated storage, passing the inner allocator
   to its constructor if appropriate
   (public member function)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/memory/scoped_al
   locator_adaptor/scoped_allocator_adaptor&oldid=160265"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 7 October 2023, at 07:22.
     * This page has been accessed 16,873 times.
