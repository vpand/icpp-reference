std::ptrdiff_t

   From cppreference.com
   < cpp | types

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Utilities library
   Language support
   Type support (basic types, RTTI)
   Library feature-test macros (C++20)
   Dynamic memory management
   Program utilities
   Coroutine support (C++20)
   Variadic functions
   is_constant_evaluated
   (C++20)
   is_within_lifetime
   (C++26)
   initializer_list
   (C++11)
   source_location
   (C++20)
   Debugging support
   is_debugger_present
   (C++26)
   breakpoint_if_debugging
   (C++26)
   breakpoint
   (C++26)
   Three-way comparison
   three_way_comparablethree_way_comparable_with
   (C++20)(C++20)
   strong_ordering
   (C++20)
   weak_ordering
   (C++20)
   partial_ordering
   (C++20)
   common_comparison_category
   (C++20)
   compare_three_way_result
   (C++20)
   compare_three_way
   (C++20)
   strong_order
   (C++20)
   weak_order
   (C++20)
   partial_order
   (C++20)
   compare_strong_order_fallback
   (C++20)
   compare_weak_order_fallback
   (C++20)
   compare_partial_order_fallback
   (C++20)
   is_eqis_ltis_lteq
   (C++20)(C++20)(C++20)
   is_neqis_gtis_gteq
   (C++20)(C++20)(C++20)
   General utilities
   Date and time
   Function objects
   Formatting library (C++20)
   bitset
   hash
   (C++11)
   Relational operators (deprecated in C++20)
   rel_ops::operator!=rel_ops::operator>

   rel_ops::operator<=rel_ops::operator>=
   Integer comparison functions
   cmp_equalcmp_lesscmp_less_than
   (C++20)(C++20)(C++20)
   cmp_not_equalcmp_greatercmp_greater_than
   (C++20)(C++20)(C++20)
   in_range
   (C++20)
   Swap and type operations
   swap
   ranges::swap
   (C++20)
   exchange
   (C++14)
   declval
   (C++11)
   to_underlying
   (C++23)
   forward
   (C++11)
   forward_like
   (C++23)
   move
   (C++11)
   move_if_noexcept
   (C++11)
   as_const
   (C++17)
   Common vocabulary types
   pair
   tuple
   (C++11)
   optional
   (C++17)
   any
   (C++17)
   variant
   (C++17)
   tuple_size
   (C++11)
   tuple_element
   (C++11)
   apply
   (C++17)
   make_from_tuple
   (C++17)
   expected
   (C++23)
   Elementary string conversions
   to_chars
   (C++17)
   from_chars
   (C++17)
   chars_format
   (C++17)
   to_chars_result
   (C++17)
   from_chars_result
   (C++17)

   Type support
   Basic types
   Fixed width integer types (C++11)
   Fixed width floating-point types (C++23)
   ptrdiff_t
   size_t
   max_align_t
   (C++11)
   byte
   (C++17)
   nullptr_t
   (C++11)
   offsetof
   NULL
   Numeric limits
   numeric_limits
   C numeric limits interface
   Runtime type information
   type_info
   type_index
   (C++11)
   bad_typeid
   bad_cast

   Defined in header <cstddef>
   typedef /*implementation-defined*/ ptrdiff_t;

   std::ptrdiff_t is the signed integer type of the result of subtracting
   two pointers.

   The bit width of std::ptrdiff_t is not less than 17.
   (since C++11)

Notes

   std::ptrdiff_t is used for pointer arithmetic and array indexing, if
   negative values are possible. Programs that use other types, such as
   int, may fail on, e.g. 64-bit systems when the index exceeds INT_MAX or
   if it relies on 32-bit modular arithmetic.

   When working with the C++ container library, the proper type for the
   difference between iterators is the member typedef difference_type,
   which is often synonymous with std::ptrdiff_t.

   Only pointers to elements of the same array (including the pointer one
   past the end of the array) may be subtracted from each other.

   If an array is so large (greater than PTRDIFF_MAX elements, but less
   than SIZE_MAX bytes), that the difference between two pointers may not
   be representable as std::ptrdiff_t, the result of subtracting two such
   pointers is undefined.

   For char arrays shorter than PTRDIFF_MAX, std::ptrdiff_t acts as the
   signed counterpart of std::size_t: it can store the size of the array
   of any type and is, on most platforms, synonymous with std::intptr_t.

   It is unspecified whether the declaration of std::ptrdiff_t is
   available in any other standard library header. An implementation may
   avoid introducing this name even when the standard requires
   std::ptrdiff_t to be used.

Possible implementation

// valid since C++11
using ptrdiff_t = decltype(static_cast<int*>(nullptr) - static_cast<int*>(nullpt
r));

Example

   Run this code
#include <cstddef>
#include <iostream>

int main()
{
    const std::size_t N = 10;
    int* a = new int[N];
    int* end = a + N;
    for (std::ptrdiff_t i = N; i > 0; --i)
        std::cout << (*(end - i) = i) << ' ';
    std::cout << '\n';
    delete[] a;
}

   Output:
10 9 8 7 6 5 4 3 2 1

See also

   size_t
   unsigned integer type returned by the sizeof operator
   (typedef)
   offsetof
   byte offset from the beginning of a standard-layout type to specified
   member
   (function macro)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/types/ptrdiff_t&
   oldid=171700"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 12 May 2024, at 21:00.
     * This page has been accessed 366,454 times.
