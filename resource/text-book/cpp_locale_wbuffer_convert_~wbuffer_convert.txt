std::wbuffer_convert<Codecvt,Elem,Tr>::~wbuffer_convert

   From cppreference.com
   < cpp | locale | wbuffer convert

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Localization library
   Locales and facets
   Locales
   has_facet
   use_facet
   locale
   Facet category base classes
   ctype_base
   codecvt_base
   messages_base

   time_base
   money_base
   ctype facets
   ctype
   ctype<char>
   ctype_byname
   codecvt
   codecvt_byname
   numeric facets
   num_get
   num_put
   numpunct
   numpunct_byname
   collate facets
   collate
   collate_byname
   time facets
   time_get
   time_put
   time_get_byname
   time_put_byname
   monetary facets
   money_get
   money_put
   moneypunct
   moneypunct_byname

   messages facets
   messages
   messages_byname
   Character classification and conversion
   Character classification
   isspace
   isblank
   (C++11)
   iscntrl
   isupper
   islower
   isalpha
   ispunct
   isdigit
   isxdigit
   isalnum
   isprint
   isgraph
   Character conversions
   toupper

   tolower
   String and stream conversions
   wstring_convert
   (C++11/17/26*)
   wbuffer_convert
   (C++11/17/26*)
   Text encoding identifications
   text_encoding
   (C++26)
   Unicode conversion facets
   codecvt_utf8
   (C++11/17/26*)
   codecvt_utf16
   (C++11/17/26*)
   codecvt_utf8_utf16
   (C++11/17/26*)
   codecvt_mode
   (C++11/17/26*)
   C library locales
   LC_ALLLC_COLLATELC_CTYPELC_MONETARYLC_NUMERICLC_TIME

   setlocale
   localeconv
   lconv

   std::wbuffer_convert
   Member functions
   wbuffer_convert::wbuffer_convert
   wbuffer_convert::~wbuffer_convert
   wbuffer_convert::rdbuf
   wbuffer_convert::state

   Defined in header <locale>
   ~wbuffer_convert();

   Destroys the wbuffer_convert object and deletes the pointer to the
   conversion facet.

Notes

   Some implementations are able to delete any facet, including the
   locale-specific facets with protected destructors. Other
   implementations require the facet to have a public destructor, similar
   to the locale-independent facets from <codecvt>.

Example

   Run this code
#include <codecvt>
#include <iostream>
#include <locale>
#include <utility>

// Utility wrapper to adapt locale-bound facets for wstring/wbuffer convert
template<class Facet>
struct deletable_facet : Facet
{
    template<class ...Args>
    deletable_facet(Args&& ...args) : Facet(std::forward<Args>(args)...) {}
    ~deletable_facet() {}
};

int main()
{
// GB18030 / UCS4 conversion, using locale-based facet directly
//  typedef std::codecvt_byname<char32_t, char, std::mbstate_t> gbfacet_t;
// Compiler error: "calling a protected destructor of codecvt_byname<> in ~wbuff
er_convert"
//  std::wbuffer_convert<gbfacet_t, char32_t>
//      gbto32(std::cout.rdbuf(), new gbfacet_t("zh_CN.gb18030"));

// GB18030 / UCS4 conversion facet using a facet with public destructor
    typedef deletable_facet<std::codecvt_byname<char32_t, char, std::mbstate_t>>
 gbfacet_t;
    std::wbuffer_convert<gbfacet_t, char32_t>
        gbto32(std::cout.rdbuf(), new gbfacet_t("zh_CN.gb18030"));
} // destructor called here

See also

   (destructor)
   destructs the wstring_convert and its conversion facet
   (public member function of
   std::wstring_convert<Codecvt,Elem,Wide_alloc,Byte_alloc>)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/locale/wbuffer_c
   onvert/%7Ewbuffer_convert&oldid=160221"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 6 October 2023, at 11:47.
     * This page has been accessed 11,528 times.
