std::ranges::borrowed_range, std::ranges::enable_borrowed_range

   From cppreference.com
   < cpp | ranges

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Ranges library
   Range access
   begin
   cbegin
   end
   cend
   rbegin
   crbegin
   rend
   crend
   size
   ssize
   data
   cdata
   empty
   Range conversions
   std::from_range_t
   std::from_range
   (C++23)(C++23)
   to
   (C++23)
   Range primitives
   range_size_trange_difference_trange_value_trange_reference_t
   iterator_tconst_iterator_tsentinel_tconst_sentinel_t
   (C++23)(C++23)
   range_const_reference_trange_rvalue_reference_trange_common_reference_t
   (C++23)
   elements_of
   (C++23)
   Dangling iterator handling
   dangling
   borrowed_iterator_t
   borrowed_subrange_t
   Range concepts
   range
   borrowed_range
   sized_range
   constant_range
   (C++23)
   common_range
   view
   viewable_range
   input_range
   output_range
   forward_range
   bidirectional_range
   random_access_range
   contiguous_range
   Views
   view_interface
   subrange
   Range factories
   empty_viewviews::empty
   single_viewviews::single
   iota_viewviews::iota
   repeat_viewviews::repeat
   (C++23)(C++23)
   basic_istream_viewviews::istream
   Range adaptors
   views::all_tviews::all
   ref_view
   owning_view
   as_rvalue_viewviews::as_rvalue
   (C++23)(C++23)
   filter_viewviews::filter
   transform_viewviews::transform
   take_viewviews::take
   take_while_viewviews::take_while
   concat_viewviews::concat
   (C++26)(C++26)
   drop_viewviews::drop
   drop_while_viewviews::drop_while
   join_viewviews::join
   join_with_viewviews::join_with
   (C++23)(C++23)
   lazy_split_viewviews::lazy_split
   split_viewviews::split
   views::counted
   common_viewviews::common
   reverse_viewviews::reverse
   as_const_viewviews::as_const
   (C++23)(C++23)
   elements_viewviews::elements
   keys_viewviews::keys
   values_viewviews::values
   enumerate_viewviews::enumerate
   (C++23)(C++23)
   zip_viewviews::zip
   (C++23)(C++23)
   zip_transform_viewviews::zip_transform
   (C++23)(C++23)
   adjacent_viewviews::adjacent
   (C++23)(C++23)
   views::pairwise
   (C++23)
   adjacent_transform_viewviews::adjacent_transform
   (C++23)(C++23)
   views::pairwise_transform
   (C++23)
   chunk_viewviews::chunk
   (C++23)(C++23)
   slide_viewviews::slide
   (C++23)(C++23)
   chunk_by_viewviews::chunk_by
   (C++23)(C++23)
   stride_viewviews::stride
   (C++23)(C++23)
   cartesian_product_viewviews::cartesian_product
   (C++23)(C++23)
   Range generators
   std::generator
   (C++23)
   Range adaptor objects
   Range adaptor closure objects
   range_adaptor_closure
   (C++23)
   Helper items
   copyable-box
   movable-box
   (until C++23)(C++23)
   simple-view
   non-propagating-cache

   Defined in header <ranges>
   template< class R >

   concept borrowed_range =
       ranges::range<R> &&
       (std::is_lvalue_reference_v<R> ||
        ranges::enable_borrowed_range<std::remove_cvref_t<R>>);
   (1)                       (since C++20)
   template< class R >
   inline constexpr bool enable_borrowed_range = false;
   (2)                       (since C++20)
   1) The concept borrowed_range defines the requirements of a range such
   that a function can take it by value and return iterators obtained from
   it without danger of dangling.
   2) The enable_borrowed_range variable template is used to indicate
   whether a range is a borrowed_range. The primary template is defined as
   false.

Semantic requirements

   Let U be std::remove_reference_t<T> if T is an rvalue reference type,
   and T otherwise. Given a variable u of type U, T models borrowed_range
   only if the validity of iterators obtained from u is not tied to the
   lifetime of that variable.

Specializations

   Specializations of enable_borrowed_range for all specializations of the
   following standard templates are defined as true:
     * std::basic_string_view
     * std::span
     * std::ranges::subrange
     * std::ranges::ref_view
     * std::ranges::empty_view
     * std::ranges::iota_view

   Specialization of enable_borrowed_range for the following standard
   range adaptors are defined as true if and only if
   std::ranges::enable_borrowed_range<V> is true, where V is the
   underlying view type:
     * std::ranges::owning_view
     * std::ranges::take_view
     * std::ranges::drop_view
     * std::ranges::drop_while_view
     * std::ranges::common_view
     * std::ranges::reverse_view
     * std::ranges::elements_view

     * std::ranges::adjacent_view

   (since C++23)

   Specialization for std::ranges::zip_view is defined as true if and only
   if (std::ranges::enable_borrowed_range<Vs> && ...) is true, where Vs...
   are all view types it adapts.
   (since C++23)

   A program may specialize enable_borrowed_range to true for
   cv-unqualified program-defined types which model borrowed_range, and
   false for types which do not. Such specializations shall be usable in
   constant expression and have type const bool.

Example

   Demonstrates the specializations of enable_borrowed_range for program
   defined types. Such specializations protect against potentially
   dangling results.
   Run this code
#include <algorithm>
#include <array>
#include <cstddef>
#include <iostream>
#include <ranges>
#include <span>
#include <type_traits>

template<typename T, std::size_t N>
struct MyRange : std::array<T, N> {};

template<typename T, std::size_t N>
inline constexpr bool std::ranges::enable_borrowed_range<MyRange<T, N>> = false;

template<typename T, std::size_t N>
struct MyBorrowedRange : std::span<T, N> {};

template<typename T, std::size_t N>
inline constexpr bool std::ranges::enable_borrowed_range<MyBorrowedRange<T, N>>
= true;

int main()
{
    static_assert(std::ranges::range<MyRange<int, 8>>);
    static_assert(std::ranges::borrowed_range<MyRange<int, 8>> == false);
    static_assert(std::ranges::range<MyBorrowedRange<int, 8>>);
    static_assert(std::ranges::borrowed_range<MyBorrowedRange<int, 8>> == true);

    auto getMyRangeByValue = []{ return MyRange<int, 4>{{1, 2, 42, 3}}; };
    auto dangling_iter = std::ranges::max_element(getMyRangeByValue());
    static_assert(std::is_same_v<std::ranges::dangling, decltype(dangling_iter)>
);
//  *dangling_iter; // compilation error (i.e. dangling protection works.)

    auto my = MyRange<int, 4>{{1, 2, 42, 3}};
    auto valid_iter = std::ranges::max_element(my);
    std::cout << *valid_iter << ' '; // OK: 42

    auto getMyBorrowedRangeByValue = []
    {
        static int sa[4]{1, 2, 42, 3};
        return MyBorrowedRange<int, std::size(sa)>{sa};
    };
    auto valid_iter2 = std::ranges::max_element(getMyBorrowedRangeByValue());
    std::cout << *valid_iter2 << '\n'; // OK: 42
}

   Output:
42 42

See also

   ranges::dangling
   (C++20)
   a placeholder type indicating that an iterator or a subrange should not
   be returned since it would be dangling
   (class)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/ranges/borrowed_
   range&oldid=170162"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 13 March 2024, at 19:26.
     * This page has been accessed 37,281 times.
