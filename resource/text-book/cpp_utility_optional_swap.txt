std::optional<T>::swap

   From cppreference.com
   < cpp | utility | optional

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Utilities library
   Language support
   Type support (basic types, RTTI)
   Library feature-test macros (C++20)
   Dynamic memory management
   Program utilities
   Coroutine support (C++20)
   Variadic functions
   is_constant_evaluated
   (C++20)
   is_within_lifetime
   (C++26)
   initializer_list
   (C++11)
   source_location
   (C++20)
   Debugging support
   is_debugger_present
   (C++26)
   breakpoint_if_debugging
   (C++26)
   breakpoint
   (C++26)
   Three-way comparison
   three_way_comparablethree_way_comparable_with
   (C++20)(C++20)
   strong_ordering
   (C++20)
   weak_ordering
   (C++20)
   partial_ordering
   (C++20)
   common_comparison_category
   (C++20)
   compare_three_way_result
   (C++20)
   compare_three_way
   (C++20)
   strong_order
   (C++20)
   weak_order
   (C++20)
   partial_order
   (C++20)
   compare_strong_order_fallback
   (C++20)
   compare_weak_order_fallback
   (C++20)
   compare_partial_order_fallback
   (C++20)
   is_eqis_ltis_lteq
   (C++20)(C++20)(C++20)
   is_neqis_gtis_gteq
   (C++20)(C++20)(C++20)
   General utilities
   Date and time
   Function objects
   Formatting library (C++20)
   bitset
   hash
   (C++11)
   Relational operators (deprecated in C++20)
   rel_ops::operator!=rel_ops::operator>

   rel_ops::operator<=rel_ops::operator>=
   Integer comparison functions
   cmp_equalcmp_lesscmp_less_than
   (C++20)(C++20)(C++20)
   cmp_not_equalcmp_greatercmp_greater_than
   (C++20)(C++20)(C++20)
   in_range
   (C++20)
   Swap and type operations
   swap
   ranges::swap
   (C++20)
   exchange
   (C++14)
   declval
   (C++11)
   to_underlying
   (C++23)
   forward
   (C++11)
   forward_like
   (C++23)
   move
   (C++11)
   move_if_noexcept
   (C++11)
   as_const
   (C++17)
   Common vocabulary types
   pair
   tuple
   (C++11)
   optional
   (C++17)
   any
   (C++17)
   variant
   (C++17)
   tuple_size
   (C++11)
   tuple_element
   (C++11)
   apply
   (C++17)
   make_from_tuple
   (C++17)
   expected
   (C++23)
   Elementary string conversions
   to_chars
   (C++17)
   from_chars
   (C++17)
   chars_format
   (C++17)
   to_chars_result
   (C++17)
   from_chars_result
   (C++17)

   std::optional
   Member functions
   optional::optional
   optional::~optional
   optional::operator=
   Observers
   optional::operator->optional::operator*
   optional::operator booloptional::has_value
   optional::value
   optional::value_or
   Monadic operations
   optional::and_then
   (C++23)
   optional::transform
   (C++23)
   optional::or_else
   (C++23)
   Modifiers
   optional::emplace
   optional::swap
   optional::reset
   Non-member functions
   operator==operator!=operator<operator<=operator>operator>=operator<=>
   (C++20)
   make_optional
   swap(std::optional)
   Deduction guides
   Helper classes
   hash<std::optional>
   nullopt_t
   in_place_t
   bad_optional_access
   Helper objects
   nullopt
   in_place

   void swap( optional& other ) noexcept(/* see below */);
   (since C++17)
   (constexpr since C++20)

   Swaps the contents with those of other.
     * If neither *this nor other contain a value, the function has no
       effect.

     * If only one of *this and other contains a value (let's call this
       object in and the other un), the contained value of un is
       direct-initialized from std::move(*in), followed by destruction of
       the contained value of in as if by in->T::~T(). After this call, in
       does not contain a value; un contains a value.

     * If both *this and other contain values, the contained values are
       exchanged by calling using std::swap; swap(**this, *other). T
       lvalues must satisfy Swappable.

   The program is ill-formed if std::is_move_constructible_v<T> is false.

Parameters

   other - the optional object to exchange the contents with

Return value

   (none)

Exceptions

   noexcept specification:
   noexcept(std::is_nothrow_move_constructible_v<T> &&
            std::is_nothrow_swappable_v<T>)

   In the case of thrown exception, the states of the contained values of
   *this and other are determined by the exception safety guarantees of
   swap of type T or T's move constructor, whichever is called. For both
   *this and other, if the object contained a value, it is left containing
   a value, and the other way round.

Example

   Run this code
#include <iostream>
#include <optional>
#include <string>

int main()
{
    std::optional<std::string> opt1("First example text");
    std::optional<std::string> opt2("2nd text");

    enum Swap { Before, After };
    auto print_opts = [&](Swap e) {
        std::cout << (e == Before ? "Before swap:\n" : "After swap:\n");
        std::cout << "opt1 contains '" << opt1.value_or("") << "'\n";
        std::cout << "opt2 contains '" << opt2.value_or("") << "'\n";
        std::cout << (e == Before ? "---SWAP---\n": "\n");
    };

    print_opts(Before);
    opt1.swap(opt2);
    print_opts(After);

    // Swap with only 1 set
    opt1 = "Lorem ipsum dolor sit amet, consectetur tincidunt.";
    opt2.reset();

    print_opts(Before);
    opt1.swap(opt2);
    print_opts(After);
}

   Output:
Before swap:
opt1 contains 'First example text'
opt2 contains '2nd text'
---SWAP---
After swap:
opt1 contains '2nd text'
opt2 contains 'First example text'

Before swap:
opt1 contains 'Lorem ipsum dolor sit amet, consectetur tincidunt.'
opt2 contains ''
---SWAP---
After swap:
opt1 contains ''
opt2 contains 'Lorem ipsum dolor sit amet, consectetur tincidunt.'

Defect reports

   The following behavior-changing defect reports were applied
   retroactively to previously published C++ standards.
   DR Applied to Behavior as published Correct behavior
   P2231R1 C++20 swap was not constexpr while the required operations can
   be constexpr in C++20 made constexpr

See also

   std::swap(std::optional)
   (C++17)
   specializes the std::swap algorithm
   (function template)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/utility/optional
   /swap&oldid=171479"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 2 May 2024, at 17:53.
     * This page has been accessed 42,703 times.
