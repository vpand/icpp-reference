std::ranges::cbegin

   From cppreference.com
   < cpp | ranges

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Ranges library
   Range access
   begin
   cbegin
   end
   cend
   rbegin
   crbegin
   rend
   crend
   size
   ssize
   data
   cdata
   empty
   Range conversions
   std::from_range_t
   std::from_range
   (C++23)(C++23)
   to
   (C++23)
   Range primitives
   range_size_trange_difference_trange_value_trange_reference_t
   iterator_tconst_iterator_tsentinel_tconst_sentinel_t
   (C++23)(C++23)
   range_const_reference_trange_rvalue_reference_trange_common_reference_t
   (C++23)
   elements_of
   (C++23)
   Dangling iterator handling
   dangling
   borrowed_iterator_t
   borrowed_subrange_t
   Range concepts
   range
   borrowed_range
   sized_range
   constant_range
   (C++23)
   common_range
   view
   viewable_range
   input_range
   output_range
   forward_range
   bidirectional_range
   random_access_range
   contiguous_range
   Views
   view_interface
   subrange
   Range factories
   empty_viewviews::empty
   single_viewviews::single
   iota_viewviews::iota
   repeat_viewviews::repeat
   (C++23)(C++23)
   basic_istream_viewviews::istream
   Range adaptors
   views::all_tviews::all
   ref_view
   owning_view
   as_rvalue_viewviews::as_rvalue
   (C++23)(C++23)
   filter_viewviews::filter
   transform_viewviews::transform
   take_viewviews::take
   take_while_viewviews::take_while
   concat_viewviews::concat
   (C++26)(C++26)
   drop_viewviews::drop
   drop_while_viewviews::drop_while
   join_viewviews::join
   join_with_viewviews::join_with
   (C++23)(C++23)
   lazy_split_viewviews::lazy_split
   split_viewviews::split
   views::counted
   common_viewviews::common
   reverse_viewviews::reverse
   as_const_viewviews::as_const
   (C++23)(C++23)
   elements_viewviews::elements
   keys_viewviews::keys
   values_viewviews::values
   enumerate_viewviews::enumerate
   (C++23)(C++23)
   zip_viewviews::zip
   (C++23)(C++23)
   zip_transform_viewviews::zip_transform
   (C++23)(C++23)
   adjacent_viewviews::adjacent
   (C++23)(C++23)
   views::pairwise
   (C++23)
   adjacent_transform_viewviews::adjacent_transform
   (C++23)(C++23)
   views::pairwise_transform
   (C++23)
   chunk_viewviews::chunk
   (C++23)(C++23)
   slide_viewviews::slide
   (C++23)(C++23)
   chunk_by_viewviews::chunk_by
   (C++23)(C++23)
   stride_viewviews::stride
   (C++23)(C++23)
   cartesian_product_viewviews::cartesian_product
   (C++23)(C++23)
   Range generators
   std::generator
   (C++23)
   Range adaptor objects
   Range adaptor closure objects
   range_adaptor_closure
   (C++23)
   Helper items
   copyable-box
   movable-box
   (until C++23)(C++23)
   simple-view
   non-propagating-cache

   Defined in header <ranges>
   Defined in header <iterator>
   inline namespace /* unspecified */ {

       inline constexpr /* unspecified */ cbegin = /* unspecified */;
   }
   (since C++20)
   (customization point object)
   Call signature
   template< class T >

       requires /* see below */
   constexpr /* see below */ auto cbegin( T&& t );
                                       (since C++20)

   Returns an iterator to the first element of the const-qualified
   argument.
   (until C++23)

   Returns a constant iterator to the first element of the argument.
   (since C++23)

   range-begin-end.svg

   Let CT be
     * const std::remove_reference_t<T>& if the argument is an lvalue
       (i.e. T is an lvalue reference type),
     * const T otherwise.

   A call to ranges::cbegin is expression-equivalent to
   ranges::begin(static_cast<CT&&>(t)).
   (until C++23)

   If the argument is an lvalue or
   ranges::enable_borrowed_range<std::remove_cv_t<T>> is true, then a call
   to ranges::cbegin is expression-equivalent to:
     * std::const_iterator<decltype(U)>(U) for some expression U
       equivalent to ranges::begin(/*possibly-const-range*/(t)).

   In all other cases, a call to ranges::cbegin is ill-formed, which can
   result in substitution failure when the call appears in the immediate
   context of a template instantiation.
   (since C++23)

   The return type models std::input_or_output_iterator and
   constant-iterator(since C++23) in all cases.

Customization point objects

   The name ranges::cbegin denotes a customization point object, which is
   a const function object of a literal semiregular class type. For
   exposition purposes, the cv-unqualified version of its type is denoted
   as __cbegin_fn.

   All instances of __cbegin_fn are equal. The effects of invoking
   different instances of type __cbegin_fn on the same arguments are
   equivalent, regardless of whether the expression denoting the instance
   is an lvalue or rvalue, and is const-qualified or not (however, a
   volatile-qualified instance is not required to be invocable). Thus,
   ranges::cbegin can be copied freely and its copies can be used
   interchangeably.

   Given a set of types Args..., if std::declval<Args>()... meet the
   requirements for arguments to ranges::cbegin above, __cbegin_fn models
     * std::invocable<__cbegin_fn, Args...>,
     * std::invocable<const __cbegin_fn, Args...>,
     * std::invocable<__cbegin_fn&, Args...>, and
     * std::invocable<const __cbegin_fn&, Args...>.

   Otherwise, no function call operator of __cbegin_fn participates in
   overload resolution.

Notes

   For an lvalue range e of type T, ranges::cbegin(e) is equivalent to

   ranges::begin(std::as_const(e)).
   (until C++23)
     * ranges::begin(e) if T models constant_range.
     * Otherwise, ranges::begin(std::as_const(e)) if const T models
       constant_range.
     * Otherwise, std::basic_const_iterator(ranges::begin(e)).

   (since C++23)

Example

   Run this code
#include <cassert>
#include <ranges>
#include <vector>

int main()
{
    std::vector v{3, 1, 4};
    auto vi = std::ranges::cbegin(v);
    assert(3 == *vi);
    ++vi; // OK, constant-iterator object is mutable
    assert(1 == *vi);
    // *vi = 13; // Error: constant-iterator points to an immutable element

    int a[]{3, 1, 4};
    auto ai = std::ranges::cbegin(a); // cbegin works with C-arrays as well
    assert(3 == *ai and *(ai + 1) == 1);
    // *ai = 13; // Error: read-only variable is not assignable
}

See also

   ranges::begin
   (C++20)
   returns an iterator to the beginning of a range
   (customization point object)
   begincbegin
   (C++11)(C++14)
   returns an iterator to the beginning of a container or array
   (function template)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/ranges/cbegin&ol
   did=162281"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 8 November 2023, at 00:14.
     * This page has been accessed 17,450 times.
