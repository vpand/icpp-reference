std::atan(std::complex)

   From cppreference.com
   < cpp | numeric | complex

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Numerics library
   Common mathematical functions
   Mathematical special functions (C++17)
   Mathematical constants (C++20)
   Basic linear algebra algorithms (C++26)
   Floating-point environment (C++11)
   Complex numbers
   Numeric arrays
   Pseudo-random number generation
   Factor operations
   gcd
   (C++17)
   lcm
   (C++17)
   Interpolations
   midpoint
   (C++20)
   lerp
   (C++20)
   Saturation arithmetic
   add_sat
   (C++26)
   sub_sat
   (C++26)
   saturate_cast
   (C++26)
   mul_sat
   (C++26)
   div_sat
   (C++26)
   Generic numeric operations
   iota
   (C++11)
   ranges::iota
   (C++23)
   accumulate
   inner_product
   adjacent_difference
   partial_sum
   reduce
   (C++17)
   transform_reduce
   (C++17)
   inclusive_scan
   (C++17)
   exclusive_scan
   (C++17)
   transform_inclusive_scan
   (C++17)
   transform_exclusive_scan
   (C++17)
   Bit operations
   has_single_bit
   (C++20)
   bit_cast
   (C++20)
   bit_ceil
   (C++20)
   bit_floor
   (C++20)
   bit_width
   (C++20)
   rotl
   (C++20)
   rotr
   (C++20)
   popcount
   (C++20)
   countl_zero
   (C++20)
   countl_one
   (C++20)
   countr_zero
   (C++20)
   countr_one
   (C++20)
   byteswap
   (C++23)
   endian
   (C++20)

   std::complex
   Member functions
   complex::complex
   complex::operator=
   complex::real
   complex::imag
   complex::operator+=complex::operator-=complex::operator*=complex::opera
   tor/=
   Non-member functions
   operator+operator-
   operator+operator-operator*operator/
   operator==operator!=
   (until C++20)
   operator<<operator>>
   get(std::complex)
   (C++26)
   real
   imag
   abs
   arg
   norm
   conj
   proj
   (C++11)
   polar
   operator""ioperator""ifoperator""il
   (C++14)(C++14)(C++14)
   Exponential functions
   log

   log10

   exp
   Power functions
   pow

   sqrt
   Trigonometric functions
   sin

   cos
   tan
   asin
   (C++11)
   acos
   (C++11)
   atan
   (C++11)
   Hyperbolic functions
   sinh

   cosh
   tanh
   asinh
   (C++11)
   acosh
   (C++11)
   atanh
   (C++11)
   Helper types
   tuple_size<std::complex>
   (C++26)
   tuple_element<std::complex>
   (C++26)

   Defined in header <complex>
   template< class T >
   complex<T> atan( const complex<T>& z );
                              (since C++11)

   Computes complex arc tangent of a complex value z. Branch cut exists
   outside the interval [-i, +i] along the imaginary axis.

Parameters

   z - complex value

Return value

   If no errors occur, complex arc tangent of z is returned, in the range
   of a strip unbounded along the imaginary axis and in the interval
   [-p/2, +p/2] along the real axis.

   Errors and special cases are handled as if the operation is implemented
   by -i * std::atanh(i * z), where i is the imaginary unit.

Notes

   Inverse tangent (or arc tangent) is a multivalued function and requires
   a branch cut on the complex plane. The branch cut is conventionally
   placed at the line segments (-inftyi,-i) and (+i,+inftyi) of the
   imaginary axis.
   The mathematical definition of the principal value of inverse tangent
   is atan z = -
   1
   2
   i [ln(1 - iz) - ln (1 + iz)].

Example

   Run this code
#include <cmath>
#include <complex>
#include <iostream>

int main()
{
    std::cout << std::fixed;
    std::complex<double> z1(0.0, 2.0);
    std::cout << "atan" << z1 << " = " << std::atan(z1) << '\n';

    std::complex<double> z2(-0.0, 2.0);
    std::cout << "atan" << z2 << " (the other side of the cut) = "
              << std::atan(z2) << '\n';

    std::complex<double> z3(0.0, INFINITY);
    std::cout << "2 * atan" << z3 << " = " << 2.0 * std::atan(z3) << '\n';
}

   Output:
atan(0.000000,2.000000) = (1.570796,0.549306)
atan(-0.000000,2.000000) (the other side of the cut) = (-1.570796,0.549306)
2 * atan(0.000000,inf) = (3.141593,0.000000)

See also

   asin(std::complex)
   (C++11)
   computes arc sine of a complex number (\({\small\arcsin{z}}\)arcsin(z))
   (function template)
   acos(std::complex)
   (C++11)
   computes arc cosine of a complex number
   (\({\small\arccos{z}}\)arccos(z))
   (function template)
   tan(std::complex)
   computes tangent of a complex number (\({\small\tan{z}}\)tan(z))
   (function template)
   atanatanfatanl
   (C++11)(C++11)
   computes arc tangent (\({\small\arctan{x}}\)arctan(x))
   (function)
   atan(std::valarray)
   applies the function std::atan to each element of valarray
   (function template)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/numeric/complex/
   atan&oldid=150832"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 21 April 2023, at 13:06.
     * This page has been accessed 24,656 times.
