std::experimental::ranges::Range

   From cppreference.com
   < cpp | experimental | ranges

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Experimental
   Technical Specification
   Filesystem library (filesystem TS)
   Library fundamentals (library fundamentals TS)
   Library fundamentals 2 (library fundamentals TS v2)
   Library fundamentals 3 (library fundamentals TS v3)
   Extensions for parallelism (parallelism TS)
   Extensions for parallelism 2 (parallelism TS v2)
   Extensions for concurrency (concurrency TS)
   Extensions for concurrency 2 (concurrency TS v2)
   Concepts (concepts TS)
   Ranges (ranges TS)
   Reflection (reflection TS)
   Mathematical special functions (special functions TR)
   Experimental Non-TS
   Pattern Matching
   Linear Algebra
   std::execution
   Contracts
   2D Graphics

   Ranges
   Concepts
   General utilities
   Iterators
   Ranges
   Algorithms

   Ranges library
   Range concepts
   Range
   SizedRange
   View
   BoundedRange
   InputRange
   OutputRange
   ForwardRange
   BidirectionalRange
   RandomAccessRange
   Range access
   begincbegin
   endcend
   rbegincrbegin
   rendcrend
   Range primitives
   iterator_tsentinel_t

   size

   datacdata
   empty

   Defined in header <experimental/ranges/range>
   template< class T >

   concept bool Range =
       requires(T&& t) {
           ranges::begin(t); /* not necessarily equality-preserving (see
   below) */
           ranges::end(t);
       };
                                                (ranges TS)

   Given an lvalue t of type std::remove_reference_t<T>, Range<T> is
   satisfied only if
     * [ranges::begin(t), ranges::end(t)) denotes a range; and
     * both ranges::begin(t) and ranges::end(t) are amortized constant
       time and non-modifying.
     * If ranges::iterator_t<T> satisfies ForwardIterator,
       ranges::begin(t) is equality preserving.

   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/experimental/ran
   ges/range/Range&oldid=155564"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 27 July 2023, at 00:29.
     * This page has been accessed 20,747 times.
