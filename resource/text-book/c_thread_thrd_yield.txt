thrd_yield

   From cppreference.com
   < c | thread

   C
   Language
   Headers
   Type support
   Program utilities
   Variadic function support
   Error handling
   Dynamic memory management
   Strings library
   Algorithms
   Numerics
   Date and time utilities
   Input/output support
   Localization support
   Concurrency support (C11)
   Technical Specifications
   Symbol index

   Concurrency support library
   Threads
   thrd_create
   thrd_equal
   thrd_current

   thrd_sleep
   thrd_yield
   thrd_exit
   thrd_detach
   thrd_join
   thrd_successthrd_timedoutthrd_busythrd_nomemthrd_error

   Atomic operations
   atomic_init
   ATOMIC_VAR_INIT
   (until C23)
   ATOMIC_***_LOCK_FREE
   atomic_is_lock_free
   atomic_store
   atomic_load
   atomic_exchange
   atomic_compare_exchange
   atomic_fetch_add
   atomic_fetch_sub
   atomic_fetch_or
   atomic_fetch_xor
   atomic_fetch_and
   Atomic flags
   atomic_flag
   ATOMIC_FLAG_INIT
   atomic_flag_test_and_set
   atomic_flag_clear
   Memory ordering
   memory_order
   kill_dependency
   atomic_thread_fence
   atomic_signal_fence
   Mutual exclusion
   mtx_init
   mtx_lock
   mtx_timedlock
   mtx_trylock
   call_once
   mtx_unlock
   mtx_destroy
   mtx_plainmtx_recursivemtx_timed
   Condition variables
   cnd_init
   cnd_signal
   cnd_broadcast
   cnd_wait
   cnd_timedwait
   cnd_destroy
   Thread-local storage
   thread_local
   TSS_DTOR_ITERATIONS

   tss_create
   tss_get
   tss_set
   tss_delete

   Defined in header <threads.h>
   void thrd_yield(void);
                                (since C11)

   Provides a hint to the implementation to reschedule the execution of
   threads, allowing other threads to run.

Parameters

   (none)

Return value

   (none)

Notes

   The exact behavior of this function depends on the implementation, in
   particular on the mechanics of the OS scheduler in use and the state of
   the system. For example, a first-in-first-out realtime scheduler
   (SCHED_FIFO in Linux) would suspend the current thread and put it on
   the back of the queue of the same-priority threads that are ready to
   run (and if there are no other threads at the same priority, yield has
   no effect).

   The POSIX equivalent of this function is sched_yield.

Example

   Run this code
#include <stdio.h>
#include <time.h>
#include <threads.h>

// utility function: difference between timespecs in microseconds
double usdiff(struct timespec s, struct timespec e)
{
    double sdiff = difftime(e.tv_sec, s.tv_sec);
    long nsdiff = e.tv_nsec - s.tv_nsec;
    if(nsdiff < 0) return 1000000*(sdiff-1) + (1000000000L+nsdiff)/1000.0;
    else return 1000000*(sdiff) + nsdiff/1000.0;
}

// busy wait while yielding
void sleep_100us()
{
    struct timespec start, end;
    timespec_get(&start, TIME_UTC);
    do {
        thrd_yield();
        timespec_get(&end, TIME_UTC);
    } while(usdiff(start, end) < 100.0);
}

int main()
{
    struct timespec start, end;
    timespec_get(&start, TIME_UTC);
    sleep_100us();
    timespec_get(&end, TIME_UTC);
    printf("Waited for %.3f us\n", usdiff(start, end));
}

   Possible output:
Waited for 100.344 us

References

     * C17 standard (ISO/IEC 9899:2018):

          + 7.26.5.8 The thrd_yield function (p: 281)

     * C11 standard (ISO/IEC 9899:2011):

          + 7.26.5.8 The thrd_yield function (p: 385)

See also

   thrd_sleep
   (C11)
   suspends execution of the calling thread for the given period of time
   (function)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=c/thread/thrd_yield&
   oldid=138887"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 17 March 2022, at 13:04.
     * This page has been accessed 28,989 times.
