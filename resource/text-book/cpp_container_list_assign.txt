std::list<T,Allocator>::assign

   From cppreference.com
   < cpp | container | list


   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Containers library
   Sequence
   array
   (C++11)
   vector
   vector<bool>
   deque
   forward_list
   (C++11)
   list
   Associative
   set
   multiset
   map
   multimap
   Unordered associative
   unordered_set
   (C++11)
   unordered_multiset
   (C++11)
   unordered_map
   (C++11)
   unordered_multimap
   (C++11)
   Adaptors
   stack
   queue
   priority_queue
   flat_set
   (C++23)
   flat_multiset
   (C++23)
   flat_map
   (C++23)
   flat_multimap
   (C++23)
   Views
   span
   (C++20)
   mdspan
   (C++23)
   Iterator invalidation
   Member function table
   Non-member function table

   std::list
   Member functions
   list::list
   list::~list
   list::operator=
   list::assign
   list::assign_range
   (C++23)
   list::get_allocator
   Element access
   list::front
   list::back
   Iterators
   list::beginlist::cbegin
   (C++11)
   list::endlist::cend
   (C++11)
   list::rbeginlist::crbegin
   (C++11)
   list::rendlist::crend
   (C++11)
   Capacity
   list::size
   list::empty
   list::max_size
   Modifiers
   list::clear
   list::insert
   list::insert_range
   (C++23)
   list::emplace
   (C++11)
   list::erase
   list::push_front
   list::emplace_front
   (C++11)
   list::prepend_range
   (C++23)
   list::pop_front
   list::push_back
   list::emplace_back
   (C++11)
   list::append_range
   (C++23)
   list::pop_back
   list::resize
   list::swap
   Operations
   list::merge
   list::splice
   list::removelist::remove_if
   list::reverse
   list::unique
   list::sort
   Non-member functions
   operator==operator!=operator<operator>operator<=operator>=operator<=>
   (until C++20)(until C++20)(until C++20)(until C++20)(until
   C++20)(C++20)
   swap(std::list)
   erase(std::list)erase_if(std::list)
   (C++20)(C++20)
   Deduction guides(C++17)

   void assign( size_type count, const T& value );
   (1)
   template< class InputIt >
   void assign( InputIt first, InputIt last );
   (2)
   void assign( std::initializer_list<T> ilist );
   (3)                                            (since C++11)

   Replaces the contents of the container.
   1) Replaces the contents with count copies of value value.
   2) Replaces the contents with copies of those in the range
   [first, last). The behavior is undefined if either argument is an
   iterator into *this.

   This overload has the same effect as overload (1) if InputIt is an
   integral type.
   (until C++11)

   This overload participates in overload resolution only if InputIt
   satisfies LegacyInputIterator.
   (since C++11)
   3) Replaces the contents with the elements from the initializer list
   ilist.

   All iterators, pointers and references to the elements of the container
   are invalidated.

Parameters

   count       - the new size of the container
   value       - the value to initialize elements of the container with
   first, last - the range to copy the elements from
   ilist       - initializer list to copy the values from

Complexity

   1) Linear in count.
   2) Linear in distance between first and last.
   3) Linear in ilist.size().

Example

   The following code uses assign to add several characters to a
   std::list<char>:
   Run this code
#include <list>
#include <iostream>
#include <string>

int main()
{
    std::list<char> characters;

    auto print_list = [&]()
    {
        for (char c : characters)
            std::cout << c << ' ';
        std::cout << '\n';
    };

    characters.assign(5, 'a');
    print_list();

    const std::string extra(6, 'b');
    characters.assign(extra.begin(), extra.end());
    print_list();

    characters.assign({'C', '+', '+', '1', '1'});
    print_list();
}

   Output:
a a a a a
b b b b b b
C + + 1 1

Defect reports

   The following behavior-changing defect reports were applied
   retroactively to previously published C++ standards.
   DR Applied to Behavior as published Correct behavior
   LWG 320 C++98 the replacement operation was defined as erasing all
   existing elements followed by inserting the given elements removed the
   definition

See also

   (constructor)
   constructs the list
   (public member function)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/container/list/a
   ssign&oldid=135211"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 13 November 2021, at 08:24.
     * This page has been accessed 56,222 times.
