C++ named requirements: LegacyOutputIterator

   From cppreference.com
   < cpp | named req

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   C++ named requirements
   Basic
   DefaultConstructible
   CopyAssignable
   CopyConstructible
   MoveAssignable
   (C++11)
   MoveConstructible
   (C++11)
   Destructible
   Type properties
   ScalarType
   TriviallyCopyable
   (C++11)
   StandardLayoutType
   (C++11)
   PODType
   TrivialType
   (C++11)
   ImplicitLifetimeType
   Library-Wide
   EqualityComparable
   LessThanComparable
   Swappable
   ValueSwappable
   (C++11)
   NullablePointer
   (C++11)
   Hash
   (C++11)
   Allocator
   FunctionObject
   Callable
   Predicate
   BinaryPredicate
   Compare
   Container
   Container
   SequenceContainer
   ContiguousContainer
   (C++17)
   ReversibleContainer
   AssociativeContainer
   AllocatorAwareContainer
   UnorderedAssociativeContainer
   (C++11)
   Container Elements
   DefaultInsertable
   (C++11)
   CopyInsertable
   (C++11)
   MoveInsertable
   (C++11)
   EmplaceConstructible
   (C++11)
   Erasable
   (C++11)
   Iterator
   LegacyIterator
   LegacyOutputIterator
   LegacyInputIterator
   LegacyForwardIterator
   LegacyBidirectionalIterator
   LegacyRandomAccessIterator
   LegacyContiguousIterator
   (C++17)
   ConstexprIterator
   (C++20)
   Stream I/O
   FormattedInputFunction
   UnformattedInputFunction
   FormattedOutputFunction
   UnformattedOutputFunction
   Formatters
   BasicFormatter
   (C++20)
   Formatter
   (C++20)
   Random Numbers
   SeedSequence
   (C++11)
   RandomNumberEngine
   (C++11)
   RandomNumberDistribution
   (C++11)
   UniformRandomBitGenerator
   (C++11)
   RandomNumberEngineAdaptor
   (C++11)
   Concurrency
   BasicLockable
   (C++11)
   Lockable
   (C++11)
   TimedLockable
   (C++11)
   SharedLockable
   (C++14)
   SharedTimedLockable
   (C++14)
   Mutex
   (C++11)
   TimedMutex
   (C++11)
   SharedMutex
   (C++17)
   SharedTimedMutex
   (C++14)
   Ranges
   RangeAdaptorObject
   (C++20)
   RangeAdaptorClosureObject
   (C++20)
   Other
   CharTraits
   RegexTraits
   (C++11)
   BitmaskType
   LiteralType
   (C++11)
   NumericType
   UnaryTypeTrait
   (C++11)
   BinaryTypeTrait
   (C++11)
   TransformationTrait
   (C++11)
   Clock
   (C++11)
   TrivialClock
   (C++11)

   A LegacyOutputIterator is a LegacyIterator that can write to the
   pointed-to element.

   An example of a type that implements LegacyOutputIterator is
   std::ostream_iterator.

   When LegacyForwardIterator, LegacyBidirectionalIterator, or
   LegacyRandomAccessIterator satisfies the LegacyOutputIterator
   requirements in addition to its own requirements, it is described as
   mutable.

Requirements

   The type X satisfies LegacyOutputIterator if
     * The type X satisfies LegacyIterator
     * X is a class type or a pointer type

   And, given
     * o, a value of some type that is writable to the output iterator
       (there may be multiple types that are writable, e.g. if operator=
       may be a template. There is no notion of value_type as for the
       input iterators)
     * r, an lvalue of type X,

   The following expressions must be valid and have their specified
   effects
   Expression Return Equivalent expression Pre-condition Post-conditions
   Notes
   *r = o (not used) r is dereferenceable r is incrementable After this
   operation r is not required to be dereferenceable and any copies of the
   previous value of r are no longer required to be dereferenceable or
   incrementable.
   ++r X& r is incrementable r and ++r designate the same iterator object,
   r is dereferenceable or past-the-end After this operation r is not
   required to be incrementable and any copies of the previous value of r
   are no longer required to be dereferenceable or incrementable.
   r++ convertible to const X& X temp = r;

   ++r;
   return temp;
   *r++ = o (not used) *r = o;

   ++r;

Notes

   The only valid use of operator* with an output iterator is on the left
   of an assignment: operator* may return a proxy object, which defines a
   member operator= (which may be a template).

   Equality and inequality may not be defined for output iterators. Even
   if an operator== is defined, x == y need not imply ++x == ++y.

   Assignment through the same value of an output iterator happens only
   once: algorithms on output iterators must be single-pass algorithms.

   Assignment through an output iterator is expected to alternate with
   incrementing. Double-increment is undefined behavior (C++ standard
   currently claims that double increment is supported, contrary to the
   STL documentation; this is LWG issue 2035).

   Pure output-only iterator is allowed to declare its
   iterator_traits<X>::value_type, iterator_traits<X>::difference_type,
   iterator_traits<X>::pointer, and iterator_traits<X>::reference to be
   void (and iterators such as std::back_insert_iterator do just that
   except for difference_type, which is now defined to satisfy
   std::output_iterator (since C++20)).

Standard library

   The following standard library iterators are output iterators that are
   not forward iterators:
     * std::ostream_iterator
     * std::ostreambuf_iterator
     * std::insert_iterator
     * std::back_insert_iterator
     * std::front_insert_iterator

See also

   output_iterator
   (C++20)
   specifies that a type is an output iterator for a given value type,
   that is, values of that type can be written to it and it can be both
   pre- and post-incremented
   (concept)
   Iterator library provides definitions for iterators, iterator traits,
   adaptors, and utility functions
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/named_req/Output
   Iterator&oldid=143751"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 25 September 2022, at 11:54.
     * This page has been accessed 158,861 times.
