Abstract class

   From cppreference.com
   < cpp | language

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   C++ language
   General topics
   Preprocessor
   Comments
   Keywords
   Escape sequences
   Flow control
   Conditional execution statements
   if
   switch
   Iteration statements (loops)
   for
   range-for (C++11)
   while
   do-while
   Jump statements
   continue - break
   goto - return
   Functions
   Function declaration
   Lambda function expression
   inline specifier
   Dynamic exception specifications (until C++17*)
   noexcept specifier (C++11)
   Exceptions
   throw-expression
   try block
   handler
   Namespaces
   Namespace declaration
   Namespace aliases
   Types
   Fundamental types
   Enumeration types
   Function types
   Class/struct types
   Union types
   Specifiers
   const/volatile
   decltype (C++11)
   auto (C++11)
   constexpr (C++11)
   consteval (C++20)
   constinit (C++20)
   Storage duration specifiers
   Initialization
   Default-initialization
   Value-initialization
   Zero-initialization
   Copy-initialization
   Direct-initialization
   Aggregate initialization
   List-initialization (C++11)
   Constant initialization
   Reference initialization
   Expressions
   Value categories
   Order of evaluation
   Operators
   Operator precedence
   Alternative representations
   Literals
   Boolean - Integer - Floating-point
   Character - String - nullptr (C++11)
   User-defined (C++11)
   Utilities
   Attributes (C++11)
   Types
   typedef declaration
   Type alias declaration (C++11)
   Casts
   Implicit conversions
   static_cast
   const_cast
   Explicit conversions
   dynamic_cast
   reinterpret_cast
   Memory allocation
   new expression
   delete expression
   Classes
   Class declaration
   Constructors
   this pointer
   Access specifiers
   friend specifier
   Class-specific function properties
   Virtual function
   override specifier (C++11)
   final specifier (C++11)
   explicit (C++11)
   static
   Special member functions
   Default constructor
   Copy constructor
   Move constructor (C++11)
   Copy assignment
   Move assignment (C++11)
   Destructor
   Templates
   Class template
   Function template
   Template specialization
   Parameter packs (C++11)
   Miscellaneous
   Inline assembly
   History of C++

   Classes
   General
   Overview
   class/struct types
   union types
   Injected-class-name
   Members
   Data members
   Static members
   The this pointer
   Nested classes
   Member templates
   Bit-fields
   using-declarations
   Member functions
   Member access specifiers
   Constructors and member initializer lists
   Default member initializer (C++11)
   friend specifier
   explicit specifier
   Converting constructor
   Special member functions
   Default constructor
   Copy constructor
   Move constructor (C++11)
   Copy assignment operator
   Move assignment operator (C++11)
   Destructor
   Inheritance
   Base and derived classes
   Empty base optimization (EBO)
   Virtual member functions
   Pure virtual functions and abstract classes
   override specifier (C++11)
   final specifier (C++11)

   Defines an abstract type which cannot be instantiated, but can be used
   as a base class.

Syntax

   A pure virtual function is a virtual function whose declarator has the
   following syntax:
   declarator virt-specifier¿(optional) = 0

   Here the sequence = 0 is known as pure-specifier, and appears either
   immediately after the declarator or after the optional virt-specifier
   (override or final).

   pure-specifier cannot appear in a member function definition or friend
   declaration.
struct Base
{
    virtual int g();
    virtual ~Base() {}
};

struct A : Base
{
    // OK: declares three member virtual functions, two of them pure
    virtual int f() = 0, g() override = 0, h();

    // OK: destructor can be pure too
    ~A() = 0;

    // Error: pure-specifier on a function definition
    virtual int b() = 0 {}
};

   An abstract class is a class that either defines or inherits at least
   one function for which the final overrider is pure virtual.

Explanation

   Abstract classes are used to represent general concepts (for example,
   Shape, Animal), which can be used as base classes for concrete classes
   (for example, Circle, Dog).

   No objects of an abstract class can be created (except for base
   subobjects of a class derived from it) and no non-static data members
   whose type is an abstract class can be declared.

   Abstract types cannot be used as parameter types, as function return
   types, or as the type of an explicit conversion (note this is checked
   at the point of definition and function call, since at the point of
   function declaration parameter and return type may be incomplete).

   Pointers and references to an abstract class can be declared.
   Run this code
struct Abstract
{
    virtual void f() = 0;  // pure virtual
}; // "Abstract" is abstract

struct Concrete : Abstract
{
    void f() override {}   // non-pure virtual
    virtual void g();      // non-pure virtual
}; // "Concrete" is non-abstract

struct Abstract2 : Concrete
{
    void g() override = 0; // pure virtual overrider
}; // "Abstract2" is abstract

int main()
{
    // Abstract a;   // Error: abstract class
    Concrete b;      // OK
    Abstract& a = b; // OK to reference abstract base
    a.f();           // virtual dispatch to Concrete::f()
    // Abstract2 a2; // Error: abstract class (final overrider of g() is pure)
}

   The definition of a pure virtual function may be provided (and must be
   provided if the pure virtual is the destructor): the member functions
   of the derived class are free to call the abstract base's pure virtual
   function using qualified function id. This definition must be provided
   outside of the class body (the syntax of a function declaration doesn't
   allow both the pure specifier = 0 and a function body).

   Making a virtual call to a pure virtual function from a constructor or
   the destructor of the abstract class is undefined behavior (regardless
   of whether it has a definition or not).
struct Abstract
{
    virtual void f() = 0; // pure virtual
    virtual void g() {}   // non-pure virtual

    ~Abstract()
    {
        g();           // OK: calls Abstract::g()
        // f();        // undefined behavior
        Abstract::f(); // OK: non-virtual call
    }
};

// definition of the pure virtual function
void Abstract::f()
{
    std::cout << "A::f()\n";
}

struct Concrete : Abstract
{
    void f() override
    {
        Abstract::f(); // OK: calls pure virtual function
    }

    void g() override {}

    ~Concrete()
    {
        g(); // OK: calls Concrete::g()
        f(); // OK: calls Concrete::f()
    }
};

Defect reports

   The following behavior-changing defect reports were applied
   retroactively to previously published C++ standards.
   DR Applied to Behavior as published Correct behavior
   CWG 390 C++98 an undefined pure virtual destructor might be called a
   definition is required in this case
   CWG 2153 C++98 pure-specifier could appear in friend declarations
   prohibited

See also

     * virtual

   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/language/abstrac
   t_class&oldid=169685"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 9 February 2024, at 01:06.
     * This page has been accessed 580,643 times.
