ldexp, ldexpf, ldexpl

   From cppreference.com
   < c | numeric | math

   C
   Language
   Headers
   Type support
   Program utilities
   Variadic function support
   Error handling
   Dynamic memory management
   Strings library
   Algorithms
   Numerics
   Date and time utilities
   Input/output support
   Localization support
   Concurrency support (C11)
   Technical Specifications
   Symbol index

   Numerics
   Common mathematical functions
   Floating-point environment (C99)
   Pseudo-random number generation
   Complex number arithmetic (C99)
   Type-generic math (C99)

   Common mathematical functions
   Types
   div_tldiv_tlldiv_timaxdiv_t
   (C99)(C99)
   float_tdouble_t
   (C99)(C99)
   _Decimal32_t_Decimal64_t
   (C23)(C23)
   Functions
   Basic operations
   abslabsllabsimaxabs
   (C99)(C99)
   fabs
   divldivlldivimaxdiv
   (C99)(C99)
   fmod
   remainder
   (C99)
   remquo
   (C99)
   fma
   (C99)
   fdim
   (C99)
   nannanfnanlnandN
   (C99)(C99)(C99)(C23)
   Maximum/minimum operations
   fmax
   (C99)
   fmaximum
   (C23)
   fmaximum_mag
   (C23)
   fmaximum_num
   (C23)
   fmaximum_mag_num
   (C23)
   fmin
   (C99)
   fminimum
   (C23)
   fminimum_mag
   (C23)
   fminimum_num
   (C23)
   fminimum_mag_num
   (C23)
   Exponential functions
   exp
   exp10
   (C23)
   exp2
   (C99)
   expm1
   (C99)
   exp10m1
   (C23)
   exp2m1
   (C23)
   log
   log10
   log2
   (C99)
   log1plogp1
   (C99)(C23)
   log10p1
   (C23)
   log2p1
   (C23)
   Power functions
   sqrt
   cbrt
   (C99)
   rootn
   (C23)
   rsqrt
   (C23)
   hypot
   (C99)
   compound
   (C23)
   pow
   pown
   (C23)
   powr
   (C23)
   Trigonometric and hyperbolic functions
   sin
   cos
   tan
   asin
   acos
   atan
   atan2
   sinpi
   (C23)
   cospi
   (C23)
   tanpi
   (C23)
   asinpi
   (C23)
   acospi
   (C23)
   atanpi
   (C23)
   atan2pi
   (C23)
   sinh
   cosh
   tanh
   asinh
   (C99)
   acosh
   (C99)
   atanh
   (C99)
   Error and gamma functions
   erf
   (C99)
   erfc
   (C99)
   lgamma
   (C99)
   tgamma
   (C99)
   Nearest integer floating-point operations
   ceil
   floor
   roundlroundllround
   (C99)(C99)(C99)
   roundeven
   (C23)
   trunc
   (C99)
   nearbyint
   (C99)
   rintlrintllrint
   (C99)(C99)(C99)
   fromfpfromfpxufromfpufromfpx
   (C23)(C23)(C23)(C23)
   Floating-point manipulation functions
   ldexp
   frexp
   scalbnscalbln
   (C99)(C99)
   ilogbllogb
   (C99)(C23)
   logb
   (C99)
   modf
   nextafternexttoward
   (C99)(C99)
   nextupnextdown
   (C23)(C23)
   copysign
   (C99)
   canonicalize
   (C23)
   Narrowing operations
   fadd
   (C23)
   fsub
   (C23)
   fmul
   (C23)
   fdiv
   (C23)
   ffma
   (C23)
   fsqrt
   (C23)
   Quantum and quantum exponent functions
   quantizedN
   (C23)
   samequantumdN
   (C23)
   quantumdN
   (C23)
   llquantexpdN
   (C23)
   Decimal re-encoding functions
   encodedecdN
   (C23)
   decodedecdN
   (C23)
   encodebindN
   (C23)
   decodebindN
   (C23)
   Total order and payload functions
   totalorder
   (C23)
   getpayload
   (C23)
   setpayload
   (C23)
   setpayloadsig
   (C23)
   Classification
   fpclassify
   (C99)
   iscanonical
   (C23)
   isfinite
   (C99)
   isinf
   (C99)
   isnan
   (C99)
   isnormal
   (C99)
   signbit
   (C99)
   issubnormal
   (C23)
   iszero
   (C23)
   isgreater
   (C99)
   isgreaterequal
   (C99)
   isless
   (C99)
   islessequal
   (C99)
   islessgreater
   (C99)
   isunordered
   (C99)
   issignaling
   (C23)
   iseqsig
   (C23)
   Macro constants
   Special floating-point values
   HUGE_VALFHUGE_VALHUGE_VALLHUGE_VALDN
   (C99)(C99)(C23)
   INFINITYDEC_INFINITY
   (C99)(C23)
   NANDEC_NAN
   (C99)(C23)
   Arguments and return values
   FP_ILOGB0FP_ILOGBNAN
   (C99)(C99)
   FP_INT_UPWARDFP_INT_DOWNWARDFP_INT_TOWARDZEROFP_INT_TONEARESTFROMZEROFP
   _INT_TONEAREST
   (C23)(C23)(C23)(C23)(C23)
   FP_LLOGB0FP_LLOGBNAN
   (C23)(C23)
   FP_NORMALFP_SUBNORMALFP_ZEROFP_INFINITEFP_NAN
   (C99)(C99)(C99)(C99)(C99)
   Error handling
   MATH_ERRNOMATH_ERRNOEXCEPT
   (C99)(C99)
   math_errhandling
   (C99)
   Fast operation indicators
   FP_FAST_FMAFFP_FAST_FMA
   (C99)(C99)
   FP_FAST_FADDFP_FAST_FADDLFP_FAST_DADDLFP_FAST_DMADDDN
   (C23)(C23)(C23)(C23)
   FP_FAST_FMULFP_FAST_FMULLFP_FAST_DMULLFP_FAST_DMMULDN
   (C23)(C23)(C23)(C23)
   FP_FAST_FFMAFP_FAST_FFMALFP_FAST_DFMALFP_FAST_DMFMADN
   (C23)(C23)(C23)(C23)
   FP_FAST_FMALFP_FAST_FMADN
   (C99)(C23)
   FP_FAST_FSUBFP_FAST_FSUBLFP_FAST_DSUBLFP_FAST_DMSUBDN
   (C23)(C23)(C23)(C23)
   FP_FAST_FDIVFP_FAST_FDIVLFP_FAST_DDIVLFP_FAST_DMDIVDN
   (C23)(C23)(C23)(C23)
   FP_FAST_FSQRTFP_FAST_FSQRTLFP_FAST_DSQRTLFP_FAST_DMSQRTDN
   (C23)(C23)(C23)(C23)

   Defined in header <math.h>
   float       ldexpf( float arg, int exp );
   (1)                                            (since C99)
   double      ldexp( double arg, int exp );
   (2)
   long double ldexpl( long double arg, int exp );
   (3)                                            (since C99)
   Defined in header <tgmath.h>
   #define ldexp( arg, exp )
   (4)                                            (since C99)
   1-3) Multiplies a floating-point value arg by the number 2 raised to
   the exp power.
   4) Type-generic macro: If arg has type long double, ldexpl is called.
   Otherwise, if arg has integer type or the type double, ldexp is called.
   Otherwise, ldexpf is called, respectively.

Parameters

   arg - floating-point value
   exp - integer value

Return value

   If no errors occur, arg multiplied by 2 to the power of exp (arg×2exp
   ) is returned.

   If a range error due to overflow occurs, ±HUGE_VAL, ±HUGE_VALF, or
   ±HUGE_VALL is returned.

   If a range error due to underflow occurs, the correct result (after
   rounding) is returned.

Error handling

   Errors are reported as specified in math_errhandling.

   If the implementation supports IEEE floating-point arithmetic (IEC
   60559),
     * Unless a range error occurs, FE_INEXACT is never raised (the result
       is exact)
     * Unless a range error occurs, the current rounding mode is ignored
     * If arg is ±0, it is returned, unmodified
     * If arg is ±infty, it is returned, unmodified
     * If exp is 0, then arg is returned, unmodified
     * If arg is NaN, NaN is returned.

Notes

   On binary systems (where FLT_RADIX is 2), ldexp is equivalent to
   scalbn.

   The function ldexp ("load exponent"), together with its dual, frexp,
   can be used to manipulate the representation of a floating-point number
   without direct bit manipulations.

   On many implementations, ldexp is less efficient than multiplication or
   division by a power of two using arithmetic operators.

Example

   Run this code
#include <errno.h>
#include <fenv.h>
#include <float.h>
#include <math.h>
#include <stdio.h>
// #pragma STDC FENV_ACCESS ON

int main(void)
{
    printf("ldexp(7, -4) = %f\n", ldexp(7, -4));
    printf("ldexp(1, -1074) = %g (minimum positive subnormal double)\n",
            ldexp(1, -1074));
    printf("ldexp(nextafter(1,0), 1024) = %g (largest finite double)\n",
            ldexp(nextafter(1,0), 1024));

    // special values
    printf("ldexp(-0, 10) = %f\n", ldexp(-0.0, 10));
    printf("ldexp(-Inf, -1) = %f\n", ldexp(-INFINITY, -1));

    // error handling
    errno = 0; feclearexcept(FE_ALL_EXCEPT);
    printf("ldexp(1, 1024) = %f\n", ldexp(1, 1024));
    if (errno == ERANGE)
        perror("    errno == ERANGE");
    if (fetestexcept(FE_OVERFLOW))
        puts("    FE_OVERFLOW raised");
}

   Possible output:
ldexp(7, -4) = 0.437500
ldexp(1, -1074) = 4.94066e-324 (minimum positive subnormal double)
ldexp(nextafter(1,0), 1024) = 1.79769e+308 (largest finite double)
ldexp(-0, 10) = -0.000000
ldexp(-Inf, -1) = -inf
ldexp(1, 1024) = inf
    errno == ERANGE: Numerical result out of range
    FE_OVERFLOW raised

References

     * C23 standard (ISO/IEC 9899:2023):

          + 7.12.6.6 The ldexp functions (p: TBD)

          + 7.25 Type-generic math <tgmath.h> (p: TBD)

          + F.10.3.6 The ldexp functions (p: TBD)

     * C17 standard (ISO/IEC 9899:2018):

          + 7.12.6.6 The ldexp functions (p: TBD)

          + 7.25 Type-generic math <tgmath.h> (p: TBD)

          + F.10.3.6 The ldexp functions (p: TBD)

     * C11 standard (ISO/IEC 9899:2011):

          + 7.12.6.6 The ldexp functions (p: 244)

          + 7.25 Type-generic math <tgmath.h> (p: 373-375)

          + F.10.3.6 The ldexp functions (p: 522)

     * C99 standard (ISO/IEC 9899:1999):

          + 7.12.6.6 The ldexp functions (p: 225)

          + 7.22 Type-generic math <tgmath.h> (p: 335-337)

          + F.9.3.6 The ldexp functions (p: 459)

     * C89/C90 standard (ISO/IEC 9899:1990):

          + 4.5.4.3 The ldexp function

See also

   frexpfrexpffrexpl
   (C99)(C99)
   breaks a number into significand and a power of 2
   (function)
   scalbnscalbnfscalbnlscalblnscalblnfscalblnl
   (C99)(C99)(C99)(C99)(C99)(C99)
   computes efficiently a number times FLT_RADIX raised to a power
   (function)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=c/numeric/math/ldexp
   &oldid=172039"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 23 May 2024, at 08:26.
     * This page has been accessed 32,344 times.
