std::reverse_iterator<Iter>::operator*,->

   From cppreference.com
   < cpp | iterator | reverse iterator

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Iterator library
   Iterator concepts
   indirectly_readable
   (C++20)
   indirectly_writable
   (C++20)
   weakly_incrementable
   (C++20)
   incrementable
   (C++20)
   input_or_output_iterator
   (C++20)
   sentinel_for
   (C++20)
   sized_sentinel_for
   (C++20)
   input_iterator
   (C++20)
   output_iterator
   (C++20)
   forward_iterator
   (C++20)
   bidirectional_iterator
   (C++20)
   random_access_iterator
   (C++20)
   contiguous_iterator
   (C++20)
   Iterator primitives
   input_iterator_tagoutput_iterator_tagforward_iterator_tagbidirectional_
   iterator_tagrandom_access_iterator_tagcontiguous_iterator_tag
   (C++20)
   iter_value_titer_difference_titer_reference_titer_const_reference_titer
   _rvalue_reference_titer_common_reference_t
   (C++20)(C++20)(C++20)(C++23)(C++20)(C++20)
   iterator
   (deprecated in C++17)
   iterator_traits
   incrementable_traits
   (C++20)
   indirectly_readable_traits
   (C++20)
   Algorithm concepts and utilities
   Indirect callable concepts
   indirectly_unary_invocableindirectly_regular_unary_invocable
   (C++20)(C++20)
   indirect_unary_predicate
   (C++20)
   indirect_binary_predicate
   (C++20)
   indirect_equivalence_relation
   (C++20)
   indirect_strict_weak_order
   (C++20)
   Common algorithm requirements
   indirectly_movable
   (C++20)
   indirectly_movable_storable
   (C++20)
   indirectly_copyable
   (C++20)
   indirectly_copyable_storable
   (C++20)
   indirectly_swappable
   (C++20)
   indirectly_comparable
   (C++20)
   permutable
   (C++20)
   mergeable
   (C++20)
   sortable
   (C++20)
   Utilities
   indirect_result_t
   (C++20)
   projected
   (C++20)
   projected_value_t
   (C++26)
   Iterator adaptors
   reverse_iterator
   make_reverse_iterator
   (C++14)
   move_iterator
   (C++11)
   make_move_iterator
   (C++11)
   default_sentinel_tdefault_sentinel
   (C++20)(C++20)
   unreachable_sentinel_tunreachable_sentinel
   (C++20)(C++20)
   front_insert_iterator
   back_insert_iterator
   inserter
   insert_iterator
   front_inserter
   back_inserter
   move_sentinel
   (C++20)
   common_iterator
   (C++20)
   counted_iterator
   (C++20)
   basic_const_iterator
   (C++23)
   const_iterator
   (C++23)
   const_sentinel
   (C++23)
   make_const_iterator
   (C++23)
   make_const_sentinel
   (C++23)
   Stream iterators
   istream_iterator

   ostream_iterator
   istreambuf_iterator
   ostreambuf_iterator
   Iterator customization points
   ranges::iter_move
   (C++20)
   ranges::iter_swap
   (C++20)
   Iterator operations
   advance
   distance
   prev
   (C++11)
   next
   (C++11)
   ranges::advance
   (C++20)
   ranges::distance
   (C++20)
   ranges::prev
   (C++20)
   ranges::next
   (C++20)
   Range access
   begincbegin
   (C++11)(C++14)
   rbegincrbegin
   (C++14)(C++14)
   endcend
   (C++11)(C++14)
   rendcrend
   (C++14)(C++14)
   sizessize
   (C++17)(C++20)
   empty
   (C++17)
   data
   (C++17)

   std::reverse_iterator
   Member functions
   reverse_iterator::reverse_iterator
   reverse_iterator::operator=
   reverse_iterator::base
   reverse_iterator::operator*reverse_iterator::operator->
   reverse_iterator::operator[]
   reverse_iterator::operator++reverse_iterator::operator+reverse_iterator
   ::operator+=reverse_iterator::operator--reverse_iterator::operator-reve
   rse_iterator::operator-=
   Non-member functions
   operator==operator!=operator<operator<=operator>operator>=operator<=>
   (C++20)
   operator+
   operator-
   iter_move
   (C++20)
   iter_swap
   (C++20)
   make_reverse_iterator
   (C++14)

                                         (1)
   reference operator*() const;
                                             (until C++17)
   constexpr reference operator*() const;
                                             (since C++17)
                                         (2)
   pointer operator->() const;
                                             (until C++17)
   constexpr pointer operator->() const;
   (since C++17)
   (until C++20)
   constexpr pointer operator->() const

       requires (std::is_pointer_v<Iter> ||
                 requires (const Iter i) { i.operator->(); });
                                             (since C++20)

   Returns a reference or pointer to the element previous to current.
   1) Equivalent to Iter tmp = current; return *--tmp;.
   2) Equivalent to return std::addressof(operator*());.
   (until C++20)
   2) Equivalent to return current - 1; if Iter is a pointer type.
   Otherwise, equivalent to return std::prev(current).operator->();.
   (since C++20)

Parameters

   (none)

Return value

   Reference or pointer to the element previous to current.

Example

   Run this code
#include <complex>
#include <iostream>
#include <iterator>
#include <vector>

int main()
{
    using RI0 = std::reverse_iterator<int*>;
    int a[]{0, 1, 2, 3};
    RI0 r0{std::rbegin(a)};
    std::cout << "*r0 = " << *r0 << '\n';
    *r0 = 42;
    std::cout << "a[3] = " << a[3] << '\n';

    using RI1 = std::reverse_iterator<std::vector<int>::iterator>;
    std::vector<int> vi{0, 1, 2, 3};
    RI1 r1{vi.rend() - 2};
    std::cout << "*r1 = " << *r1 << '\n';

    using RI2 = std::reverse_iterator<std::vector<std::complex<double>>::iterato
r>;
    std::vector<std::complex<double>> vc{{1,2}, {3,4}, {5,6}, {7,8}};
    RI2 r2{vc.rbegin() + 1};
    std::cout << "vc[2] = (" << r2->real() << ',' << r2->imag() << ")\n";
}

   Output:
*r0 = 3
a[3] = 42
*r1 = 1
vc[2] = (5,6)

See also

   operator[]
   accesses an element by index
   (public member function)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/reverse
   _iterator/operator*&oldid=159970"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 2 October 2023, at 00:23.
     * This page has been accessed 28,279 times.
