override specifier (since C++11)

   From cppreference.com
   < cpp | language

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   C++ language
   General topics
   Preprocessor
   Comments
   Keywords
   Escape sequences
   Flow control
   Conditional execution statements
   if
   switch
   Iteration statements (loops)
   for
   range-for (C++11)
   while
   do-while
   Jump statements
   continue - break
   goto - return
   Functions
   Function declaration
   Lambda function expression
   inline specifier
   Dynamic exception specifications (until C++17*)
   noexcept specifier (C++11)
   Exceptions
   throw-expression
   try block
   handler
   Namespaces
   Namespace declaration
   Namespace aliases
   Types
   Fundamental types
   Enumeration types
   Function types
   Class/struct types
   Union types
   Specifiers
   const/volatile
   decltype (C++11)
   auto (C++11)
   constexpr (C++11)
   consteval (C++20)
   constinit (C++20)
   Storage duration specifiers
   Initialization
   Default-initialization
   Value-initialization
   Zero-initialization
   Copy-initialization
   Direct-initialization
   Aggregate initialization
   List-initialization (C++11)
   Constant initialization
   Reference initialization
   Expressions
   Value categories
   Order of evaluation
   Operators
   Operator precedence
   Alternative representations
   Literals
   Boolean - Integer - Floating-point
   Character - String - nullptr (C++11)
   User-defined (C++11)
   Utilities
   Attributes (C++11)
   Types
   typedef declaration
   Type alias declaration (C++11)
   Casts
   Implicit conversions
   static_cast
   const_cast
   Explicit conversions
   dynamic_cast
   reinterpret_cast
   Memory allocation
   new expression
   delete expression
   Classes
   Class declaration
   Constructors
   this pointer
   Access specifiers
   friend specifier
   Class-specific function properties
   Virtual function
   override specifier (C++11)
   final specifier (C++11)
   explicit (C++11)
   static
   Special member functions
   Default constructor
   Copy constructor
   Move constructor (C++11)
   Copy assignment
   Move assignment (C++11)
   Destructor
   Templates
   Class template
   Function template
   Template specialization
   Parameter packs (C++11)
   Miscellaneous
   Inline assembly
   History of C++

   Classes
   General
   Overview
   class/struct types
   union types
   Injected-class-name
   Members
   Data members
   Static members
   The this pointer
   Nested classes
   Member templates
   Bit-fields
   using-declarations
   Member functions
   Member access specifiers
   Constructors and member initializer lists
   Default member initializer (C++11)
   friend specifier
   explicit specifier
   Converting constructor
   Special member functions
   Default constructor
   Copy constructor
   Move constructor (C++11)
   Copy assignment operator
   Move assignment operator (C++11)
   Destructor
   Inheritance
   Base and derived classes
   Empty base optimization (EBO)
   Virtual member functions
   Pure virtual functions and abstract classes
   override specifier (C++11)
   final specifier (C++11)

   Specifies that a virtual function overrides another virtual function.

Syntax

   The identifier override, if used, appears immediately after the
   declarator in the syntax of a member function declaration or a member
   function definition inside a class definition.
   declarator virt-specifier-seq¿(optional) pure-specifier¿(optional) (1)
   declarator virt-specifier-seq¿(optional) function-body             (2)
   1) In a member function declaration, override may appear in
   virt-specifier-seq immediately after the declarator, and before the
   pure-specifier, if used.
   2) In a member function definition inside a class definition, override
   may appear in virt-specifier-seq immediately after the declarator and
   just before function-body.

   In both cases, virt-specifier-seq, if used, is either override or
   final, or final override or override final.

Explanation

   In a member function declaration or definition, override specifier
   ensures that the function is virtual and is overriding a virtual
   function from a base class. The program is ill-formed (a compile-time
   error is generated) if this is not true.

   override is an identifier with a special meaning when used after member
   function declarators: it's not a reserved keyword otherwise.

Example

   Run this code
#include <iostream>

struct A
{
    virtual void foo();
    void bar();
    virtual ~A();
};

// member functions definitions of struct A:
void A::foo() { std::cout << "A::foo();\n"; }
A::~A() { std::cout << "A::~A();\n"; }

struct B : A
{
//  void foo() const override; // Error: B::foo does not override A::foo
                               // (signature mismatch)
    void foo() override; // OK: B::foo overrides A::foo
//  void bar() override; // Error: A::bar is not virtual
    ~B() override; // OK: `override` can also be applied to virtual
                   // special member functions, e.g. destructors
    void override(); // OK, member function name, not a reserved keyword
};

// member functions definitions of struct B:
void B::foo() { std::cout << "B::foo();\n"; }
B::~B() { std::cout << "B::~B();\n"; }
void B::override() { std::cout << "B::override();\n"; }

int main()
{
    B b;
    b.foo();
    b.override(); // OK, invokes the member function `override()`
    int override{42}; // OK, defines an integer variable
    std::cout << "override: " << override << '\n';
}

   Output:
B::foo();
B::override();
override: 42
B::~B();
A::~A();

See also

   final specifier(C++11) declares that a method cannot be overridden
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/language/overrid
   e&oldid=148492"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 23 February 2023, at 05:22.
     * This page has been accessed 1,364,644 times.
