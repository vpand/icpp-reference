std::swappable, std::swappable_with

   From cppreference.com
   < cpp | concepts

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Concepts library
   Core language concepts
   same_as
   derived_from
   convertible_to
   common_reference_with

   common_with
   integral
   signed_integral
   unsigned_integral
   floating_point
   swappableswappable_with
   destructible
   constructible_from
   default_initializable
   move_constructible
   copy_constructible
   assignable_from
   Comparison concepts
   equality_comparableequality_comparable_with
   totally_orderedtotally_ordered_with
   Object concepts
   movable
   copyable
   semiregular
   regular
   Callable concepts
   invocableregular_invocable
   predicate
   relation
   equivalence_relation
   strict_weak_order
   Exposition-only concepts
   boolean-testable

   Defined in header <concepts>
   template< class T >

   concept swappable =
       requires(T& a, T& b) {
           ranges::swap(a, b);
       };
   (1)                         (since C++20)
   template< class T, class U >

   concept swappable_with =
       std::common_reference_with<T, U> &&
       requires(T&& t, U&& u) {
           ranges::swap(std::forward<T>(t), std::forward<T>(t));
           ranges::swap(std::forward<U>(u), std::forward<U>(u));
           ranges::swap(std::forward<T>(t), std::forward<U>(u));
           ranges::swap(std::forward<U>(u), std::forward<T>(t));
       };
   (2)                         (since C++20)

   The concept swappable<T> specifies that lvalues of type T are
   swappable.

   The concept swappable_with<T, U> specifies that expressions of the type
   and value category encoded by T and U are swappable with each other.
   swappable_with<T, U> is satisfied only if a call to ranges::swap(t, u)
   exchanges the value of t and u, that is, given distinct objects t2
   equal to t and u2 equal to u, after evaluating either ranges::swap(t,
   u) or ranges::swap(u, t), t2 is equal to u and u2 is equal to t.

Equality preservation

   Expressions declared in requires expressions of the standard library
   concepts are required to be equality-preserving (except where stated
   otherwise).
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/concepts/swappab
   le&oldid=161738"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 29 October 2023, at 14:11.
     * This page has been accessed 21,836 times.
