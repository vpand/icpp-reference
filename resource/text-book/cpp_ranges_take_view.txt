std::ranges::views::take, std::ranges::take_view

   From cppreference.com
   < cpp | ranges

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Ranges library
   Range access
   begin
   cbegin
   end
   cend
   rbegin
   crbegin
   rend
   crend
   size
   ssize
   data
   cdata
   empty
   Range conversions
   std::from_range_t
   std::from_range
   (C++23)(C++23)
   to
   (C++23)
   Range primitives
   range_size_trange_difference_trange_value_trange_reference_t
   iterator_tconst_iterator_tsentinel_tconst_sentinel_t
   (C++23)(C++23)
   range_const_reference_trange_rvalue_reference_trange_common_reference_t
   (C++23)
   elements_of
   (C++23)
   Dangling iterator handling
   dangling
   borrowed_iterator_t
   borrowed_subrange_t
   Range concepts
   range
   borrowed_range
   sized_range
   constant_range
   (C++23)
   common_range
   view
   viewable_range
   input_range
   output_range
   forward_range
   bidirectional_range
   random_access_range
   contiguous_range
   Views
   view_interface
   subrange
   Range factories
   empty_viewviews::empty
   single_viewviews::single
   iota_viewviews::iota
   repeat_viewviews::repeat
   (C++23)(C++23)
   basic_istream_viewviews::istream
   Range adaptors
   views::all_tviews::all
   ref_view
   owning_view
   as_rvalue_viewviews::as_rvalue
   (C++23)(C++23)
   filter_viewviews::filter
   transform_viewviews::transform
   take_viewviews::take
   take_while_viewviews::take_while
   concat_viewviews::concat
   (C++26)(C++26)
   drop_viewviews::drop
   drop_while_viewviews::drop_while
   join_viewviews::join
   join_with_viewviews::join_with
   (C++23)(C++23)
   lazy_split_viewviews::lazy_split
   split_viewviews::split
   views::counted
   common_viewviews::common
   reverse_viewviews::reverse
   as_const_viewviews::as_const
   (C++23)(C++23)
   elements_viewviews::elements
   keys_viewviews::keys
   values_viewviews::values
   enumerate_viewviews::enumerate
   (C++23)(C++23)
   zip_viewviews::zip
   (C++23)(C++23)
   zip_transform_viewviews::zip_transform
   (C++23)(C++23)
   adjacent_viewviews::adjacent
   (C++23)(C++23)
   views::pairwise
   (C++23)
   adjacent_transform_viewviews::adjacent_transform
   (C++23)(C++23)
   views::pairwise_transform
   (C++23)
   chunk_viewviews::chunk
   (C++23)(C++23)
   slide_viewviews::slide
   (C++23)(C++23)
   chunk_by_viewviews::chunk_by
   (C++23)(C++23)
   stride_viewviews::stride
   (C++23)(C++23)
   cartesian_product_viewviews::cartesian_product
   (C++23)(C++23)
   Range generators
   std::generator
   (C++23)
   Range adaptor objects
   Range adaptor closure objects
   range_adaptor_closure
   (C++23)
   Helper items
   copyable-box
   movable-box
   (until C++23)(C++23)
   simple-view
   non-propagating-cache

   std::ranges::take_view
   Member functions
   take_view::take_view
   take_view::base
   take_view::begin
   take_view::end
   take_view::size
   Deduction guides
   Sentinel
   Member functions
   take_view::sentinel::sentinel
   Non-member functions
   take_view::sentinel::base
   operator==(std::counted_iterator,take_view::sentinel)

   Defined in header <ranges>
   template< ranges::view V >

   class take_view
       : public ranges::view_interface<take_view<V>>
   (1)                                 (since C++20)
   namespace views {

       inline constexpr /* unspecified */ take = /* unspecified */;
   }
   (2)                                 (since C++20)
   Call signature
   template< ranges::viewable_range R >

       requires /* see below */
   constexpr ranges::view auto
       take( R&& r, ranges::range_difference_t<R> count );
                                       (since C++20)
   template< class DifferenceType >
   constexpr /* range adaptor closure */ take( DifferenceType&& count );
                                       (since C++20)
   1) A range adaptor that represents view of the elements from an
   underlying sequence, starting at the beginning and ending at a given
   bound.
   2) views::take is a RangeAdaptorObject. The expression views::take(e,
   f) results in a view that represents the first f elements from e. The
   result is not necessarily a take_view.

   views::take(e, f) is expression-equivalent to (where T is
   std::remove_cvref_t<decltype((e))> and D is
   ranges::range_difference_t<decltype((e))>):
     * ((void)f, decay-copy(e)), if T is a ranges::empty_view, except that
       the evaluations of e and f are indeterminately sequenced;
     * U(ranges::begin(e), ranges::begin(e) +
       std::min<D>(ranges::distance(e), f)), if T is a specialization of
       std::span, std::basic_string_view, or ranges::subrange that models
       both random_access_range and sized_range, where U is

          + std::span<typename T::element_type>, if T is a specialization
            of std::span;
          + T, if T is a specialization of std::basic_string_view;
          + ranges::subrange<ranges::iterator_t<T>>, if T is a
            specialization of ranges::subrange;

     * ranges::iota_view(*ranges::begin(e),
                         *(ranges::begin(e) +
       std::min<D>(ranges::distance(e), f))), if T is a specialization of
       ranges::iota_view that models both random_access_range and
       sized_range;

     * otherwise, if T is a specialization of ranges::repeat_view:

          + views::repeat(*e.value_, std::min<D>(ranges::distance(e), f)),
            if T models sized_range; is such case e is evaluated only
            once;
          + views::repeat(*e.value_, static_cast<D>(e)) otherwise;

   (since C++23)
     * otherwise, take_view(e, f).

   In all cases, decltype((f)) must model std::convertible_to<D>.

   take_view models the concepts contiguous_range, random_access_range,
   bidirectional_range, forward_range, input_range, and sized_range when
   the underlying view V models respective concepts. It models
   common_range when the underlying view V models both random_access_range
   and sized_range.

Member functions

   (constructor)
   (C++20)
   constructs a take_view
   (public member function)
   base
   (C++20)
   returns a copy of the underlying (adapted) view
   (public member function)
   begin
   (C++20)
   returns an iterator to the beginning
   (public member function)
   end
   (C++20)
   returns an iterator or a sentinel to the end
   (public member function)
   size
   (C++20)
   returns the number of elements. Provided only if the underlying
   (adapted) range satisfies sized_range.
   (public member function)

Inherited from std::ranges::view_interface

   empty
   (C++20)
   returns whether the derived view is empty. Provided if it satisfies
   sized_range or forward_range.
   (public member function of std::ranges::view_interface<D>)
   cbegin
   (C++23)
   returns a constant iterator to the beginning of the range.
   (public member function of std::ranges::view_interface<D>)
   cend
   (C++23)
   returns a sentinel for the constant iterator of the range.
   (public member function of std::ranges::view_interface<D>)
   operator bool
   (C++20)
   returns whether the derived view is not empty. Provided if
   ranges::empty is applicable to it.
   (public member function of std::ranges::view_interface<D>)
   data
   (C++20)
   gets the address of derived view's data. Provided if its iterator type
   satisfies contiguous_iterator.
   (public member function of std::ranges::view_interface<D>)
   front
   (C++20)
   returns the first element in the derived view. Provided if it satisfies
   forward_range.
   (public member function of std::ranges::view_interface<D>)
   back
   (C++20)
   returns the last element in the derived view. Provided if it satisfies
   bidirectional_range and common_range.
   (public member function of std::ranges::view_interface<D>)
   operator[]
   (C++20)
   returns the n^th element in the derived view. Provided if it satisfies
   random_access_range.
   (public member function of std::ranges::view_interface<D>)

Deduction guides

Nested classes

   sentinel
   (C++20)
   the sentinel type
   (exposition-only member class template*)

Helper templates

   template< class T >

   inline constexpr bool enable_borrowed_range<std::ranges::take_view<T>>
   =
       std::ranges::enable_borrowed_range<T>;
                      (since C++20)

   This specialization of std::ranges::enable_borrowed_range makes
   take_view satisfy borrowed_range when the underlying view satisfies it.

Example

   Run this code
#include <algorithm>
#include <iostream>
#include <ranges>

auto print = [](char x){ std::cout << x; };

int main()
{
    constexpr char pi[]{'3', '.', '1', '4', '1', '5', '9', '2'};

    std::ranges::for_each(pi | std::ranges::views::take(6), print);
    std::cout << '\n';

    // safely takes 8 chars only, i.e. min(pi.size(), 42)
    std::ranges::for_each(std::ranges::take_view{pi, 42}, print);

    std::cout << '\n';
}

   Output:
3.1415
3.141592

Defect reports

   The following behavior-changing defect reports were applied
   retroactively to previously published C++ standards.
   DR Applied to Behavior as published Correct behavior
   LWG 3407 C++20 views::take sometimes failed to
   construct a sized random access range the result type is adjusted so
   that construction is always valid
   LWG 3494 C++20 take_view was never a borrowed_range it is a
   borrowed_range if its underlying view is

See also

   views::counted
   (C++20)
   creates a subrange from an iterator and a count
   (customization point object)
   ranges::take_while_viewviews::take_while
   (C++20)
   a view consisting of the initial elements of another view, until the
   first element on which a predicate returns false
   (class template) (range adaptor object)
   ranges::copy_n
   (C++20)
   copies a number of elements to a new location
   (niebloid)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/ranges/take_view
   &oldid=160946"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 19 October 2023, at 13:12.
     * This page has been accessed 55,118 times.
