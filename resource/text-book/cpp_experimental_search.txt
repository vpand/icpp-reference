std::experimental::search

   From cppreference.com
   < cpp | experimental

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Experimental
   Technical Specification
   Filesystem library (filesystem TS)
   Library fundamentals (library fundamentals TS)
   Library fundamentals 2 (library fundamentals TS v2)
   Library fundamentals 3 (library fundamentals TS v3)
   Extensions for parallelism (parallelism TS)
   Extensions for parallelism 2 (parallelism TS v2)
   Extensions for concurrency (concurrency TS)
   Extensions for concurrency 2 (concurrency TS v2)
   Concepts (concepts TS)
   Ranges (ranges TS)
   Reflection (reflection TS)
   Mathematical special functions (special functions TR)
   Experimental Non-TS
   Pattern Matching
   Linear Algebra
   std::execution
   Contracts
   2D Graphics

   Library fundamentals
   experimental::optional
   experimental::any
   experimental::basic_string_view
   experimental::sample
   experimental::shared_ptr
   experimental::weak_ptr
   experimental::apply
   experimental::invocation_typeexperimental::raw_invocation_type
   experimental::search
   experimental::default_searcherexperimental::make_default_searcher
   experimental::boyer_moore_searcherexperimental::make_boyer_moore_search
   er
   experimental::boyer_moore_horspool_searcherexperimental::make_boyer_moo
   re_horspool_searcher
   Type-erased and polymorphic allocators
   Variable templates for type traits

   Defined in header <experimental/algorithm>
   template< class ForwardIterator, class Searcher >

   ForwardIterator search( ForwardIterator first, ForwardIterator last,
                           const Searcher& searcher );
                                                    (library fundamentals TS)

   Searches the sequence [first, last) for the pattern specified in the
   constructor of searcher.

   Effectively executes searcher(first, last).
   (until C++17)

   Effectively executes searcher(first, last).first.
   (since C++17)

   Searcher need not be CopyConstructible.

   The standard library provides the following searchers:
   default_searcher
   standard C++ library search algorithm implementation
   (class template)
   boyer_moore_searcher
   Boyer-Moore search algorithm implementation
   (class template)
   boyer_moore_horspool_searcher
   Boyer-Moore-Horspool search algorithm implementation
   (class template)

Parameters

   This section is incomplete

Return value

   Returns the result of searcher.operator(), that is, an iterator to the
   location at which the substring is found or a copy of last if it was
   not found.

Complexity

   Depends on the searcher.

Example

   Run this code
#include <experimental/algorithm>
#include <experimental/functional>
#include <iostream>
#include <string>

int main()
{
    std::string in = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, s
ed "
                     "do eiusmod tempor incididunt ut labore et dolore magna ali
qua";
    std::string needle = "pisci";
    auto it = std::experimental::search(in.begin(), in.end(),
                  std::experimental::make_boyer_moore_searcher(
                      needle.begin(), needle.end()));
    if (it != in.end())
        std::cout << "The string " << needle << " found at offset "
                  << it - in.begin() << '\n';
    else
        std::cout << "The string " << needle << " not found\n";
}

   Output:
The string pisci found at offset 43

See also

   search
   searches for a range of elements
   (function template)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/experimental/sea
   rch&oldid=155804"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 30 July 2023, at 09:47.
     * This page has been accessed 24,122 times.
