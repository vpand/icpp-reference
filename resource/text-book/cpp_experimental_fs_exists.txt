std::experimental::filesystem::exists

   From cppreference.com
   < cpp | experimental | fs

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Experimental
   Technical Specification
   Filesystem library (filesystem TS)
   Library fundamentals (library fundamentals TS)
   Library fundamentals 2 (library fundamentals TS v2)
   Library fundamentals 3 (library fundamentals TS v3)
   Extensions for parallelism (parallelism TS)
   Extensions for parallelism 2 (parallelism TS v2)
   Extensions for concurrency (concurrency TS)
   Extensions for concurrency 2 (concurrency TS v2)
   Concepts (concepts TS)
   Ranges (ranges TS)
   Reflection (reflection TS)
   Mathematical special functions (special functions TR)
   Experimental Non-TS
   Pattern Matching
   Linear Algebra
   std::execution
   Contracts
   2D Graphics

   Filesystem library
   Classes
   filesystem::path
   filesystem::filesystem_error
   filesystem::directory_entry
   filesystem::directory_iterator
   filesystem::recursive_directory_iterator
   filesystem::file_status
   filesystem::space_info
   filesystem::file_type
   filesystem::perms
   filesystem::copy_options
   filesystem::directory_options
   filesystem::file_time_type
   Functions
   filesystem::absolute
   filesystem::system_complete
   filesystem::canonical
   filesystem::copy
   filesystem::copy_file
   filesystem::copy_symlink
   filesystem::create_directory
   filesystem::create_directories
   filesystem::create_hard_link
   filesystem::create_symlink
   filesystem::create_directory_symlink
   filesystem::current_path
   filesystem::exists
   filesystem::equivalent
   filesystem::file_size
   filesystem::hard_link_count
   filesystem::last_write_time
   filesystem::permissions
   filesystem::read_symlink
   filesystem::remove
   filesystem::remove_all
   filesystem::rename
   filesystem::resize_file
   filesystem::space
   filesystem::status
   filesystem::symlink_status
   filesystem::temp_directory_path
   File types
   filesystem::is_block_file
   filesystem::is_character_file
   filesystem::is_directory
   filesystem::is_empty
   filesystem::status_known
   filesystem::is_fifo
   filesystem::is_other
   filesystem::is_regular_file
   filesystem::is_socket
   filesystem::is_symlink

   Defined in header <experimental/filesystem>
   bool exists( file_status s )
   (1)                                        (filesystem TS)
   bool exists( const path& p );
   bool exists( const path& p, error_code& ec )
   (2)                                        (filesystem TS)

   Checks if the given file status or path corresponds to an existing file
   or directory.
   1) Equivalent to status_known(s) && s.type() != file_type::not_found.
   2) Equivalent to exists(status(p)) or exists(status(p, ec)) (symlinks
   are followed). The non-throwing overload returns false if an error
   occurs.

Parameters

   s  - file status to check
   p  - path to examine
   ec - out-parameter for error reporting in the non-throwing overload

Return value

   true if the given path or file status corresponds to an existing file
   or directory, false otherwise.

Exceptions

   1)
   noexcept specification:
   noexcept

   2) The overload that does not take an error_code& parameter throws
   filesystem_error on underlying OS API errors, constructed with p as the
   first argument and the OS error code as the error code argument.
   std::bad_alloc may be thrown if memory allocation fails. The overload
   taking an error_code& parameter sets it to the OS API error code if an
   OS API call fails, and executes ec.clear() if no errors occur. This
   overload has
   noexcept specification:
   noexcept

Notes

   The information provided by this function is usually also provided as a
   byproduct of directory iteration. During directory iteration, calling
   exists(*iterator) is less efficient than exists(iterator->status()).

Example

   Run this code
#include <cstdint>
#include <experimental/filesystem>
#include <fstream>
#include <iostream>
namespace fs = std::experimental::filesystem;

void demo_exists(const fs::path& p, fs::file_status s = fs::file_status{})
{
    std::cout << p;
    if (fs::status_known(s) ? fs::exists(s) : fs::exists(p))
        std::cout << " exists\n";
    else
        std::cout << " does not exist\n";
}

int main()
{
    fs::create_directory("sandbox");
    std::ofstream("sandbox/file"); // create regular file
    fs::create_symlink("non-existing", "sandbox/symlink");

    demo_exists("sandbox");
    for (auto it = fs::directory_iterator("sandbox"); it != fs::directory_iterat
or(); ++it)
        demo_exists(*it, it->status()); // use cached status from directory entr
y
    fs::remove_all("sandbox");
}

   Output:
"sandbox" exists
"sandbox/file" exists
"sandbox/symlink" does not exist

See also

   statussymlink_status
   determines file attributes
   determines file attributes, checking the symlink target
   (function)
   file_status
   represents file type and permissions
   (class)
   statussymlink_status
   cached status of the file designated by this directory entry
   cached symlink_status of the file designated by this directory entry
   (public member function of
   std::experimental::filesystem::directory_entry)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/experimental/fs/
   exists&oldid=159765"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 28 September 2023, at 07:00.
     * This page has been accessed 60,746 times.
