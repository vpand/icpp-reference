C++ named requirements: MoveInsertable (since C++11)

   From cppreference.com
   < cpp | named req

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   C++ named requirements
   Basic
   DefaultConstructible
   CopyAssignable
   CopyConstructible
   MoveAssignable
   (C++11)
   MoveConstructible
   (C++11)
   Destructible
   Type properties
   ScalarType
   TriviallyCopyable
   (C++11)
   StandardLayoutType
   (C++11)
   PODType
   TrivialType
   (C++11)
   ImplicitLifetimeType
   Library-Wide
   EqualityComparable
   LessThanComparable
   Swappable
   ValueSwappable
   (C++11)
   NullablePointer
   (C++11)
   Hash
   (C++11)
   Allocator
   FunctionObject
   Callable
   Predicate
   BinaryPredicate
   Compare
   Container
   Container
   SequenceContainer
   ContiguousContainer
   (C++17)
   ReversibleContainer
   AssociativeContainer
   AllocatorAwareContainer
   UnorderedAssociativeContainer
   (C++11)
   Container Elements
   DefaultInsertable
   (C++11)
   CopyInsertable
   (C++11)
   MoveInsertable
   (C++11)
   EmplaceConstructible
   (C++11)
   Erasable
   (C++11)
   Iterator
   LegacyIterator
   LegacyOutputIterator
   LegacyInputIterator
   LegacyForwardIterator
   LegacyBidirectionalIterator
   LegacyRandomAccessIterator
   LegacyContiguousIterator
   (C++17)
   ConstexprIterator
   (C++20)
   Stream I/O
   FormattedInputFunction
   UnformattedInputFunction
   FormattedOutputFunction
   UnformattedOutputFunction
   Formatters
   BasicFormatter
   (C++20)
   Formatter
   (C++20)
   Random Numbers
   SeedSequence
   (C++11)
   RandomNumberEngine
   (C++11)
   RandomNumberDistribution
   (C++11)
   UniformRandomBitGenerator
   (C++11)
   RandomNumberEngineAdaptor
   (C++11)
   Concurrency
   BasicLockable
   (C++11)
   Lockable
   (C++11)
   TimedLockable
   (C++11)
   SharedLockable
   (C++14)
   SharedTimedLockable
   (C++14)
   Mutex
   (C++11)
   TimedMutex
   (C++11)
   SharedMutex
   (C++17)
   SharedTimedMutex
   (C++14)
   Ranges
   RangeAdaptorObject
   (C++20)
   RangeAdaptorClosureObject
   (C++20)
   Other
   CharTraits
   RegexTraits
   (C++11)
   BitmaskType
   LiteralType
   (C++11)
   NumericType
   UnaryTypeTrait
   (C++11)
   BinaryTypeTrait
   (C++11)
   TransformationTrait
   (C++11)
   Clock
   (C++11)
   TrivialClock
   (C++11)

   Specifies that an object of the type can be constructed into
   uninitialized storage from an rvalue of that type by a given allocator.

Requirements

   The type T is MoveInsertable into the container X whose value_type is
   identical to T if, given
   A  an allocator type
   m  an lvalue of type A
   p  the pointer of type T* prepared by the container
   rv rvalue expression of type T

   where X::allocator_type is identical to
   std::allocator_traits<A>::rebind_alloc<T>,

   the following expression is well-formed:
std::allocator_traits<A>::construct(m, p, rv);

   And after evaluation, the value of *p is equivalent to the value
   formerly held by rv (rv remains valid, but is in an unspecified state).

   If X is not allocator-aware or is a std::basic_string specialization,
   the term is defined as if A were std::allocator<T>, except that no
   allocator object needs to be created, and user-defined specializations
   of std::allocator are not instantiated.

Notes

   If A is std::allocator<T>, then this will call placement-new, as by
   ::new((void*)p) T(rv)(until C++20)std::construct_at(p, rv)(since
   C++20). This effectively requires T to be move constructible.

   If std::allocator<T> or a similar allocator is used, a class does not
   have to implement a move constructor to satisfy this type requirement:
   a copy constructor that takes a const T& argument can bind rvalue
   expressions. If a MoveInsertable class implements a move constructor,
   it may also implement move semantics to take advantage of the fact that
   the value of rv after construction is unspecified.

   Although it is required that customized construct is used when
   constructing elements of std::basic_string until C++23, all
   implementations only used the default mechanism. The requirement is
   corrected by P1072R10 to match existing practice.

See also

   CopyInsertable
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/named_req/MoveIn
   sertable&oldid=160534"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 11 October 2023, at 10:53.
     * This page has been accessed 74,147 times.
