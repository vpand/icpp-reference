std::ranges::cartesian_product_view<First, Vs...>::iterator<Const>::next,
std::ranges::cartesian_product_view<First, Vs...>::iterator<Const>::prev,
std::ranges::cartesian_product_view<First,
Vs...>::iterator<Const>::distance_from

   From cppreference.com
   < cpp | ranges | cartesian product view | iterator

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Ranges library
   Range access
   begin
   cbegin
   end
   cend
   rbegin
   crbegin
   rend
   crend
   size
   ssize
   data
   cdata
   empty
   Range conversions
   std::from_range_t
   std::from_range
   (C++23)(C++23)
   to
   (C++23)
   Range primitives
   range_size_trange_difference_trange_value_trange_reference_t
   iterator_tconst_iterator_tsentinel_tconst_sentinel_t
   (C++23)(C++23)
   range_const_reference_trange_rvalue_reference_trange_common_reference_t
   (C++23)
   elements_of
   (C++23)
   Dangling iterator handling
   dangling
   borrowed_iterator_t
   borrowed_subrange_t
   Range concepts
   range
   borrowed_range
   sized_range
   constant_range
   (C++23)
   common_range
   view
   viewable_range
   input_range
   output_range
   forward_range
   bidirectional_range
   random_access_range
   contiguous_range
   Views
   view_interface
   subrange
   Range factories
   empty_viewviews::empty
   single_viewviews::single
   iota_viewviews::iota
   repeat_viewviews::repeat
   (C++23)(C++23)
   basic_istream_viewviews::istream
   Range adaptors
   views::all_tviews::all
   ref_view
   owning_view
   as_rvalue_viewviews::as_rvalue
   (C++23)(C++23)
   filter_viewviews::filter
   transform_viewviews::transform
   take_viewviews::take
   take_while_viewviews::take_while
   concat_viewviews::concat
   (C++26)(C++26)
   drop_viewviews::drop
   drop_while_viewviews::drop_while
   join_viewviews::join
   join_with_viewviews::join_with
   (C++23)(C++23)
   lazy_split_viewviews::lazy_split
   split_viewviews::split
   views::counted
   common_viewviews::common
   reverse_viewviews::reverse
   as_const_viewviews::as_const
   (C++23)(C++23)
   elements_viewviews::elements
   keys_viewviews::keys
   values_viewviews::values
   enumerate_viewviews::enumerate
   (C++23)(C++23)
   zip_viewviews::zip
   (C++23)(C++23)
   zip_transform_viewviews::zip_transform
   (C++23)(C++23)
   adjacent_viewviews::adjacent
   (C++23)(C++23)
   views::pairwise
   (C++23)
   adjacent_transform_viewviews::adjacent_transform
   (C++23)(C++23)
   views::pairwise_transform
   (C++23)
   chunk_viewviews::chunk
   (C++23)(C++23)
   slide_viewviews::slide
   (C++23)(C++23)
   chunk_by_viewviews::chunk_by
   (C++23)(C++23)
   stride_viewviews::stride
   (C++23)(C++23)
   cartesian_product_viewviews::cartesian_product
   (C++23)(C++23)
   Range generators
   std::generator
   (C++23)
   Range adaptor objects
   Range adaptor closure objects
   range_adaptor_closure
   (C++23)
   Helper items
   copyable-box
   movable-box
   (until C++23)(C++23)
   simple-view
   non-propagating-cache

   std::ranges::cartesian_product_view
   Member functions
   cartesian_product_view::cartesian_product_view
   cartesian_product_view::begin
   cartesian_product_view::end
   cartesian_product_view::size
   Deduction guides
   Iterator
   Member functions
   cartesian_product_view::iterator::iterator
   cartesian_product_view::iterator::operator*
   cartesian_product_view::iterator::operator[]
   cartesian_product_view::iterator::operator++
   cartesian_product_view::iterator::operator++(int)
   cartesian_product_view::iterator::operator--
   cartesian_product_view::iterator::operator--(int)
   cartesian_product_view::iterator::operator+=
   cartesian_product_view::iterator::operator-=
   cartesian_product_view::iterator::next
   cartesian_product_view::iterator::prev
   cartesian_product_view::iterator::distance_from
   Non-member functions
   operator==(cartesian_product_view::iterator)
   operator<=>(cartesian_product_view::iterator)
   operator+(cartesian_product_view::iterator)
   operator-(cartesian_product_view::iterator)
   iter_move(cartesian_product_view::iterator)
   iter_swap(cartesian_product_view::iterator)

std::ranges::cartesian_product_view::iterator::next

   template< std::size_t N = sizeof...(Vs) >
   constexpr void /*next*/();
   (since C++23)
   (exposition only*)

   If called with default template parameter, recursively generates the
   next element (the tuple of iterators) in cartesian_product_view.

   Let current_ denote the underlying tuple of iterators. Equivalent to:
auto& it = std::get<N>(current_);
++it;
if constexpr (N > 0)
{
    if (it == ranges::end(std::get<N>(parent_->bases_)))
    {
        it = ranges::begin(std::get<N>(parent_->bases_));
        next<N - 1>();
    }
}

   Used in the following non-static member functions:
     * ranges::cartesian_product_view::operator+

std::ranges::cartesian_product_view::iterator::prev

   template< std::size_t N = sizeof...(Vs) >
   constexpr void /*prev*/();
   (since C++23)
   (exposition only*)

   If called with default template parameter, recursively generates the
   previous element (the tuple of iterators) in cartesian_product_view.

   Let current_ denote the underlying tuple of iterators. Equivalent to:
auto& it = std::get<N>(current_);
if constexpr (N > 0)
{
    if (it == ranges::begin(std::get<N>(parent_->bases_)))
    {
        it = /*cartesian-common-arg-end*/(std::get<N>(parent_->bases_));
        prev<N - 1>();
    }
}
--it;

   Used in the following non-static member functions:
     * ranges::cartesian_product_view::operator-

std::ranges::cartesian_product_view::iterator::distance_from

   template< class Tuple >

   constexpr difference_type
       /*distance-from*/( const Tuple& t ) const;
   (since C++23)
   (exposition only*)

   Returns the "distance" (i.e., number of "hops") between two iterators.

   Let:
     * parent_ be the underlying pointer to cartesian_product_view
     * /*scaled-size*/(N) be:
          + the product of
            static_cast<difference_type>(ranges::size(std::get<N>(parent_-
            >bases_))) and /*scaled-size*/(N + 1) if N <= sizeof...(Vs),
            otherwise
          + static_cast<difference_type>(1);
     * /*scaled-distance*/(N) be the product of
       static_cast<difference_type>(std::get<N>(current_) -
       std::get<N>(t)) and /*scaled-size*/(N + 1);
     * /*scaled-sum*/ be the sum of /*scaled-distance*/(N) for every
       integer 0 <= N <= sizeof...(Vs).

   Returns: /*scaled-sum*/.

   The behavior is undefined if /*scaled-sum*/ cannot be represented by
   difference_type.

   Used in the following functions:
     * operator-(const /*iterator*/&, const /*iterator*/&)
     * operator-(const /*iterator*/&, std::default_sentinel_t)

Parameters

   t - a tuple of iterators to find the distance to
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/ranges/cartesian
   _product_view/iterator/helpers&oldid=156897"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 17 August 2023, at 00:14.
     * This page has been accessed 1,724 times.
