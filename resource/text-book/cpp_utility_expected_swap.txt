std::expected<T,E>::swap

   From cppreference.com
   < cpp | utility | expected

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Utilities library
   Language support
   Type support (basic types, RTTI)
   Library feature-test macros (C++20)
   Dynamic memory management
   Program utilities
   Coroutine support (C++20)
   Variadic functions
   is_constant_evaluated
   (C++20)
   is_within_lifetime
   (C++26)
   initializer_list
   (C++11)
   source_location
   (C++20)
   Debugging support
   is_debugger_present
   (C++26)
   breakpoint_if_debugging
   (C++26)
   breakpoint
   (C++26)
   Three-way comparison
   three_way_comparablethree_way_comparable_with
   (C++20)(C++20)
   strong_ordering
   (C++20)
   weak_ordering
   (C++20)
   partial_ordering
   (C++20)
   common_comparison_category
   (C++20)
   compare_three_way_result
   (C++20)
   compare_three_way
   (C++20)
   strong_order
   (C++20)
   weak_order
   (C++20)
   partial_order
   (C++20)
   compare_strong_order_fallback
   (C++20)
   compare_weak_order_fallback
   (C++20)
   compare_partial_order_fallback
   (C++20)
   is_eqis_ltis_lteq
   (C++20)(C++20)(C++20)
   is_neqis_gtis_gteq
   (C++20)(C++20)(C++20)
   General utilities
   Date and time
   Function objects
   Formatting library (C++20)
   bitset
   hash
   (C++11)
   Relational operators (deprecated in C++20)
   rel_ops::operator!=rel_ops::operator>

   rel_ops::operator<=rel_ops::operator>=
   Integer comparison functions
   cmp_equalcmp_lesscmp_less_than
   (C++20)(C++20)(C++20)
   cmp_not_equalcmp_greatercmp_greater_than
   (C++20)(C++20)(C++20)
   in_range
   (C++20)
   Swap and type operations
   swap
   ranges::swap
   (C++20)
   exchange
   (C++14)
   declval
   (C++11)
   to_underlying
   (C++23)
   forward
   (C++11)
   forward_like
   (C++23)
   move
   (C++11)
   move_if_noexcept
   (C++11)
   as_const
   (C++17)
   Common vocabulary types
   pair
   tuple
   (C++11)
   optional
   (C++17)
   any
   (C++17)
   variant
   (C++17)
   tuple_size
   (C++11)
   tuple_element
   (C++11)
   apply
   (C++17)
   make_from_tuple
   (C++17)
   expected
   (C++23)
   Elementary string conversions
   to_chars
   (C++17)
   from_chars
   (C++17)
   chars_format
   (C++17)
   to_chars_result
   (C++17)
   from_chars_result
   (C++17)

   std::expected
   Member functions
   expected::expected
   expected::~expected
   expected::operator=
   Observers
   expected::operator->expected::operator*
   expected::operator boolexpected::has_value
   expected::value
   expected::error
   expected::value_or
   Monadic operations
   expected::and_then
   expected::or_else
   expected::transform
   expected::transform_error
   Modifiers
   expected::emplace
   expected::swap
   Non-member functions
   operator==
   swap(std::expected)
   Helper classes
   unexpected
   bad_expected_access
   unexpect_tunexpect

   constexpr void swap( expected& other ) noexcept(/*see below*/);
                                                                  (since C++23)

   Swaps the contents with those of other.
     * If both this->has_value() and other.has_value() are true:

          + If T is (possibly cv-qualified) void, no effects.
          + Otherwise, equivalent to using std::swap; swap(**this,
            *other);.

     * If both this->has_value() and other.has_value() are false,
       equivalent to
       using std::swap; swap(this->error(), other.error());.
     * If this->has_value() is false and other.has_value() is true, calls
       other.swap(*this).
     * If this->has_value() is true and other.has_value() is false,

          + If T is (possibly cv-qualified) void, let unex be the member
            that represents the unexpected value, equivalent to:

std::construct_at(std::addressof(unex), std::move(other.unex));
std::destroy_at(std::addressof(other.unex));

          + Otherwise, let val be the member that represents the expected
            value and unex be the member that represents the unexpected
            value, equivalent to:

if constexpr (std::is_nothrow_move_constructible_v<E>) {
    E temp(std::move(other.unex));
    std::destroy_at(std::addressof(other.unex));
    try {
        std::construct_at(std::addressof(other.val), std::move(val));
        std::destroy_at(std::addressof(val));
        std::construct_at(std::addressof(unex), std::move(temp));
    } catch(...) {
        std::construct_at(std::addressof(other.unex), std::move(temp));
        throw;
    }
} else {
    T temp(std::move(val));
    std::destroy_at(std::addressof(val));
    try {
        std::construct_at(std::addressof(unex), std::move(other.unex));
        std::destroy_at(std::addressof(other.unex));
        std::construct_at(std::addressof(other.val), std::move(temp));
    } catch(...) {
        std::construct_at(std::addressof(val), std::move(temp));
        throw;
    }
}

          + In either case, if no exception was thrown, after swap,
            this->has_value() is false, and other.has_value() is true.

   This function participates in overload resolution only if
     * either T is (possibly cv-qualified) void, or std::is_swappable_v<T>
       is true, and
     * std::is_swappable_v<E> is true, and
     * either T is (possibly cv-qualified) void, or
       std::is_move_constructible_v<T> is true, and
     * std::is_move_constructible_v<E> is true, and
     * at least one of the following is true:
          + T is (possibly cv-qualified) void
          + std::is_nothrow_move_constructible_v<T>
          + std::is_nothrow_move_constructible_v<E>

Parameters

   other - the optional object to exchange the contents with

Return value

   (none)

Exceptions

   If T is (possibly cv-qualified) void,
   noexcept specification:
   noexcept(

       std::is_nothrow_move_constructible_v<E> &&
   std::is_nothrow_swappable_v<E>
   )
   Otherwise,
   noexcept specification:
   noexcept(

       std::is_nothrow_move_constructible_v<T> &&
   std::is_nothrow_swappable_v<T> &&
       std::is_nothrow_move_constructible_v<E> &&
   std::is_nothrow_swappable_v<E>
   )

   In the case of thrown exception, the states of the contained values of
   *this and other are determined by the exception safety guarantees of
   swap or T's and E's move constructor, whichever is called. For both
   *this and other, if the object contained an expected value, it is left
   containing an expected value, and the other way round.

Example

   This section is incomplete
   Reason: no example

See also

   swap(std::expected)
   (C++23)
   specializes the std::swap algorithm
   (function)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/utility/expected
   /swap&oldid=169704"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 9 February 2024, at 04:36.
     * This page has been accessed 4,778 times.
