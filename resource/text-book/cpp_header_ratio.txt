Standard library header <ratio> (C++11)

   From cppreference.com
   < cpp | header

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Standard library headers
   Language support
   <cstddef>
   <cstdlib>
   <version> (C++20)
   <limits>
   <climits>
   <cfloat>
   <cstdint> (C++11)
   <stdfloat> (C++23)
   <new>
   <typeinfo>
   <source_location> (C++20)
   <exception>
   <initializer_list> (C++11)
   <compare> (C++20)
   <coroutine> (C++20)
   <csignal>
   <csetjmp>
   <cstdarg>
   Concepts
   <concepts> (C++20)
   Diagnostics
   <stdexcept>
   <stacktrace> (C++23)
   <cassert>
   <cerrno>
   <system_error> (C++11)
   Memory management
   <memory>
   <memory_resource> (C++17)
   <scoped_allocator> (C++11)
   Metaprogramming
   <type_traits> (C++11)
   <ratio> (C++11)
   General utilities
   <utility>
   <tuple> (C++11)
   <optional> (C++17)
   <variant> (C++17)
   <any> (C++17)
   <debugging> (C++26)
   <expected> (C++23)
   <bitset>
   <functional>
   <typeindex> (C++11)
   <execution> (C++17)
   <charconv> (C++17)
   <format> (C++20)
   <bit> (C++20)
   Strings
   <string_view> (C++17)
   <string>
   <cctype>
   <cwctype>
   <cstring>
   <cwchar>
   <cuchar> (C++11)
   Containers
   <array> (C++11)
   <deque>
   <forward_list> (C++11)
   <list>
   <vector>
   <map>
   <set>
   <unordered_map> (C++11)
   <unordered_set> (C++11)
   <queue>
   <stack>
   <flat_map> (C++23)
   <flat_set> (C++23)
   <span> (C++20)
   <mdspan> (C++23)
   Iterators
   <iterator>
   Ranges
   <ranges> (C++20)
   <generator> (C++23)
   Algorithms
   <algorithm>
   <numeric>
   Numerics
   <cfenv> (C++11)
   <complex>
   <random> (C++11)
   <valarray>
   <cmath>
   <linalg> (C++26)
   <numbers> (C++20)
   Time
   <chrono> (C++11)
   <ctime>
   Localization
   <locale>
   <clocale>
   <codecvt> (C++11/17/26*)
   <text_encoding> (C++26)
   Input/output
   <iosfwd>
   <iostream>
   <ios>
   <streambuf>
   <istream>
   <ostream>
   <iomanip>
   <print> (C++23)
   <sstream>
   <spanstream> (C++23)
   <fstream>
   <syncstream> (C++20)
   <filesystem> (C++17)
   <cstdio>
   <cinttypes> (C++11)
   <strstream> (C++98/26*)
   Regular expressions
   <regex> (C++11)
   Concurrency support
   <stop_token> (C++20)
   <thread> (C++11)
   <atomic> (C++11)
   <rcu> (C++26)
   <stdatomic.h> (C++23)
   <mutex> (C++11)
   <shared_mutex> (C++14)
   <condition_variable> (C++11)
   <semaphore> (C++20)
   <latch> (C++20)
   <barrier> (C++20)
   <future> (C++11)
   <hazard_pointer> (C++26)
   C compatibility
   <cstdbool> (C++11/17/20*)
   <ccomplex> (C++11/17/20*)
   <ctgmath> (C++11/17/20*)
   <cstdalign> (C++11/17/20*)
   <ciso646> (until C++20)

   This header is part of the compile-time rational arithmetic library.

Classes

   ratio
   (C++11)
   represents exact rational fraction
   (class template)

Arithmetic

   ratio_add
   (C++11)
   adds two ratio objects at compile-time
   (alias template)
   ratio_subtract
   (C++11)
   subtracts two ratio objects at compile-time
   (alias template)
   ratio_multiply
   (C++11)
   multiplies two ratio objects at compile-time
   (alias template)
   ratio_divide
   (C++11)
   divides two ratio objects at compile-time
   (alias template)

Comparison

   ratio_equal
   (C++11)
   compares two ratio objects for equality at compile-time
   (class template)
   ratio_not_equal
   (C++11)
   compares two ratio objects for inequality at compile-time
   (class template)
   ratio_less
   (C++11)
   compares two ratio objects for less than at compile-time
   (class template)
   ratio_less_equal
   (C++11)
   compares two ratio objects for less than or equal to at compile-time
   (class template)
   ratio_greater
   (C++11)
   compares two ratio objects for greater than at compile-time
   (class template)
   ratio_greater_equal
   (C++11)
   compares two ratio objects for greater than or equal to at compile-time
   (class template)

Type Aliases

   quecto (C++26) std::ratio<1, 1000000000000000000000000000000>, if
   std::intmax_t can represent the denominator
   ronto (C++26) std::ratio<1, 1000000000000000000000000000>, if
   std::intmax_t can represent the denominator
   yocto std::ratio<1, 1000000000000000000000000>, if std::intmax_t can
   represent the denominator
   zepto std::ratio<1, 1000000000000000000000>, if std::intmax_t can
   represent the denominator
   atto std::ratio<1, 1000000000000000000>
   femto std::ratio<1, 1000000000000000>
   pico std::ratio<1, 1000000000000>
   nano std::ratio<1, 1000000000>
   micro std::ratio<1, 1000000>
   milli std::ratio<1, 1000>
   centi std::ratio<1, 100>
   deci std::ratio<1, 10>
   deca std::ratio<10, 1>
   hecto std::ratio<100, 1>
   kilo std::ratio<1000, 1>
   mega std::ratio<1000000, 1>
   giga std::ratio<1000000000, 1>
   tera std::ratio<1000000000000, 1>
   peta std::ratio<1000000000000000, 1>
   exa std::ratio<1000000000000000000, 1>
   zetta std::ratio<1000000000000000000000, 1>, if std::intmax_t can
   represent the numerator
   yotta std::ratio<1000000000000000000000000, 1>, if std::intmax_t can
   represent the numerator
   ronna (C++26) std::ratio<1000000000000000000000000000, 1>, if
   std::intmax_t can represent the numerator
   quetta (C++26) std::ratio<1000000000000000000000000000000, 1>, if
   std::intmax_t can represent the numerator

Synopsis

namespace std {

    // class template ratio
    template <intmax_t N, intmax_t D = 1>
    class ratio {
    public:
        typedef ratio<num, den> type;
        static constexpr intmax_t num;
        static constexpr intmax_t den;
    };


    // ratio arithmetic
    template <class R1, class   R2> using   ratio_add      = /*ratio*/;
    template <class R1, class   R2> using   ratio_subtract = /*ratio*/;
    template <class R1, class   R2> using   ratio_multiply = /*ratio*/;
    template <class R1, class   R2> using   ratio_divide   = /*ratio*/;

    // ratio comparison
    template <class R1, class R2> struct ratio_equal;
    template <class R1, class R2> struct ratio_not_equal;
    template <class R1, class R2> struct ratio_less;
    template <class R1, class R2> struct ratio_less_equal;
    template <class R1, class R2> struct ratio_greater;
    template <class R1, class R2> struct ratio_greater_equal;

    // convenience SI typedefs
    typedef ratio<1, 1000000000000000000000000000000> quecto;
    typedef ratio<1,    1000000000000000000000000000> ronto;
    typedef ratio<1,       1000000000000000000000000> yocto;
    typedef ratio<1,          1000000000000000000000> zepto;
    typedef ratio<1,             1000000000000000000> atto;
    typedef ratio<1,                1000000000000000> femto;
    typedef ratio<1,                   1000000000000> pico;
    typedef ratio<1,                      1000000000> nano;
    typedef ratio<1,                         1000000> micro;
    typedef ratio<1,                            1000> milli;
    typedef ratio<1,                             100> centi;
    typedef ratio<1,                              10> deci;
    typedef ratio<                             10, 1> deca;
    typedef ratio<                            100, 1> hecto;
    typedef ratio<                           1000, 1> kilo;
    typedef ratio<                        1000000, 1> mega;
    typedef ratio<                     1000000000, 1> giga;
    typedef ratio<                  1000000000000, 1> tera;
    typedef ratio<               1000000000000000, 1> peta;
    typedef ratio<            1000000000000000000, 1> exa;
    typedef ratio<         1000000000000000000000, 1> zetta;
    typedef ratio<      1000000000000000000000000, 1> yotta;
    typedef ratio<   1000000000000000000000000000, 1> ronna;
    typedef ratio<1000000000000000000000000000000, 1> quetta;

}

   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/header/ratio&old
   id=164034"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 27 November 2023, at 08:47.
     * This page has been accessed 70,554 times.
