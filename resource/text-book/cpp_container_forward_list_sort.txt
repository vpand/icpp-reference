std::forward_list<T,Allocator>::sort

   From cppreference.com
   < cpp | container | forward list


   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Containers library
   Sequence
   array
   (C++11)
   vector
   vector<bool>
   deque
   forward_list
   (C++11)
   list
   Associative
   set
   multiset
   map
   multimap
   Unordered associative
   unordered_set
   (C++11)
   unordered_multiset
   (C++11)
   unordered_map
   (C++11)
   unordered_multimap
   (C++11)
   Adaptors
   stack
   queue
   priority_queue
   flat_set
   (C++23)
   flat_multiset
   (C++23)
   flat_map
   (C++23)
   flat_multimap
   (C++23)
   Views
   span
   (C++20)
   mdspan
   (C++23)
   Iterator invalidation
   Member function table
   Non-member function table

   std::forward_list
   Member functions
   forward_list::forward_list
   forward_list::~forward_list

   forward_list::operator=
   forward_list::assign
   forward_list::assign_range
   (C++23)
   forward_list::get_allocator
   Element access
   forward_list::front
   Iterators
   forward_list::before_beginforward_list::cbefore_begin
   forward_list::beginforward_list::cbegin
   forward_list::endforward_list::cend
   Capacity
   forward_list::empty
   forward_list::max_size
   Modifiers
   forward_list::clear
   forward_list::emplace_front
   forward_list::push_front
   forward_list::insert_after
   forward_list::emplace_after
   forward_list::erase_after
   forward_list::insert_range_after
   (C++23)
   forward_list::prepend_range
   (C++23)
   forward_list::pop_front
   forward_list::resize
   forward_list::swap
   Operations
   forward_list::merge
   forward_list::splice_after
   forward_list::removeforward_list::remove_if
   forward_list::reverse
   forward_list::unique
   forward_list::sort
   Non-member functions
   operator==operator!=operator<operator>operator<=operator>=operator<=>
   (C++11)(C++11)(until C++20)(C++11)(until C++20)(C++11)(until
   C++20)(C++11)(until C++20)(C++11)(until C++20)(C++20)
   swap(std::forward_list)
   (C++11)
   erase(std::forward_list)erase_if(std::forward_list)
   (C++20)(C++20)
   Deduction guides(C++17)

   void sort();
   (1)                      (since C++11)
   template< class Compare >
   void sort( Compare comp );
   (2)                      (since C++11)

   Sorts the elements and preserves the order of equivalent elements. No
   references or iterators become invalidated.
   1) Elements are compared using operator<.
   2) Elements are compared using comp.

   If an exception is thrown, the order of elements in *this is
   unspecified.

Parameters

   comp - comparison function object (i.e. an object that satisfies the
   requirements of Compare) which returns true if the first argument is
   less than (i.e. is ordered before) the second.

   The signature of the comparison function should be equivalent to the
   following:

   bool cmp(const Type1& a, const Type2& b);

   While the signature does not need to have const&, the function must not
   modify the objects passed to it and must be able to accept all values
   of type (possibly const) Type1 and Type2 regardless of value category
   (thus, Type1& is not allowed, nor is Type1 unless for Type1 a move is
   equivalent to a copy(since C++11)).
   The types Type1 and Type2 must be such that an object of type
   forward_list<T,Allocator>::const_iterator can be dereferenced and then
   implicitly converted to both of them.
   Type requirements
   -
   Compare must meet the requirements of Compare.

Return value

   (none)

Complexity

   Given \(\scriptsize N\)N as std::distance(begin(), end()):
   1) Approximately \(\scriptsize N \cdot log(N)\)N·log(N) comparisons
   using operator<.
   2) Approximately \(\scriptsize N \cdot log(N)\)N·log(N) applications of
   the comparison function comp.

Notes

   std::sort requires random access iterators and so cannot be used with
   forward_list. This function also differs from std::sort in that it does
   not require the element type of the forward_list to be swappable,
   preserves the values of all iterators, and performs a stable sort.

Example

   Run this code
#include <functional>
#include <iostream>
#include <forward_list>

std::ostream& operator<<(std::ostream& ostr, const std::forward_list<int>& list)
{
    for (const int i : list)
        ostr << ' ' << i;
    return ostr;
}

int main()
{
    std::forward_list<int> list{8, 7, 5, 9, 0, 1, 3, 2, 6, 4};
    std::cout << "initially: " << list << '\n';

    list.sort();
    std::cout << "ascending: " << list << '\n';

    list.sort(std::greater<int>());
    std::cout << "descending:" << list << '\n';
}

   Output:
initially:  8 7 5 9 0 1 3 2 6 4
ascending:  0 1 2 3 4 5 6 7 8 9
descending: 9 8 7 6 5 4 3 2 1 0

See also

   reverse
   reverses the order of the elements
   (public member function)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/container/forwar
   d_list/sort&oldid=161904"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 2 November 2023, at 03:49.
     * This page has been accessed 41,035 times.
