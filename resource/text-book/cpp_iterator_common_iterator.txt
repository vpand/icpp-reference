std::common_iterator

   From cppreference.com
   < cpp | iterator

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Iterator library
   Iterator concepts
   indirectly_readable
   (C++20)
   indirectly_writable
   (C++20)
   weakly_incrementable
   (C++20)
   incrementable
   (C++20)
   input_or_output_iterator
   (C++20)
   sentinel_for
   (C++20)
   sized_sentinel_for
   (C++20)
   input_iterator
   (C++20)
   output_iterator
   (C++20)
   forward_iterator
   (C++20)
   bidirectional_iterator
   (C++20)
   random_access_iterator
   (C++20)
   contiguous_iterator
   (C++20)
   Iterator primitives
   input_iterator_tagoutput_iterator_tagforward_iterator_tagbidirectional_
   iterator_tagrandom_access_iterator_tagcontiguous_iterator_tag
   (C++20)
   iter_value_titer_difference_titer_reference_titer_const_reference_titer
   _rvalue_reference_titer_common_reference_t
   (C++20)(C++20)(C++20)(C++23)(C++20)(C++20)
   iterator
   (deprecated in C++17)
   iterator_traits
   incrementable_traits
   (C++20)
   indirectly_readable_traits
   (C++20)
   Algorithm concepts and utilities
   Indirect callable concepts
   indirectly_unary_invocableindirectly_regular_unary_invocable
   (C++20)(C++20)
   indirect_unary_predicate
   (C++20)
   indirect_binary_predicate
   (C++20)
   indirect_equivalence_relation
   (C++20)
   indirect_strict_weak_order
   (C++20)
   Common algorithm requirements
   indirectly_movable
   (C++20)
   indirectly_movable_storable
   (C++20)
   indirectly_copyable
   (C++20)
   indirectly_copyable_storable
   (C++20)
   indirectly_swappable
   (C++20)
   indirectly_comparable
   (C++20)
   permutable
   (C++20)
   mergeable
   (C++20)
   sortable
   (C++20)
   Utilities
   indirect_result_t
   (C++20)
   projected
   (C++20)
   projected_value_t
   (C++26)
   Iterator adaptors
   reverse_iterator
   make_reverse_iterator
   (C++14)
   move_iterator
   (C++11)
   make_move_iterator
   (C++11)
   default_sentinel_tdefault_sentinel
   (C++20)(C++20)
   unreachable_sentinel_tunreachable_sentinel
   (C++20)(C++20)
   front_insert_iterator
   back_insert_iterator
   inserter
   insert_iterator
   front_inserter
   back_inserter
   move_sentinel
   (C++20)
   common_iterator
   (C++20)
   counted_iterator
   (C++20)
   basic_const_iterator
   (C++23)
   const_iterator
   (C++23)
   const_sentinel
   (C++23)
   make_const_iterator
   (C++23)
   make_const_sentinel
   (C++23)
   Stream iterators
   istream_iterator

   ostream_iterator
   istreambuf_iterator
   ostreambuf_iterator
   Iterator customization points
   ranges::iter_move
   (C++20)
   ranges::iter_swap
   (C++20)
   Iterator operations
   advance
   distance
   prev
   (C++11)
   next
   (C++11)
   ranges::advance
   (C++20)
   ranges::distance
   (C++20)
   ranges::prev
   (C++20)
   ranges::next
   (C++20)
   Range access
   begincbegin
   (C++11)(C++14)
   rbegincrbegin
   (C++14)(C++14)
   endcend
   (C++11)(C++14)
   rendcrend
   (C++14)(C++14)
   sizessize
   (C++17)(C++20)
   empty
   (C++17)
   data
   (C++17)

   std::common_iterator
   Member functions
   common_iterator::common_iterator
   (C++20)
   common_iterator::operator=
   (C++20)
   common_iterator::operator*common_iterator::operator->
   (C++20)(C++20)
   common_iterator::operator++common_iterator::operator++(int)
   (C++20)(C++20)
   Non-member functions
   operator==
   (C++20)
   operator-
   (C++20)
   iter_move
   (C++20)
   iter_swap
   (C++20)
   Helper classes
   incrementable_traits
   (C++20)
   iterator_traits
   (C++20)

   Defined in header <iterator>
   template< std::input_or_output_iterator I, std::sentinel_for<I> S >

       requires ( !std::same_as<I, S> && std::copyable<I> )
           class common_iterator;
   (since C++20)

   std::common_iterator is an iterator I / sentinel S adaptor that may
   represent a non-common range (where the types of I and S differ) as a
   common_range, by containing either an iterator or a sentinel, and
   defining the appropriate equality comparison operators operator==.

   std::common_iterator can be used as a "bridge" between sequences
   represented by iterator/sentinel pair and legacy functions that expect
   common_range-like sequences.

Data members

   Member name Definition
   var an object of type std::variant<I, S>
   (exposition-only member object*)

Member functions

   (constructor)
   (C++20)
   constructs a new iterator adaptor
   (public member function)
   operator=
   (C++20)
   assigns another iterator adaptor
   (public member function)
   operator*operator->
   (C++20)
   accesses the pointed-to element
   (public member function)
   operator++operator++(int)
   (C++20)
   advances the iterator adaptor
   (public member function)

Non-member functions

   operator==
   (C++20)
   compares the underlying iterators or sentinels
   (function template)
   operator-
   (C++20)
   computes the distance between two iterator adaptors
   (function template)
   iter_move
   (C++20)
   casts the result of dereferencing the underlying iterator to its
   associated rvalue reference type
   (function)
   iter_swap
   (C++20)
   swaps the objects pointed to by two underlying iterators
   (function template)

Helper classes

   std::incrementable_traits<std::common_iterator>
   (C++20)
   computes the associated difference type of the std::common_iterator
   type
   (class template specialization)
   std::iterator_traits<std::common_iterator>
   (C++20)
   provides uniform interface to the properties of the
   std::common_iterator type
   (class template specialization)

Example

   Run this code
#include <algorithm>
#include <iostream>
#include <iterator>
#include <list>
#include <string>

template<class ForwardIter>
void fire(ForwardIter first, ForwardIter last)
{
    std::copy(first, last, std::ostream_iterator<std::string>{std::cout, " "});

}

int main()
{
    std::list<std::string> stars{"Pollux", "Arcturus", "Mira", "Aldebaran", "Sun
"};

    using IT = std::common_iterator<
                   std::counted_iterator<std::list<std::string>::iterator>,
                   std::default_sentinel_t>;

    fire(IT(std::counted_iterator(stars.begin(), stars.size() - 1)),
         IT(std::default_sentinel));
}

   Output:
Pollux Arcturus Mira Aldebaran

References

     * C++23 standard (ISO/IEC 14882:2023):

          + 23.5.5 Common iterators [iterators.common]

     * C++20 standard (ISO/IEC 14882:2020):

          + 23.5.4 Common iterators [iterators.common]

See also

   ranges::common_range
   (C++20)
   specifies that a range has identical iterator and sentinel types
   (concept)
   ranges::common_viewviews::common
   (C++20)
   converts a view into a common_range
   (class template) (range adaptor object)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/common_
   iterator&oldid=169566"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 4 February 2024, at 16:03.
     * This page has been accessed 14,884 times.
