std::ranges::begin

   From cppreference.com
   < cpp | ranges

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Ranges library
   Range access
   begin
   cbegin
   end
   cend
   rbegin
   crbegin
   rend
   crend
   size
   ssize
   data
   cdata
   empty
   Range conversions
   std::from_range_t
   std::from_range
   (C++23)(C++23)
   to
   (C++23)
   Range primitives
   range_size_trange_difference_trange_value_trange_reference_t
   iterator_tconst_iterator_tsentinel_tconst_sentinel_t
   (C++23)(C++23)
   range_const_reference_trange_rvalue_reference_trange_common_reference_t
   (C++23)
   elements_of
   (C++23)
   Dangling iterator handling
   dangling
   borrowed_iterator_t
   borrowed_subrange_t
   Range concepts
   range
   borrowed_range
   sized_range
   constant_range
   (C++23)
   common_range
   view
   viewable_range
   input_range
   output_range
   forward_range
   bidirectional_range
   random_access_range
   contiguous_range
   Views
   view_interface
   subrange
   Range factories
   empty_viewviews::empty
   single_viewviews::single
   iota_viewviews::iota
   repeat_viewviews::repeat
   (C++23)(C++23)
   basic_istream_viewviews::istream
   Range adaptors
   views::all_tviews::all
   ref_view
   owning_view
   as_rvalue_viewviews::as_rvalue
   (C++23)(C++23)
   filter_viewviews::filter
   transform_viewviews::transform
   take_viewviews::take
   take_while_viewviews::take_while
   concat_viewviews::concat
   (C++26)(C++26)
   drop_viewviews::drop
   drop_while_viewviews::drop_while
   join_viewviews::join
   join_with_viewviews::join_with
   (C++23)(C++23)
   lazy_split_viewviews::lazy_split
   split_viewviews::split
   views::counted
   common_viewviews::common
   reverse_viewviews::reverse
   as_const_viewviews::as_const
   (C++23)(C++23)
   elements_viewviews::elements
   keys_viewviews::keys
   values_viewviews::values
   enumerate_viewviews::enumerate
   (C++23)(C++23)
   zip_viewviews::zip
   (C++23)(C++23)
   zip_transform_viewviews::zip_transform
   (C++23)(C++23)
   adjacent_viewviews::adjacent
   (C++23)(C++23)
   views::pairwise
   (C++23)
   adjacent_transform_viewviews::adjacent_transform
   (C++23)(C++23)
   views::pairwise_transform
   (C++23)
   chunk_viewviews::chunk
   (C++23)(C++23)
   slide_viewviews::slide
   (C++23)(C++23)
   chunk_by_viewviews::chunk_by
   (C++23)(C++23)
   stride_viewviews::stride
   (C++23)(C++23)
   cartesian_product_viewviews::cartesian_product
   (C++23)(C++23)
   Range generators
   std::generator
   (C++23)
   Range adaptor objects
   Range adaptor closure objects
   range_adaptor_closure
   (C++23)
   Helper items
   copyable-box
   movable-box
   (until C++23)(C++23)
   simple-view
   non-propagating-cache

   Defined in header <ranges>
   Defined in header <iterator>
   inline namespace /* unspecified */ {

       inline constexpr /* unspecified */ begin = /* unspecified */;
   }
   (since C++20)
   (customization point object)
   Call signature
   template< class T >

       requires /* see below */
   constexpr std::input_or_output_iterator auto begin( T&& t );
                                       (since C++20)

   Returns an iterator to the first element of the argument.

   range-begin-end.svg

   If the argument is an lvalue or
   ranges::enable_borrowed_range<std::remove_cv_t<T>> is true, then a call
   to ranges::begin is expression-equivalent to:
    1. t + 0 if t has an array type.
          + If std::remove_all_extents_t<std::remove_reference_t<T>> is
            incomplete, then the call to ranges::begin is ill-formed, no
            diagnostic required.
    2. Otherwise, decay-copy(t.begin())(until C++23)auto(t.begin())(since
       C++23), if that expression is valid and its type models
       std::input_or_output_iterator.
    3. Otherwise, decay-copy(begin(t))(until C++23)auto(begin(t))(since
       C++23), if T is a class or enumeration type, that expression is
       valid and its type models std::input_or_output_iterator, where the
       meaning of begin is established as if by performing
       argument-dependent lookup only.

   In all other cases, a call to ranges::begin is ill-formed, which can
   result in substitution failure when the call appears in the immediate
   context of a template instantiation.

Customization point objects

   The name ranges::begin denotes a customization point object, which is a
   const function object of a literal semiregular class type. For
   exposition purposes, the cv-unqualified version of its type is denoted
   as __begin_fn.

   All instances of __begin_fn are equal. The effects of invoking
   different instances of type __begin_fn on the same arguments are
   equivalent, regardless of whether the expression denoting the instance
   is an lvalue or rvalue, and is const-qualified or not (however, a
   volatile-qualified instance is not required to be invocable). Thus,
   ranges::begin can be copied freely and its copies can be used
   interchangeably.

   Given a set of types Args..., if std::declval<Args>()... meet the
   requirements for arguments to ranges::begin above, __begin_fn models
     * std::invocable<__begin_fn, Args...>,
     * std::invocable<const __begin_fn, Args...>,
     * std::invocable<__begin_fn&, Args...>, and
     * std::invocable<const __begin_fn&, Args...>.

   Otherwise, no function call operator of __begin_fn participates in
   overload resolution.

Notes

   If the argument is an rvalue (i.e. T is an object type) and
   ranges::enable_borrowed_range<std::remove_cv_t<T>> is false, the call
   to ranges::begin is ill-formed, which also results in substitution
   failure.

   The return type models std::input_or_output_iterator in all cases.

   The C++20 standard requires that if the underlying begin function call
   returns a prvalue, the return value is move-constructed from the
   materialized temporary object. All implementations directly return the
   prvalue instead. The requirement is corrected by the post-C++20
   proposal P0849R8 to match the implementations.

Example

   Run this code
#include <cassert>
#include <ranges>
#include <vector>

int main()
{
    std::vector v{3, 1, 4};
    auto vi = std::ranges::begin(v);
    auto vci = std::ranges::cbegin(v);
    assert(*vi == 3 and *vi == *vci);
    ++vi;
    ++vci; // OK: vci is modifiable object
    *vi = 42; // OK: vi points to mutable element
    // *vci = 13; // Error: vci points to immutable element

    int a[]{-5, 10, 15};
    auto ai = std::ranges::begin(a); // works with C-arrays as well
    assert(*ai == -5);
    *ai = 42; // OK
}

Defect reports

   The following behavior-changing defect reports were applied
   retroactively to previously published C++ standards.
   DR Applied to Behavior as published Correct behavior
   P2602R2 C++20 there's machinery to prohibit certain non-member begin
   found by ADL removed such machinery

See also

   ranges::cbegin
   (C++20)
   returns an iterator to the beginning of a read-only range
   (customization point object)
   begincbegin
   (C++11)(C++14)
   returns an iterator to the beginning of a container or array
   (function template)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/ranges/begin&old
   id=158238"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 8 September 2023, at 10:28.
     * This page has been accessed 63,267 times.
