C++ named requirements: TimedMutex (since C++11)

   From cppreference.com
   < cpp | named req

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   C++ named requirements
   Basic
   DefaultConstructible
   CopyAssignable
   CopyConstructible
   MoveAssignable
   (C++11)
   MoveConstructible
   (C++11)
   Destructible
   Type properties
   ScalarType
   TriviallyCopyable
   (C++11)
   StandardLayoutType
   (C++11)
   PODType
   TrivialType
   (C++11)
   ImplicitLifetimeType
   Library-Wide
   EqualityComparable
   LessThanComparable
   Swappable
   ValueSwappable
   (C++11)
   NullablePointer
   (C++11)
   Hash
   (C++11)
   Allocator
   FunctionObject
   Callable
   Predicate
   BinaryPredicate
   Compare
   Container
   Container
   SequenceContainer
   ContiguousContainer
   (C++17)
   ReversibleContainer
   AssociativeContainer
   AllocatorAwareContainer
   UnorderedAssociativeContainer
   (C++11)
   Container Elements
   DefaultInsertable
   (C++11)
   CopyInsertable
   (C++11)
   MoveInsertable
   (C++11)
   EmplaceConstructible
   (C++11)
   Erasable
   (C++11)
   Iterator
   LegacyIterator
   LegacyOutputIterator
   LegacyInputIterator
   LegacyForwardIterator
   LegacyBidirectionalIterator
   LegacyRandomAccessIterator
   LegacyContiguousIterator
   (C++17)
   ConstexprIterator
   (C++20)
   Stream I/O
   FormattedInputFunction
   UnformattedInputFunction
   FormattedOutputFunction
   UnformattedOutputFunction
   Formatters
   BasicFormatter
   (C++20)
   Formatter
   (C++20)
   Random Numbers
   SeedSequence
   (C++11)
   RandomNumberEngine
   (C++11)
   RandomNumberDistribution
   (C++11)
   UniformRandomBitGenerator
   (C++11)
   RandomNumberEngineAdaptor
   (C++11)
   Concurrency
   BasicLockable
   (C++11)
   Lockable
   (C++11)
   TimedLockable
   (C++11)
   SharedLockable
   (C++14)
   SharedTimedLockable
   (C++14)
   Mutex
   (C++11)
   TimedMutex
   (C++11)
   SharedMutex
   (C++17)
   SharedTimedMutex
   (C++14)
   Ranges
   RangeAdaptorObject
   (C++20)
   RangeAdaptorClosureObject
   (C++20)
   Other
   CharTraits
   RegexTraits
   (C++11)
   BitmaskType
   LiteralType
   (C++11)
   NumericType
   UnaryTypeTrait
   (C++11)
   BinaryTypeTrait
   (C++11)
   TransformationTrait
   (C++11)
   Clock
   (C++11)
   TrivialClock
   (C++11)

   The TimedMutex requirements extend the TimedLockable requirements to
   include inter-thread synchronization.

Requirements

     * TimedLockable
     * Mutex

   Additionally, for an object m of TimedMutex type:
     * The expression m.try_lock_for(duration) has the following
       properties

          + Behaves as an atomic operation.
          + Attempts to obtain exclusive ownership of the mutex within the
            duration specified by duration. If duration is less or equal
            duration.zero(), attempts to obtain the ownership without
            blocking (as if by try_lock()). Otherwise, this function
            blocks until the mutex is acquired or until the time specified
            by duration passes. It returns within duration only if it
            succeeds, but it is allowed to fail to acquire the mutex even
            if at some point in time during duration it was not owned by
            another thread. In any case, it returns true if the mutex was
            acquired and false otherwise.
          + If try_lock_for(duration) succeeds, prior unlock() operations
            on the same object synchronize-with this operation (equivalent
            to release-acquire std::memory_order).
          + The behavior is undefined if the calling thread already owns
            the mutex (except if m is std::recursive_timed_mutex).
          + An exception may be thrown by clock, time point, or duration
            during the execution (clocks, time points, and durations
            provided by the standard library never throw).

     * The expression m.try_lock_until(time_point) has the following
       properties

          + Behaves as an atomic operation.
          + Attempts to obtain exclusive ownership of the mutex within the
            time left until time_point. If time_point already passed,
            attempts to obtain the ownership without blocking (as if by
            try_lock()). Otherwise, this function blocks until the mutex
            is acquired or until the time specified by time_point passes.
            It returns before time_point only if it succeeds, but it is
            allowed to fail to acquire the mutex even if at some point in
            time before time_point it was not owned by another thread. In
            any case, it returns true if the mutex was acquired and false
            otherwise.
          + If try_lock_until(time_point) succeeds, prior unlock()
            operations on the same object synchronize-with this operation
            (equivalent to release-acquire std::memory_order).
          + The behavior is undefined if the calling thread already owns
            the mutex (except if m is std::recursive_timed_mutex).
          + An exception may be thrown by clock, time point, or duration
            during the execution (clocks, time points, and durations
            provided by the standard library never throw).

Library types

   The following standard library types satisfy TimedMutex:
     * std::timed_mutex
     * std::recursive_timed_mutex
     * std::shared_timed_mutex

Defect reports

   The following behavior-changing defect reports were applied
   retroactively to previously published C++ standards.
   DR Applied to Behavior as published Correct behavior
   LWG 2093 C++11 timeout-related exceptions were missing in the
   specification mentioned

See also

     * Thread support library
     * TimedLockable
     * Mutex

   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/named_req/TimedM
   utex&oldid=144936"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 8 November 2022, at 13:23.
     * This page has been accessed 29,993 times.
