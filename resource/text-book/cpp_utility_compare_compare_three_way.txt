std::compare_three_way

   From cppreference.com
   < cpp | utility

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Utilities library
   Language support
   Type support (basic types, RTTI)
   Library feature-test macros (C++20)
   Dynamic memory management
   Program utilities
   Coroutine support (C++20)
   Variadic functions
   is_constant_evaluated
   (C++20)
   is_within_lifetime
   (C++26)
   initializer_list
   (C++11)
   source_location
   (C++20)
   Debugging support
   is_debugger_present
   (C++26)
   breakpoint_if_debugging
   (C++26)
   breakpoint
   (C++26)
   Three-way comparison
   three_way_comparablethree_way_comparable_with
   (C++20)(C++20)
   strong_ordering
   (C++20)
   weak_ordering
   (C++20)
   partial_ordering
   (C++20)
   common_comparison_category
   (C++20)
   compare_three_way_result
   (C++20)
   compare_three_way
   (C++20)
   strong_order
   (C++20)
   weak_order
   (C++20)
   partial_order
   (C++20)
   compare_strong_order_fallback
   (C++20)
   compare_weak_order_fallback
   (C++20)
   compare_partial_order_fallback
   (C++20)
   is_eqis_ltis_lteq
   (C++20)(C++20)(C++20)
   is_neqis_gtis_gteq
   (C++20)(C++20)(C++20)
   General utilities
   Date and time
   Function objects
   Formatting library (C++20)
   bitset
   hash
   (C++11)
   Relational operators (deprecated in C++20)
   rel_ops::operator!=rel_ops::operator>

   rel_ops::operator<=rel_ops::operator>=
   Integer comparison functions
   cmp_equalcmp_lesscmp_less_than
   (C++20)(C++20)(C++20)
   cmp_not_equalcmp_greatercmp_greater_than
   (C++20)(C++20)(C++20)
   in_range
   (C++20)
   Swap and type operations
   swap
   ranges::swap
   (C++20)
   exchange
   (C++14)
   declval
   (C++11)
   to_underlying
   (C++23)
   forward
   (C++11)
   forward_like
   (C++23)
   move
   (C++11)
   move_if_noexcept
   (C++11)
   as_const
   (C++17)
   Common vocabulary types
   pair
   tuple
   (C++11)
   optional
   (C++17)
   any
   (C++17)
   variant
   (C++17)
   tuple_size
   (C++11)
   tuple_element
   (C++11)
   apply
   (C++17)
   make_from_tuple
   (C++17)
   expected
   (C++23)
   Elementary string conversions
   to_chars
   (C++17)
   from_chars
   (C++17)
   chars_format
   (C++17)
   to_chars_result
   (C++17)
   from_chars_result
   (C++17)

   Function objects
   Function wrappers
   function
   (C++11)
   move_only_function
   (C++23)
   copyable_function
   (C++26)
   function_ref
   (C++26)
   mem_fn
   (C++11)
   bad_function_call
   (C++11)
   Partial function application
   bind_frontbind_back
   (C++20)(C++23)
   bind
   (C++11)
   is_bind_expression
   (C++11)
   is_placeholder
   (C++11)
   _1, _2, _3, ...
   (C++11)
   Function invocation
   invokeinvoke_r
   (C++17)(C++23)
   Identity function object
   identity
   (C++20)
   Reference wrappers
   reference_wrapper
   (C++11)
   refcref
   (C++11)(C++11)
   unwrap_referenceunwrap_ref_decay
   (C++20)(C++20)
   Operator wrappers
   plus
   minus
   negate
   multiplies
   divides
   modulus
   bit_and
   bit_or
   bit_not
   (C++14)
   bit_xor
   equal_to
   not_equal_to
   greater
   less
   greater_equal
   less_equal
   logical_and
   logical_or
   logical_not
   Transparent operator wrappers
   plus<>
   (C++14)
   minus<>
   (C++14)
   negate<>
   (C++14)
   multiplies<>
   (C++14)
   divides<>
   (C++14)
   modulus<>
   (C++14)
   bit_and<>
   (C++14)
   bit_or<>
   (C++14)
   bit_not<>
   (C++14)
   bit_xor<>
   (C++14)
   equal_to<>
   (C++14)
   not_equal_to<>
   (C++14)
   greater<>
   (C++14)
   less<>
   (C++14)
   greater_equal<>
   (C++14)
   less_equal<>
   (C++14)
   logical_and<>
   (C++14)
   logical_or<>
   (C++14)
   logical_not<>
   (C++14)
   Negators
   not_fn
   (C++17)
   Searchers
   default_searcher
   (C++17)
   boyer_moore_searcher
   (C++17)
   boyer_moore_horspool_searcher
   (C++17)
   Constrained comparators
   ranges::equal_to
   (C++20)
   ranges::not_equal_to
   (C++20)
   ranges::greater
   (C++20)
   ranges::less
   (C++20)
   ranges::greater_equal
   (C++20)
   ranges::less_equal
   (C++20)
   compare_three_way
   (C++20)
   Old binders and adaptors
   unary_function
   (until C++17*)
   binary_function
   (until C++17*)
   ptr_fun
   (until C++17*)
   pointer_to_unary_function
   (until C++17*)
   pointer_to_binary_function
   (until C++17*)
   mem_fun
   (until C++17*)
   mem_fun_tmem_fun1_tconst_mem_fun_tconst_mem_fun1_t
   (until C++17*)(until C++17*)(until C++17*)(until C++17*)
   not1
   (until C++20*)
   not2
   (until C++20*)
   binder1stbinder2nd
   (until C++17*)(until C++17*)
   bind1stbind2nd
   (until C++17*)(until C++17*)
   mem_fun_ref
   (until C++17*)
   mem_fun_ref_tmem_fun1_ref_tconst_mem_fun_ref_tconst_mem_fun1_ref_t
   (until C++17*)(until C++17*)(until C++17*)(until C++17*)
   unary_negate
   (until C++20*)
   binary_negate
   (until C++20*)

   Defined in header <compare>
   Defined in header <functional>
   struct compare_three_way;
                                 (since C++20)

   Function object for performing comparisons. Deduces the parameter types
   and the return type of the function call operator.

Nested types

   Nested type    Definition
   is_transparent unspecified

Member functions

   operator()
   obtains the result of three-way comparison on both arguments
   (public member function)

std::compare_three_way::operator()

   template< class T, class U >
   constexpr auto operator()( T&& t, U&& u ) const;

   Given the expression std::forward<T>(t) <=> std::forward<U>(u) as expr:
     * If expr results in a call to built-in operator<=> comparing
       pointers, given the composite pointer type of t and u as P:

          + Compares the two converted pointers (of type P) in the
            implementation-defined strict total order over pointers:

               o If t precedes u, returns std::strong_ordering::less.
               o If u precedes t, returns std::strong_ordering::greater.
               o Otherwise, returns std::strong_ordering::equal.

          + If the conversion sequence from T to P or the conversion
            sequence from U to P is not equality-preserving, the behavior
            is undefined.

     * Otherwise:

          + Returns the result of expr.
          + If std::three_way_comparable_with<T, U> is not modeled, the
            behavior is undefined.

   This overload participates in overload resolution only if
   std::three_way_comparable_with<T, U> is satisfied.

Example

   Run this code
#include <compare>
#include <iostream>

struct Rational
{
    int num;
    int den; // > 0

    // Although the comparison X <=> Y will work, a direct call
    // to std::compare_three_way{}(X, Y) requires the operator==
    // be defined, to satisfy the std::three_way_comparable_with.
    constexpr bool operator==(Rational const&) const = default;
};

constexpr std::weak_ordering operator<=>(Rational lhs, Rational rhs)
{
    return lhs.num * rhs.den <=> rhs.num * lhs.den;
}

void print(std::weak_ordering value)
{
    value < 0 ? std::cout << "less\n" :
    value > 0 ? std::cout << "greater\n" :
                std::cout << "equal\n";
}

int main()
{
    Rational a{6, 5};
    Rational b{8, 7};
    print(a <=> b);
    print(std::compare_three_way{}(a, b));
}

   Output:
greater
greater

Defect reports

   The following behavior-changing defect reports were applied
   retroactively to previously published C++ standards.
   DR Applied to Behavior as published Correct behavior
   LWG 3530 C++20 syntactic checks were relaxed while comparing pointers
   only semantic requirements are relaxed

See also

   ranges::equal_to
   (C++20)
   constrained function object implementing x == y
   (class)
   ranges::not_equal_to
   (C++20)
   constrained function object implementing x != y
   (class)
   ranges::less
   (C++20)
   constrained function object implementing x < y
   (class)
   ranges::greater
   (C++20)
   constrained function object implementing x > y
   (class)
   ranges::less_equal
   (C++20)
   constrained function object implementing x <= y
   (class)
   ranges::greater_equal
   (C++20)
   constrained function object implementing x >= y
   (class)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/utility/compare/
   compare_three_way&oldid=168288"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 2 January 2024, at 20:58.
     * This page has been accessed 44,621 times.
