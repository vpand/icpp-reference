std::ranges::subrange<I,S,K>::subrange

   From cppreference.com
   < cpp | ranges | subrange

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Ranges library
   Range access
   begin
   cbegin
   end
   cend
   rbegin
   crbegin
   rend
   crend
   size
   ssize
   data
   cdata
   empty
   Range conversions
   std::from_range_t
   std::from_range
   (C++23)(C++23)
   to
   (C++23)
   Range primitives
   range_size_trange_difference_trange_value_trange_reference_t
   iterator_tconst_iterator_tsentinel_tconst_sentinel_t
   (C++23)(C++23)
   range_const_reference_trange_rvalue_reference_trange_common_reference_t
   (C++23)
   elements_of
   (C++23)
   Dangling iterator handling
   dangling
   borrowed_iterator_t
   borrowed_subrange_t
   Range concepts
   range
   borrowed_range
   sized_range
   constant_range
   (C++23)
   common_range
   view
   viewable_range
   input_range
   output_range
   forward_range
   bidirectional_range
   random_access_range
   contiguous_range
   Views
   view_interface
   subrange
   Range factories
   empty_viewviews::empty
   single_viewviews::single
   iota_viewviews::iota
   repeat_viewviews::repeat
   (C++23)(C++23)
   basic_istream_viewviews::istream
   Range adaptors
   views::all_tviews::all
   ref_view
   owning_view
   as_rvalue_viewviews::as_rvalue
   (C++23)(C++23)
   filter_viewviews::filter
   transform_viewviews::transform
   take_viewviews::take
   take_while_viewviews::take_while
   concat_viewviews::concat
   (C++26)(C++26)
   drop_viewviews::drop
   drop_while_viewviews::drop_while
   join_viewviews::join
   join_with_viewviews::join_with
   (C++23)(C++23)
   lazy_split_viewviews::lazy_split
   split_viewviews::split
   views::counted
   common_viewviews::common
   reverse_viewviews::reverse
   as_const_viewviews::as_const
   (C++23)(C++23)
   elements_viewviews::elements
   keys_viewviews::keys
   values_viewviews::values
   enumerate_viewviews::enumerate
   (C++23)(C++23)
   zip_viewviews::zip
   (C++23)(C++23)
   zip_transform_viewviews::zip_transform
   (C++23)(C++23)
   adjacent_viewviews::adjacent
   (C++23)(C++23)
   views::pairwise
   (C++23)
   adjacent_transform_viewviews::adjacent_transform
   (C++23)(C++23)
   views::pairwise_transform
   (C++23)
   chunk_viewviews::chunk
   (C++23)(C++23)
   slide_viewviews::slide
   (C++23)(C++23)
   chunk_by_viewviews::chunk_by
   (C++23)(C++23)
   stride_viewviews::stride
   (C++23)(C++23)
   cartesian_product_viewviews::cartesian_product
   (C++23)(C++23)
   Range generators
   std::generator
   (C++23)
   Range adaptor objects
   Range adaptor closure objects
   range_adaptor_closure
   (C++23)
   Helper items
   copyable-box
   movable-box
   (until C++23)(C++23)
   simple-view
   non-propagating-cache

   std::ranges::subrange
   Member functions
   subrange::subrange
   subrange::operator PairLike
   Observers
   subrange::begin
   subrange::end
   subrange::empty
   subrange::size
   Iterator operations
   subrange::advance
   subrange::next
   subrange::prev
   Deduction guides
   Non-member functions
   get(std::ranges::subrange)
   Helper types
   subrange_kind
   tuple_size<std::ranges::subrange>
   tuple_element<std::ranges::subrange>

   subrange() requires std::default_initializable<I> = default;
   (1) (since C++20)
   constexpr subrange( /*convertible-to-non-slicing*/<I> auto i, S s )
     requires (!/*store-size*/);
   (2) (since C++20)
   constexpr subrange( /*convertible-to-non-slicing*/<I> auto i, S s,

                       /*make-unsigned-like-t*/<std::iter_difference_t<I>>
   n )
     requires (K == ranges::subrange_kind::sized);
   (3) (since C++20)
   template< /*different-from*/<subrange> R >

     requires ranges::borrowed_range<R> &&
              /*convertible-to-non-slicing*/<ranges::iterator_t<R>, I> &&
              std::convertible_to<ranges::sentinel_t<R>, S>
   constexpr subrange( R&& r ) requires (!/*store-size*/ ||
   ranges::sized_range<R>);
   (4) (since C++20)
   template< ranges::borrowed_range R>

     requires /*convertible-to-non-slicing*/<ranges::iterator_t<R>, I> &&
              std::convertible_to<ranges::sentinel_t<R>, S>
     constexpr subrange( R&& r,
   /*make-unsigned-like-t*/<std::iter_difference_t<I>> n )
       requires (K == ranges::subrange_kind::sized)
         : subrange{ranges::begin(r), ranges::end(r), n}
     {}
   (5) (since C++20)

   Constructs a subrange.

   If K == ranges::subrange_kind::sized && !std::sized_sentinel_for<S, I>,
   the size of the range is stored into the subrange, as if stored by a
   member subobject of type
   /*make-unsigned-like-t*/<std::iter_difference_t<I>>, where
   make-unsigned-like-t is an exposition-only alias template that maps
   each integer-like type to its corresponding unsigned version.
   Otherwise, the size is not stored. The constant store-size is true if
   the size is stored, false otherwise.
   1) Default constructor. Value-initializes the stored iterator and
   sentinel as if by default member initializers = I() and = S(),
   respectively. If the size is stored, it is initialized with 0 as if by
   the default member initializer = 0.
   2) Constructs a subrange from an iterator-sentinel pair. Initializes
   the stored iterator and sentinel with std::move(i) and s respectively.
   The behavior is undefined if [i, s) is not a valid range.
   3) Constructs a subrange from an iterator-sentinel pair and a size
   hint. Initializes the stored iterator and sentinel with std::move(i)
   and s respectively. If the size is stored, it is initialized with n.
   The behavior is undefined if [i, s) is not a valid range, or n is not
   equal to ranges::distance(i, s) explicitly converted to its type.
   4) Constructs a subrange from a range. Equivalent to subrange(r,
   static_cast</*make-unsigned-like-t*/<std::iter_difference_t<I>>>(ranges
   ::size(r))) if the size is stored. Otherwise, equivalent to
   subrange(ranges::begin(r), ranges::end(r)).
   5) Constructs a subrange from a range and a size hint. The behavior is
   undefined if n is not equal to ranges::distance(ranges::begin(r),
   ranges::end(r)) explicitly converted to its type.

   The exposition only concept different-from is modeled by types T and U
   if and only if std::decay_t<T> and std::decay_t<U> are different types.

   The exposition only concept convertible-to-non-slicing is satisfied or
   modeled by From and To if and only if std::convertible_to<From, To> is
   satisfied or modeled respectively, and any of following conditions is
   satisfied:
     * either std::decay_t<From> or std::decay_t<To> is not a pointer
       type,
     * std::remove_pointer_t<From>(*)[] is implicitly convertible to
       std::remove_pointer_t<To>(*)[], i.e., the conversion from From to
       To is at most a qualification conversion.

Parameters

   i - iterator that denotes the beginning of the range
   s - sentinel that denotes the end of the range
   r - range
   n - size hint, must be equal to the size of the range

Notes

   The exposition-only concept convertible-to-non-slicing forbids the
   conversion from the pointer to derived class to the pointer to base
   class.

Defect reports

   The following behavior-changing defect reports were applied
   retroactively to previously published C++ standards.
   DR Applied to Behavior as published Correct behavior
   LWG 3470 C++20 convertible-to-non-slicing rejected some valid
   qualification conversions made accepted
   P2393R1 C++20 implicit conversion to an integer-class type might be
   invalid made explicit

Example

   This section is incomplete
   Reason: no example
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/ranges/subrange/
   subrange&oldid=134948"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 30 October 2021, at 22:35.
     * This page has been accessed 15,729 times.
