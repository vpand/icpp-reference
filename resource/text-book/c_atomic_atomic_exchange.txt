atomic_exchange, atomic_exchange_explicit

   From cppreference.com
   < c | atomic

   C
   Language
   Headers
   Type support
   Program utilities
   Variadic function support
   Error handling
   Dynamic memory management
   Strings library
   Algorithms
   Numerics
   Date and time utilities
   Input/output support
   Localization support
   Concurrency support (C11)
   Technical Specifications
   Symbol index

   Concurrency support library
   Threads
   thrd_create
   thrd_equal
   thrd_current

   thrd_sleep
   thrd_yield
   thrd_exit
   thrd_detach
   thrd_join
   thrd_successthrd_timedoutthrd_busythrd_nomemthrd_error

   Atomic operations
   atomic_init
   ATOMIC_VAR_INIT
   (until C23)
   ATOMIC_***_LOCK_FREE
   atomic_is_lock_free
   atomic_store
   atomic_load
   atomic_exchange
   atomic_compare_exchange
   atomic_fetch_add
   atomic_fetch_sub
   atomic_fetch_or
   atomic_fetch_xor
   atomic_fetch_and
   Atomic flags
   atomic_flag
   ATOMIC_FLAG_INIT
   atomic_flag_test_and_set
   atomic_flag_clear
   Memory ordering
   memory_order
   kill_dependency
   atomic_thread_fence
   atomic_signal_fence
   Mutual exclusion
   mtx_init
   mtx_lock
   mtx_timedlock
   mtx_trylock
   call_once
   mtx_unlock
   mtx_destroy
   mtx_plainmtx_recursivemtx_timed
   Condition variables
   cnd_init
   cnd_signal
   cnd_broadcast
   cnd_wait
   cnd_timedwait
   cnd_destroy
   Thread-local storage
   thread_local
   TSS_DTOR_ITERATIONS

   tss_create
   tss_get
   tss_set
   tss_delete

 Defined in header <stdatomic.h>
 C atomic_exchange( volatile A* obj, C desired );
 (1)                                                                 (since C11)
   C atomic_exchange_explicit( volatile A* obj, C desired, memory_order
   order );
 (2)                                                                 (since C11)

   Atomically replaces the value pointed by obj with desired and returns
   the value obj held previously. The operation is read-modify-write
   operation. The first version orders memory accesses according to
   memory_order_seq_cst, the second version orders memory accesses
   according to order.

   This is a generic function defined for all atomic object types A. The
   argument is pointer to a volatile atomic type to accept addresses of
   both non-volatile and volatile (e.g. memory-mapped I/O) atomic objects,
   and volatile semantic is preserved when applying this operation to
   volatile atomic objects. C is the non-atomic type corresponding to A.

   It is unspecified whether the name of a generic function is a macro or
   an identifier declared with external linkage. If a macro definition is
   suppressed in order to access an actual function (e.g. parenthesized
   like (atomic_exchange)(...)), or a program defines an external
   identifier with the name of a generic function, the behavior is
   undefined..

Parameters

   obj - pointer to the atomic object to modify
   desired - the value to replace the atomic object with
   order - the memory synchronization ordering for this operation: all
   values are permitted

Return value

   The value held previously be the atomic object pointed to by obj.

References

     * C17 standard (ISO/IEC 9899:2018):

          + 7.17.7.3 The atomic_exchange generic functions (p: 207)

     * C11 standard (ISO/IEC 9899:2011):

          + 7.17.7.3 The atomic_exchange generic functions (p: 283)

See also

   atomic_compare_exchange_strongatomic_compare_exchange_strong_explicitat
   omic_compare_exchange_weakatomic_compare_exchange_weak_explicit
   (C11)
   swaps a value with an atomic object if the old value is what is
   expected, otherwise reads the old value
   (function)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=c/atomic/atomic_exch
   ange&oldid=138690"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 12 March 2022, at 23:52.
     * This page has been accessed 40,883 times.
