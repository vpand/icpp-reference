explicit specifier

   From cppreference.com
   < cpp | language

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   C++ language
   General topics
   Preprocessor
   Comments
   Keywords
   Escape sequences
   Flow control
   Conditional execution statements
   if
   switch
   Iteration statements (loops)
   for
   range-for (C++11)
   while
   do-while
   Jump statements
   continue - break
   goto - return
   Functions
   Function declaration
   Lambda function expression
   inline specifier
   Dynamic exception specifications (until C++17*)
   noexcept specifier (C++11)
   Exceptions
   throw-expression
   try block
   handler
   Namespaces
   Namespace declaration
   Namespace aliases
   Types
   Fundamental types
   Enumeration types
   Function types
   Class/struct types
   Union types
   Specifiers
   const/volatile
   decltype (C++11)
   auto (C++11)
   constexpr (C++11)
   consteval (C++20)
   constinit (C++20)
   Storage duration specifiers
   Initialization
   Default-initialization
   Value-initialization
   Zero-initialization
   Copy-initialization
   Direct-initialization
   Aggregate initialization
   List-initialization (C++11)
   Constant initialization
   Reference initialization
   Expressions
   Value categories
   Order of evaluation
   Operators
   Operator precedence
   Alternative representations
   Literals
   Boolean - Integer - Floating-point
   Character - String - nullptr (C++11)
   User-defined (C++11)
   Utilities
   Attributes (C++11)
   Types
   typedef declaration
   Type alias declaration (C++11)
   Casts
   Implicit conversions
   static_cast
   const_cast
   Explicit conversions
   dynamic_cast
   reinterpret_cast
   Memory allocation
   new expression
   delete expression
   Classes
   Class declaration
   Constructors
   this pointer
   Access specifiers
   friend specifier
   Class-specific function properties
   Virtual function
   override specifier (C++11)
   final specifier (C++11)
   explicit (C++11)
   static
   Special member functions
   Default constructor
   Copy constructor
   Move constructor (C++11)
   Copy assignment
   Move assignment (C++11)
   Destructor
   Templates
   Class template
   Function template
   Template specialization
   Parameter packs (C++11)
   Miscellaneous
   Inline assembly
   History of C++

   Classes
   General
   Overview
   class/struct types
   union types
   Injected-class-name
   Members
   Data members
   Static members
   The this pointer
   Nested classes
   Member templates
   Bit-fields
   using-declarations
   Member functions
   Member access specifiers
   Constructors and member initializer lists
   Default member initializer (C++11)
   friend specifier
   explicit specifier
   Converting constructor
   Special member functions
   Default constructor
   Copy constructor
   Move constructor (C++11)
   Copy assignment operator
   Move assignment operator (C++11)
   Destructor
   Inheritance
   Base and derived classes
   Empty base optimization (EBO)
   Virtual member functions
   Pure virtual functions and abstract classes
   override specifier (C++11)
   final specifier (C++11)

Syntax

   explicit                (1)
   explicit ( expression ) (2) (since C++20)
   expression - contextually converted constant expression of type bool
   1) Specifies that a constructor or conversion function(since C++11)or
   deduction guide(since C++17) is explicit, that is, it cannot be used
   for implicit conversions and copy-initialization.
   2) The explicit specifier may be used with a constant expression. The
   function is explicit if and only if that constant expression evaluates
   to true.
   (since C++20)

   The explicit specifier may only appear within the decl-specifier-seq of
   the declaration of a constructor or conversion function(since C++11)
   within its class definition.

Notes

   A constructor with a single non-default parameter(until C++11) that is
   declared without the function specifier explicit is called a converting
   constructor.

   Both constructors (other than copy/move) and user-defined conversion
   functions may be function templates; the meaning of explicit does not
   change.

   A ( token that follows explicit is parsed as part of the explicit
   specifier:
struct S
{
    explicit (S)(const S&);    // error in C++20, OK in C++17
    explicit (operator int)(); // error in C++20, OK in C++17
};

   (since C++20)
       Feature-test macro      Value    Std      Feature
   __cpp_conditional_explicit 201806L (C++20) explicit(bool)

Example

   Run this code
struct A
{
    A(int) { }      // converting constructor
    A(int, int) { } // converting constructor (C++11)
    operator bool() const { return true; }
};

struct B
{
    explicit B(int) { }
    explicit B(int, int) { }
    explicit operator bool() const { return true; }
};

int main()
{
    A a1 = 1;      // OK: copy-initialization selects A::A(int)
    A a2(2);       // OK: direct-initialization selects A::A(int)
    A a3 {4, 5};   // OK: direct-list-initialization selects A::A(int, int)
    A a4 = {4, 5}; // OK: copy-list-initialization selects A::A(int, int)
    A a5 = (A)1;   // OK: explicit cast performs static_cast
    if (a1) { }    // OK: A::operator bool()
    bool na1 = a1; // OK: copy-initialization selects A::operator bool()
    bool na2 = static_cast<bool>(a1); // OK: static_cast performs direct-initial
ization

//  B b1 = 1;      // error: copy-initialization does not consider B::B(int)
    B b2(2);       // OK: direct-initialization selects B::B(int)
    B b3 {4, 5};   // OK: direct-list-initialization selects B::B(int, int)
//  B b4 = {4, 5}; // error: copy-list-initialization does not consider B::B(int
, int)
    B b5 = (B)1;   // OK: explicit cast performs static_cast
    if (b2) { }    // OK: B::operator bool()
//  bool nb1 = b2; // error: copy-initialization does not consider B::operator b
ool()
    bool nb2 = static_cast<bool>(b2); // OK: static_cast performs direct-initial
ization

    [](...){}(a4, a5, na1, na2, b5, nb2); // may suppress "unused variable" warn
ings
}

See also

     * converting constructor
     * initialization
     * copy initialization
     * direct initialization

   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/language/explici
   t&oldid=148488"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 23 February 2023, at 05:03.
     * This page has been accessed 1,340,117 times.
