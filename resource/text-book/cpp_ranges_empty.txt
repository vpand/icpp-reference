std::ranges::empty

   From cppreference.com
   < cpp | ranges

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Ranges library
   Range access
   begin
   cbegin
   end
   cend
   rbegin
   crbegin
   rend
   crend
   size
   ssize
   data
   cdata
   empty
   Range conversions
   std::from_range_t
   std::from_range
   (C++23)(C++23)
   to
   (C++23)
   Range primitives
   range_size_trange_difference_trange_value_trange_reference_t
   iterator_tconst_iterator_tsentinel_tconst_sentinel_t
   (C++23)(C++23)
   range_const_reference_trange_rvalue_reference_trange_common_reference_t
   (C++23)
   elements_of
   (C++23)
   Dangling iterator handling
   dangling
   borrowed_iterator_t
   borrowed_subrange_t
   Range concepts
   range
   borrowed_range
   sized_range
   constant_range
   (C++23)
   common_range
   view
   viewable_range
   input_range
   output_range
   forward_range
   bidirectional_range
   random_access_range
   contiguous_range
   Views
   view_interface
   subrange
   Range factories
   empty_viewviews::empty
   single_viewviews::single
   iota_viewviews::iota
   repeat_viewviews::repeat
   (C++23)(C++23)
   basic_istream_viewviews::istream
   Range adaptors
   views::all_tviews::all
   ref_view
   owning_view
   as_rvalue_viewviews::as_rvalue
   (C++23)(C++23)
   filter_viewviews::filter
   transform_viewviews::transform
   take_viewviews::take
   take_while_viewviews::take_while
   concat_viewviews::concat
   (C++26)(C++26)
   drop_viewviews::drop
   drop_while_viewviews::drop_while
   join_viewviews::join
   join_with_viewviews::join_with
   (C++23)(C++23)
   lazy_split_viewviews::lazy_split
   split_viewviews::split
   views::counted
   common_viewviews::common
   reverse_viewviews::reverse
   as_const_viewviews::as_const
   (C++23)(C++23)
   elements_viewviews::elements
   keys_viewviews::keys
   values_viewviews::values
   enumerate_viewviews::enumerate
   (C++23)(C++23)
   zip_viewviews::zip
   (C++23)(C++23)
   zip_transform_viewviews::zip_transform
   (C++23)(C++23)
   adjacent_viewviews::adjacent
   (C++23)(C++23)
   views::pairwise
   (C++23)
   adjacent_transform_viewviews::adjacent_transform
   (C++23)(C++23)
   views::pairwise_transform
   (C++23)
   chunk_viewviews::chunk
   (C++23)(C++23)
   slide_viewviews::slide
   (C++23)(C++23)
   chunk_by_viewviews::chunk_by
   (C++23)(C++23)
   stride_viewviews::stride
   (C++23)(C++23)
   cartesian_product_viewviews::cartesian_product
   (C++23)(C++23)
   Range generators
   std::generator
   (C++23)
   Range adaptor objects
   Range adaptor closure objects
   range_adaptor_closure
   (C++23)
   Helper items
   copyable-box
   movable-box
   (until C++23)(C++23)
   simple-view
   non-propagating-cache

   Defined in header <ranges>
   Defined in header <iterator>
   inline namespace /*unspecified*/ {

       inline constexpr auto empty = /*unspecified*/;
   }
   (since C++20)
   (customization point object)
   Call signature
   template< class T >

       requires /* see below */
   constexpr bool empty( T&& t );
                                     (since C++20)

   Determines whether or not t has any elements.

   A call to ranges::empty is expression-equivalent to:
    1. bool(t.empty()), if that expression is valid.
    2. Otherwise, (ranges::size(t) == 0), if that expression is valid.
    3. Otherwise, bool(ranges::begin(t) == ranges::end(t)), if that
       expression is valid and decltype(ranges::begin(t)) models
       std::forward_iterator.

   In all other cases, a call to ranges::empty is ill-formed, which can
   result in substitution failure when ranges::empty(t) appears in the
   immediate context of a template instantiation.

Customization point objects

   The name ranges::empty denotes a customization point object, which is a
   const function object of a literal semiregular class type. For
   exposition purposes, the cv-unqualified version of its type is denoted
   as __empty_fn.

   All instances of __empty_fn are equal. The effects of invoking
   different instances of type __empty_fn on the same arguments are
   equivalent, regardless of whether the expression denoting the instance
   is an lvalue or rvalue, and is const-qualified or not (however, a
   volatile-qualified instance is not required to be invocable). Thus,
   ranges::empty can be copied freely and its copies can be used
   interchangeably.

   Given a set of types Args..., if std::declval<Args>()... meet the
   requirements for arguments to ranges::empty above, __empty_fn models
     * std::invocable<__empty_fn, Args...>,
     * std::invocable<const __empty_fn, Args...>,
     * std::invocable<__empty_fn&, Args...>, and
     * std::invocable<const __empty_fn&, Args...>.

   Otherwise, no function call operator of __empty_fn participates in
   overload resolution.

Example

   Run this code
#include <iostream>
#include <ranges>
#include <vector>

template<std::ranges::input_range R>
void print(char id, R&& r)
{
    if (std::ranges::empty(r))
    {
        std::cout << '\t' << id << ") Empty\n";
        return;
    }

    std::cout << '\t' << id << ") Elements:";
    for (const auto& element : r)
        std::cout << ' ' << element;
    std::cout << '\n';
}

int main()
{
    {
        auto v = std::vector<int>{1, 2, 3};
        std::cout << "(1) ranges::empty uses std::vector::empty:\n";
        print('a', v);

        v.clear();
        print('b', v);
    }
    {
        std::cout << "(2) ranges::empty uses ranges::size(initializer_list):\n";
        auto il = {7, 8, 9};
        print('a', il);

        print('b', std::initializer_list<int>{});
    }
    {
        std::cout << "(2) ranges::empty on a raw array uses ranges::size:\n";
        int array[] = {4, 5, 6}; // array has a known bound
        print('a', array);
    }
    {
        struct Scanty : private std::vector<int>
        {
            using std::vector<int>::begin;
            using std::vector<int>::end;
            using std::vector<int>::push_back;
            // Note: both empty() and size() are hidden
        };

        std::cout << "(3) calling ranges::empty on an object w/o empty() or size
():\n";
        Scanty y;
        print('a', y);
        y.push_back(42);
        print('b', y);
    }
}

   Output:
(1) ranges::empty uses std::vector::empty:
        a) Elements: 1 2 3
        b) Empty
(2) ranges::empty uses ranges::size(initializer_list):
        a) Elements: 7 8 9
        b) Empty
(2) ranges::empty on a raw array uses ranges::size:
        a) Elements: 4 5 6
(3) calling ranges::empty on an object w/o empty() or size():
        a) Empty
        b) Elements: 42

See also

   empty
   (C++17)
   checks whether the container is empty
   (function template)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/ranges/empty&old
   id=160900"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 18 October 2023, at 11:26.
     * This page has been accessed 17,951 times.
