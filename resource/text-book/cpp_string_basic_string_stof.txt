std::stof, std::stod, std::stold

   From cppreference.com
   < cpp | string | basic string

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Strings library
   Null-terminated strings
   Byte strings
   Multibyte strings
   Wide strings
   Classes
   basic_string
   basic_string_view
   (C++17)
   char_traits

   std::basic_string
   Member functions
   basic_string::basic_string
   basic_string::~basic_string
   basic_string::operator=
   basic_string::assign
   basic_string::assign_range
   (C++23)
   basic_string::get_allocator
   Element access
   basic_string::at
   basic_string::operator[]
   basic_string::front
   (DR*)
   basic_string::back
   (DR*)
   basic_string::data
   basic_string::c_str
   basic_string::operator
    basic_string_view
   (C++17)
   Iterators
   basic_string::beginbasic_string::cbegin
   (C++11)
   basic_string::endbasic_string::cend
   (C++11)
   basic_string::rbeginbasic_string::crbegin
   (C++11)
   basic_string::rendbasic_string::crend
   (C++11)
   Capacity
   basic_string::empty
   basic_string::sizebasic_string::length
   basic_string::max_size
   basic_string::reserve
   basic_string::capacity
   basic_string::shrink_to_fit
   (DR*)
   Modifiers
   basic_string::clear
   basic_string::insert
   basic_string::insert_range
   (C++23)
   basic_string::erase
   basic_string::push_back
   basic_string::pop_back
   (DR*)
   basic_string::append
   basic_string::append_range
   (C++23)
   basic_string::operator+=
   basic_string::replace
   basic_string::replace_with_range
   (C++23)
   basic_string::copy
   basic_string::resize
   basic_string::resize_and_overwrite
   (C++23)
   basic_string::swap
   Search
   basic_string::find
   basic_string::rfind
   basic_string::find_first_of
   basic_string::find_first_not_of
   basic_string::find_last_of
   basic_string::find_last_not_of
   Operations
   basic_string::compare
   basic_string::starts_with
   (C++20)
   basic_string::ends_with
   (C++20)
   basic_string::contains
   (C++23)
   basic_string::substr
   Constants
   basic_string::npos
   Non-member functions
   operator+
   swap(std::basic_string)
   erase(std::basic_string)erase_if(std::basic_string)
   (C++20)(C++20)
   I/O
   operator<<operator>>
   getline
   Comparison
   operator==operator!=operator<operator>operator<=operator>=operator<=>
   (until C++20)(until C++20)(until C++20)(until C++20)(until
   C++20)(C++20)
   Numeric conversions
   stoistolstoll
   (C++11)(C++11)(C++11)
   stoulstoull
   (C++11)(C++11)
   stofstodstold
   (C++11)(C++11)(C++11)
   to_string
   (C++11)
   to_wstring
   (C++11)
   Literals
   operator""s
   (C++14)
   Helper classes
   hash<std::basic_string>
   (C++11)
   Deduction guides (C++17)

   Defined in header <string>
   float       stof ( const std::string& str, std::size_t* pos = nullptr
   );
   (1) (since C++11)
   float       stof ( const std::wstring& str, std::size_t* pos = nullptr
   );
   (2) (since C++11)
   double      stod ( const std::string& str, std::size_t* pos = nullptr
   );
   (3) (since C++11)
   double      stod ( const std::wstring& str, std::size_t* pos = nullptr
   );
   (4) (since C++11)
   long double stold( const std::string& str, std::size_t* pos = nullptr
   );
   (5) (since C++11)
   long double stold( const std::wstring& str, std::size_t* pos = nullptr
   );
   (6) (since C++11)

   Interprets a floating point value in a string str.

   Let ptr be an internal (to the conversion functions) pointer of type
   char* (1,3,5) or wchar_t* (2,4,6), accordingly.
   1) Calls std::strtof(str.c_str(), &ptr).
   2) Calls std::wcstof(str.c_str(), &ptr).
   3) Calls std::strtod(str.c_str(), &ptr).
   4) Calls std::wcstod(str.c_str(), &ptr).
   5) Calls std::strtold(str.c_str(), &ptr).
   6) Calls std::wcstold(str.c_str(), &ptr).

   Function discards any whitespace characters (as determined by
   std::isspace) until first non-whitespace character is found. Then it
   takes as many characters as possible to form a valid floating-point
   representation and converts them to a floating-point value. The valid
   floating-point value can be one of the following:
     * decimal floating-point expression. It consists of the following
       parts:

          + (optional) plus or minus sign
          + nonempty sequence of decimal digits optionally containing
            decimal-point character (as determined by the current C
            locale) (defines significand)
          + (optional) e or E followed with optional minus or plus sign
            and nonempty sequence of decimal digits (defines exponent to
            base 10)

     * hexadecimal floating-point expression. It consists of the following
       parts:

          + (optional) plus or minus sign
          + 0x or 0X
          + nonempty sequence of hexadecimal digits optionally containing
            a decimal-point character (as determined by the current C
            locale) (defines significand)
          + (optional) p or P followed with optional minus or plus sign
            and nonempty sequence of decimal digits (defines exponent to
            base 2)

     * infinity expression. It consists of the following parts:

          + (optional) plus or minus sign
          + INF or INFINITY ignoring case

     * not-a-number expression. It consists of the following parts:

          + (optional) plus or minus sign
          + NAN or NAN(char_sequence) ignoring case of the NAN part.
            char_sequence can only contain digits, Latin letters, and
            underscores. The result is a quiet NaN floating-point value.

     * any other expression that may be accepted by the currently
       installed C locale

   If pos is not a null pointer, then ptr will receive the address of the
   first unconverted character in str.c_str(), and the index of that
   character will be calculated and stored in *pos, giving the number of
   characters that were processed by the conversion.

Parameters

   str - the string to convert
   pos - address of an integer to store the number of characters processed

Return value

   The string converted to the specified floating point type.

Exceptions

   std::invalid_argument if no conversion could be performed.

   std::out_of_range if the converted value would fall out of the range of
   the result type or if the underlying function (std::strtof, std::strtod
   or std::strtold) sets errno to ERANGE.

Example

   This section is incomplete
   Reason: no example

Defect reports

   The following behavior-changing defect reports were applied
   retroactively to previously published C++ standards.
   DR Applied to Behavior as published Correct behavior
   LWG 2009 C++11 std::out_of_range would not be thrown if the converted
   value would fall out of the range of the result type will throw
   LWG 2403 C++11 stof called std::strtod or std::wcstod stof calls
   std::strtof or std::wcstof

See also

   stoistolstoll
   (C++11)(C++11)(C++11)
   converts a string to a signed integer
   (function)
   stoulstoull
   (C++11)(C++11)
   converts a string to an unsigned integer
   (function)
   from_chars
   (C++17)
   converts a character sequence to an integer or floating-point value
   (function)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/string/basic_str
   ing/stof&oldid=156402"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 7 August 2023, at 20:31.
     * This page has been accessed 459,356 times.
