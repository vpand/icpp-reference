std::optional<T>::transform

   From cppreference.com
   < cpp | utility | optional

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Utilities library
   Language support
   Type support (basic types, RTTI)
   Library feature-test macros (C++20)
   Dynamic memory management
   Program utilities
   Coroutine support (C++20)
   Variadic functions
   is_constant_evaluated
   (C++20)
   is_within_lifetime
   (C++26)
   initializer_list
   (C++11)
   source_location
   (C++20)
   Debugging support
   is_debugger_present
   (C++26)
   breakpoint_if_debugging
   (C++26)
   breakpoint
   (C++26)
   Three-way comparison
   three_way_comparablethree_way_comparable_with
   (C++20)(C++20)
   strong_ordering
   (C++20)
   weak_ordering
   (C++20)
   partial_ordering
   (C++20)
   common_comparison_category
   (C++20)
   compare_three_way_result
   (C++20)
   compare_three_way
   (C++20)
   strong_order
   (C++20)
   weak_order
   (C++20)
   partial_order
   (C++20)
   compare_strong_order_fallback
   (C++20)
   compare_weak_order_fallback
   (C++20)
   compare_partial_order_fallback
   (C++20)
   is_eqis_ltis_lteq
   (C++20)(C++20)(C++20)
   is_neqis_gtis_gteq
   (C++20)(C++20)(C++20)
   General utilities
   Date and time
   Function objects
   Formatting library (C++20)
   bitset
   hash
   (C++11)
   Relational operators (deprecated in C++20)
   rel_ops::operator!=rel_ops::operator>

   rel_ops::operator<=rel_ops::operator>=
   Integer comparison functions
   cmp_equalcmp_lesscmp_less_than
   (C++20)(C++20)(C++20)
   cmp_not_equalcmp_greatercmp_greater_than
   (C++20)(C++20)(C++20)
   in_range
   (C++20)
   Swap and type operations
   swap
   ranges::swap
   (C++20)
   exchange
   (C++14)
   declval
   (C++11)
   to_underlying
   (C++23)
   forward
   (C++11)
   forward_like
   (C++23)
   move
   (C++11)
   move_if_noexcept
   (C++11)
   as_const
   (C++17)
   Common vocabulary types
   pair
   tuple
   (C++11)
   optional
   (C++17)
   any
   (C++17)
   variant
   (C++17)
   tuple_size
   (C++11)
   tuple_element
   (C++11)
   apply
   (C++17)
   make_from_tuple
   (C++17)
   expected
   (C++23)
   Elementary string conversions
   to_chars
   (C++17)
   from_chars
   (C++17)
   chars_format
   (C++17)
   to_chars_result
   (C++17)
   from_chars_result
   (C++17)

   std::optional
   Member functions
   optional::optional
   optional::~optional
   optional::operator=
   Observers
   optional::operator->optional::operator*
   optional::operator booloptional::has_value
   optional::value
   optional::value_or
   Monadic operations
   optional::and_then
   (C++23)
   optional::transform
   (C++23)
   optional::or_else
   (C++23)
   Modifiers
   optional::emplace
   optional::swap
   optional::reset
   Non-member functions
   operator==operator!=operator<operator<=operator>operator>=operator<=>
   (C++20)
   make_optional
   swap(std::optional)
   Deduction guides
   Helper classes
   hash<std::optional>
   nullopt_t
   in_place_t
   bad_optional_access
   Helper objects
   nullopt
   in_place

   template< class F >
   constexpr auto transform( F&& f ) &;
   (1)                (since C++23)
   template< class F >
   constexpr auto transform( F&& f ) const&;
   (2)                (since C++23)
   template< class F >
   constexpr auto transform( F&& f ) &&;
   (3)                (since C++23)
   template< class F >
   constexpr auto transform( F&& f ) const&&;
   (4)                (since C++23)

   If *this contains a value, invokes f with the contained value as an
   argument, and returns an std::optional that contains the result of that
   invocation; otherwise, returns an empty std::optional.

   The type of contained value in the result (denoted by U below) must be
   a non-array object type, and must not be std::in_place_t or
   std::nullopt_t). Otherwise, the program is ill-formed.
   1) Let U be std::remove_cv_t<std::invoke_result_t<F, T&>>. If *this
   contains a value, returns a std::optional<U> whose contained value is
   direct-initialized from std::invoke(std::forward<F>(f), **this) (unlike
   and_then(), which must return an std::optional directly). Otherwise,
   returns an empty std::optional<U>.
   The program is ill-formed if the variable definition U
   x(std::invoke(std::forward<F>(f), **this)); is ill-formed.
   2) Same as (1), except that U is
   std::remove_cv_t<std::invoke_result_t<F, const T&>>.
   3) Let U be std::remove_cv_t<std::invoke_result_t<F, T>>. If *this
   contains a value, returns a std::optional<U> whose contained value is
   direct-initialized from std::invoke(std::forward<F>(f),
   std::move(**this)). Otherwise, returns an empty std::optional<U>.
   The program is ill-formed if the variable definition U
   x(std::invoke(std::forward<F>(f), std::move(**this))); is ill-formed.
   4) Same as (3), except that U is
   std::remove_cv_t<std::invoke_result_t<F, const T>>.

Parameters

   f - a suitable function or Callable object whose call signature returns
   a non-reference type

Return value

   An std::optional containing the result of f or an empty std::optional,
   as described above.

Notes

   Because transform directly constructs a U object at the right location,
   rather than passing it to a constructor,
   std::is_move_constructible_v<U> can be false.

   As the callable f can't return a reference type, it cannot be a pointer
   to data member.

   Some languages call this operation map.
   Feature-test macro  Value    Std                 Feature
   __cpp_lib_optional 202110L (C++23) Monadic operations in std::optional

Example

   Run this code
#include <iostream>
#include <optional>

struct A { /* ... */ };
struct B { /* ... */ };
struct C { /* ... */ };
struct D { /* ... */ };

auto A_to_B(A) -> B { /* ... */ std::cout << "A => B \n"; return {}; }
auto B_to_C(B) -> C { /* ... */ std::cout << "B => C \n"; return {}; }
auto C_to_D(C) -> D { /* ... */ std::cout << "C => D \n"; return {}; }

void try_transform_A_to_D(std::optional<A> o_A)
{
    std::cout << (o_A ? "o_A has a value\n" : "o_A is empty\n");

    std::optional<D> o_D = o_A.transform(A_to_B)
                              .transform(B_to_C)
                              .transform(C_to_D);

    std::cout << (o_D ? "o_D has a value\n\n" : "o_D is empty\n\n");
};

int main()
{
    try_transform_A_to_D( A{} );
    try_transform_A_to_D( {} );
}

   Output:
o_A has a value
A => B
B => C
C => D
o_D has a value

o_A is empty
o_D is empty

See also

   value_or
   returns the contained value if available, another value otherwise
   (public member function)
   and_then
   (C++23)
   returns the result of the given function on the contained value if it
   exists, or an empty optional otherwise
   (public member function)
   or_else
   (C++23)
   returns the optional itself if it contains a value, or the result of
   the given function otherwise
   (public member function)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/utility/optional
   /transform&oldid=155606"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 27 July 2023, at 18:14.
     * This page has been accessed 32,876 times.
