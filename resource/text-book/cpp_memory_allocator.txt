std::allocator

   From cppreference.com
   < cpp | memory

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Dynamic memory management
   Uninitialized memory algorithms
   uninitialized_copy
   uninitialized_fill
   uninitialized_move
   (C++17)
   uninitialized_default_construct
   (C++17)
   uninitialized_value_construct
   (C++17)
   destroy
   (C++17)
   destroy_at
   (C++17)
   voidify
   (C++20)
   uninitialized_copy_n
   (C++11)
   uninitialized_fill_n
   uninitialized_move_n
   (C++17)
   uninitialized_default_construct_n
   (C++17)
   uninitialized_value_construct_n
   (C++17)
   destroy_n
   (C++17)
   construct_at
   (C++20)
   Constrained uninitialized memory algorithms
   ranges::uninitialized_copy
   (C++20)
   ranges::uninitialized_fill
   (C++20)
   ranges::uninitialized_move
   (C++20)
   ranges::construct_at
   (C++20)
   ranges::destroy
   (C++20)
   ranges::destroy_n
   (C++20)
   ranges::destroy_at
   (C++20)
   ranges::uninitialized_copy_n
   (C++20)
   ranges::uninitialized_fill_n
   (C++20)
   ranges::uninitialized_move_n
   (C++20)
   ranges::uninitialized_default_construct
   (C++20)
   ranges::uninitialized_value_construct
   (C++20)
   ranges::uninitialized_default_construct_n
   (C++20)
   ranges::uninitialized_value_construct_n
   (C++20)
   Allocators
   allocator
   allocator_traits
   (C++11)
   allocation_result
   (C++23)
   allocator_arg
   (C++11)
   uses_allocator
   (C++11)
   uses_allocator_construction_args
   (C++20)
   make_obj_using_allocator
   (C++20)
   uninitialized_construct_using_allocator
   (C++20)
   scoped_allocator_adaptor
   (C++11)
   pmr::polymorphic_allocator
   (C++17)
   Memory resources
   pmr::memory_resource
   (C++17)
   pmr::get_default_resource
   (C++17)
   pmr::set_default_resource
   (C++17)
   pmr::new_delete_resource
   (C++17)
   pmr::null_memory_resource
   (C++17)
   pmr::synchronized_pool_resource
   (C++17)
   pmr::unsynchronized_pool_resource
   (C++17)
   pmr::monotonic_buffer_resource
   (C++17)
   pmr::pool_options
   (C++17)
   Garbage collection support
   declare_reachable
   (C++11)(until C++23)
   undeclare_reachable
   (C++11)(until C++23)
   declare_no_pointers
   (C++11)(until C++23)
   undeclare_no_pointers
   (C++11)(until C++23)
   pointer_safety
   (C++11)(until C++23)
   get_pointer_safety
   (C++11)(until C++23)
   Uninitialized storage
   raw_storage_iterator
   (until C++20*)
   get_temporary_buffer
   (until C++20*)
   return_temporary_buffer
   (until C++20*)
   Explicit lifetime management
   start_lifetime_asstart_lifetime_as_array
   (C++23)(C++23)
   Smart pointers
   unique_ptr
   (C++11)
   shared_ptr
   (C++11)
   weak_ptr
   (C++11)
   auto_ptr
   (until C++17*)
   owner_less
   (C++11)
   owner_less<void>
   (C++17)
   owner_hash
   (C++26)
   owner_equal
   (C++26)
   enable_shared_from_this
   (C++11)
   bad_weak_ptr
   (C++11)
   default_delete
   (C++11)
   out_ptr_t
   (C++23)
   inout_ptr_t
   (C++23)
   Low level memory
   management
   operator new
   operator new[]
   operator delete
   operator delete[]
   get_new_handler
   set_new_handler
   launder
   (C++17)
   bad_alloc
   bad_array_new_length
   nothrow_t
   align_val_t
   destroying_delete_t
   new_handler
   nothrow
   Miscellaneous
   pointer_traits
   (C++11)
   to_address
   (C++20)
   addressof
   (C++11)
   align
   (C++11)
   assume_aligned
   (C++20)
   C Library
   malloc
   calloc
   realloc

   aligned_alloc
   (C++17)
   free

   std::allocator
   Member functions
   allocator::allocator
   allocator::~allocator
   allocator::address
   (until C++20)
   allocator::allocate
   allocator::allocate_at_least
   (C++23)
   allocator::deallocate
   allocator::max_size
   (until C++20)
   allocator::construct
   (until C++20)
   allocator::destroy
   (until C++20)
   Non-member functions
   operator==operator!=
   (until C++20)

   Defined in header <memory>
   template< class T >
   struct allocator;
   (1)
   template<>
   struct allocator<void>;
   (2) (deprecated in C++17)
   (removed in C++20)

   The std::allocator class template is the default Allocator used by all
   standard library containers if no user-specified allocator is provided.
   The default allocator is stateless, that is, all instances of the given
   allocator are interchangeable, compare equal and can deallocate memory
   allocated by any other instance of the same allocator type.

   The explicit specialization for void lacks the member typedefs
   reference, const_reference, size_type and difference_type. This
   specialization declares no member functions.
   (until C++20)

   The default allocator satisfies allocator completeness requirements.
   (since C++17)

Member types

   Type Definition
   value_type T
   pointer (deprecated in C++17)(removed in C++20) T*
   const_pointer (deprecated in C++17)(removed in C++20) const T*
   reference (deprecated in C++17)(removed in C++20) T&
   const_reference (deprecated in C++17)(removed in C++20) const T&
   size_type std::size_t
   difference_type std::ptrdiff_t
   propagate_on_container_move_assignment (C++11) std::true_type
   rebind (deprecated in C++17)(removed in C++20) template< class U >

   struct rebind
   {
       typedef allocator<U> other;
   };
   is_always_equal (C++11)(deprecated in C++23)(removed in C++26)
   std::true_type

Member functions

   (constructor)
   creates a new allocator instance
   (public member function)
   (destructor)
   destructs an allocator instance
   (public member function)
   address
   (until C++20)
   obtains the address of an object, even if operator& is overloaded
   (public member function)
   allocate
   allocates uninitialized storage
   (public member function)
   allocate_at_least
   (C++23)
   allocates uninitialized storage at least as large as requested size
   (public member function)
   deallocate
   deallocates storage
   (public member function)
   max_size
   (until C++20)
   returns the largest supported allocation size
   (public member function)
   construct
   (until C++20)
   constructs an object in allocated storage
   (public member function)
   destroy
   (until C++20)
   destructs an object in allocated storage
   (public member function)

Non-member functions

   operator==operator!=
   (removed in C++20)
   compares two allocator instances
   (public member function)

Notes

   The member template class rebind provides a way to obtain an allocator
   for a different type. For example, std::list<T, A> allocates nodes of
   some internal type Node<T>, using the allocator
   A::rebind<Node<T>>::other(until
   C++11)std::allocator_traits<A>::rebind_alloc<Node<T>>, which is
   implemented in terms of A::rebind<Node<T>>::other if A is an
   std::allocator(since C++11).

   Member type is_always_equal is deprecated via LWG issue 3170, because
   it makes custom allocators derived from std::allocator treated as
   always equal by default.
   std::allocator_traits<std::allocator<T>>::is_always_equal is not
   deprecated and its member constant value is true for any T.

Example

   Run this code
#include <iostream>
#include <memory>
#include <string>

int main()
{
    // default allocator for ints
    std::allocator<int> alloc1;

    // demonstrating the few directly usable members
    static_assert(std::is_same_v<int, decltype(alloc1)::value_type>);
    int* p1 = alloc1.allocate(1); // space for one int
    alloc1.deallocate(p1, 1);     // and it is gone

    // Even those can be used through traits though, so no need
    using traits_t1 = std::allocator_traits<decltype(alloc1)>; // The matching t
rait
    p1 = traits_t1::allocate(alloc1, 1);
    traits_t1::construct(alloc1, p1, 7);  // construct the int
    std::cout << *p1 << '\n';
    traits_t1::deallocate(alloc1, p1, 1); // deallocate space for one int

    // default allocator for strings
    std::allocator<std::string> alloc2;
    // matching traits
    using traits_t2 = std::allocator_traits<decltype(alloc2)>;

    // Rebinding the allocator using the trait for strings gets the same type
    traits_t2::rebind_alloc<std::string> alloc_ = alloc2;

    std::string* p2 = traits_t2::allocate(alloc2, 2); // space for 2 strings

    traits_t2::construct(alloc2, p2, "foo");
    traits_t2::construct(alloc2, p2 + 1, "bar");

    std::cout << p2[0] << ' ' << p2[1] << '\n';

    traits_t2::destroy(alloc2, p2 + 1);
    traits_t2::destroy(alloc2, p2);
    traits_t2::deallocate(alloc2, p2, 2);
}

   Output:
7
foo bar

Defect reports

   The following behavior-changing defect reports were applied
   retroactively to previously published C++ standards.
   DR Applied to Behavior as published Correct behavior
   LWG 2103 C++11 redundant comparison between allocator might be required
   propagate_on_container_move_assignment provided
   LWG 2108 C++11 there was no way to show allocator is stateless
   is_always_equal provided

See also

   allocator_traits
   (C++11)
   provides information about allocator types
   (class template)
   scoped_allocator_adaptor
   (C++11)
   implements multi-level allocator for multi-level containers
   (class template)
   uses_allocator
   (C++11)
   checks if the specified type supports uses-allocator construction
   (class template)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/memory/allocator
   &oldid=163381"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 22 November 2023, at 09:49.
     * This page has been accessed 890,759 times.
