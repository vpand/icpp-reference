std::monostate

   From cppreference.com
   < cpp | utility | variant

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Utilities library
   Language support
   Type support (basic types, RTTI)
   Library feature-test macros (C++20)
   Dynamic memory management
   Program utilities
   Coroutine support (C++20)
   Variadic functions
   is_constant_evaluated
   (C++20)
   is_within_lifetime
   (C++26)
   initializer_list
   (C++11)
   source_location
   (C++20)
   Debugging support
   is_debugger_present
   (C++26)
   breakpoint_if_debugging
   (C++26)
   breakpoint
   (C++26)
   Three-way comparison
   three_way_comparablethree_way_comparable_with
   (C++20)(C++20)
   strong_ordering
   (C++20)
   weak_ordering
   (C++20)
   partial_ordering
   (C++20)
   common_comparison_category
   (C++20)
   compare_three_way_result
   (C++20)
   compare_three_way
   (C++20)
   strong_order
   (C++20)
   weak_order
   (C++20)
   partial_order
   (C++20)
   compare_strong_order_fallback
   (C++20)
   compare_weak_order_fallback
   (C++20)
   compare_partial_order_fallback
   (C++20)
   is_eqis_ltis_lteq
   (C++20)(C++20)(C++20)
   is_neqis_gtis_gteq
   (C++20)(C++20)(C++20)
   General utilities
   Date and time
   Function objects
   Formatting library (C++20)
   bitset
   hash
   (C++11)
   Relational operators (deprecated in C++20)
   rel_ops::operator!=rel_ops::operator>

   rel_ops::operator<=rel_ops::operator>=
   Integer comparison functions
   cmp_equalcmp_lesscmp_less_than
   (C++20)(C++20)(C++20)
   cmp_not_equalcmp_greatercmp_greater_than
   (C++20)(C++20)(C++20)
   in_range
   (C++20)
   Swap and type operations
   swap
   ranges::swap
   (C++20)
   exchange
   (C++14)
   declval
   (C++11)
   to_underlying
   (C++23)
   forward
   (C++11)
   forward_like
   (C++23)
   move
   (C++11)
   move_if_noexcept
   (C++11)
   as_const
   (C++17)
   Common vocabulary types
   pair
   tuple
   (C++11)
   optional
   (C++17)
   any
   (C++17)
   variant
   (C++17)
   tuple_size
   (C++11)
   tuple_element
   (C++11)
   apply
   (C++17)
   make_from_tuple
   (C++17)
   expected
   (C++23)
   Elementary string conversions
   to_chars
   (C++17)
   from_chars
   (C++17)
   chars_format
   (C++17)
   to_chars_result
   (C++17)
   from_chars_result
   (C++17)

   std::variant
   Member functions
   variant::variant
   variant::~variant
   variant::operator=
   Observers
   variant::index
   variant::valueless_by_exception
   Modifiers
   variant::emplace
   variant::swap
   Visitation
   variant::visit
   (C++26)
   Non-member functions
   visit
   holds_alternative
   get(std::variant)
   get_if
   operator==operator!=operator<operator<=operator>operator>=operator<=>
   (C++20)
   swap(std::variant)
   Helper classes
   monostate
   bad_variant_access
   variant_size
   variant_alternative
   hash<std::variant>
   Helper objects
   variant_npos

   Defined in header <variant>
   struct monostate { };
                              (since C++17)

   Unit type intended for use as a well-behaved empty alternative in
   std::variant. In particular, a variant of non-default-constructible
   types may list std::monostate as its first alternative: this makes the
   variant itself default-constructible.

Member functions

   (constructor)
   (implicitly declared)
   trivial implicit default/copy/move constructor
   (public member function)
   (destructor)
   (implicitly declared)
   trivial implicit destructor
   (public member function)
   operator=
   (implicitly declared)
   trivial implicit copy/move assignment
   (public member function)

Non-member functions

std::operator==, !=, <, <=, >, >=, <=>(std::monostate)

   constexpr bool operator==( monostate, monostate ) noexcept { return
   true; }
   (1) (since C++17)
   (2)
   constexpr bool operator!=( monostate, monostate ) noexcept { return
   false; }

   constexpr bool operator< ( monostate, monostate ) noexcept { return
   false; }
   constexpr bool operator> ( monostate, monostate ) noexcept { return
   false; }
   constexpr bool operator<=( monostate, monostate ) noexcept { return
   true; }
   constexpr bool operator>=( monostate, monostate ) noexcept { return
   true; }
   (since C++17)
   (until C++20)
   constexpr std::strong_ordering operator<=>( monostate, monostate )
   noexcept

   {
       return std::strong_ordering::equal;
   }
   (since C++20)

   All instances of std::monostate compare equal.

   The <, <=, >, >=, and != operators are synthesized from operator<=> and
   operator== respectively.
   (since C++20)

Helper classes

std::hash<std::monostate>

   template <>
   struct std::hash<monostate>;
              (since C++17)

   Specializes the std::hash algorithm for std::monostate.

Example

   Run this code
#include <cassert>
#include <iostream>
#include <variant>

struct S
{
    S(int i) : i(i) {}
    int i;
};

int main()
{
    // Without the monostate type this declaration will fail.
    // This is because S is not default-constructible.
    std::variant<std::monostate, S> var;
    assert(var.index() == 0);

    try
    {
        std::get<S>(var); // throws! We need to assign a value
    }
    catch(const std::bad_variant_access& e)
    {
        std::cout << e.what() << '\n';
    }

    var = 42;
    std::cout << "std::get: " << std::get<S>(var).i << '\n'
              << "std::hash: " << std::hex << std::showbase
              << std::hash<std::monostate>{}(std::monostate{}) << '\n';
}

   Possible output:
std::get: wrong index for variant
std::get: 42
std::hash: 0xffffffffffffe19f

See also

   (constructor)
   constructs the variant object
   (public member function)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/utility/variant/
   monostate&oldid=149611"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 23 March 2023, at 15:07.
     * This page has been accessed 187,235 times.
