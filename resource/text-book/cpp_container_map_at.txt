std::map<Key,T,Compare,Allocator>::at

   From cppreference.com
   < cpp | container | map


   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Containers library
   Sequence
   array
   (C++11)
   vector
   vector<bool>
   deque
   forward_list
   (C++11)
   list
   Associative
   set
   multiset
   map
   multimap
   Unordered associative
   unordered_set
   (C++11)
   unordered_multiset
   (C++11)
   unordered_map
   (C++11)
   unordered_multimap
   (C++11)
   Adaptors
   stack
   queue
   priority_queue
   flat_set
   (C++23)
   flat_multiset
   (C++23)
   flat_map
   (C++23)
   flat_multimap
   (C++23)
   Views
   span
   (C++20)
   mdspan
   (C++23)
   Iterator invalidation
   Member function table
   Non-member function table

   std::map
   Member functions
   map::map
   map::~map
   map::operator=
   map::get_allocator
   Element access
   map::at
   map::operator[]
   Iterators
   map::beginmap::cbegin
   (C++11)
   map::endmap::cend
   (C++11)
   map::rbeginmap::crbegin
   (C++11)
   map::rendmap::crend
   (C++11)
   Capacity
   map::size
   map::max_size
   map::empty
   Modifiers
   map::clear
   map::insert
   map::erase
   map::swap
   map::extract
   (C++17)
   map::merge
   (C++17)
   map::insert_range
   (C++23)
   map::insert_or_assign
   (C++17)
   map::emplace
   (C++11)
   map::emplace_hint
   (C++11)
   map::try_emplace
   (C++17)
   Lookup
   map::count
   map::find
   map::contains
   (C++20)
   map::equal_range
   map::lower_bound
   map::upper_bound
   Observers
   map::key_comp
   map::value_comp
   Non-member functions
   operator==operator!=operator<operator>operator<=operator>=operator<=>
   (until C++20)(until C++20)(until C++20)(until C++20)(until
   C++20)(C++20)
   std::swap(std::map)
   erase_if(std::map)
   (C++20)
   Deduction guides (C++17)

   T& at( const Key& key );
   (1)
   const T& at( const Key& key ) const;
   (2)
   template< class K >
   T& at( const K& x );
   (3)                                 (since C++26)
   template< class K >
   const T& at( const K& x ) const;
   (4)                                 (since C++26)

   Returns a reference to the mapped value of the element with specified
   key. If no such element exists, an exception of type std::out_of_range
   is thrown.
   1,2) The key is equivalent to key.
   3,4) The key compares equivalent to the value x. The reference to the
   mapped value is obtained as if by expression this->find(x)->second.
   The expression this->find(x) must be well-formed and have well-defined
   behavior, otherwise the behavior is undefined.
   These overloads participate in overload resolution only if the
   qualified-id Compare::is_transparent is valid and denotes a type. It
   allows calling this function without constructing an instance of Key.

Parameters

   key - the key of the element to find
   x   - a value of any type that can be transparently compared with a key

Return value

   A reference to the mapped value of the requested element.

Exceptions

   1,2) std::out_of_range if the container does not have an element with
   the specified key.
   3,4) std::out_of_range if the container does not have the specified
   element, that is, if find(x) == end() is true.

Complexity

   Logarithmic in the size of the container.

Notes

                Feature-test macro                Value    Std   Feature
   __cpp_lib_associative_heterogeneous_insertion 202311L (C++26)
   Heterogeneous overloads for the remaining member functions in ordered
   and unordered associative containers. (3,4)

Example

   This section is incomplete
   Reason: no example

Defect reports

   The following behavior-changing defect reports were applied
   retroactively to previously published C++ standards.
   DR Applied to Behavior as published Correct behavior
   LWG 464 C++98 map did not have this member function added
   LWG 703 C++98 the complexity requirement was missing added
   LWG 2007 C++98 the return value referred to the requested element
   refers to its mapped value

See also

   operator[]
   access or insert specified element
   (public member function)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/container/map/at
   &oldid=131155"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 5 July 2021, at 05:25.
     * This page has been accessed 628,988 times.
