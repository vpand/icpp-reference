rint, rintf, rintl, lrint, lrintf, lrintl, llrint, llrintf, llrintl

   From cppreference.com
   < c | numeric | math

   C
   Language
   Headers
   Type support
   Program utilities
   Variadic function support
   Error handling
   Dynamic memory management
   Strings library
   Algorithms
   Numerics
   Date and time utilities
   Input/output support
   Localization support
   Concurrency support (C11)
   Technical Specifications
   Symbol index

   Numerics
   Common mathematical functions
   Floating-point environment (C99)
   Pseudo-random number generation
   Complex number arithmetic (C99)
   Type-generic math (C99)

   Common mathematical functions
   Types
   div_tldiv_tlldiv_timaxdiv_t
   (C99)(C99)
   float_tdouble_t
   (C99)(C99)
   _Decimal32_t_Decimal64_t
   (C23)(C23)
   Functions
   Basic operations
   abslabsllabsimaxabs
   (C99)(C99)
   fabs
   divldivlldivimaxdiv
   (C99)(C99)
   fmod
   remainder
   (C99)
   remquo
   (C99)
   fma
   (C99)
   fdim
   (C99)
   nannanfnanlnandN
   (C99)(C99)(C99)(C23)
   Maximum/minimum operations
   fmax
   (C99)
   fmaximum
   (C23)
   fmaximum_mag
   (C23)
   fmaximum_num
   (C23)
   fmaximum_mag_num
   (C23)
   fmin
   (C99)
   fminimum
   (C23)
   fminimum_mag
   (C23)
   fminimum_num
   (C23)
   fminimum_mag_num
   (C23)
   Exponential functions
   exp
   exp10
   (C23)
   exp2
   (C99)
   expm1
   (C99)
   exp10m1
   (C23)
   exp2m1
   (C23)
   log
   log10
   log2
   (C99)
   log1plogp1
   (C99)(C23)
   log10p1
   (C23)
   log2p1
   (C23)
   Power functions
   sqrt
   cbrt
   (C99)
   rootn
   (C23)
   rsqrt
   (C23)
   hypot
   (C99)
   compound
   (C23)
   pow
   pown
   (C23)
   powr
   (C23)
   Trigonometric and hyperbolic functions
   sin
   cos
   tan
   asin
   acos
   atan
   atan2
   sinpi
   (C23)
   cospi
   (C23)
   tanpi
   (C23)
   asinpi
   (C23)
   acospi
   (C23)
   atanpi
   (C23)
   atan2pi
   (C23)
   sinh
   cosh
   tanh
   asinh
   (C99)
   acosh
   (C99)
   atanh
   (C99)
   Error and gamma functions
   erf
   (C99)
   erfc
   (C99)
   lgamma
   (C99)
   tgamma
   (C99)
   Nearest integer floating-point operations
   ceil
   floor
   roundlroundllround
   (C99)(C99)(C99)
   roundeven
   (C23)
   trunc
   (C99)
   nearbyint
   (C99)
   rintlrintllrint
   (C99)(C99)(C99)
   fromfpfromfpxufromfpufromfpx
   (C23)(C23)(C23)(C23)
   Floating-point manipulation functions
   ldexp
   frexp
   scalbnscalbln
   (C99)(C99)
   ilogbllogb
   (C99)(C23)
   logb
   (C99)
   modf
   nextafternexttoward
   (C99)(C99)
   nextupnextdown
   (C23)(C23)
   copysign
   (C99)
   canonicalize
   (C23)
   Narrowing operations
   fadd
   (C23)
   fsub
   (C23)
   fmul
   (C23)
   fdiv
   (C23)
   ffma
   (C23)
   fsqrt
   (C23)
   Quantum and quantum exponent functions
   quantizedN
   (C23)
   samequantumdN
   (C23)
   quantumdN
   (C23)
   llquantexpdN
   (C23)
   Decimal re-encoding functions
   encodedecdN
   (C23)
   decodedecdN
   (C23)
   encodebindN
   (C23)
   decodebindN
   (C23)
   Total order and payload functions
   totalorder
   (C23)
   getpayload
   (C23)
   setpayload
   (C23)
   setpayloadsig
   (C23)
   Classification
   fpclassify
   (C99)
   iscanonical
   (C23)
   isfinite
   (C99)
   isinf
   (C99)
   isnan
   (C99)
   isnormal
   (C99)
   signbit
   (C99)
   issubnormal
   (C23)
   iszero
   (C23)
   isgreater
   (C99)
   isgreaterequal
   (C99)
   isless
   (C99)
   islessequal
   (C99)
   islessgreater
   (C99)
   isunordered
   (C99)
   issignaling
   (C23)
   iseqsig
   (C23)
   Macro constants
   Special floating-point values
   HUGE_VALFHUGE_VALHUGE_VALLHUGE_VALDN
   (C99)(C99)(C23)
   INFINITYDEC_INFINITY
   (C99)(C23)
   NANDEC_NAN
   (C99)(C23)
   Arguments and return values
   FP_ILOGB0FP_ILOGBNAN
   (C99)(C99)
   FP_INT_UPWARDFP_INT_DOWNWARDFP_INT_TOWARDZEROFP_INT_TONEARESTFROMZEROFP
   _INT_TONEAREST
   (C23)(C23)(C23)(C23)(C23)
   FP_LLOGB0FP_LLOGBNAN
   (C23)(C23)
   FP_NORMALFP_SUBNORMALFP_ZEROFP_INFINITEFP_NAN
   (C99)(C99)(C99)(C99)(C99)
   Error handling
   MATH_ERRNOMATH_ERRNOEXCEPT
   (C99)(C99)
   math_errhandling
   (C99)
   Fast operation indicators
   FP_FAST_FMAFFP_FAST_FMA
   (C99)(C99)
   FP_FAST_FADDFP_FAST_FADDLFP_FAST_DADDLFP_FAST_DMADDDN
   (C23)(C23)(C23)(C23)
   FP_FAST_FMULFP_FAST_FMULLFP_FAST_DMULLFP_FAST_DMMULDN
   (C23)(C23)(C23)(C23)
   FP_FAST_FFMAFP_FAST_FFMALFP_FAST_DFMALFP_FAST_DMFMADN
   (C23)(C23)(C23)(C23)
   FP_FAST_FMALFP_FAST_FMADN
   (C99)(C23)
   FP_FAST_FSUBFP_FAST_FSUBLFP_FAST_DSUBLFP_FAST_DMSUBDN
   (C23)(C23)(C23)(C23)
   FP_FAST_FDIVFP_FAST_FDIVLFP_FAST_DDIVLFP_FAST_DMDIVDN
   (C23)(C23)(C23)(C23)
   FP_FAST_FSQRTFP_FAST_FSQRTLFP_FAST_DSQRTLFP_FAST_DMSQRTDN
   (C23)(C23)(C23)(C23)

   Defined in header <math.h>
   float rintf( float arg );
   (1)                                  (since C99)
   double rint( double arg );
   (2)                                  (since C99)
   long double rintl( long double arg );
   (3)                                  (since C99)
   Defined in header <tgmath.h>
   #define rint( arg )
   (4)                                  (since C99)
   Defined in header <math.h>
   long lrintf( float arg );
   (5)                                  (since C99)
   long lrint( double arg );
   (6)                                  (since C99)
   long lrintl( long double arg );
   (7)                                  (since C99)
   Defined in header <tgmath.h>
   #define lrint( arg )
   (8)                                  (since C99)
   Defined in header <math.h>
   long long llrintf( float arg );
   (9)                                  (since C99)
   long long llrint( double arg );
   (10)                                 (since C99)
   long long llrintl( long double arg );
   (11)                                 (since C99)
   Defined in header <tgmath.h>
   #define llrint( arg )
   (12)                                 (since C99)
   1-3) Rounds the floating-point argument arg to an integer value in
   floating-point format, using the current rounding mode.
   5-7, 9-11) Rounds the floating-point argument arg to an integer value
   in integer format, using the current rounding mode.
   4,8,12) Type-generic macros: If arg has type long double, rintl,
   lrintl, llrintl is called. Otherwise, if arg has integer type or the
   type double, rint, lrint, llrint is called. Otherwise, rintf, lrintf,
   llrintf is called, respectively.

Parameters

   arg - floating-point value

Return value

   If no errors occur, the nearest integer value to arg, according to the
   current rounding mode, is returned.

Error handling

   Errors are reported as specified in math_errhandling.

   If the result of lrint or llrint is outside the range representable by
   the return type, a domain error or a range error may occur.

   If the implementation supports IEEE floating-point arithmetic (IEC
   60559),

          For the rint function:

     * If arg is ±infty, it is returned, unmodified.
     * If arg is ±0, it is returned, unmodified.
     * If arg is NaN, NaN is returned.

          For lrint and llrint functions:

     * If arg is ±infty, FE_INVALID is raised and an
       implementation-defined value is returned.
     * If the result of the rounding is outside the range of the return
       type, FE_INVALID is raised and an implementation-defined value is
       returned.
     * If arg is NaN, FE_INVALID is raised and an implementation-defined
       value is returned.

Notes

   POSIX specifies that all cases where lrint or llrint raise FE_INEXACT
   are domain errors.

   As specified in math_errhandling, FE_INEXACT may be (but isn't required
   to be on non-IEEE floating-point platforms) raised by rint when
   rounding a non-integer finite value.

   The only difference between rint and nearbyint is that nearbyint never
   raises FE_INEXACT.

   The largest representable floating-point values are exact integers in
   all standard floating-point formats, so rint never overflows on its
   own; however the result may overflow any integer type (including
   intmax_t), when stored in an integer variable.

   If the current rounding mode is...
     * FE_DOWNWARD, then rint is equivalent to floor.
     * FE_UPWARD, then rint is equivalent to ceil.
     * FE_TOWARDZERO, then rint is equivalent to trunc
     * FE_TONEAREST, then rint differs from round in that halfway cases
       are rounded to even rather than away from zero.

Example

   Run this code
#include <fenv.h>
#include <limits.h>
#include <math.h>
#include <stdio.h>

int main(void)
{
#pragma STDC FENV_ACCESS ON
    fesetround(FE_TONEAREST);
    printf("rounding to nearest (halfway cases to even):\n"
           "rint(+2.3) = %+.1f  ", rint(2.3));
    printf("rint(+2.5) = %+.1f  ", rint(2.5));
    printf("rint(+3.5) = %+.1f\n", rint(3.5));
    printf("rint(-2.3) = %+.1f  ", rint(-2.3));
    printf("rint(-2.5) = %+.1f  ", rint(-2.5));
    printf("rint(-3.5) = %+.1f\n", rint(-3.5));

    fesetround(FE_DOWNWARD);
    printf("rounding down: \nrint(+2.3) = %+.1f  ", rint(2.3));
    printf("rint(+2.5) = %+.1f  ", rint(2.5));
    printf("rint(+3.5) = %+.1f\n", rint(3.5));
    printf("rint(-2.3) = %+.1f  ", rint(-2.3));
    printf("rint(-2.5) = %+.1f  ", rint(-2.5));
    printf("rint(-3.5) = %+.1f\n", rint(-3.5));
    printf("rounding down with lrint: \nlrint(+2.3) = %ld  ", lrint(2.3));
    printf("lrint(+2.5) = %ld  ", lrint(2.5));
    printf("lrint(+3.5) = %ld\n", lrint(3.5));
    printf("lrint(-2.3) = %ld  ", lrint(-2.3));
    printf("lrint(-2.5) = %ld  ", lrint(-2.5));
    printf("lrint(-3.5) = %ld\n", lrint(-3.5));

    printf("lrint(-0.0) = %ld\n", lrint(-0.0));
    printf("lrint(-Inf) = %ld\n", lrint(-INFINITY)); // FE_INVALID raised

    // error handling
    feclearexcept(FE_ALL_EXCEPT);
    printf("rint(1.1) = %.1f\n", rint(1.1));
    if (fetestexcept(FE_INEXACT))
        puts("    FE_INEXACT was raised");

    feclearexcept(FE_ALL_EXCEPT);
    printf("lrint(LONG_MIN-2048.0) = %ld\n", lrint(LONG_MIN-2048.0));
    if (fetestexcept(FE_INVALID))
        puts("    FE_INVALID was raised");
}

   Possible output:
rounding to nearest (halfway cases to even):
rint(+2.3) = +2.0  rint(+2.5) = +2.0  rint(+3.5) = +4.0
rint(-2.3) = -2.0  rint(-2.5) = -2.0  rint(-3.5) = -4.0
rounding down:
rint(+2.3) = +2.0  rint(+2.5) = +2.0  rint(+3.5) = +3.0
rint(-2.3) = -3.0  rint(-2.5) = -3.0  rint(-3.5) = -4.0
rounding down with lrint:
lrint(+2.3) = 2  lrint(+2.5) = 2  lrint(+3.5) = 3
lrint(-2.3) = -3  lrint(-2.5) = -3  lrint(-3.5) = -4
lrint(-0.0) = 0
lrint(-Inf) = -9223372036854775808
rint(1.1) = 1.0
    FE_INEXACT was raised
lrint(LONG_MIN-2048.0) = -9223372036854775808
    FE_INVALID was raised

References

     * C23 standard (ISO/IEC 9899:2023):

          + 7.12.9.4 The rint functions (p: TBD)

          + 7.12.9.5 The lrint and llrint functions (p: TBD)

          + 7.25 Type-generic math <tgmath.h> (p: TBD)

          + F.10.6.4 The rint functions (p: TBD)

          + F.10.6.5 The lrint and llrint functions (p: TBD)

     * C17 standard (ISO/IEC 9899:2018):

          + 7.12.9.4 The rint functions (p: 184)

          + 7.12.9.5 The lrint and llrint functions (p: 184)

          + 7.25 Type-generic math <tgmath.h> (p: 272-273)

          + F.10.6.4 The rint functions (p: 384)

          + F.10.6.5 The lrint and llrint functions (p: 384)

     * C11 standard (ISO/IEC 9899:2011):

          + 7.12.9.4 The rint functions (p: 252)

          + 7.12.9.5 The lrint and llrint functions (p: 252)

          + 7.25 Type-generic math <tgmath.h> (p: 373-375)

          + F.10.6.4 The rint functions (p: 527)

          + F.10.6.5 The lrint and llrint functions (p: 527)

     * C99 standard (ISO/IEC 9899:1999):

          + 7.12.9.4 The rint functions (p: 232-233)

          + 7.12.9.5 The lrint and llrint functions (p: 233)

          + 7.22 Type-generic math <tgmath.h> (p: 335-337)

          + F.9.6.4 The rint functions (p: 463)

          + F.9.6.5 The lrint and llrint functions (p: 463)

See also

   trunctruncftruncl
   (C99)(C99)(C99)
   rounds to nearest integer not greater in magnitude than the given value
   (function)
   nearbyintnearbyintfnearbyintl
   (C99)(C99)(C99)
   rounds to an integer using current rounding mode
   (function)
   fegetroundfesetround
   (C99)(C99)
   gets or sets rounding direction
   (function)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=c/numeric/math/rint&
   oldid=172058"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 23 May 2024, at 20:47.
     * This page has been accessed 50,395 times.
