std::experimental::filesystem::last_write_time

   From cppreference.com
   < cpp | experimental | fs

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Experimental
   Technical Specification
   Filesystem library (filesystem TS)
   Library fundamentals (library fundamentals TS)
   Library fundamentals 2 (library fundamentals TS v2)
   Library fundamentals 3 (library fundamentals TS v3)
   Extensions for parallelism (parallelism TS)
   Extensions for parallelism 2 (parallelism TS v2)
   Extensions for concurrency (concurrency TS)
   Extensions for concurrency 2 (concurrency TS v2)
   Concepts (concepts TS)
   Ranges (ranges TS)
   Reflection (reflection TS)
   Mathematical special functions (special functions TR)
   Experimental Non-TS
   Pattern Matching
   Linear Algebra
   std::execution
   Contracts
   2D Graphics

   Filesystem library
   Classes
   filesystem::path
   filesystem::filesystem_error
   filesystem::directory_entry
   filesystem::directory_iterator
   filesystem::recursive_directory_iterator
   filesystem::file_status
   filesystem::space_info
   filesystem::file_type
   filesystem::perms
   filesystem::copy_options
   filesystem::directory_options
   filesystem::file_time_type
   Functions
   filesystem::absolute
   filesystem::system_complete
   filesystem::canonical
   filesystem::copy
   filesystem::copy_file
   filesystem::copy_symlink
   filesystem::create_directory
   filesystem::create_directories
   filesystem::create_hard_link
   filesystem::create_symlink
   filesystem::create_directory_symlink
   filesystem::current_path
   filesystem::exists
   filesystem::equivalent
   filesystem::file_size
   filesystem::hard_link_count
   filesystem::last_write_time
   filesystem::permissions
   filesystem::read_symlink
   filesystem::remove
   filesystem::remove_all
   filesystem::rename
   filesystem::resize_file
   filesystem::space
   filesystem::status
   filesystem::symlink_status
   filesystem::temp_directory_path
   File types
   filesystem::is_block_file
   filesystem::is_character_file
   filesystem::is_directory
   filesystem::is_empty
   filesystem::status_known
   filesystem::is_fifo
   filesystem::is_other
   filesystem::is_regular_file
   filesystem::is_socket
   filesystem::is_symlink

  Defined in header <experimental/filesystem>
   file_time_type last_write_time( const path& p );
   file_time_type last_write_time( const path& p, error_code& ec )
  (1)                                                            (filesystem TS)
   void last_write_time( const path& p, file_time_type new_time );
   void last_write_time( const path& p, file_time_type new_time,
   error_code& ec );
  (2)                                                            (filesystem TS)
   1) Returns the time of the last modification of p, determined as if by
   accessing the member st_mtime of the POSIX stat (symlinks are
   followed). The non-throwing overload returns file_time_type::min() on
   errors.
   2) Changes the time of the last modification of p, as if by POSIX
   futimens (symlinks are followed).

Parameters

   p        - path to examine or modify
   new_time - new modification time
   ec       - out-parameter for error reporting in the non-throwing overload

Return value

   1) The time of the last modification of p.
   2) (none)

Exceptions

   The overload that does not take an error_code& parameter throws
   filesystem_error on underlying OS API errors, constructed with p as the
   first argument and the OS error code as the error code argument.
   std::bad_alloc may be thrown if memory allocation fails. The overload
   taking an error_code& parameter sets it to the OS API error code if an
   OS API call fails, and executes ec.clear() if no errors occur. This
   overload has
   noexcept specification:
   noexcept

Notes

   It is not guaranteed that immediately after setting the write time, the
   value returned by (1) is the same as what was passed as the argument to
   (2) because the file system's time may be more granular than
   file_time_type.

Example

   Run this code
#include <chrono>
#include <experimental/filesystem>
#include <fstream>
#include <iomanip>
#include <iostream>
namespace fs = std::experimental::filesystem;
using namespace std::chrono_literals;

int main()
{
    fs::path p = fs::current_path() / "example.bin";
    std::ofstream(p.c_str()).put('a'); // create file
    auto ftime = fs::last_write_time(p);

    std::time_t cftime = decltype(ftime)::clock::to_time_t(ftime); // assuming s
ystem_clock
    std::cout << "File write time is " << std::asctime(std::localtime(&cftime))
<< '\n';

    fs::last_write_time(p, ftime + 1h); // move file write time 1 hour to the fu
ture
    ftime = fs::last_write_time(p); // read back from the filesystem

    cftime = decltype(ftime)::clock::to_time_t(ftime);
    std::cout << "File write time is " << std::asctime(std::localtime(&cftime))
<< '\n';
    fs::remove(p);
}

   Possible output:
File write time is Tue Mar 31 19:47:04 2015

File write time is Tue Mar 31 20:47:04 2015

See also

   file_time_type
   represents file time values
   (typedef)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/experimental/fs/
   last_write_time&oldid=158854"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 12 September 2023, at 01:11.
     * This page has been accessed 24,783 times.
