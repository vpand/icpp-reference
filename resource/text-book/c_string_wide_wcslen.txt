wcslen, wcsnlen_s

   From cppreference.com
   < c | string | wide

   C
   Language
   Headers
   Type support
   Program utilities
   Variadic function support
   Error handling
   Dynamic memory management
   Strings library
   Algorithms
   Numerics
   Date and time utilities
   Input/output support
   Localization support
   Concurrency support (C11)
   Technical Specifications
   Symbol index

   Strings library
   Byte strings
   Multibyte strings
   Wide strings

   Null-terminated wide strings
   Functions
   Character manipulation
   iswalnum
   (C95)
   iswalpha
   (C95)
   iswlower
   (C95)
   iswupper
   (C95)
   iswdigit
   (C95)
   iswxdigit
   (C95)
   iswblank
   (C99)
   wctype
   (C95)
   iswctype
   (C95)
   iswcntrl
   (C95)
   iswgraph
   (C95)
   iswspace
   (C95)
   iswprint
   (C95)
   iswpunct
   (C95)
   towlower
   (C95)
   towupper
   (C95)
   wctrans
   (C95)
   towctrans
   (C95)
   Conversions to numeric formats
   wcstolwcstoll
   (C95)(C99)
   wcstoulwcstoull
   (C95)(C99)
   wcstofwcstodwcstold
   (C99)(C95)(C99)
   wcstoimaxwcstoumax
   (C99)(C99)
   String manipulation
   wcslenwcsnlen_s
   (C95)(C11)
   wcscpywcscpy_s
   (C95)(C11)
   wcsncpywcsncpy_s
   (C95)(C11)
   wcscatwcscat_s
   (C95)(C11)
   wcsncatwcsncat_s
   (C95)(C11)
   wcsstr
   (C95)
   wcscmp
   (C95)
   wcsncmp
   (C95)
   wcscoll
   (C95)
   wcsxfrm
   (C95)
   wcschr
   (C95)
   wcsrchr
   (C95)
   wcspbrk
   (C95)
   wcsspn
   (C95)
   wcscspn
   (C95)
   wcstokwcstok_s
   (C95)(C11)
   Array manipulation
   wmemcpywmemcpy_s
   (C95)(C11)
   wmemmovewmemmove_s
   (C95)(C11)
   wmemcmp
   (C95)
   wmemchr
   (C95)
   wmemset
   (C95)

   Defined in header <wchar.h>
   size_t wcslen( const wchar_t *str );
   (1)                                                (since C95)
   size_t wcsnlen_s(const wchar_t *str, size_t strsz);
   (2)                                                (since C11)
   1) Returns the length of a wide string, that is the number of non-null
   wide characters that precede the terminating null wide character.
   2) Same as (1), except that the function returns zero if str is a null
   pointer and returns strsz if the null wide character was not found in
   the first strsz wide characters of src

          As with all bounds-checked functions, wcslen_s only guaranteed
          to be available if __STDC_LIB_EXT1__ is defined by the
          implementation and if the user defines __STDC_WANT_LIB_EXT1__ to
          the integer constant 1 before including <stdio.h>..

Parameters

   str   - pointer to the null-terminated wide string to be examined
   strsz - maximum number of wide characters to examine

Return value

   1) The length of the null-terminated wide string str.
   2) The length of the null-terminated wide string str on success, zero
   if str is a null pointer, strsz if the null wide character was not
   found.

Notes

   strnlen_s and wcsnlen_s are the only bounds-checked functions that do
   not invoke the runtime constraints handler. They are pure utility
   functions used to provide limited support for non-null terminated
   strings.

Example

   Run this code
#include <wchar.h>
#include <stdio.h>

int main(void)
{
    wchar_t str[] = L"How many wide characters does this string contain?";

    printf("without null character: %zu\n", wcslen(str));
    printf("with null character: %zu\n", sizeof str / sizeof *str);
}

   Output:
without null character: 50
with null character: 51

References

     * C11 standard (ISO/IEC 9899:2011):

          + 7.29.4.6.1 The wcslen function (p: 439)

          + K.3.9.2.4.1 The wcsnlen_s function (p: 646-647)

     * C99 standard (ISO/IEC 9899:1999):

          + 7.24.4.6.1 The wcslen function (p: 385)

See also

   strlenstrnlen_s
   (C11)
   returns the length of a given string
   (function)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=c/string/wide/wcslen
   &oldid=101823"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 30 April 2018, at 16:49.
     * This page has been accessed 65,368 times.
