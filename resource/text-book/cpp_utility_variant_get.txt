std::get (std::variant)

   From cppreference.com
   < cpp | utility | variant

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Utilities library
   Language support
   Type support (basic types, RTTI)
   Library feature-test macros (C++20)
   Dynamic memory management
   Program utilities
   Coroutine support (C++20)
   Variadic functions
   is_constant_evaluated
   (C++20)
   is_within_lifetime
   (C++26)
   initializer_list
   (C++11)
   source_location
   (C++20)
   Debugging support
   is_debugger_present
   (C++26)
   breakpoint_if_debugging
   (C++26)
   breakpoint
   (C++26)
   Three-way comparison
   three_way_comparablethree_way_comparable_with
   (C++20)(C++20)
   strong_ordering
   (C++20)
   weak_ordering
   (C++20)
   partial_ordering
   (C++20)
   common_comparison_category
   (C++20)
   compare_three_way_result
   (C++20)
   compare_three_way
   (C++20)
   strong_order
   (C++20)
   weak_order
   (C++20)
   partial_order
   (C++20)
   compare_strong_order_fallback
   (C++20)
   compare_weak_order_fallback
   (C++20)
   compare_partial_order_fallback
   (C++20)
   is_eqis_ltis_lteq
   (C++20)(C++20)(C++20)
   is_neqis_gtis_gteq
   (C++20)(C++20)(C++20)
   General utilities
   Date and time
   Function objects
   Formatting library (C++20)
   bitset
   hash
   (C++11)
   Relational operators (deprecated in C++20)
   rel_ops::operator!=rel_ops::operator>

   rel_ops::operator<=rel_ops::operator>=
   Integer comparison functions
   cmp_equalcmp_lesscmp_less_than
   (C++20)(C++20)(C++20)
   cmp_not_equalcmp_greatercmp_greater_than
   (C++20)(C++20)(C++20)
   in_range
   (C++20)
   Swap and type operations
   swap
   ranges::swap
   (C++20)
   exchange
   (C++14)
   declval
   (C++11)
   to_underlying
   (C++23)
   forward
   (C++11)
   forward_like
   (C++23)
   move
   (C++11)
   move_if_noexcept
   (C++11)
   as_const
   (C++17)
   Common vocabulary types
   pair
   tuple
   (C++11)
   optional
   (C++17)
   any
   (C++17)
   variant
   (C++17)
   tuple_size
   (C++11)
   tuple_element
   (C++11)
   apply
   (C++17)
   make_from_tuple
   (C++17)
   expected
   (C++23)
   Elementary string conversions
   to_chars
   (C++17)
   from_chars
   (C++17)
   chars_format
   (C++17)
   to_chars_result
   (C++17)
   from_chars_result
   (C++17)

   std::variant
   Member functions
   variant::variant
   variant::~variant
   variant::operator=
   Observers
   variant::index
   variant::valueless_by_exception
   Modifiers
   variant::emplace
   variant::swap
   Visitation
   variant::visit
   (C++26)
   Non-member functions
   visit
   holds_alternative
   get(std::variant)
   get_if
   operator==operator!=operator<operator<=operator>operator>=operator<=>
   (C++20)
   swap(std::variant)
   Helper classes
   monostate
   bad_variant_access
   variant_size
   variant_alternative
   hash<std::variant>
   Helper objects
   variant_npos

   Defined in header <variant>
                                            (1) (since C++17)
   template< std::size_t I, class... Types >

   constexpr std::variant_alternative_t<I, std::variant<Types...>>&
       get( std::variant<Types...>& v );
   template< std::size_t I, class... Types >

   constexpr std::variant_alternative_t<I, std::variant<Types...>>&&
       get( std::variant<Types...>&& v );
   template< std::size_t I, class... Types >

   constexpr const std::variant_alternative_t<I, std::variant<Types...>>&
       get( const std::variant<Types...>& v );
   template< std::size_t I, class... Types >

   constexpr const std::variant_alternative_t<I, std::variant<Types...>>&&
       get( const std::variant<Types...>&& v );
                                            (2) (since C++17)
   template< class T, class... Types >
   constexpr T& get( std::variant<Types...>& v );
   template< class T, class... Types >
   constexpr T&& get( std::variant<Types...>&& v );
   template< class T, class... Types >
   constexpr const T& get( const std::variant<Types...>& v );
   template< class T, class... Types >
   constexpr const T&& get( const std::variant<Types...>&& v );
   1) Index-based value accessor: If v.index() == I, returns a reference
   to the value stored in v. Otherwise, throws std::bad_variant_access.
   The call is ill-formed if I is not a valid index in the variant.
   2) Type-based value accessor: If v holds the alternative T, returns a
   reference to the value stored in v. Otherwise, throws
   std::bad_variant_access. The call is ill-formed if T is not a unique
   element of Types....

Template parameters

   I        - index to look up
   T        - unique type to look up
   Types... - types forming the variant

Parameters

   v - a variant

Return value

   Reference to the value stored in the variant.

Exceptions

   1,2) Throws std::bad_variant_access on errors.

Example

   Run this code
#include <variant>
#include <string>
#include <iostream>

int main()
{
    std::variant<int, float> v{12}, w;
    std::cout << std::get<int>(v) << '\n';
    w = std::get<int>(v);
    w = std::get<0>(v); // same effect as the previous line

//  std::get<double>(v); // error: no double in [int, float]
//  std::get<3>(v);      // error: valid index values are 0 and 1

    try
    {
        w = 42.0f;
        std::cout << std::get<float>(w) << '\n'; // ok, prints 42
        w = 42;
        std::cout << std::get<float>(w) << '\n'; // throws
    }
    catch (std::bad_variant_access const& ex)
    {
        std::cout << ex.what() << ": w contained int, not float\n";
    }
}

   Possible output:
12
42
Unexpected index: w contained int, not float

See also

   get_if
   (C++17)
   obtains a pointer to the value of a pointed-to variant given the index
   or the type (if unique), returns null on error
   (function template)
   get(std::tuple)
   (C++11)
   tuple accesses specified element
   (function template)
   get(std::array)
   (C++11)
   accesses an element of an array
   (function template)
   get(std::pair)
   (C++11)
   accesses an element of a pair
   (function template)
   get(std::ranges::subrange)
   (C++20)
   obtains iterator or sentinel from a std::ranges::subrange
   (function template)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/utility/variant/
   get&oldid=127839"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 2 April 2021, at 04:37.
     * This page has been accessed 383,842 times.
