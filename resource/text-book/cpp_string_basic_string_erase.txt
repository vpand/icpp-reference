std::basic_string<CharT,Traits,Allocator>::erase

   From cppreference.com
   < cpp | string | basic string

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Strings library
   Null-terminated strings
   Byte strings
   Multibyte strings
   Wide strings
   Classes
   basic_string
   basic_string_view
   (C++17)
   char_traits

   std::basic_string
   Member functions
   basic_string::basic_string
   basic_string::~basic_string
   basic_string::operator=
   basic_string::assign
   basic_string::assign_range
   (C++23)
   basic_string::get_allocator
   Element access
   basic_string::at
   basic_string::operator[]
   basic_string::front
   (DR*)
   basic_string::back
   (DR*)
   basic_string::data
   basic_string::c_str
   basic_string::operator
    basic_string_view
   (C++17)
   Iterators
   basic_string::beginbasic_string::cbegin
   (C++11)
   basic_string::endbasic_string::cend
   (C++11)
   basic_string::rbeginbasic_string::crbegin
   (C++11)
   basic_string::rendbasic_string::crend
   (C++11)
   Capacity
   basic_string::empty
   basic_string::sizebasic_string::length
   basic_string::max_size
   basic_string::reserve
   basic_string::capacity
   basic_string::shrink_to_fit
   (DR*)
   Modifiers
   basic_string::clear
   basic_string::insert
   basic_string::insert_range
   (C++23)
   basic_string::erase
   basic_string::push_back
   basic_string::pop_back
   (DR*)
   basic_string::append
   basic_string::append_range
   (C++23)
   basic_string::operator+=
   basic_string::replace
   basic_string::replace_with_range
   (C++23)
   basic_string::copy
   basic_string::resize
   basic_string::resize_and_overwrite
   (C++23)
   basic_string::swap
   Search
   basic_string::find
   basic_string::rfind
   basic_string::find_first_of
   basic_string::find_first_not_of
   basic_string::find_last_of
   basic_string::find_last_not_of
   Operations
   basic_string::compare
   basic_string::starts_with
   (C++20)
   basic_string::ends_with
   (C++20)
   basic_string::contains
   (C++23)
   basic_string::substr
   Constants
   basic_string::npos
   Non-member functions
   operator+
   swap(std::basic_string)
   erase(std::basic_string)erase_if(std::basic_string)
   (C++20)(C++20)
   I/O
   operator<<operator>>
   getline
   Comparison
   operator==operator!=operator<operator>operator<=operator>=operator<=>
   (until C++20)(until C++20)(until C++20)(until C++20)(until
   C++20)(C++20)
   Numeric conversions
   stoistolstoll
   (C++11)(C++11)(C++11)
   stoulstoull
   (C++11)(C++11)
   stofstodstold
   (C++11)(C++11)(C++11)
   to_string
   (C++11)
   to_wstring
   (C++11)
   Literals
   operator""s
   (C++14)
   Helper classes
   hash<std::basic_string>
   (C++11)
   Deduction guides (C++17)

   basic_string& erase( size_type index = 0, size_type count = npos );
   (1) (constexpr since C++20)
   (2)
   iterator erase( iterator position );
   (until C++11)
   iterator erase( const_iterator position );
   (since C++11)
   (constexpr since C++20)
   (3)
   iterator erase( iterator first, iterator last );
   (until C++11)
   iterator erase( const_iterator first, const_iterator last );
   (since C++11)
   (constexpr since C++20)

   Removes specified characters from the string.
   1) Removes std::min(count, size() - index) characters starting at
   index.
   2) Removes the character at position.
   If position is not a dereferenceable iterator on *this, the behavior is
   undefined.
   3) Removes the characters in the range [first, last).
   If first or last is not a valid iterator on *this, or [first, last) is
   not a valid range, the behavior is undefined.

Parameters

   index       - first character to remove
   count       - number of characters to remove
   position    - iterator to the character to remove
   first, last - range of the characters to remove

Return value

   1) *this
   2) Iterator pointing to the character immediately following the
   character erased, or end() if no such character exists.
   3) Iterator pointing to the character last pointed to before the erase,
   or end() if no such character exists.

Exceptions

   1) std::out_of_range if index > size().
   2,3) Throws nothing.

   If an exception is thrown for any reason, this function has no effect
   (strong exception safety guarantee).

Example

   Run this code
#include <algorithm>
#include <iostream>
#include <iterator>
#include <string>

int main()
{
    std::string s = "This Is An Example";
    std::cout << "1) " << s << '\n';

    s.erase(7, 3); // erases " An" using overload (1)
    std::cout << "2) " << s << '\n';

    s.erase(std::find(s.begin(), s.end(), ' ')); // erases first ' '; overload (
2)
    std::cout << "3) " << s << '\n';

    s.erase(s.find(' ')); // trims from ' ' to the end of the string; overload (
1)
    std::cout << "4) " << s << '\n';

    auto it = std::next(s.begin(), s.find('s')); // obtains iterator to the firs
t 's'
    s.erase(it, std::next(it, 2)); // erases "sI"; overload (3)
    std::cout << "5) " << s << '\n';
}

   Output:
1) This Is An Example
2) This Is Example
3) ThisIs Example
4) ThisIs
5) This

Defect reports

   The following behavior-changing defect reports were applied
   retroactively to previously published C++ standards.
   DR Applied to Behavior as published Correct behavior
   LWG 27 C++98 overload (3) did not erase the character last pointed to,
   but it returned
   the iterator pointing to the character immediately following that
   character returns an iterator
   pointing to that character
   LWG 428 C++98 overload (2) explicitly required position to be valid,
   but
   SequenceContainer requires it to be dereferenceable (stricter) removed
   the
   explicit requirement
   LWG 847 C++98 there was no exception safety guarantee added strong
   exception
   safety guarantee

See also

   clear
   clears the contents
   (public member function)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/string/basic_str
   ing/erase&oldid=170792"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 12 April 2024, at 03:06.
     * This page has been accessed 451,804 times.
