std::random_shuffle, std::shuffle

   From cppreference.com
   < cpp | algorithm

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Algorithm library
   Constrained algorithms and algorithms on ranges (C++20)
   Constrained algorithms, e.g. ranges::copy, ranges::sort, ...
   Execution policies (C++17)
   is_execution_policy
   (C++17)
   execution::seqexecution::parexecution::par_unseqexecution::unseq
   (C++17)    (C++17)(C++17)(C++20)
   execution::sequenced_policyexecution::parallel_policyexecution::paralle
   l_unsequenced_policyexecution::parallel_unsequenced
   (C++17)(C++17)(C++17)(C++20)
   Non-modifying sequence operations
   Batch operations
   for_each
   for_each_n
   (C++17)
   Search operations
   all_ofany_ofnone_of
   (C++11)                (C++11)(C++11)
   countcount_if
   mismatch
   equal
   findfind_iffind_if_not
   (C++11)
   find_end
   find_first_of
   adjacent_find
   search
   search_n
   Modifying sequence operations
   Copy operations
   copycopy_if
   (C++11)
   copy_backward
   copy_n
   (C++11)
   move
   (C++11)
   move_backward
   (C++11)
   Swap operations
   swap
   iter_swap
   swap_ranges
   Transformation operations
   replacereplace_if
   transform
   replace_copyreplace_copy_if
   Generation operations
   fill
   fill_n
   generate
   generate_n
   Removing operations
   removeremove_if
   unique
   remove_copyremove_copy_if
   unique_copy
   Order-changing operations
   reverse
   reverse_copy
   rotate
   rotate_copy
   random_shuffleshuffle
   (until C++17)(C++11)
   shift_leftshift_right
   (C++20)(C++20)
   Sampling operations
   sample
   (C++17)
   Sorting and related operations
   Partitioning operations
   partition
   partition_copy
   (C++11)
   stable_partition
   is_partitioned
   (C++11)
   partition_point
   (C++11)
   Sorting operations
   sort
   stable_sort
   partial_sort
   partial_sort_copy
   is_sorted
   (C++11)
   is_sorted_until
   (C++11)
   nth_element
   Binary search operations
   (on partitioned ranges)
   lower_bound
   upper_bound
   equal_range
   binary_search
   Set operations (on sorted ranges)
   includes
   set_union
   set_intersection
   set_difference
   set_symmetric_difference
   Merge operations (on sorted ranges)
   merge
   inplace_merge
   Heap operations
   push_heap
   pop_heap
   make_heap
   sort_heap
   is_heap
   (C++11)
   is_heap_until
   (C++11)
   Minimum/maximum operations
   max
   min
   minmax
   (C++11)
   clamp
   (C++17)
   max_element
   min_element
   minmax_element
   (C++11)
   Lexicographical comparison operations
   lexicographical_compare
   lexicographical_compare_three_way
   (C++20)
   Permutation operations
   next_permutation
   prev_permutation
   is_permutation
   (C++11)
   C library
   qsort
   bsearch
   Numeric operations
   iota
   (C++11)
   inner_product
   adjacent_difference

   accumulate
   reduce
   (C++17)
   transform_reduce
   (C++17)
   partial_sum
   inclusive_scan
   (C++17)
   exclusive_scan
   (C++17)
   transform_inclusive_scan
   (C++17)
   transform_exclusive_scan
   (C++17)
   Operations on uninitialized memory
   uninitialized_copy
   uninitialized_move
   (C++17)
   uninitialized_fill
   uninitialized_copy_n
   (C++11)
   uninitialized_move_n
   (C++17)
   uninitialized_fill_n
   destroy
   (C++17)
   destroy_n
   (C++17)
   destroy_at
   (C++17)
   construct_at
   (C++20)
   uninitialized_default_construct
   (C++17)
   uninitialized_value_construct
   (C++17)
   uninitialized_default_construct_n
   (C++17)
   uninitialized_value_construct_n
   (C++17)

   Defined in header <algorithm>
   template< class RandomIt >
   void random_shuffle( RandomIt first, RandomIt last );
   (1) (deprecated in C++14)
   (removed in C++17)
   (2)
   template< class RandomIt, class RandomFunc >
   void random_shuffle( RandomIt first, RandomIt last, RandomFunc& r );
   (until C++11)
   template< class RandomIt, class RandomFunc >
   void random_shuffle( RandomIt first, RandomIt last, RandomFunc&& r );
   (since C++11)
   (deprecated in C++14)
   (removed in C++17)
   template< class RandomIt, class URBG >
   void shuffle( RandomIt first, RandomIt last, URBG&& g );
   (3) (since C++11)

   Reorders the elements in the given range [first, last) such that each
   possible permutation of those elements has equal probability of
   appearance.
   1) The source of randomness is implementation-defined, but the function
   std::rand is often used.
   2) The source of randomness is the function object r.
   If any of the following conditions is satisfied, the behavior is
   undefined:
     * The return type of r is not convertible to
       std::iterator_traits<RandomIt>::difference_type.
     * Given a positive value n of type
       std::iterator_traits<RandomIt>::difference_type, the result of r(n)
       is not a randomly chosen value in the interval [0, n).

   3) The source of randomness is the object g.
   Given the type T as std::remove_reference_t<URBG>, if any of the
   following conditions is satisfied, the behavior is undefined:
     * T is not a UniformRandomBitGenerator.

     * T::result_type is not convertible to
       std::iterator_traits<RandomIt>::difference_type.

   (until C++20)

   If the type of *first is not Swappable(until C++11)RandomIt is not
   ValueSwappable(since C++11), the behavior is undefined.

Parameters

   first, last - the range of elements to shuffle randomly
   r           - function object returning a randomly chosen value
   g           - generator object returning a randomly chosen value
   Type requirements
   -
   RandomIt must meet the requirements of LegacyRandomAccessIterator.

Complexity

   Exactly std::distance(first, last) - 1 swaps.

Possible implementation

   See also the implementations in libstdc++ and libc++.
              random_shuffle (1)
template<class RandomIt>
void random_shuffle(RandomIt first, RandomIt last)
{
    typedef typename std::iterator_traits<RandomIt>::difference_type diff_t;

    for (diff_t i = last - first - 1; i > 0; --i)
    {
        using std::swap;
        swap(first[i], first[std::rand() % (i + 1)]);
        // rand() % (i + 1) is not actually correct, because the generated numbe
r is
        // not uniformly distributed for most values of i. The correct code woul
d be
        // a variation of the C++11 std::uniform_int_distribution implementation
.
    }
}

              random_shuffle (2)
template<class RandomIt, class RandomFunc>
void random_shuffle(RandomIt first, RandomIt last, RandomFunc&& r)
{
    typedef typename std::iterator_traits<RandomIt>::difference_type diff_t;

    for (diff_t i = last - first - 1; i > 0; --i)
    {
        using std::swap;
        swap(first[i], first[r(i + 1)]);
    }
}

                  shuffle (3)
template<class RandomIt, class URBG>
void shuffle(RandomIt first, RandomIt last, URBG&& g)
{
    typedef typename std::iterator_traits<RandomIt>::difference_type diff_t;
    typedef std::uniform_int_distribution<diff_t> distr_t;
    typedef typename distr_t::param_type param_t;

    distr_t D;
    for (diff_t i = last - first - 1; i > 0; --i)
    {
        using std::swap;
        swap(first[i], first[D(g, param_t(0, i))]);
    }
}

Notes

   Note that the implementation is not dictated by the standard, so even
   if you use exactly the same RandomFunc or URBG (Uniform Random Number
   Generator) you may get different results with different standard
   library implementations.

   The reason for removing std::random_shuffle in C++17 is that the
   iterator-only version usually depends on std::rand, which is now also
   discussed for deprecation. (std::rand should be replaced with the
   classes of the <random> header, as std::rand is considered harmful.) In
   addition, the iterator-only std::random_shuffle version usually depends
   on a global state. The std::shuffle's shuffle algorithm is the
   preferred replacement, as it uses a URBG as its 3rd parameter.

Example

   Randomly shuffles the sequence [1, 10] of integers:
   Run this code
#include <algorithm>
#include <iostream>
#include <iterator>
#include <random>
#include <vector>

int main()
{
    std::vector<int> v{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};

    std::random_device rd;
    std::mt19937 g(rd());

    std::shuffle(v.begin(), v.end(), g);

    std::copy(v.begin(), v.end(), std::ostream_iterator<int>(std::cout, " "));
    std::cout << '\n';
}

   Possible output:
8 6 10 4 2 3 7 1 9 5

Defect reports

   The following behavior-changing defect reports were applied
   retroactively to previously published C++ standards.
   DR Applied to Behavior as published Correct behavior
   LWG 395 C++98 the source of randomness of overload (1) was not
   specified, and
   std::rand could not be the source due to the C library requirement it
   is implementation-defined,
   and using std::rand is allowed
   LWG 552
   (N2423) C++98 r was not required to be the source
   of randomness of overload (2)^[1] required
    1. ^| Overload (3) has the same defect, but that part of the
       resolution is not applicable to C++98.

See also

   next_permutation
   generates the next greater lexicographic permutation of a range of
   elements
   (function template)
   prev_permutation
   generates the next smaller lexicographic permutation of a range of
   elements
   (function template)
   ranges::shuffle
   (C++20)
   randomly re-orders elements in a range
   (niebloid)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/algorithm/random
   _shuffle&oldid=170519"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 28 March 2024, at 00:49.
     * This page has been accessed 593,814 times.
