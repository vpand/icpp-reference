std::filesystem::is_empty

   From cppreference.com
   < cpp | filesystem

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Filesystem library
   Classes
   filesystem::path
   filesystem::filesystem_error
   filesystem::directory_entry
   filesystem::directory_iterator
   filesystem::recursive_directory_iterator

   filesystem::file_status
   filesystem::space_info
   filesystem::file_type
   filesystem::perms
   filesystem::perm_options
   filesystem::copy_options
   filesystem::directory_options
   filesystem::file_time_type
   Functions
   filesystem::absolute
   filesystem::canonicalfilesystem::weakly_canonical
   filesystem::relativefilesystem::proximate
   filesystem::copy
   filesystem::copy_file
   filesystem::copy_symlink
   filesystem::create_directory
   filesystem::create_directories
   filesystem::create_hard_link
   filesystem::create_symlink
   filesystem::create_directory_symlink
   filesystem::current_path
   filesystem::exists
   filesystem::equivalent
   filesystem::file_size
   filesystem::hard_link_count
   filesystem::last_write_time
   filesystem::permissions
   filesystem::read_symlink
   filesystem::remove
   filesystem::remove_all
   filesystem::rename
   filesystem::resize_file
   filesystem::space
   filesystem::status
   filesystem::symlink_status
   filesystem::temp_directory_path
   File types
   filesystem::is_block_file
   filesystem::is_character_file
   filesystem::is_directory
   filesystem::is_empty
   filesystem::status_known
   filesystem::is_fifo
   filesystem::is_other
   filesystem::is_regular_file
   filesystem::is_socket
   filesystem::is_symlink

   Defined in header <filesystem>
   bool is_empty( const std::filesystem::path& p );
   (1) (since C++17)
   bool is_empty( const std::filesystem::path& p, std::error_code& ec );
   (2) (since C++17)

   Checks whether the given path refers to an empty file or directory.

Parameters

   p  - path to examine
   ec - error code to modify in case of error

Return value

   true if the path indicated by p refers to an empty file or directory,
   false otherwise. The non-throwing overload returns false if an error
   occurs.

Exceptions

   Any overload not marked noexcept may throw std::bad_alloc if memory
   allocation fails.
   1) Throws std::filesystem::filesystem_error on underlying OS API
   errors, constructed with p as the first path argument and the OS error
   code as the error code argument.
   2) Sets a std::error_code& parameter to the OS API error code if an OS
   API call fails, and executes ec.clear() if no errors occur.

Example

   Run this code
#include <cstdio>
#include <filesystem>
#include <fstream>
#include <iostream>

int main()
{
    namespace fs = std::filesystem;

    const fs::path tmp_dir{fs::temp_directory_path()};
    std::cout << std::boolalpha
              << "Temp dir: " << tmp_dir << '\n'
              << "is_empty(): " << fs::is_empty(tmp_dir) << '\n';

    const fs::path tmp_name{tmp_dir / std::tmpnam(nullptr)};
    std::cout << "Temp file: " << tmp_name << '\n';

    std::ofstream file{tmp_name.string()};
    std::cout << "is_empty(): " << fs::is_empty(tmp_name) << '\n';
    file << "cppreference.com";
    file.flush();
    std::cout << "is_empty(): " << fs::is_empty(tmp_name) << '\n'
              << "file_size(): " << fs::file_size(tmp_name) << '\n';
    file.close();
    fs::remove(tmp_name);
}

   Possible output:
Temp dir: "/tmp"
is_empty(): false
Temp file: "/tmp/fileCqd9DM"
is_empty(): true
is_empty(): false
file_size(): 16

Defect reports

   The following behavior-changing defect reports were applied
   retroactively to previously published C++ standards.
   DR Applied to Behavior as published Correct behavior
   LWG 3013 C++17 error_code overload marked noexcept but can allocate
   memory noexcept removed

See also

   statussymlink_status
   (C++17)(C++17)
   determines file attributes
   determines file attributes, checking the symlink target
   (function)
   exists
   (C++17)
   checks whether path refers to existing file system object
   (function)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/filesystem/is_em
   pty&oldid=158209"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 8 September 2023, at 08:47.
     * This page has been accessed 54,845 times.
