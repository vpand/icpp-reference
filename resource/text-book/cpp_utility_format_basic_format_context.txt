std::basic_format_context

   From cppreference.com
   < cpp | utility | format

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Utilities library
   Language support
   Type support (basic types, RTTI)
   Library feature-test macros (C++20)
   Dynamic memory management
   Program utilities
   Coroutine support (C++20)
   Variadic functions
   is_constant_evaluated
   (C++20)
   is_within_lifetime
   (C++26)
   initializer_list
   (C++11)
   source_location
   (C++20)
   Debugging support
   is_debugger_present
   (C++26)
   breakpoint_if_debugging
   (C++26)
   breakpoint
   (C++26)
   Three-way comparison
   three_way_comparablethree_way_comparable_with
   (C++20)(C++20)
   strong_ordering
   (C++20)
   weak_ordering
   (C++20)
   partial_ordering
   (C++20)
   common_comparison_category
   (C++20)
   compare_three_way_result
   (C++20)
   compare_three_way
   (C++20)
   strong_order
   (C++20)
   weak_order
   (C++20)
   partial_order
   (C++20)
   compare_strong_order_fallback
   (C++20)
   compare_weak_order_fallback
   (C++20)
   compare_partial_order_fallback
   (C++20)
   is_eqis_ltis_lteq
   (C++20)(C++20)(C++20)
   is_neqis_gtis_gteq
   (C++20)(C++20)(C++20)
   General utilities
   Date and time
   Function objects
   Formatting library (C++20)
   bitset
   hash
   (C++11)
   Relational operators (deprecated in C++20)
   rel_ops::operator!=rel_ops::operator>

   rel_ops::operator<=rel_ops::operator>=
   Integer comparison functions
   cmp_equalcmp_lesscmp_less_than
   (C++20)(C++20)(C++20)
   cmp_not_equalcmp_greatercmp_greater_than
   (C++20)(C++20)(C++20)
   in_range
   (C++20)
   Swap and type operations
   swap
   ranges::swap
   (C++20)
   exchange
   (C++14)
   declval
   (C++11)
   to_underlying
   (C++23)
   forward
   (C++11)
   forward_like
   (C++23)
   move
   (C++11)
   move_if_noexcept
   (C++11)
   as_const
   (C++17)
   Common vocabulary types
   pair
   tuple
   (C++11)
   optional
   (C++17)
   any
   (C++17)
   variant
   (C++17)
   tuple_size
   (C++11)
   tuple_element
   (C++11)
   apply
   (C++17)
   make_from_tuple
   (C++17)
   expected
   (C++23)
   Elementary string conversions
   to_chars
   (C++17)
   from_chars
   (C++17)
   chars_format
   (C++17)
   to_chars_result
   (C++17)
   from_chars_result
   (C++17)

   Formatting library
   Standard format specification
   Formatting functions
   format
   (C++20)
   format_to
   (C++20)
   format_to_n
   (C++20)
   formatted_size
   (C++20)
   vformat
   (C++20)
   vformat_to
   (C++20)
   Format strings
   basic_format_stringformat_stringwformat_string
   (C++20)(C++20)(C++20)
   runtime_format
   (C++26)
   Formatting concepts
   formattable
   (C++23)
   Formatter
   formatter
   (C++20)
   formatter<pair-or-tuple>
   (C++23)
   formatter<range>
   (C++23)
   range_formatter
   (C++23)
   enable_nonlocking_formatter_optimization
   (C++23)
   basic_format_parse_contextformat_parse_contextwformat_parse_context
   (C++20)(C++20)(C++20)
   basic_format_contextformat_contextwformat_context
   (C++20)(C++20)(C++20)
   range_format
   (C++23)
   format_kind
   (C++23)
   Formatting arguments
   basic_format_arg
   (C++20)
   basic_format_arg::handle
   (C++20)
   basic_format_argsformat_argswformat_args
   (C++20)(C++20)(C++20)
   visit_format_arg
   (C++20) (deprecated in C++26)
   make_format_argsmake_wformat_args
   (C++20)(C++20)
   Format error
   format_error
   (C++20)

   Defined in header <format>
   template< class OutputIt, class CharT >
   class basic_format_context;
   (1) (since C++20)
   using format_context = basic_format_context</* unspecified */, char>;
   (2) (since C++20)
   using wformat_context = basic_format_context</* unspecified */,
   wchar_t>;
   (3) (since C++20)

   Provides access to formatting state consisting of the formatting
   arguments and the output iterator.
   2) The unspecified template argument is an output iterator that appends
   to std::string, such as std::back_insert_iterator<std::string>.
   Implementations typically use an iterator to type-erased buffer type
   that supports appending to any contiguous and resizable container.
   3) The unspecified template argument is an output iterator that appends
   to std::wstring.

   The behavior is undefined if OutputIt does not model
   std::output_iterator<const CharT&>.

   A program that declares an explicit or partial specialization of
   std::basic_format_context is ill-formed, no diagnostic required.

Member types

   Type      Definition
   iterator  OutputIt
   char_type CharT

Member alias templates

   Type              Definition
   formatter_type<T> std::formatter<T, CharT>

Member functions

   arg
   returns the argument at the given index
   (public member function)
   locale
   returns the locale used for locale-specific formatting
   (public member function)
   out
   returns the iterator to output buffer
   (public member function)
   advance_to
   advances the output iterator to the given position
   (public member function)

std::basic_format_context::arg

   std::basic_format_arg<basic_format_context> arg( std::size_t id )
   const;

   Returns a std::basic_format_arg holding the id-th argument in args,
   where args is the parameter pack or std::basic_format_args object
   passed to the formatting function.

   If id is not less than the number of formatting arguments, returns a
   default-constructed std::basic_format_arg (holding a std::monostate
   object).

std::basic_format_context::locale

   std::locale locale();

   Returns the locale passed to the formatting function, or a
   default-constructed std::locale if the formatting function does not
   take a locale.

std::basic_format_context::out

   iterator out();

   Returns the iterator to the output buffer. The result is
   move-constructed from the stored iterator.

std::basic_format_context::advance_to

   void advance_to( iterator it );

   Move assigns it to the stored output iterator. After a call to
   advance_to, the next call to out() will return an iterator with the
   value that it had before the assignment.

Example

   This section is incomplete
   Reason: no example

Defect reports

   The following behavior-changing defect reports were applied
   retroactively to previously published C++ standards.
   DR Applied to Behavior as published Correct behavior
   LWG 3567 C++20 basic_format_context does not work move-only iterator
   types made to move iterators
   LWG 3975 C++20 user specialization of basic_format_context was allowed
   disallowed
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/utility/format/b
   asic_format_context&oldid=170784"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 11 April 2024, at 09:55.
     * This page has been accessed 23,324 times.
