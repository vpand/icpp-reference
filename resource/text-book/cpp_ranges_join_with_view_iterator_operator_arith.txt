std::ranges::join_with_view<V,Pattern>::iterator<Const>::operator++,--

   From cppreference.com
   < cpp | ranges | join with view | iterator

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Ranges library
   Range access
   begin
   cbegin
   end
   cend
   rbegin
   crbegin
   rend
   crend
   size
   ssize
   data
   cdata
   empty
   Range conversions
   std::from_range_t
   std::from_range
   (C++23)(C++23)
   to
   (C++23)
   Range primitives
   range_size_trange_difference_trange_value_trange_reference_t
   iterator_tconst_iterator_tsentinel_tconst_sentinel_t
   (C++23)(C++23)
   range_const_reference_trange_rvalue_reference_trange_common_reference_t
   (C++23)
   elements_of
   (C++23)
   Dangling iterator handling
   dangling
   borrowed_iterator_t
   borrowed_subrange_t
   Range concepts
   range
   borrowed_range
   sized_range
   constant_range
   (C++23)
   common_range
   view
   viewable_range
   input_range
   output_range
   forward_range
   bidirectional_range
   random_access_range
   contiguous_range
   Views
   view_interface
   subrange
   Range factories
   empty_viewviews::empty
   single_viewviews::single
   iota_viewviews::iota
   repeat_viewviews::repeat
   (C++23)(C++23)
   basic_istream_viewviews::istream
   Range adaptors
   views::all_tviews::all
   ref_view
   owning_view
   as_rvalue_viewviews::as_rvalue
   (C++23)(C++23)
   filter_viewviews::filter
   transform_viewviews::transform
   take_viewviews::take
   take_while_viewviews::take_while
   concat_viewviews::concat
   (C++26)(C++26)
   drop_viewviews::drop
   drop_while_viewviews::drop_while
   join_viewviews::join
   join_with_viewviews::join_with
   (C++23)(C++23)
   lazy_split_viewviews::lazy_split
   split_viewviews::split
   views::counted
   common_viewviews::common
   reverse_viewviews::reverse
   as_const_viewviews::as_const
   (C++23)(C++23)
   elements_viewviews::elements
   keys_viewviews::keys
   values_viewviews::values
   enumerate_viewviews::enumerate
   (C++23)(C++23)
   zip_viewviews::zip
   (C++23)(C++23)
   zip_transform_viewviews::zip_transform
   (C++23)(C++23)
   adjacent_viewviews::adjacent
   (C++23)(C++23)
   views::pairwise
   (C++23)
   adjacent_transform_viewviews::adjacent_transform
   (C++23)(C++23)
   views::pairwise_transform
   (C++23)
   chunk_viewviews::chunk
   (C++23)(C++23)
   slide_viewviews::slide
   (C++23)(C++23)
   chunk_by_viewviews::chunk_by
   (C++23)(C++23)
   stride_viewviews::stride
   (C++23)(C++23)
   cartesian_product_viewviews::cartesian_product
   (C++23)(C++23)
   Range generators
   std::generator
   (C++23)
   Range adaptor objects
   Range adaptor closure objects
   range_adaptor_closure
   (C++23)
   Helper items
   copyable-box
   movable-box
   (until C++23)(C++23)
   simple-view
   non-propagating-cache

   std::ranges::join_with_view
   Member functions
   join_with_view::join_with_view
   join_with_view::base
   join_with_view::begin
   join_with_view::end
   Deduction guides
   Iterator
   join_with_view::iterator::iterator
   join_with_view::iterator::operator*
   join_with_view::iterator::operator++
   join_with_view::iterator::operator++(int)
   join_with_view::iterator::operator--
   join_with_view::iterator::operator--(int)
   operator==(join_with_view::iterator)
   iter_move(join_with_view::iterator)
   iter_swap(join_with_view::iterator)
   Sentinel
   join_with_view::sentinel::sentinel
   operator==(join_with_view::sentinel)

   constexpr /*iterator*/& operator++();
   (1)                                     (since C++23)
   constexpr void operator++( int );
   (2)                                     (since C++23)
   constexpr /*iterator*/ operator++( int )

     requires std::is_reference_v<InnerBase> &&
              ranges::forward_range<Base> &&
              ranges::forward_range<InnerBase>;
   (3)                                     (since C++23)
   constexpr /*iterator*/& operator--()

     requires std::is_reference_v<InnerBase> &&
              ranges::bidirectional_range<Base> &&
              ranges::bidirectional_range<InnerBase> &&
              ranges::common_range<InnerBase> &&
              ranges::bidirectional_range<PatternBase> &&
              ranges::common_range<PatternBase>;
   (4)                                     (since C++23)
   constexpr /*iterator*/ operator--( int )

     requires std::is_reference_v<InnerBase> &&
              ranges::bidirectional_range<Base> &&
              ranges::bidirectional_range<InnerBase> &&
              ranges::common_range<InnerBase> &&
              ranges::bidirectional_range<PatternBase> &&
              ranges::common_range<PatternBase>;
   (5)                                     (since C++23)

   Increments or decrements the iterator.
   1) Increments the stored inner iterator. (The inner iterator may point
   to either InnerBase or PatternBase.)
     * If the incremented inner iterator reaches the end of the pattern
       range, it is destroyed, and an iterator to the beginning of the
       next inner range is constructed.
     * If the incremented inner iterator reaches the end of the inner
       range, the outer iterator is incremented, and if the outer iterator
       is not the end iterator, the inner iterator is destroyed and an
       iterator to the beginning of the pattern range is constructed.
     * The above steps may be repeated (e.g. if the pattern is empty),
       until either the inner range is not empty, or the outer iterator
       reaches the end.

   2) Equivalent to ++*this;
   3) Equivalent to auto tmp = *this; ++*this; return tmp;
   4) If the outer iterator is the end iterator, it is decremented. Then:
     * If the stored inner iterator refers to the beginning of the inner
       range, it is destroyed, and an iterator to the end of the pattern
       range is constructed.
     * If the stored inner iterator refers to the beginning of the pattern
       range, it is destroyed, the outer iterator is decremented, and an
       iterator to end of the inner range is constructed.
     * The above steps may be repeated (e.g. if the pattern is empty),
       until the inner range is not empty.

   Finally, the inner iterator is decremented.
   5) Equivalent to auto tmp = *this; --*this; return tmp;

   If InnerBase is not a reference, the inner range is stored in the
   parent join_with_view for iteration. The inner range need not be
   movable.

   If InnerBase is a reference, and the outer iterator reaches the end,
   the inner iterator points to the beginning of the pattern range.

Parameters

   (none)

Return value

   1,4) *this
   3,5) A copy of *this that was made before the change.
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/ranges/join_with
   _view/iterator/operator_arith&oldid=150787"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 20 April 2023, at 08:30.
     * This page has been accessed 3,393 times.
