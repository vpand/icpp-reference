std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::insert_or_assign

   From cppreference.com
   < cpp | container | unordered map


   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Containers library
   Sequence
   array
   (C++11)
   vector
   vector<bool>
   deque
   forward_list
   (C++11)
   list
   Associative
   set
   multiset
   map
   multimap
   Unordered associative
   unordered_set
   (C++11)
   unordered_multiset
   (C++11)
   unordered_map
   (C++11)
   unordered_multimap
   (C++11)
   Adaptors
   stack
   queue
   priority_queue
   flat_set
   (C++23)
   flat_multiset
   (C++23)
   flat_map
   (C++23)
   flat_multimap
   (C++23)
   Views
   span
   (C++20)
   mdspan
   (C++23)
   Iterator invalidation
   Member function table
   Non-member function table

   std::unordered_map
   Member types
   Member functions
   unordered_map::unordered_map
   unordered_map::~unordered_map
   unordered_map::operator=
   unordered_map::get_allocator
   Iterators
   unordered_map::beginunordered_map::cbegin
   unordered_map::endunordered_map::cend
   Capacity
   unordered_map::size
   unordered_map::max_size
   unordered_map::empty
   Modifiers
   unordered_map::clear
   unordered_map::erase
   unordered_map::swap
   unordered_map::extract
   (C++17)
   unordered_map::merge
   (C++17)
   unordered_map::insert
   unordered_map::insert_range
   (C++23)
   unordered_map::insert_or_assign
   (C++17)
   unordered_map::emplace
   unordered_map::emplace_hint
   unordered_map::try_emplace
   (C++17)
   Lookup
   unordered_map::at
   unordered_map::operator[]
   unordered_map::count
   unordered_map::find
   unordered_map::contains
   (C++20)
   unordered_map::equal_range
   Bucket interface
   unordered_map::begin(size_type)unordered_map::cbegin(size_type)
   unordered_map::end(size_type)unordered_map::cend(size_type)
   unordered_map::bucket_count
   unordered_map::max_bucket_count
   unordered_map::bucket_size
   unordered_map::bucket
   Hash policy
   unordered_map::load_factor
   unordered_map::max_load_factor

   unordered_map::rehash
   unordered_map::reserve
   Observers
   unordered_map::hash_function
   unordered_map::key_eq
   Non-member functions
   operator==operator!=
   (C++11)(C++11)(until C++20)
   std::swap(std::unordered_map)
   (C++11)
   erase_if(std::unordered_map)
   (C++20)
   Deduction guides(C++17)

   template< class M >
   std::pair<iterator, bool> insert_or_assign( const Key& k, M&& obj );
   (1)                         (since C++17)
   template< class M >
   std::pair<iterator, bool> insert_or_assign( Key&& k, M&& obj );
   (2)                         (since C++17)
   template< class K, class M >
   std::pair<iterator, bool> insert_or_assign( K&& k, M&& obj );
   (3)                         (since C++26)
   template< class M >
   iterator insert_or_assign( const_iterator hint, const Key& k, M&& obj
   );
   (4)                         (since C++17)
   template< class M >
   iterator insert_or_assign( const_iterator hint, Key&& k, M&& obj );
   (5)                         (since C++17)
   template< class K, class M >
   iterator insert_or_assign( const_iterator hint, K&& k, M&& obj );
   (6)                         (since C++26)
   1,4) If a key equivalent to k already exists in the container, assigns
   std::forward<M>(obj) to the mapped_type corresponding to the key k. If
   the key does not exist, inserts the new value as if by insert,
   constructing it from value_type(k, std::forward<M>(obj)).
   2,5) Same as (1,4), except the mapped value is constructed from
   value_type(std::move(k), std::forward<M>(obj)).
   3,6) If a key equivalent to k already exists in the container, assigns
   std::forward<M>(obj) to the mapped_type corresponding to the key k. If
   the key does not exist, constructs an object u of value_type with
   std::forward<K>(k), std::forward<M>(obj)), then inserts u into *this.
   If hash_function()(u.first) != hash_function()(k) || contains(u.first)
   is true, the behavior is undefined. The value_type must be
   EmplaceConstructible into unordered_map from std::forward<K>(k),
   std::forward<M>(obj). This overload participates in overload resolution
   only if Hash::is_transparent and KeyEqual::is_transparent are valid and
   each denotes a type. This assumes that such Hash is callable with both
   K and Key type, and that the KeyEqual is transparent, which, together,
   allows calling this function without constructing an instance of Key.

   The behavior is undefined(until C++20)The program is ill-formed(since
   C++20) if std::is_assignable_v<mapped_type&, M&&> is false.

   If after the operation the new number of elements is greater than old
   max_load_factor() * bucket_count() a rehashing takes place.
   If rehashing occurs (due to the insertion), all iterators are
   invalidated. Otherwise (no rehashing), iterators are not invalidated.

Parameters

   k - the key used both to look up and to insert if not found
   hint - iterator to the position before which the new element will be
   inserted
   obj - the value to insert or assign

Return value

   1-3) The bool component is true if the insertion took place and false
   if the assignment took place. The iterator component is pointing at the
   element that was inserted or updated.
   4-6) Iterator pointing at the element that was inserted or updated.

Complexity

   1-3) Same as for emplace.
   4-6) Same as for emplace_hint.

Notes

   insert_or_assign returns more information than operator[] and does not
   require default-constructibility of the mapped type.
                Feature-test macro                Value    Std   Feature
   __cpp_lib_unordered_map_try_emplace           201411L (C++17)
   std::unordered_map::try_emplace,
   std::unordered_map::insert_or_assign
   __cpp_lib_associative_heterogeneous_insertion 202311L (C++26)
   Heterogeneous overloads for the remaining member functions in ordered
   and unordered associative containers. Overloads (3) and (6).

Example

   Run this code
#include <iostream>
#include <string>
#include <unordered_map>

void print_node(const auto& node)
{
    std::cout << '[' << node.first << "] = " << node.second << '\n';
}

void print_result(auto const& pair)
{
    std::cout << (pair.second ? "inserted: " : "assigned: ");
    print_node(*pair.first);
}

int main()
{
    std::unordered_map<std::string, std::string> myMap;

    print_result(myMap.insert_or_assign("a", "apple"));
    print_result(myMap.insert_or_assign("b", "banana"));
    print_result(myMap.insert_or_assign("c", "cherry"));
    print_result(myMap.insert_or_assign("c", "clementine"));

    for (const auto& node : myMap)
        print_node(node);
}

   Possible output:
inserted: [a] = apple
inserted: [b] = banana
inserted: [c] = cherry
assigned: [c] = clementine
[c] = clementine
[a] = apple
[b] = banana

See also

   operator[]
   access or insert specified element
   (public member function)
   at
   access specified element with bounds checking
   (public member function)
   insert
   inserts elements or nodes(since C++17)
   (public member function)
   emplace
   constructs element in-place
   (public member function)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/container/unorde
   red_map/insert_or_assign&oldid=135903"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 29 November 2021, at 14:10.
     * This page has been accessed 152,196 times.
