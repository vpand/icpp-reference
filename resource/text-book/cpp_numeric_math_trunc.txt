std::trunc, std::truncf, std::truncl

   From cppreference.com
   < cpp | numeric | math

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Numerics library
   Common mathematical functions
   Mathematical special functions (C++17)
   Mathematical constants (C++20)
   Basic linear algebra algorithms (C++26)
   Floating-point environment (C++11)
   Complex numbers
   Numeric arrays
   Pseudo-random number generation
   Factor operations
   gcd
   (C++17)
   lcm
   (C++17)
   Interpolations
   midpoint
   (C++20)
   lerp
   (C++20)
   Saturation arithmetic
   add_sat
   (C++26)
   sub_sat
   (C++26)
   saturate_cast
   (C++26)
   mul_sat
   (C++26)
   div_sat
   (C++26)
   Generic numeric operations
   iota
   (C++11)
   ranges::iota
   (C++23)
   accumulate
   inner_product
   adjacent_difference
   partial_sum
   reduce
   (C++17)
   transform_reduce
   (C++17)
   inclusive_scan
   (C++17)
   exclusive_scan
   (C++17)
   transform_inclusive_scan
   (C++17)
   transform_exclusive_scan
   (C++17)
   Bit operations
   has_single_bit
   (C++20)
   bit_cast
   (C++20)
   bit_ceil
   (C++20)
   bit_floor
   (C++20)
   bit_width
   (C++20)
   rotl
   (C++20)
   rotr
   (C++20)
   popcount
   (C++20)
   countl_zero
   (C++20)
   countl_one
   (C++20)
   countr_zero
   (C++20)
   countr_one
   (C++20)
   byteswap
   (C++23)
   endian
   (C++20)

   Common mathematical functions
   Functions
   Basic operations
   abs(int)labsllabsimaxabs
   (C++11)
   abs(float)fabs
   divldivlldivimaxdiv
   (C++11)
   fmod
   remainder
   (C++11)
   remquo
   (C++11)
   fma
   (C++11)
   fmax
   (C++11)
   fmin
   (C++11)
   fdim
   (C++11)
   nannanfnanl
   (C++11)(C++11)(C++11)
   Exponential functions
   exp
   exp2
   (C++11)
   expm1
   (C++11)
   log
   log10
   log1p
   (C++11)
   log2
   (C++11)
   Power functions
   sqrt
   cbrt
   (C++11)
   hypot
   (C++11)
   pow
   Trigonometric and hyperbolic functions
   sin
   cos
   tan
   asin
   acos
   atan
   atan2
   sinh
   cosh
   tanh
   asinh
   (C++11)
   acosh
   (C++11)
   atanh
   (C++11)
   Error and gamma functions
   erf
   (C++11)
   erfc
   (C++11)
   lgamma
   (C++11)
   tgamma
   (C++11)
   Nearest integer floating point operations
   ceil
   floor
   roundlroundllround
   (C++11)(C++11)(C++11)
   trunc
   (C++11)
   nearbyint
   (C++11)
   rintlrintllrint
   (C++11)(C++11)(C++11)
   Floating point manipulation functions
   ldexp
   scalbnscalbln
   (C++11)(C++11)
   ilogb
   (C++11)
   logb
   (C++11)
   frexp
   modf
   nextafternexttoward
   (C++11)(C++11)
   copysign
   (C++11)
   Classification/Comparison
   fpclassify
   (C++11)
   isfinite
   (C++11)
   isinf
   (C++11)
   isnan
   (C++11)
   isnormal
   (C++11)
   signbit
   (C++11)
   isgreater
   (C++11)
   isgreaterequal
   (C++11)
   isless
   (C++11)
   islessequal
   (C++11)
   islessgreater
   (C++11)
   isunordered
   (C++11)
   Macro constants
   HUGE_VALFHUGE_VALHUGE_VALL
   (C++11)(C++11)
   INFINITY
   (C++11)
   NAN
   (C++11)
   math_errhandlingMATH_ERRNOMATH_ERREXCEPT
   (C++11)
   FP_NORMALFP_SUBNORMALFP_ZEROFP_INFINITEFP_NAN
   (C++11)(C++11)(C++11)(C++11)(C++11)

   Defined in header <cmath>
   (1)
   float       trunc ( float num );

   double      trunc ( double num );
   long double trunc ( long double num );
   (until C++23)
   constexpr /* floating-point-type */
               trunc ( /* floating-point-type */ num );
   (since C++23)
   float       truncf( float num );
   (2) (since C++11)
   (constexpr since C++23)
   long double truncl( long double num );
   (3) (since C++11)
   (constexpr since C++23)
   Additional overloads (since C++11)
   Defined in header <cmath>
   template< class Integer >
   double      trunc ( Integer num );
   (A) (constexpr since C++23)
   1-3) Computes the nearest integer not greater in magnitude than num.
   The library provides overloads of std::trunc for all cv-unqualified
   floating-point types as the type of the parameter.(since C++23)
   A) Additional overloads are provided for all integer types, which are
   treated as double.
   (since C++11)

Parameters

   num - floating-point or integer value

Return value

   If no errors occur, the nearest integer value not greater in magnitude
   than num (in other words, num rounded towards zero) is returned.
   Return value
   math-trunc.svg
   num

Error handling

   Errors are reported as specified in math_errhandling.

   If the implementation supports IEEE floating-point arithmetic (IEC
   60559),
     * The current rounding mode has no effect.
     * If num is ±infty, it is returned, unmodified.
     * If num is ±0, it is returned, unmodified.
     * If num is NaN, NaN is returned.

Notes

   FE_INEXACT may be (but isn't required to be) raised when truncating a
   non-integer finite value.

   The largest representable floating-point values are exact integers in
   all standard floating-point formats, so this function never overflows
   on its own; however the result may overflow any integer type (including
   std::intmax_t), when stored in an integer variable.

   The implicit conversion from floating-point to integral types also
   rounds towards zero, but is limited to the values that can be
   represented by the target type.

   The additional overloads are not required to be provided exactly as
   (A). They only need to be sufficient to ensure that for their argument
   num of integer type, std::trunc(num) has the same effect as
   std::trunc(static_cast<double>(num)).

Example

   Run this code
#include <cmath>
#include <initializer_list>
#include <iostream>

int main()
{
    const auto data = std::initializer_list<double>
    {
        +2.7, -2.9, +0.7, -0.9, +0.0, 0.0, -INFINITY, +INFINITY, -NAN, +NAN
    };

    std::cout << std::showpos;
    for (double const x : data)
        std::cout << "trunc(" << x << ") == " << std::trunc(x) << '\n';
}

   Possible output:
trunc(+2.7) == +2
trunc(-2.9) == -2
trunc(+0.7) == +0
trunc(-0.9) == -0
trunc(+0) == +0
trunc(+0) == +0
trunc(-inf) == -inf
trunc(+inf) == +inf
trunc(-nan) == -nan
trunc(+nan) == +nan

See also

   floorfloorffloorl
   (C++11)(C++11)
   nearest integer not greater than the given value
   (function)
   ceilceilfceill
   (C++11)(C++11)
   nearest integer not less than the given value
   (function)
   roundroundfroundllroundlroundflroundlllroundllroundfllroundl
   (C++11)(C++11)(C++11)(C++11)(C++11)(C++11)(C++11)(C++11)(C++11)
   nearest integer, rounding away from zero in halfway cases
   (function)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/numeric/math/tru
   nc&oldid=160727"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 15 October 2023, at 09:58.
     * This page has been accessed 150,816 times.
