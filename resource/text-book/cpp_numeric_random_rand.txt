std::rand

   From cppreference.com
   < cpp | numeric | random

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Numerics library
   Common mathematical functions
   Mathematical special functions (C++17)
   Mathematical constants (C++20)
   Basic linear algebra algorithms (C++26)
   Floating-point environment (C++11)
   Complex numbers
   Numeric arrays
   Pseudo-random number generation
   Factor operations
   gcd
   (C++17)
   lcm
   (C++17)
   Interpolations
   midpoint
   (C++20)
   lerp
   (C++20)
   Saturation arithmetic
   add_sat
   (C++26)
   sub_sat
   (C++26)
   saturate_cast
   (C++26)
   mul_sat
   (C++26)
   div_sat
   (C++26)
   Generic numeric operations
   iota
   (C++11)
   ranges::iota
   (C++23)
   accumulate
   inner_product
   adjacent_difference
   partial_sum
   reduce
   (C++17)
   transform_reduce
   (C++17)
   inclusive_scan
   (C++17)
   exclusive_scan
   (C++17)
   transform_inclusive_scan
   (C++17)
   transform_exclusive_scan
   (C++17)
   Bit operations
   has_single_bit
   (C++20)
   bit_cast
   (C++20)
   bit_ceil
   (C++20)
   bit_floor
   (C++20)
   bit_width
   (C++20)
   rotl
   (C++20)
   rotr
   (C++20)
   popcount
   (C++20)
   countl_zero
   (C++20)
   countl_one
   (C++20)
   countr_zero
   (C++20)
   countr_one
   (C++20)
   byteswap
   (C++23)
   endian
   (C++20)

   Pseudo-random number generation
   Uniform random bit generators
   uniform_random_bit_generator
   (C++20)
   Random number engines
   linear_congruential_engine
   (C++11)
   mersenne_twister_engine
   (C++11)
   subtract_with_carry_engine
   (C++11)
   Random number engine adaptors
   discard_block_engine
   (C++11)
   independent_bits_engine
   (C++11)
   shuffle_order_engine
   (C++11)
   Predefined random number generators
   Non-deterministic random numbers
   random_device
   (C++11)
   Random number distributions
   Uniform distributions
   uniform_int_distribution
   (C++11)
   uniform_real_distribution
   (C++11)
   generate_canonical
   (C++11)
   Bernoulli distributions
   bernoulli_distribution
   (C++11)
   binomial_distribution
   (C++11)
   negative_binomial_distribution
   (C++11)
   geometric_distribution
   (C++11)
   Poisson distributions
   poisson_distribution
   (C++11)
   exponential_distribution
   (C++11)
   gamma_distribution
   (C++11)
   weibull_distribution
   (C++11)
   extreme_value_distribution
   (C++11)
   Normal distributions
   normal_distribution
   (C++11)
   lognormal_distribution
   (C++11)
   chi_squared_distribution
   (C++11)
   cauchy_distribution
   (C++11)
   fisher_f_distribution
   (C++11)
   student_t_distribution
   (C++11)
   Sampling distributions
   discrete_distribution
   (C++11)
   piecewise_constant_distribution
   (C++11)
   piecewise_linear_distribution
   (C++11)
   Utilities
   generate_canonical
   (C++11)
   seed_seq
   (C++11)
   Random number algorithms
   ranges::generate_random
   (C++26)
   C random library
   rand
   srand
   RAND_MAX

   Defined in header <cstdlib>
   int rand();

   Returns a pseudo-random integral value from the range [0, RAND_MAX].

   std::srand() seeds the pseudo-random number generator used by rand().
   If rand() is used before any calls to std::srand(), rand() behaves as
   if it was seeded with std::srand(1).

   Each time rand() is seeded with std::srand(), it must produce the same
   sequence of values on successive calls.

   Other functions in the standard library may call rand. It is
   implementation-defined which functions do so.

   It is implementation-defined whether rand() is thread-safe.

Parameters

   (none)

Return value

   Pseudo-random integral value between 0 and RAND_MAX.

Notes

   There are no guarantees as to the quality of the random sequence
   produced. In the past, some implementations of rand() have had serious
   shortcomings in the randomness, distribution and period of the sequence
   produced (in one well-known example, the low-order bit simply
   alternated between 1 and 0 between calls).

   rand() is not recommended for serious random-number generation needs.
   It is recommended to use C++11's random number generation facilities to
   replace rand().(since C++11)

Example

   Run this code
#include <cstdlib>
#include <ctime>
#include <iostream>

int main()
{
    std::srand(std::time(nullptr)); // use current time as seed for random gener
ator
    int random_value = std::rand();
    std::cout << "Random value on [0, " << RAND_MAX << "]: " << random_value <<
'\n';

    for (const int times = 8; const int sides : {2, 4, 6, 8})
    {
        std::cout << "Roll " << sides << "-sided dice " << times << " times: ";
        for (int n = 0; n != times; ++n)
        {
            int x = sides + 1;
            while (x > sides)
                x = 1 + std::rand() / ((RAND_MAX + 1u) / sides);
                    // Note: 1 + rand() % sides is biased
            std::cout << x << ' ';
        }
        std::cout << '\n';
    }
}

   Possible output:
Random value on [0, 2147483647]: 948298199
Roll 2-sided dice 8 times: 2 2 1 2 1 1 2 2
Roll 4-sided dice 8 times: 1 3 4 2 1 3 3 1
Roll 6-sided dice 8 times: 3 2 1 6 6 4 4 2
Roll 8-sided dice 8 times: 4 5 6 6 3 6 1 2

See also

   uniform_int_distribution
   (C++11)
   produces integer values evenly distributed across a range
   (class template)
   srand
   seeds pseudo-random number generator
   (function)
   RAND_MAX
   maximum possible value generated by std::rand
   (macro constant)
   randint
   generates a random integer in the specified range
   (function template)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/numeric/random/r
   and&oldid=171236"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 24 April 2024, at 04:43.
     * This page has been accessed 1,386,341 times.
