std::experimental::ranges::EqualityComparable,
std::experimental::ranges::EqualityComparableWith

   From cppreference.com
   < cpp | experimental | ranges

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Experimental
   Technical Specification
   Filesystem library (filesystem TS)
   Library fundamentals (library fundamentals TS)
   Library fundamentals 2 (library fundamentals TS v2)
   Library fundamentals 3 (library fundamentals TS v3)
   Extensions for parallelism (parallelism TS)
   Extensions for parallelism 2 (parallelism TS v2)
   Extensions for concurrency (concurrency TS)
   Extensions for concurrency 2 (concurrency TS v2)
   Concepts (concepts TS)
   Ranges (ranges TS)
   Reflection (reflection TS)
   Mathematical special functions (special functions TR)
   Experimental Non-TS
   Pattern Matching
   Linear Algebra
   std::execution
   Contracts
   2D Graphics

   Ranges
   Concepts
   General utilities
   Iterators
   Ranges
   Algorithms

   Concepts library
   Core language concepts
   Same
   DerivedFrom
   ConvertibleTo
   CommonReference
   Common

   Integral
   SignedIntegral
   UnsignedIntegral
   Assignable
   SwappableSwappableWith
   Object concepts
   Destructible
   Constructible
   DefaultConstructible
   MoveConstructible
   CopyConstructible

   Movable
   Copyable

   Semiregular
   Regular
   Comparison concepts
   Boolean
   WeaklyEqualityComparableWith
   EqualityComparableEqualityComparableWith
   StrictTotallyOrderedStrictTotallyOrderedWith
   Callable concepts
   InvocableRegularInvocable
   Predicate

   Relation

   StrictWeakOrder
   URNG concept
   UniformRandomNumberGenerator

   Defined in header <experimental/ranges/concepts>
   template< class T >
   concept bool EqualityComparable = WeaklyEqualityComparableWith<T, T>;
   (1)                                             (ranges TS)
   template< class T, class U >

   concept bool EqualityComparableWith =
       EqualityComparable<T> &&
       EqualityComparable<U> &&
       CommonReference<
           const std::remove_reference_t<T>&,
           const std::remove_reference_t<U>&> &&
       EqualityComparable<
           ranges::common_reference_t<
               const std::remove_reference_t<T>&,
               const std::remove_reference_t<U>&>> &&
       WeaklyEqualityComparableWith<T, U>;
   (2)                                             (ranges TS)
   1) The concept EqualityComparable<T> specifies that the comparison
   operators == and != on T reflects equality: == yields true if and only
   if the operands are equal.
   EqualityComparable<T> is satisfied only if, given objects a and b of
   type T, bool(a == b) is true if and only if a and b are equal. Together
   with the requirement that a == b is equality preserving, this implies
   that == is symmetric and transitive, and further that == is reflexive
   for all objects a that are equal to at least one other object.
   2) The concept EqualityComparableWith<T, U> specifies that the
   comparison operators == and != on (possibly mixed) T and U operands
   yield results consistent with equality. Comparing mixed operands yields
   results equivalent to comparing the operands converted to their common
   type.
   Formally, EqualityComparableWith<T, U> is satisfied only if, given any
   lvalue t of type const std::remove_reference_t<T> and any lvalue u of
   type const std::remove_reference_t<U>, and let C be
   ranges::common_reference_t<const std::remove_reference_t<T>&, const
   std::remove_reference_t<U>&>, bool(t == u) == bool(C(t) == C(u)).

Equality preservation

   An expression is equality preserving if it results in equal outputs
   given equal inputs.
     * The inputs to an expression consist of its operands.
     * The outputs of an expression consist of its result and all operands
       modified by the expression (if any).

   Every expression required to be equality preserving is further required
   to be stable: two evaluations of such an expression with the same input
   objects must have equal outputs absent any explicit intervening
   modification of those input objects.

Implicit expression variations

   A requires-expression that uses an expression that is non-modifying for
   some constant lvalue operand also implicitly requires additional
   variations of that expression that accept a non-constant lvalue or
   (possibly constant) rvalue for the given operand unless such an
   expression variation is explicitly required with differing semantics.
   These implicit expression variations must meet the same semantic
   requirements of the declared expression. The extent to which an
   implementation validates the syntax of the variations is unspecified.
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/experimental/ran
   ges/concepts/EqualityComparable&oldid=155303"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 22 July 2023, at 01:34.
     * This page has been accessed 10,361 times.
