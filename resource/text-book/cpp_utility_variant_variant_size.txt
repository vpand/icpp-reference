std::variant_size, std::variant_size_v

   From cppreference.com
   < cpp | utility | variant

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Utilities library
   Language support
   Type support (basic types, RTTI)
   Library feature-test macros (C++20)
   Dynamic memory management
   Program utilities
   Coroutine support (C++20)
   Variadic functions
   is_constant_evaluated
   (C++20)
   is_within_lifetime
   (C++26)
   initializer_list
   (C++11)
   source_location
   (C++20)
   Debugging support
   is_debugger_present
   (C++26)
   breakpoint_if_debugging
   (C++26)
   breakpoint
   (C++26)
   Three-way comparison
   three_way_comparablethree_way_comparable_with
   (C++20)(C++20)
   strong_ordering
   (C++20)
   weak_ordering
   (C++20)
   partial_ordering
   (C++20)
   common_comparison_category
   (C++20)
   compare_three_way_result
   (C++20)
   compare_three_way
   (C++20)
   strong_order
   (C++20)
   weak_order
   (C++20)
   partial_order
   (C++20)
   compare_strong_order_fallback
   (C++20)
   compare_weak_order_fallback
   (C++20)
   compare_partial_order_fallback
   (C++20)
   is_eqis_ltis_lteq
   (C++20)(C++20)(C++20)
   is_neqis_gtis_gteq
   (C++20)(C++20)(C++20)
   General utilities
   Date and time
   Function objects
   Formatting library (C++20)
   bitset
   hash
   (C++11)
   Relational operators (deprecated in C++20)
   rel_ops::operator!=rel_ops::operator>

   rel_ops::operator<=rel_ops::operator>=
   Integer comparison functions
   cmp_equalcmp_lesscmp_less_than
   (C++20)(C++20)(C++20)
   cmp_not_equalcmp_greatercmp_greater_than
   (C++20)(C++20)(C++20)
   in_range
   (C++20)
   Swap and type operations
   swap
   ranges::swap
   (C++20)
   exchange
   (C++14)
   declval
   (C++11)
   to_underlying
   (C++23)
   forward
   (C++11)
   forward_like
   (C++23)
   move
   (C++11)
   move_if_noexcept
   (C++11)
   as_const
   (C++17)
   Common vocabulary types
   pair
   tuple
   (C++11)
   optional
   (C++17)
   any
   (C++17)
   variant
   (C++17)
   tuple_size
   (C++11)
   tuple_element
   (C++11)
   apply
   (C++17)
   make_from_tuple
   (C++17)
   expected
   (C++23)
   Elementary string conversions
   to_chars
   (C++17)
   from_chars
   (C++17)
   chars_format
   (C++17)
   to_chars_result
   (C++17)
   from_chars_result
   (C++17)

   std::variant
   Member functions
   variant::variant
   variant::~variant
   variant::operator=
   Observers
   variant::index
   variant::valueless_by_exception
   Modifiers
   variant::emplace
   variant::swap
   Visitation
   variant::visit
   (C++26)
   Non-member functions
   visit
   holds_alternative
   get(std::variant)
   get_if
   operator==operator!=operator<operator<=operator>operator>=operator<=>
   (C++20)
   swap(std::variant)
   Helper classes
   monostate
   bad_variant_access
   variant_size
   variant_alternative
   hash<std::variant>
   Helper objects
   variant_npos

   Defined in header <variant>
   template< class T >
   struct variant_size; /* undefined */
   (1) (since C++17)
   template< class... Types >

   struct variant_size<std::variant<Types...>>
       : std::integral_constant<std::size_t, sizeof...(Types)> {};
   (2) (since C++17)
   template< class T >
   class variant_size<const T>;
   (3) (since C++17)
   template< class T >
   class variant_size<volatile T>;
   (4) (since C++17)
   (deprecated in C++20)
   template< class T >
   class variant_size<const volatile T>;
   (5) (since C++17)
   (deprecated in C++20)

   Provides access to the number of alternatives in a possibly
   cv-qualified variant as a compile-time constant expression.

   Formally,
   2) meets the UnaryTypeTrait requirements with a base characteristic of
   std::integral_constant<std::size_t, sizeof...(Types)>
   3-5) meets the UnaryTypeTrait requirements with a base characteristic
   of std::integral_constant<std::size_t, std::variant_size<T>::value>

Helper variable template

   template< class T >
   inline constexpr std::size_t variant_size_v =
   std::variant_size<T>::value;
                      (since C++17)

Inherited from std::integral_constant

Member constants

   value
   [static]
   sizeof...(Types)
   (public static member constant)

Member functions

   operator std::size_t
   converts the object to std::size_t, returns value
   (public member function)
   operator()
   (C++14)
   returns value
   (public member function)

Member types

   Type       Definition
   value_type std::size_t
   type       std::integral_constant<std::size_t, value>

Notes

   All specializations of std::variant_size satisfy UnaryTypeTrait with
   base characteristic std::integral_constant<std::size_t, N> for some N.

Example

   Run this code
#include <any>
#include <variant>

static_assert(std::variant_size_v<std::variant<>> == 0);
static_assert(std::variant_size_v<std::variant<int>> == 1);
static_assert(std::variant_size_v<std::variant<int, int>> == 2);
static_assert(std::variant_size_v<std::variant<int, int, int>> == 3);
static_assert(std::variant_size_v<std::variant<int, float, double>> == 3);
static_assert(std::variant_size_v<std::variant<std::monostate, void>> == 2);
static_assert(std::variant_size_v<std::variant<const int, const float>> == 2);
static_assert(std::variant_size_v<std::variant<std::variant<std::any>>> == 1);

int main() {}

See also

   variant_alternativevariant_alternative_t
   (C++17)
   obtains the type of the alternative specified by its index, at compile
   time
   (class template) (alias template)
   std::tuple_size<std::tuple>
   (C++11)
   obtains the size of tuple at compile time
   (class template specialization)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/utility/variant/
   variant_size&oldid=168495"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 6 January 2024, at 22:21.
     * This page has been accessed 40,526 times.
