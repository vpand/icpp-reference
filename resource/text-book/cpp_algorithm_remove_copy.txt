std::remove_copy, std::remove_copy_if

   From cppreference.com
   < cpp | algorithm

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Algorithm library
   Constrained algorithms and algorithms on ranges (C++20)
   Constrained algorithms, e.g. ranges::copy, ranges::sort, ...
   Execution policies (C++17)
   is_execution_policy
   (C++17)
   execution::seqexecution::parexecution::par_unseqexecution::unseq
   (C++17)    (C++17)(C++17)(C++20)
   execution::sequenced_policyexecution::parallel_policyexecution::paralle
   l_unsequenced_policyexecution::parallel_unsequenced
   (C++17)(C++17)(C++17)(C++20)
   Non-modifying sequence operations
   Batch operations
   for_each
   for_each_n
   (C++17)
   Search operations
   all_ofany_ofnone_of
   (C++11)                (C++11)(C++11)
   countcount_if
   mismatch
   equal
   findfind_iffind_if_not
   (C++11)
   find_end
   find_first_of
   adjacent_find
   search
   search_n
   Modifying sequence operations
   Copy operations
   copycopy_if
   (C++11)
   copy_backward
   copy_n
   (C++11)
   move
   (C++11)
   move_backward
   (C++11)
   Swap operations
   swap
   iter_swap
   swap_ranges
   Transformation operations
   replacereplace_if
   transform
   replace_copyreplace_copy_if
   Generation operations
   fill
   fill_n
   generate
   generate_n
   Removing operations
   removeremove_if
   unique
   remove_copyremove_copy_if
   unique_copy
   Order-changing operations
   reverse
   reverse_copy
   rotate
   rotate_copy
   random_shuffleshuffle
   (until C++17)(C++11)
   shift_leftshift_right
   (C++20)(C++20)
   Sampling operations
   sample
   (C++17)
   Sorting and related operations
   Partitioning operations
   partition
   partition_copy
   (C++11)
   stable_partition
   is_partitioned
   (C++11)
   partition_point
   (C++11)
   Sorting operations
   sort
   stable_sort
   partial_sort
   partial_sort_copy
   is_sorted
   (C++11)
   is_sorted_until
   (C++11)
   nth_element
   Binary search operations
   (on partitioned ranges)
   lower_bound
   upper_bound
   equal_range
   binary_search
   Set operations (on sorted ranges)
   includes
   set_union
   set_intersection
   set_difference
   set_symmetric_difference
   Merge operations (on sorted ranges)
   merge
   inplace_merge
   Heap operations
   push_heap
   pop_heap
   make_heap
   sort_heap
   is_heap
   (C++11)
   is_heap_until
   (C++11)
   Minimum/maximum operations
   max
   min
   minmax
   (C++11)
   clamp
   (C++17)
   max_element
   min_element
   minmax_element
   (C++11)
   Lexicographical comparison operations
   lexicographical_compare
   lexicographical_compare_three_way
   (C++20)
   Permutation operations
   next_permutation
   prev_permutation
   is_permutation
   (C++11)
   C library
   qsort
   bsearch
   Numeric operations
   iota
   (C++11)
   inner_product
   adjacent_difference

   accumulate
   reduce
   (C++17)
   transform_reduce
   (C++17)
   partial_sum
   inclusive_scan
   (C++17)
   exclusive_scan
   (C++17)
   transform_inclusive_scan
   (C++17)
   transform_exclusive_scan
   (C++17)
   Operations on uninitialized memory
   uninitialized_copy
   uninitialized_move
   (C++17)
   uninitialized_fill
   uninitialized_copy_n
   (C++11)
   uninitialized_move_n
   (C++17)
   uninitialized_fill_n
   destroy
   (C++17)
   destroy_n
   (C++17)
   destroy_at
   (C++17)
   construct_at
   (C++20)
   uninitialized_default_construct
   (C++17)
   uninitialized_value_construct
   (C++17)
   uninitialized_default_construct_n
   (C++17)
   uninitialized_value_construct_n
   (C++17)

   Defined in header <algorithm>
   (1)
   template< class InputIt, class OutputIt, class T >

   OutputIt remove_copy( InputIt first, InputIt last,
                         OutputIt d_first, const T& value );
   (constexpr since C++20)
   (until C++26)
   template< class InputIt, class OutputIt,

             class T = typename std::iterator_traits
                           <InputIt>::value_type >
   constexpr OutputIt remove_copy( InputIt first, InputIt last,
                                   OutputIt d_first, const T& value );
   (since C++26)
   (2)
   template< class ExecutionPolicy,

             class ForwardIt1, class ForwardIt2, class T >
   ForwardIt2 remove_copy( ExecutionPolicy&& policy,
                           ForwardIt1 first, ForwardIt1 last,
                           ForwardIt2 d_first, const T& value );
   (since C++17)
   (until C++26)
   template< class ExecutionPolicy,

             class ForwardIt1, class ForwardIt2,
             class T = typename std::iterator_traits
                           <ForwardIt1>::value_type >
   ForwardIt2 remove_copy( ExecutionPolicy&& policy,
                           ForwardIt1 first, ForwardIt1 last,
                           ForwardIt2 d_first, const T& value );
   (since C++26)
   template< class InputIt, class OutputIt, class UnaryPred >

   OutputIt remove_copy_if( InputIt first, InputIt last,
                            OutputIt d_first, UnaryPred p );
   (3) (constexpr since C++20)
   template< class ExecutionPolicy,

             class ForwardIt1, class ForwardIt2, class UnaryPred >
   ForwardIt2 remove_copy_if( ExecutionPolicy&& policy,
                              ForwardIt1 first, ForwardIt1 last,
                              ForwardIt2 d_first, UnaryPred p );
   (4) (since C++17)

   Copies elements from the range [first, last), to another range
   beginning at d_first, omitting the elements which satisfy specific
   criteria.
   1) Ignores all elements that are equal to value (using operator==).
   3) Ignores all elements for which predicate p returns true.
   2,4) Same as (1,3), but executed according to policy.
   These overloads participate in overload resolution only if

   std::is_execution_policy_v<std::decay_t<ExecutionPolicy>> is true.
   (until C++20)

   std::is_execution_policy_v<std::remove_cvref_t<ExecutionPolicy>> is
   true.
   (since C++20)

   If *d_first = *first is invalid(until C++20)*first is not writable to
   d_first(since C++20), the program is ill-formed.

   If source and destination ranges overlap, the behavior is undefined.

Parameters

   first, last - the range of elements to copy
   d_first     - the beginning of the destination range
   value       - the value of the elements not to copy
   policy      - the execution policy to use. See execution policy for details.
   Type requirements
   -
   InputIt must meet the requirements of LegacyInputIterator.
   -
   OutputIt must meet the requirements of LegacyOutputIterator.
   -
   ForwardIt1, ForwardIt2 must meet the requirements of
   LegacyForwardIterator.
   -
   UnaryPred must meet the requirements of Predicate.

Return value

   Iterator to the element past the last element copied.

Complexity

   Given \(\scriptsize N\)N as std::distance(first, last):
   1,2) Exactly \(\scriptsize N\)N comparisons with value using
   operator==.
   3,4) Exactly \(\scriptsize N\)N applications of the predicate p.

   For the overloads with an ExecutionPolicy, there may be a performance
   cost if ForwardIt1's value_type is not MoveConstructible.

Exceptions

   The overloads with a template parameter named ExecutionPolicy report
   errors as follows:
     * If execution of a function invoked as part of the algorithm throws
       an exception and ExecutionPolicy is one of the standard policies,
       std::terminate is called. For any other ExecutionPolicy, the
       behavior is implementation-defined.
     * If the algorithm fails to allocate memory, std::bad_alloc is
       thrown.

Possible implementation

                       remove_copy (1)
template<class InputIt, class OutputIt,
         class T = typename std::iterator_traits<InputIt>::value_type>
constexpr OutputIt remove_copy(InputIt first, InputIt last,
                               OutputIt d_first, const T& value)
{
    for (; first != last; ++first)
        if (!(*first == value))
            *d_first++ = *first;
    return d_first;
}

                     remove_copy_if (3)
template<class InputIt, class OutputIt, class UnaryPred>
constexpr OutputIt remove_copy_if(InputIt first, InputIt last,
                                  OutputIt d_first, UnaryPred p)
{
    for (; first != last; ++first)
        if (!p(*first))
            *d_first++ = *first;
    return d_first;
}

Notes

             Feature-test macro           Value    Std   Feature
   __cpp_lib_algorithm_default_value_type 202403 (C++26)
   List-initialization for algorithms (1,2)

Example

   Run this code
#include <algorithm>
#include <complex>
#include <iomanip>
#include <iostream>
#include <iterator>
#include <string>
#include <vector>

int main()
{
    // Erase the hash characters '#' on the fly.
    std::string str = "#Return #Value #Optimization";
    std::cout << "before: " << std::quoted(str) << '\n';

    std::cout << "after:  \"";
    std::remove_copy(str.begin(), str.end(),
                     std::ostream_iterator<char>(std::cout), '#');
    std::cout << "\"\n";

    // Erase {1, 3} value on the fly.
    std::vector<std::complex<double>> nums{{2, 2}, {1, 3}, {4, 8}, {1, 3}};
    std::remove_copy(nums.begin(), nums.end(),
                     std::ostream_iterator<std::complex<double>>(std::cout),
    #ifdef __cpp_lib_algorithm_default_value_type
                     {1, 3}); // T gets deduced
    #else
                     std::complex<double>{1, 3});
    #endif
}

   Output:
before: "#Return #Value #Optimization"
after:  "Return Value Optimization"
(2,2)(4,8)

Defect reports

   The following behavior-changing defect reports were applied
   retroactively to previously published C++ standards.
   DR Applied to Behavior as published Correct behavior
   LWG 779 C++98 T was required to be EqualityComparable, but
   the value type of ForwardIt is not always T required *d_first = *first
   to be valid instead

See also

   removeremove_if
   removes elements satisfying specific criteria
   (function template)
   copycopy_if
   (C++11)
   copies a range of elements to a new location
   (function template)
   partition_copy
   (C++11)
   copies a range dividing the elements into two groups
   (function template)
   ranges::remove_copyranges::remove_copy_if
   (C++20)(C++20)
   copies a range of elements omitting those that satisfy specific
   criteria
   (niebloid)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/algorithm/remove
   _copy&oldid=171924"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 20 May 2024, at 22:30.
     * This page has been accessed 151,901 times.
