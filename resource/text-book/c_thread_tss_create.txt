tss_create

   From cppreference.com
   < c | thread

   C
   Language
   Headers
   Type support
   Program utilities
   Variadic function support
   Error handling
   Dynamic memory management
   Strings library
   Algorithms
   Numerics
   Date and time utilities
   Input/output support
   Localization support
   Concurrency support (C11)
   Technical Specifications
   Symbol index

   Concurrency support library
   Threads
   thrd_create
   thrd_equal
   thrd_current

   thrd_sleep
   thrd_yield
   thrd_exit
   thrd_detach
   thrd_join
   thrd_successthrd_timedoutthrd_busythrd_nomemthrd_error

   Atomic operations
   atomic_init
   ATOMIC_VAR_INIT
   (until C23)
   ATOMIC_***_LOCK_FREE
   atomic_is_lock_free
   atomic_store
   atomic_load
   atomic_exchange
   atomic_compare_exchange
   atomic_fetch_add
   atomic_fetch_sub
   atomic_fetch_or
   atomic_fetch_xor
   atomic_fetch_and
   Atomic flags
   atomic_flag
   ATOMIC_FLAG_INIT
   atomic_flag_test_and_set
   atomic_flag_clear
   Memory ordering
   memory_order
   kill_dependency
   atomic_thread_fence
   atomic_signal_fence
   Mutual exclusion
   mtx_init
   mtx_lock
   mtx_timedlock
   mtx_trylock
   call_once
   mtx_unlock
   mtx_destroy
   mtx_plainmtx_recursivemtx_timed
   Condition variables
   cnd_init
   cnd_signal
   cnd_broadcast
   cnd_wait
   cnd_timedwait
   cnd_destroy
   Thread-local storage
   thread_local
   TSS_DTOR_ITERATIONS

   tss_create
   tss_get
   tss_set
   tss_delete

   Defined in header <threads.h>
   int tss_create( tss_t* tss_key, tss_dtor_t destructor );
                                                           (since C11)

   Creates new thread-specific storage key and stores it in the object
   pointed to by tss_key. Although the same key value may be used by
   different threads, the values bound to the key by tss_set are
   maintained on a per-thread basis and persist for the life of the
   calling thread.

   The value NULL is associated with the newly created key in all existing
   threads, and upon thread creation, the values associated with all TSS
   keys is initialized to NULL.

   If destructor is not a null pointer, then also associates the
   destructor which is called when the storage is released by thrd_exit
   (but not by tss_delete and not at program termination by exit).

   A call to tss_create from within a thread-specific storage destructor
   results in undefined behavior.

Parameters

   tss_key - pointer to memory location to store the new thread-specific
   storage key
   destructor - pointer to a function to call at thread exit

Notes

   The POSIX equivalent of this function is pthread_key_create.

Return value

   thrd_success if successful, thrd_error otherwise.

Example

   This section is incomplete
   Reason: improve, perhaps look for POSIX examples for inspiration
int thread_func(void *arg) {
    tss_t key;
    if (thrd_success == tss_create(&key, free)) {
        tss_set(key, malloc(4)); // stores a pointer on TSS
        // ...
    }
} // calls free() for the pointer stored on TSS

References

     * C17 standard (ISO/IEC 9899:2018):

          + 7.26.6.1 The tss_create function (p: 281-282)

     * C11 standard (ISO/IEC 9899:2011):

          + 7.26.6.1 The tss_create function (p: 386)

   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=c/thread/tss_create&
   oldid=138763"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 13 March 2022, at 11:34.
     * This page has been accessed 26,432 times.
