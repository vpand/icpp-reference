std::erase_if (std::flat_multiset)

   From cppreference.com
   < cpp | container | flat multiset


   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Containers library
   Sequence
   array
   (C++11)
   vector
   vector<bool>
   deque
   forward_list
   (C++11)
   list
   Associative
   set
   multiset
   map
   multimap
   Unordered associative
   unordered_set
   (C++11)
   unordered_multiset
   (C++11)
   unordered_map
   (C++11)
   unordered_multimap
   (C++11)
   Adaptors
   stack
   queue
   priority_queue
   flat_set
   (C++23)
   flat_multiset
   (C++23)
   flat_map
   (C++23)
   flat_multimap
   (C++23)
   Views
   span
   (C++20)
   mdspan
   (C++23)
   Iterator invalidation
   Member function table
   Non-member function table

   std::flat_multiset
   Member types
   Member functions
   flat_multiset::flat_multiset

   flat_multiset::operator=
   Iterators
   flat_multiset::beginflat_multiset::cbegin
   flat_multiset::endflat_multiset::cend
   flat_multiset::rbeginflat_multiset::crbegin
   flat_multiset::rendflat_multiset::crend
   Capacity
   flat_multiset::size
   flat_multiset::max_size
   flat_multiset::empty
   Modifiers
   flat_multiset::clear
   flat_multiset::insert
   flat_multiset::insert_range
   flat_multiset::emplace
   flat_multiset::emplace_hint
   flat_multiset::erase
   flat_multiset::swap
   flat_multiset::extract
   flat_multiset::replace
   Lookup
   flat_multiset::count
   flat_multiset::find
   flat_multiset::contains
   flat_multiset::equal_range
   flat_multiset::lower_bound
   flat_multiset::upper_bound
   Observers
   flat_multiset::key_comp
   flat_multiset::value_comp
   Non-member functions
   operator==operator<=>
   (C++23)(C++23)
   swap(std::flat_multiset)
   (C++23)
   erase_if(std::flat_multiset)
   (C++23)
   Helper classes
   uses_allocator<std::flat_multiset>
   (C++23)
   Tags
   sorted_equivalent
   (C++23)
   sorted_equivalent_t
   (C++23)
   Deduction guides

   Defined in header <flat_set>
   template< class Key, class Compare, class KeyContainer,

             class Pred >
   std::flat_multiset<Key, Compare, KeyContainer>::size_type
       erase_if( std::flat_multiset<Key, Compare, KeyContainer>& c,
                 Pred pred );
                                                          (since C++23)

   Erases all elements that satisfy the predicate pred from c.

   The predicate pred is satisfied if the expression
   bool(pred(std::as_const(e))) is true, where e is some element in c.

   Key must be MoveAssignable. Otherwise, the behavior is undefined.

Parameters

   c    - container adaptor from which to erase
   pred - predicate that returns true if the element should be erased

Return value

   The number of erased elements.

Complexity

   Exactly c.size() applications of the predicate pred.

Exceptions

   If erase_if throws, c remains in valid but unspecified (maybe empty)
   state.

Notes

   The algorithm is stable, that is, the order of elements that are not
   deleted remains unchanged.

Example

   Run this code
#include <iostream>
#include <flat_set>

void println(auto rem, auto const& container)
{
    std::cout << rem << '{';
    for (char sep[]{0, ' ', 0}; const auto& item : container)
        std::cout << sep << item, *sep = ',';
    std::cout << "}\n";
}

int main()
{
    std::flat_multiset data{3, 3, 4, 5, 5, 6, 6, 7, 2, 1, 0};
    println("Original:\n", data);

    auto divisible_by_3 = [](auto const& x) { return (x % 3) == 0; };

    const auto count = std::erase_if(data, divisible_by_3);

    println("Erase all items divisible by 3:\n", data);
    std::cout << count << " items erased.\n";
}

   Output:
Original:
{0, 1, 2, 3, 3, 4, 5, 5, 6, 6, 7}
Erase all items divisible by 3:
{1, 2, 4, 5, 5, 7}
5 items erased.

See also

   removeremove_if
   removes elements satisfying specific criteria
   (function template)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/container/flat_m
   ultiset/erase_if&oldid=168799"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 19 January 2024, at 17:31.
     * This page has been accessed 712 times.
