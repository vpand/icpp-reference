std::erase_if (std::flat_multimap)

   From cppreference.com
   < cpp | container | flat multimap


   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Containers library
   Sequence
   array
   (C++11)
   vector
   vector<bool>
   deque
   forward_list
   (C++11)
   list
   Associative
   set
   multiset
   map
   multimap
   Unordered associative
   unordered_set
   (C++11)
   unordered_multiset
   (C++11)
   unordered_map
   (C++11)
   unordered_multimap
   (C++11)
   Adaptors
   stack
   queue
   priority_queue
   flat_set
   (C++23)
   flat_multiset
   (C++23)
   flat_map
   (C++23)
   flat_multimap
   (C++23)
   Views
   span
   (C++20)
   mdspan
   (C++23)
   Iterator invalidation
   Member function table
   Non-member function table

   std::flat_multimap
   Member types
   Member functions
   flat_multimap::flat_multimap

   flat_multimap::operator=
   Iterators
   flat_multimap::beginflat_multimap::cbegin
   flat_multimap::endflat_multimap::cend
   flat_multimap::rbeginflat_multimap::crbegin
   flat_multimap::rendflat_multimap::crend
   Capacity
   flat_multimap::size
   flat_multimap::max_size
   flat_multimap::empty
   Modifiers
   flat_multimap::clear
   flat_multimap::erase
   flat_multimap::swap
   flat_multimap::extract
   flat_multimap::replace
   flat_multimap::insert
   flat_multimap::insert_range
   flat_multimap::emplace
   flat_multimap::emplace_hint
   Lookup
   flat_multimap::count
   flat_multimap::find
   flat_multimap::contains
   flat_multimap::equal_range
   flat_multimap::lower_bound
   flat_multimap::upper_bound
   Observers
   flat_multimap::key_comp
   flat_multimap::keys
   flat_multimap::value_comp
   flat_multimap::values
   Non-member functions
   operator==operator<=>
   (C++23)(C++23)
   swap(std::flat_multimap)
   (C++23)
   erase_if(std::flat_multimap)
   (C++23)
   Helper classes
   uses_allocator<std::flat_multimap>
   (C++23)
   Tags
   sorted_equivalent
   (C++23)
   sorted_equivalent_t
   (C++23)
   Deduction guides

   Defined in header <flat_map>
   template< class Key, class T, class Compare, class KeyContainer, class
   MappedContainer,

             class Pred >
   std::flat_multimap<Key, T, Compare, KeyContainer,
   MappedContainer>::size_type
       erase_if( std::flat_multimap<Key, T, Compare, KeyContainer,
   MappedContainer>& c,
                 Pred pred );
   (since C++23)

   Erases all elements that satisfy the predicate pred from c.

   The predicate pred is satisfied if the expression
   bool(pred(std::pair<const Key&, const T&>(e))) is true, where e is some
   element in c.

   Key and T must be MoveAssignable. Otherwise, the behavior is undefined.

Parameters

   c    - container adaptor from which to erase
   pred - predicate that returns true if the element should be erased

Return value

   The number of erased elements.

Complexity

   Exactly c.size() applications of the predicate pred.

Exceptions

   If erase_if throws, c remains in valid but unspecified (maybe empty)
   state.

Notes

   The algorithm is stable, that is, the order of elements that are not
   deleted remains unchanged.

Example

   Run this code
#include <iostream>
#include <flat_map>

void println(auto rem, auto const& container)
{
    std::cout << rem << '{';
    for (char sep[]{0, ' ', 0}; const auto& [key, value] : container)
        std::cout << sep << '{' << key << ", " << value << '}', *sep = ',';
    std::cout << "}\n";
}

int main()
{
    std::flat_multimap<int, char> data
    {
        {1, 'a'}, {2, 'b'}, {3, 'c'}, {4, 'd'},
        {5, 'e'}, {4, 'f'}, {5, 'g'}, {5, 'g'},
    };
    println("Original:\n", data);

    const auto count = std::erase_if(data, [](const auto& item)
    {
        auto const& [key, value] = item;
        return (key & 1) == 1;
    });

    println("Erase items with odd keys:\n", data);
    std::cout << count << " items removed.\n";
}

   Output:
Original:
{{1, a}, {2, b}, {3, c}, {4, d}, {4, f}, {5, e}, {5, g}, {5, g}}
Erase items with odd keys:
{{2, b}, {4, d}, {4, f}}
5 items removed.

See also

   removeremove_if
   removes elements satisfying specific criteria
   (function template)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/container/flat_m
   ultimap/erase_if&oldid=168797"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 19 January 2024, at 17:30.
     * This page has been accessed 751 times.
