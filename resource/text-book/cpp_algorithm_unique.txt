std::unique

   From cppreference.com
   < cpp | algorithm

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Algorithm library
   Constrained algorithms and algorithms on ranges (C++20)
   Constrained algorithms, e.g. ranges::copy, ranges::sort, ...
   Execution policies (C++17)
   is_execution_policy
   (C++17)
   execution::seqexecution::parexecution::par_unseqexecution::unseq
   (C++17)    (C++17)(C++17)(C++20)
   execution::sequenced_policyexecution::parallel_policyexecution::paralle
   l_unsequenced_policyexecution::parallel_unsequenced
   (C++17)(C++17)(C++17)(C++20)
   Non-modifying sequence operations
   Batch operations
   for_each
   for_each_n
   (C++17)
   Search operations
   all_ofany_ofnone_of
   (C++11)                (C++11)(C++11)
   countcount_if
   mismatch
   equal
   findfind_iffind_if_not
   (C++11)
   find_end
   find_first_of
   adjacent_find
   search
   search_n
   Modifying sequence operations
   Copy operations
   copycopy_if
   (C++11)
   copy_backward
   copy_n
   (C++11)
   move
   (C++11)
   move_backward
   (C++11)
   Swap operations
   swap
   iter_swap
   swap_ranges
   Transformation operations
   replacereplace_if
   transform
   replace_copyreplace_copy_if
   Generation operations
   fill
   fill_n
   generate
   generate_n
   Removing operations
   removeremove_if
   unique
   remove_copyremove_copy_if
   unique_copy
   Order-changing operations
   reverse
   reverse_copy
   rotate
   rotate_copy
   random_shuffleshuffle
   (until C++17)(C++11)
   shift_leftshift_right
   (C++20)(C++20)
   Sampling operations
   sample
   (C++17)
   Sorting and related operations
   Partitioning operations
   partition
   partition_copy
   (C++11)
   stable_partition
   is_partitioned
   (C++11)
   partition_point
   (C++11)
   Sorting operations
   sort
   stable_sort
   partial_sort
   partial_sort_copy
   is_sorted
   (C++11)
   is_sorted_until
   (C++11)
   nth_element
   Binary search operations
   (on partitioned ranges)
   lower_bound
   upper_bound
   equal_range
   binary_search
   Set operations (on sorted ranges)
   includes
   set_union
   set_intersection
   set_difference
   set_symmetric_difference
   Merge operations (on sorted ranges)
   merge
   inplace_merge
   Heap operations
   push_heap
   pop_heap
   make_heap
   sort_heap
   is_heap
   (C++11)
   is_heap_until
   (C++11)
   Minimum/maximum operations
   max
   min
   minmax
   (C++11)
   clamp
   (C++17)
   max_element
   min_element
   minmax_element
   (C++11)
   Lexicographical comparison operations
   lexicographical_compare
   lexicographical_compare_three_way
   (C++20)
   Permutation operations
   next_permutation
   prev_permutation
   is_permutation
   (C++11)
   C library
   qsort
   bsearch
   Numeric operations
   iota
   (C++11)
   inner_product
   adjacent_difference

   accumulate
   reduce
   (C++17)
   transform_reduce
   (C++17)
   partial_sum
   inclusive_scan
   (C++17)
   exclusive_scan
   (C++17)
   transform_inclusive_scan
   (C++17)
   transform_exclusive_scan
   (C++17)
   Operations on uninitialized memory
   uninitialized_copy
   uninitialized_move
   (C++17)
   uninitialized_fill
   uninitialized_copy_n
   (C++11)
   uninitialized_move_n
   (C++17)
   uninitialized_fill_n
   destroy
   (C++17)
   destroy_n
   (C++17)
   destroy_at
   (C++17)
   construct_at
   (C++20)
   uninitialized_default_construct
   (C++17)
   uninitialized_value_construct
   (C++17)
   uninitialized_default_construct_n
   (C++17)
   uninitialized_value_construct_n
   (C++17)

   Defined in header <algorithm>
   template< class ForwardIt >
   ForwardIt unique( ForwardIt first, ForwardIt last );
   (1)                                               (constexpr since C++20)
   template< class ExecutionPolicy, class ForwardIt >

   ForwardIt unique( ExecutionPolicy&& policy,
                     ForwardIt first, ForwardIt last );
   (2)                                               (since C++17)
   template< class ForwardIt, class BinaryPred >
   ForwardIt unique( ForwardIt first, ForwardIt last, BinaryPred p );
   (3)                                               (constexpr since C++20)
   template< class ExecutionPolicy,

             class ForwardIt, class BinaryPred >
   ForwardIt unique( ExecutionPolicy&& policy,
                     ForwardIt first, ForwardIt last, BinaryPred p );
   (4)                                               (since C++17)

   Removes all except the first element from every consecutive group of
   equivalent elements from the range [first, last) and returns a
   past-the-end iterator for the new end of the range.
   1) Elements are compared using operator==.
   If operator== does not establish an equivalence relation, the behavior
   is undefined.
   3) Elements are compared using the given binary predicate p.
   If p does not establish an equivalence relation, the behavior is
   undefined.
   2,4) Same as (1,3), but executed according to policy.
   These overloads participate in overload resolution only if

   std::is_execution_policy_v<std::decay_t<ExecutionPolicy>> is true.
   (until C++20)

   std::is_execution_policy_v<std::remove_cvref_t<ExecutionPolicy>> is
   true.
   (since C++20)

Explanation

   Removing is done by shifting the elements in the range in such a way
   that the elements that are not to be removed appear in the beginning of
   the range.
     * Shifting is done by copy assignment(until C++11)move
       assignment(since C++11).
     * The removing operation is stable: the relative order of the
       elements not to be removed stays the same.
     * The underlying sequence of [first, last) is not shortened by the
       removing operation. Given result as the returned iterator:

          + All iterators in [result, last) are still dereferenceable.

          + Each element of [result, last) has a valid but unspecified
            state, because move assignment can eliminate elements by
            moving from elements that were originally in that range.

   (since C++11)

Parameters

   first, last - the range of elements to process
   policy - the execution policy to use. See execution policy for details.
   p - binary predicate which returns true if the elements should be
   treated as equal.

   The signature of the predicate function should be equivalent to the
   following:

    bool pred(const Type1 &a, const Type2 &b);

   While the signature does not need to have const &, the function must
   not modify the objects passed to it and must be able to accept all
   values of type (possibly const) Type1 and Type2 regardless of value
   category (thus, Type1 & is not allowed, nor is Type1 unless for Type1 a
   move is equivalent to a copy(since C++11)).
   The types Type1 and Type2 must be such that an object of type ForwardIt
   can be dereferenced and then implicitly converted to both of them.
   Type requirements
   -
   ForwardIt must meet the requirements of LegacyForwardIterator.
   -
   The type of dereferenced ForwardIt must meet the requirements of
   MoveAssignable.

Return value

   A ForwardIt to the new end of the range.

Complexity

   Given \(\scriptsize N\)N as std::distance(first, last):
   1,2) Exactly \(\scriptsize max(0,N-1)\)max(0,N-1) comparisons using
   operator==.
   3,4) Exactly \(\scriptsize max(0,N-1)\)max(0,N-1) applications of the
   predicate p.

Exceptions

   The overloads with a template parameter named ExecutionPolicy report
   errors as follows:
     * If execution of a function invoked as part of the algorithm throws
       an exception and ExecutionPolicy is one of the standard policies,
       std::terminate is called. For any other ExecutionPolicy, the
       behavior is implementation-defined.
     * If the algorithm fails to allocate memory, std::bad_alloc is
       thrown.

Possible implementation

   See also the implementations in libstdc++, libc++, and MSVC STL.
                     unique (1)
template<class ForwardIt>
ForwardIt unique(ForwardIt first, ForwardIt last)
{
    if (first == last)
        return last;

    ForwardIt result = first;
    while (++first != last)
        if (!(*result == *first) && ++result != first)
            *result = std::move(*first);

    return ++result;
}

                     unique (3)
template<class ForwardIt, class BinaryPredicate>
ForwardIt unique(ForwardIt first, ForwardIt last, BinaryPredicate p)
{
    if (first == last)
        return last;

    ForwardIt result = first;
    while (++first != last)
        if (!p(*result, *first) && ++result != first)
            *result = std::move(*first);

    return ++result;
}

Notes

   A call to unique is typically followed by a call to a container's erase
   member function to actually remove elements from the container.

Example

   Run this code
#include <algorithm>
#include <iostream>
#include <vector>

int main()
{
    // a vector containing several duplicate elements
    std::vector<int> v{1, 2, 1, 1, 3, 3, 3, 4, 5, 4};
    auto print = [&](int id)
    {
        std::cout << "@" << id << ": ";
        for (int i : v)
            std::cout << i << ' ';
        std::cout << '\n';
    };
    print(1);

    // remove consecutive (adjacent) duplicates
    auto last = std::unique(v.begin(), v.end());
    // v now holds {1 2 1 3 4 5 4 x x x}, where 'x' is indeterminate
    v.erase(last, v.end());
    print(2);

    // sort followed by unique, to remove all duplicates
    std::sort(v.begin(), v.end()); // {1 1 2 3 4 4 5}
    print(3);

    last = std::unique(v.begin(), v.end());
    // v now holds {1 2 3 4 5 x x}, where 'x' is indeterminate
    v.erase(last, v.end());
    print(4);
}

   Output:
@1: 1 2 1 1 3 3 3 4 5 4
@2: 1 2 1 3 4 5 4
@3: 1 1 2 3 4 4 5
@4: 1 2 3 4 5

Defect reports

   The following behavior-changing defect reports were applied
   retroactively to previously published C++ standards.
   DR Applied to Behavior as published Correct behavior
   LWG 202 C++98 the behavior was unclear if the elements are
   compared using a non-equivalence relation the behavior is
   undefined in this case

See also

   adjacent_find
   finds the first two adjacent items that are equal (or satisfy a given
   predicate)
   (function template)
   unique_copy
   creates a copy of some range of elements that contains no consecutive
   duplicates
   (function template)
   removeremove_if
   removes elements satisfying specific criteria
   (function template)
   unique
   removes consecutive duplicate elements
   (public member function of std::list<T,Allocator>)
   unique
   removes consecutive duplicate elements
   (public member function of std::forward_list<T,Allocator>)
   ranges::unique
   (C++20)
   removes consecutive duplicate elements in a range
   (niebloid)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/algorithm/unique
   &oldid=170502"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 27 March 2024, at 19:30.
     * This page has been accessed 719,515 times.
