std::vprint_nonunicode(std::ostream)

   From cppreference.com
   < cpp | io | basic ostream

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Input/output library
   I/O manipulators
   Print functions (C++23)
   C-style I/O
   Buffers
   basic_streambuf
   basic_filebuf
   basic_stringbuf
   basic_spanbuf
   (C++23)
   strstreambuf
   (C++98/26*)
   basic_syncbuf
   (C++20)
   Streams
   Abstractions
   ios_base
   basic_ios
   basic_istream
   basic_ostream
   basic_iostream
   File I/O
   basic_ifstream
   basic_ofstream
   basic_fstream
   String I/O
   basic_istringstream
   basic_ostringstream
   basic_stringstream
   Array I/O
   basic_ispanstream
   (C++23)
   basic_ospanstream
   (C++23)
   basic_spanstream
   (C++23)
   istrstream
   (C++98/26*)
   ostrstream
   (C++98/26*)
   strstream
   (C++98/26*)
   Synchronized Output
   basic_osyncstream
   (C++20)
   Types
   streamoff
   streamsize
   fpos
   Error category interface
   iostream_category
   (C++11)
   io_errc
   (C++11)

   std::basic_ostream
   Global objects
   coutwcout
   cerrwcerr
   clogwclog
   Member functions
   basic_ostream::basic_ostream
   basic_ostream::~basic_ostream
   basic_ostream::operator=
   (C++11)
   Formatted output
   basic_ostream::operator<<
   Unformatted output
   basic_ostream::put
   basic_ostream::write
   Positioning
   basic_ostream::tellp
   basic_ostream::seekp
   Miscellaneous
   basic_ostream::flush
   basic_ostream::swap
   (C++11)
   Member classes
   basic_ostream::sentry
   Non-member functions
   operator<<(std::basic_ostream)
   print(std::ostream)
   (C++23)
   println(std::ostream)
   (C++23)
   vprint_unicode(std::ostream)
   (C++23)
   vprint_nonunicode(std::ostream)
   (C++23)

   Defined in header <ostream>
   void vprint_nonunicode( std::ostream& os, std::string_view fmt,
   std::format_args args );
                                                                  (since C++23)

   Behaves as FormattedOutputFunction (except that some details of error
   reporting differ):
     * First, constructs and checks the sentry object.
     * Then, initializes an automatic variable as if by std::string out =
       std::vformat(os.getloc(), fmt, args);.
     * Finally, inserts the character sequence [out.begin(), out.end())
       into os.

Parameters

   os - output stream to insert data into
   fmt -
   an object that represents the format string. The format string consists
   of
     * ordinary characters (except { and }), which are copied unchanged to
       the output,
     * escape sequences {{ and }}, which are replaced with { and }
       respectively in the output, and
     * replacement fields.

   Each replacement field has the following format:
   { arg-id (optional) }               (1)
   { arg-id (optional) : format-spec } (2)
   1) replacement field without a format specification
   2) replacement field with a format specification
   arg-id - specifies the index of the argument in args whose value is to
   be used for formatting; if it is omitted, the arguments are used in
   order.

   The arg-id¿s in a format string must all be present or all be omitted.
   Mixing manual and automatic indexing is an error.
   format-spec - the format specification defined by the std::formatter
   specialization for the corresponding argument. Cannot start with }.

     * For basic types and standard string types, the format specification
       is interpreted as standard format specification.
     * For chrono types, the format specification is interpreted as chrono
       format specification.

     * For range types, the format specification is interpreted as range
       format specification.
     * For std::pair and std::tuple, the format specification is
       interpreted as tuple format specification.
     * For std::thread::id and std::stacktrace_entry, see thread id format
       specification and stacktrace entry format specification.
     * For std::basic_stacktrace, no format specifier is allowed.

   (since C++23)
     * For std::filesystem::path, see path format specification.

   (since C++26)
     * For other formattable types, the format specification is determined
       by user-defined formatter specializations.

   args - arguments to be formatted

Return value

   (none)

Exceptions

     * std::bad_alloc on allocation failure.
     * Propagate any exception thrown by any formatter, e.g.
       std::format_error, without regard to the value of os.exceptions()
       and without turning on ios_base::badbit in the error state of os.
     * May throw ios_base::failure caused by os.setstate(ios_base::badbit)
       which is called if an insertion into os fails.

Notes

   Feature-test macro  Value    Std                Feature
   __cpp_lib_print    202207L (C++23) Formatted output
   __cpp_lib_format   202207L (C++23) Exposing std::basic_format_string

Example

   This section is incomplete
   Reason: no example

See also

   vprint_unicode(std::ostream)
   (C++23)
   performs Unicode aware output using type-erased argument representation
   (function)
   print(std::ostream)
   (C++23)
   outputs formatted representation of the arguments
   (function template)
   operator<<(std::basic_ostream)
   inserts character data or insert into rvalue stream
   (function template)
   vprint_nonunicodevprint_nonunicode_locking
   (C++23)(C++23)
   prints to stdout or a file stream using type-erased argument
   representation
   (function)
   format
   (C++20)
   stores formatted representation of the arguments in a new string
   (function template)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/io/basic_ostream
   /vprint_nonunicode&oldid=171845"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 17 May 2024, at 18:33.
     * This page has been accessed 3,745 times.
