C++ named requirements: Callable

   From cppreference.com
   < cpp | named req

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   C++ named requirements
   Basic
   DefaultConstructible
   CopyAssignable
   CopyConstructible
   MoveAssignable
   (C++11)
   MoveConstructible
   (C++11)
   Destructible
   Type properties
   ScalarType
   TriviallyCopyable
   (C++11)
   StandardLayoutType
   (C++11)
   PODType
   TrivialType
   (C++11)
   ImplicitLifetimeType
   Library-Wide
   EqualityComparable
   LessThanComparable
   Swappable
   ValueSwappable
   (C++11)
   NullablePointer
   (C++11)
   Hash
   (C++11)
   Allocator
   FunctionObject
   Callable
   Predicate
   BinaryPredicate
   Compare
   Container
   Container
   SequenceContainer
   ContiguousContainer
   (C++17)
   ReversibleContainer
   AssociativeContainer
   AllocatorAwareContainer
   UnorderedAssociativeContainer
   (C++11)
   Container Elements
   DefaultInsertable
   (C++11)
   CopyInsertable
   (C++11)
   MoveInsertable
   (C++11)
   EmplaceConstructible
   (C++11)
   Erasable
   (C++11)
   Iterator
   LegacyIterator
   LegacyOutputIterator
   LegacyInputIterator
   LegacyForwardIterator
   LegacyBidirectionalIterator
   LegacyRandomAccessIterator
   LegacyContiguousIterator
   (C++17)
   ConstexprIterator
   (C++20)
   Stream I/O
   FormattedInputFunction
   UnformattedInputFunction
   FormattedOutputFunction
   UnformattedOutputFunction
   Formatters
   BasicFormatter
   (C++20)
   Formatter
   (C++20)
   Random Numbers
   SeedSequence
   (C++11)
   RandomNumberEngine
   (C++11)
   RandomNumberDistribution
   (C++11)
   UniformRandomBitGenerator
   (C++11)
   RandomNumberEngineAdaptor
   (C++11)
   Concurrency
   BasicLockable
   (C++11)
   Lockable
   (C++11)
   TimedLockable
   (C++11)
   SharedLockable
   (C++14)
   SharedTimedLockable
   (C++14)
   Mutex
   (C++11)
   TimedMutex
   (C++11)
   SharedMutex
   (C++17)
   SharedTimedMutex
   (C++14)
   Ranges
   RangeAdaptorObject
   (C++20)
   RangeAdaptorClosureObject
   (C++20)
   Other
   CharTraits
   RegexTraits
   (C++11)
   BitmaskType
   LiteralType
   (C++11)
   NumericType
   UnaryTypeTrait
   (C++11)
   BinaryTypeTrait
   (C++11)
   TransformationTrait
   (C++11)
   Clock
   (C++11)
   TrivialClock
   (C++11)

   A Callable type is a type for which the INVOKE and INVOKE<R> operations
   (used by, e.g., std::function, std::bind, and std::thread::thread) are
   applicable.

   INVOKE can be performed explicitly using the library function
   std::invoke.
   (since C++17)

   INVOKE<R> can be performed explicitly using the library function
   std::invoke_r.
   (since C++23)

Requirements

   The type T satisfies Callable if

   Given
     * f, an object of type T,
     * ArgTypes, suitable list of argument types,
     * R, suitable return type.

   The following expressions must be valid:
   Expression Requirements
   INVOKE<R>(f, std::declval<ArgTypes>()...) The expression is well-formed
   in unevaluated context.

Notes

   Pointers to data members are Callable, even though no function calls
   take place.

Standard library

   In addition, the following standard library facilities accept any
   Callable type (not just FunctionObject):
   function
   (C++11)
   wraps callable object of any copy constructible type with specified
   function call signature
   (class template)
   move_only_function
   (C++23)
   wraps callable object of any type with specified function call
   signature
   (class template)
   bind
   (C++11)
   binds one or more arguments to a function object
   (function template)
   bind_frontbind_back
   (C++20)(C++23)
   bind a variable number of arguments, in order, to a function object
   (function template)
   reference_wrapper
   (C++11)
   CopyConstructible and CopyAssignable reference wrapper
   (class template)
   result_ofinvoke_result
   (C++11)(removed in C++20)(C++17)
   deduces the result type of invoking a callable object with a set of
   arguments
   (class template)
   thread
   (C++11)
   manages a separate thread
   (class)
   jthread
   (C++20)
   std::thread with support for auto-joining and cancellation
   (class)
   call_once
   (C++11)
   invokes a function only once even if called from multiple threads
   (function template)
   async
   (C++11)
   runs a function asynchronously (potentially in a new thread) and
   returns a std::future that will hold the result
   (function template)
   packaged_task
   (C++11)
   packages a function to store its return value for asynchronous
   retrieval
   (class template)

See also

   is_invocableis_invocable_ris_nothrow_invocableis_nothrow_invocable_r
   (C++17)
   checks if a type can be invoked (as if by std::invoke) with the given
   argument types
   (class template)
   invocableregular_invocable
   (C++20)
   specifies that a callable type can be invoked with a given set of
   argument types
   (concept)
   invokeinvoke_r
   (C++17)(C++23)
   invokes any Callable object with given arguments and possibility to
   specify return type(since C++23)
   (function template)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/named_req/Callab
   le&oldid=156490"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 9 August 2023, at 12:35.
     * This page has been accessed 228,276 times.
