C++ attribute: assume (since C++23)

   From cppreference.com
   < cpp | language | attributes

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   C++ language
   General topics
   Preprocessor
   Comments
   Keywords
   Escape sequences
   Flow control
   Conditional execution statements
   if
   switch
   Iteration statements (loops)
   for
   range-for (C++11)
   while
   do-while
   Jump statements
   continue - break
   goto - return
   Functions
   Function declaration
   Lambda function expression
   inline specifier
   Dynamic exception specifications (until C++17*)
   noexcept specifier (C++11)
   Exceptions
   throw-expression
   try block
   handler
   Namespaces
   Namespace declaration
   Namespace aliases
   Types
   Fundamental types
   Enumeration types
   Function types
   Class/struct types
   Union types
   Specifiers
   const/volatile
   decltype (C++11)
   auto (C++11)
   constexpr (C++11)
   consteval (C++20)
   constinit (C++20)
   Storage duration specifiers
   Initialization
   Default-initialization
   Value-initialization
   Zero-initialization
   Copy-initialization
   Direct-initialization
   Aggregate initialization
   List-initialization (C++11)
   Constant initialization
   Reference initialization
   Expressions
   Value categories
   Order of evaluation
   Operators
   Operator precedence
   Alternative representations
   Literals
   Boolean - Integer - Floating-point
   Character - String - nullptr (C++11)
   User-defined (C++11)
   Utilities
   Attributes (C++11)
   Types
   typedef declaration
   Type alias declaration (C++11)
   Casts
   Implicit conversions
   static_cast
   const_cast
   Explicit conversions
   dynamic_cast
   reinterpret_cast
   Memory allocation
   new expression
   delete expression
   Classes
   Class declaration
   Constructors
   this pointer
   Access specifiers
   friend specifier
   Class-specific function properties
   Virtual function
   override specifier (C++11)
   final specifier (C++11)
   explicit (C++11)
   static
   Special member functions
   Default constructor
   Copy constructor
   Move constructor (C++11)
   Copy assignment
   Move assignment (C++11)
   Destructor
   Templates
   Class template
   Function template
   Template specialization
   Parameter packs (C++11)
   Miscellaneous
   Inline assembly
   History of C++

   Declarations
   Overview
   Declaration syntax
   decl-specifier-seq
   Declarator
   Conflicting declarations
   Specifiers
   typedef
   inline
   virtual function specifier
   explicit function specifier
   friend
   constexpr
   (C++11)
   consteval
   (C++20)
   constinit
   (C++20)
   Storage class specifiers
   Translation-unit-local (C++20)
   class/struct
   union
   enum
   decltype
   (C++11)
   auto
   (C++11)
   alignas
   (C++11)
   constvolatile
   Pack indexing specifier (C++26)
   Elaborated type specifier
   Attributes (C++11)
   Declarators
   Reference
   Pointer
   Array
   Block declarations
   Simple-declaration
   ->Structured binding declaration (C++17)
   Alias declaration (C++11)
   Namespace alias definition
   using declaration
   using directive
   static_assert declaration (C++11)
   asm declaration
   Opaque enum declaration (C++11)
   Other declarations
   Namespace definition
   Function declaration
   Class template declaration
   Function template declaration
   Explicit template instantiation (C++11)
   Explicit template specialization
   Linkage specification
   Attribute declaration (C++11)
   Empty declaration

   Attributes
   assume
   (C++23)
   carries_dependency
   (C++11)
   deprecated
   (C++14)
   fallthrough
   (C++17)
   indeterminate
   (C++26)
   likely
   (C++20)
   maybe_unused
   (C++17)
   no_unique_address
   (C++20)
   nodiscard
   (C++17)
   noreturn
   (C++11)
   optimize_for_synchronized
   (TM TS)
   unlikely
   (C++20)

   Tells the compiler to assume that an expression will always evaluate to
   true at a given point, and asks the compiler to perform optimizations
   relying on that fact.

   IMPORTANT: DANGEROUS OPERATION, USE WITH CARE. This is a dangerous
   operation for advanced experts only. It is used to inject a data fact
   directly into the compiler that the compiler cannot verify, and it must
   be impossible for the expression to ever be false under any
   circumstances. If the expression can ever evaluate to false, it will
   inject undefined behavior into your whole program (not just where the
   assumption appears). It is not the same as an assertion or
   precondition, and should never be used in place of an assertion or
   precondition.

Syntax

   [[assume( expression )]]
   expression - expression that must evaluate to true

Explanation

   Can only be applied to a null statement, as in [[assume(x > 0)]];. This
   statement is called an assumption. If the expression (contextually
   converted to bool) would not evaluate to true at the place the
   assumption occurs, the behavior is undefined. Otherwise, the statement
   does nothing. In particular, the expression is not evaluated (but it is
   still potentially evaluated).

   The purpose of an assumption is to allow compiler optimizations based
   on the information given.

   The expression may not be a comma operator expression, but enclosing
   the expression in parentheses will allow the comma operator to be used.

Notes

   If the expression would have undefined behavior, or if it would cause
   an exception to be thrown, then it does not evaluate to true.

   Since assumptions cause undefined behavior if they do not hold, they
   should be used sparingly. They are not intended as a mechanism to
   document the preconditions of a function or to diagnose violations of
   preconditions. Also, it should not be presumed, without checking, that
   the compiler actually makes use of any particular assumption.

Example

void f(int& x, int y)
{
    void g(int);
    void h();

    [[assume(x > 0)]]; // Compiler may assume x is positive

    g(x / 2); // More efficient code possibly generated

    x = 3;
    int z = x;

    [[assume((h(), x == z))]]; // Compiler may assume x would have the same valu
e after
                               // calling h
                               // The assumption does not cause a call to h

    h();
    g(x); // Compiler may replace this with g(3);

    h();
    g(x); // Compiler may NOT replace this with g(3);
          // An assumption applies only at the point where it appears

    z = std::abs(y);

    [[assume((g(z), true))]]; // Compiler may assume g(z) will return

    g(z); // Due to above and below assumptions, compiler may replace this with
g(10);

    [[assume(y == -10)]]; // Undefined behavior if y != -10 at this point

    [[assume((x - 1) * 3 == 12)]];

    g(x); // Compiler may replace this with g(5);
}

References

     * C++23 standard (ISO/IEC 14882:2023):

          + 9.12.3 Assumption attribute [dcl.attr.assume]

See also

   unreachable
   (C++23)
   marks unreachable point of execution
   (function)

External links

   1.  Clang language extensions doc: __builtin_assume.
   2.  Clang attribute reference doc: assume.
   3.  MSVC doc: __assume built-in.
   4.  GCC doc: __attribute__((assume(...))).
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/language/attribu
   tes/assume&oldid=171142"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 22 April 2024, at 13:54.
     * This page has been accessed 35,923 times.
