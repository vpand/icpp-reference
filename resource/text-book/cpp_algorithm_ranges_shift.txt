std::ranges::shift_left, std::ranges::shift_right

   From cppreference.com
   < cpp | algorithm | ranges

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Algorithm library
   Constrained algorithms and algorithms on ranges (C++20)
   Constrained algorithms, e.g. ranges::copy, ranges::sort, ...
   Execution policies (C++17)
   is_execution_policy
   (C++17)
   execution::seqexecution::parexecution::par_unseqexecution::unseq
   (C++17)    (C++17)(C++17)(C++20)
   execution::sequenced_policyexecution::parallel_policyexecution::paralle
   l_unsequenced_policyexecution::parallel_unsequenced
   (C++17)(C++17)(C++17)(C++20)
   Non-modifying sequence operations
   Batch operations
   for_each
   for_each_n
   (C++17)
   Search operations
   all_ofany_ofnone_of
   (C++11)                (C++11)(C++11)
   countcount_if
   mismatch
   equal
   findfind_iffind_if_not
   (C++11)
   find_end
   find_first_of
   adjacent_find
   search
   search_n
   Modifying sequence operations
   Copy operations
   copycopy_if
   (C++11)
   copy_backward
   copy_n
   (C++11)
   move
   (C++11)
   move_backward
   (C++11)
   Swap operations
   swap
   iter_swap
   swap_ranges
   Transformation operations
   replacereplace_if
   transform
   replace_copyreplace_copy_if
   Generation operations
   fill
   fill_n
   generate
   generate_n
   Removing operations
   removeremove_if
   unique
   remove_copyremove_copy_if
   unique_copy
   Order-changing operations
   reverse
   reverse_copy
   rotate
   rotate_copy
   random_shuffleshuffle
   (until C++17)(C++11)
   shift_leftshift_right
   (C++20)(C++20)
   Sampling operations
   sample
   (C++17)
   Sorting and related operations
   Partitioning operations
   partition
   partition_copy
   (C++11)
   stable_partition
   is_partitioned
   (C++11)
   partition_point
   (C++11)
   Sorting operations
   sort
   stable_sort
   partial_sort
   partial_sort_copy
   is_sorted
   (C++11)
   is_sorted_until
   (C++11)
   nth_element
   Binary search operations
   (on partitioned ranges)
   lower_bound
   upper_bound
   equal_range
   binary_search
   Set operations (on sorted ranges)
   includes
   set_union
   set_intersection
   set_difference
   set_symmetric_difference
   Merge operations (on sorted ranges)
   merge
   inplace_merge
   Heap operations
   push_heap
   pop_heap
   make_heap
   sort_heap
   is_heap
   (C++11)
   is_heap_until
   (C++11)
   Minimum/maximum operations
   max
   min
   minmax
   (C++11)
   clamp
   (C++17)
   max_element
   min_element
   minmax_element
   (C++11)
   Lexicographical comparison operations
   lexicographical_compare
   lexicographical_compare_three_way
   (C++20)
   Permutation operations
   next_permutation
   prev_permutation
   is_permutation
   (C++11)
   C library
   qsort
   bsearch
   Numeric operations
   iota
   (C++11)
   inner_product
   adjacent_difference

   accumulate
   reduce
   (C++17)
   transform_reduce
   (C++17)
   partial_sum
   inclusive_scan
   (C++17)
   exclusive_scan
   (C++17)
   transform_inclusive_scan
   (C++17)
   transform_exclusive_scan
   (C++17)
   Operations on uninitialized memory
   uninitialized_copy
   uninitialized_move
   (C++17)
   uninitialized_fill
   uninitialized_copy_n
   (C++11)
   uninitialized_move_n
   (C++17)
   uninitialized_fill_n
   destroy
   (C++17)
   destroy_n
   (C++17)
   destroy_at
   (C++17)
   construct_at
   (C++20)
   uninitialized_default_construct
   (C++17)
   uninitialized_value_construct
   (C++17)
   uninitialized_default_construct_n
   (C++17)
   uninitialized_value_construct_n
   (C++17)

   Constrained algorithms
   All names in this menu belong to namespace std::ranges
   Non-modifying sequence operations
   all_ofany_ofnone_of
   for_each
   for_each_n

   countcount_if
   adjacent_find
   mismatch
   equal
   lexicographical_compare

   containscontains_subrange
   (C++23)(C++23)
   findfind_iffind_if_not
   find_lastfind_last_iffind_last_if_not
   (C++23)(C++23)(C++23)
   find_end
   find_first_of
   search
   search_n
   starts_with
   (C++23)
   ends_with
   (C++23)
   Modifying sequence operations
   copycopy_if
   copy_n
   copy_backward

   move
   move_backward
   shift_leftshift_right
   (C++23)(C++23)
   fill
   fill_n
   generate
   generate_n

   transform
   swap_ranges

   shuffle
   sample
   removeremove_if
   replacereplace_if
   reverse
   rotate
   remove_copyremove_copy_if

   unique
   replace_copyreplace_copy_if
   reverse_copy
   rotate_copy
   unique_copy
   Partitioning operations
   is_partitioned

   partition_point

   partition

   partition_copy

   stable_partition
   Sorting operations
   is_sorted
   is_sorted_until

   sort
   stable_sort

   partial_sort

   nth_element
   partial_sort_copy
   Binary search operations (on sorted ranges)
   lower_bound

   upper_bound

   binary_search

   equal_range
   Set operations (on sorted ranges)
   merge
   inplace_merge

   set_difference
   set_intersection

   set_union

   includes
   set_symmetric_difference
   Heap operations
   is_heap
   is_heap_until

   make_heap

   sort_heap
   push_heap
   pop_heap
   Minimum/maximum operations
   max
   max_element

   min
   min_element

   minmax
   minmax_element

   clamp
   Permutation operations
   is_permutation

   next_permutation

   prev_permutation
   Fold operations
   fold_left
   (C++23)
   fold_left_first
   (C++23)
   fold_right
   (C++23)
   fold_right_last
   (C++23)
   fold_left_with_iter
   (C++23)
   fold_left_first_with_iter
   (C++23)
   Numeric operations
   iota
   (C++23)
   Random number generation
   generate_random
   (C++26)
   Operations on uninitialized storage
   construct_at

   destroy
   destroy_n
   destroy_at
   uninitialized_copy

   uninitialized_move
   uninitialized_fill
   uninitialized_copy_n

   uninitialized_move_n
   uninitialized_fill_n
   uninitialized_default_construct
   uninitialized_default_construct_n
   uninitialized_value_construct
   uninitialized_value_construct_n
   Return types
   in_fun_result
   in_in_result
   in_found_result

   in_out_result
   in_in_out_result

   in_out_out_result

   min_max_result
   out_value_result
   (C++23)
   in_value_result
   (C++23)

   Defined in header <algorithm>
   Call signature
   template< std::permutable I, std::sentinel_for<I> S >

   constexpr ranges::subrange<I>
       shift_left( I first, S last, std::iter_difference_t<I> n );
   (1)                                                  (since C++23)
   template< ranges::forward_range R >

   requires std::permutable<ranges::iterator_t<R>>
   constexpr ranges::borrowed_subrange_t<R>
       shift_left( R&& r, ranges::range_difference_t<R> n );
   (2)                                                  (since C++23)
   template< std::permutable I, std::sentinel_for<I> S >

   constexpr ranges::subrange<I>
       shift_right( I first, S last, std::iter_difference_t<I> n );
   (3)                                                  (since C++23)
   template< ranges::forward_range R >

   requires std::permutable<ranges::iterator_t<R>>
   constexpr ranges::borrowed_subrange_t<R>
       shift_right( R&& r, ranges::range_difference_t<R> n );
   (4)                                                  (since C++23)

   Shifts the elements in the range [first, last) or r by n positions. The
   behavior is undefined if [first, last) is not a valid range.
   1) Shifts the elements towards the beginning of the range:
     * If n == 0 || n >= last - first, there are no effects.
     * If n < 0, the behavior is undefined.
     * Otherwise, for every integer i in [0, last - first - n), moves the
       element originally at position first + n + i to position first + i.
       The moves are performed in increasing order of i starting from 0.

   3) Shifts the elements towards the end of the range:
     * If n == 0 || n >= last - first, there are no effects.
     * If n < 0, the behavior is undefined.
     * Otherwise, for every integer i in [0, last - first - n), moves the
       element originally at position first + i to position first + n + i.
       If I models bidirectional_iterator, then the moves are performed in
       decreasing order of i starting from last - first - n - 1.

   2,4) Same as (1) or (3) respectively, but uses r as the range, as if
   using ranges::begin(r) as first and ranges::end(r) as last.

   Elements that are in the original range but not the new range are left
   in a valid but unspecified state.

   The function-like entities described on this page are niebloids, that
   is:
     * Explicit template argument lists cannot be specified when calling
       any of them.
     * None of them are visible to argument-dependent lookup.
     * When any of them are found by normal unqualified lookup as the name
       to the left of the function-call operator, argument-dependent
       lookup is inhibited.

   In practice, they may be implemented as function objects, or with
   special compiler extensions.

Parameters

   first - the beginning of the original range
   last  - the end of the original range
   r     - the range of elements to shift
   n     - the number of positions to shift

Return value

   1,2) {first, /*NEW_LAST*/}, where NEW_LAST is the end of the resulting
   range and equivalent to:
     * first + (last - first - n), if n is less than last - first;
     * first otherwise.

   3,4) {/*NEW_FIRST*/, last}, where NEW_FIRST is the beginning of the
   resulting range and equivalent to:
     * first + n, if n is less than last - first;
     * last otherwise.

Complexity

   1,2) At most ranges::distance(first, last) - n assignments.
   3,4) At most ranges::distance(first, last) - n assignment or swaps.

Notes

   ranges::shift_left / ranges::shift_right has better efficiency on
   common implementations if I models bidirectional_iterator or (better)
   random_access_iterator.

   Implementations (e.g. MSVC STL) may enable vectorization when the
   iterator type models contiguous_iterator and swapping its value type
   calls neither non-trivial special member function nor ADL-found swap.
   Feature-test macro Value Std Feature
   __cpp_lib_shift 202202L (C++23) std::ranges::shift_left and
   std::ranges::shift_right

Example

   Run this code
#include <algorithm>
#include <iostream>
#include <string>
#include <type_traits>
#include <vector>

struct S
{
    int value{0};
    bool specified_state{true};

    S(int v = 0) : value{v} {}
    S(S const& rhs) = default;
    S(S&& rhs) { *this = std::move(rhs); }
    S& operator=(S const& rhs) = default;
    S& operator=(S&& rhs)
    {
        if (this != &rhs)
        {
            value = rhs.value;
            specified_state = rhs.specified_state;
            rhs.specified_state = false;
        }
        return *this;
    }
};

template<typename T>
std::ostream& operator<<(std::ostream& os, std::vector<T> const& v)
{
    for (const auto& s : v)
    {
        if constexpr (std::is_same_v<T, S>)
            s.specified_state ? os << s.value << ' ' : os << ". ";
        else if constexpr (std::is_same_v<T, std::string>)
            os << (s.empty() ? "." : s) << ' ';
        else
            os << s << ' ';
    }
    return os;
}

int main()
{
    std::cout << std::left;

    std::vector<S> a{1, 2, 3, 4, 5, 6, 7};
    std::vector<int> b{1, 2, 3, 4, 5, 6, 7};
    std::vector<std::string> c{"a", "b", "g", "d", "e", "z", "y"};

    std::cout << "vector<S> \tvector<int> \tvector<string>\n";
    std::cout << a << "  " << b << "  " << c << '\n';

    std::ranges::shift_left(a, 3);
    std::ranges::shift_left(b, 3);
    std::ranges::shift_left(c, 3);
    std::cout << a << "  " << b << "  " << c << '\n';

    std::ranges::shift_right(a, 2);
    std::ranges::shift_right(b, 2);
    std::ranges::shift_right(c, 2);
    std::cout << a << "  " << b << "  " << c << '\n';

    std::ranges::shift_left(a, 8); // has no effect: n >= last - first
    std::ranges::shift_left(b, 8); // ditto
    std::ranges::shift_left(c, 8); // ditto
    std::cout << a << "  " << b << "  " << c << '\n';

//  std::ranges::shift_left(a, -3); // UB
}

   Possible output:
vector<S>       vector<int>     vector<string>
1 2 3 4 5 6 7   1 2 3 4 5 6 7   a b g d e z y
4 5 6 7 . . .   4 5 6 7 5 6 7   d e z y . . .
. . 4 5 6 7 .   4 5 4 5 6 7 5   . . d e z y .
. . 4 5 6 7 .   4 5 4 5 6 7 5   . . d e z y .

See also

   ranges::move
   (C++20)
   moves a range of elements to a new location
   (niebloid)
   ranges::move_backward
   (C++20)
   moves a range of elements to a new location in backwards order
   (niebloid)
   ranges::rotate
   (C++20)
   rotates the order of elements in a range
   (niebloid)
   shift_leftshift_right
   (C++20)
   shifts elements in a range
   (function template)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/algorithm/ranges
   /shift&oldid=159543"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 24 September 2023, at 13:37.
     * This page has been accessed 10,557 times.
