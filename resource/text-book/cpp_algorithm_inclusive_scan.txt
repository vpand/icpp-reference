std::inclusive_scan

   From cppreference.com
   < cpp | algorithm

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Algorithm library
   Constrained algorithms and algorithms on ranges (C++20)
   Constrained algorithms, e.g. ranges::copy, ranges::sort, ...
   Execution policies (C++17)
   is_execution_policy
   (C++17)
   execution::seqexecution::parexecution::par_unseqexecution::unseq
   (C++17)    (C++17)(C++17)(C++20)
   execution::sequenced_policyexecution::parallel_policyexecution::paralle
   l_unsequenced_policyexecution::parallel_unsequenced
   (C++17)(C++17)(C++17)(C++20)
   Non-modifying sequence operations
   Batch operations
   for_each
   for_each_n
   (C++17)
   Search operations
   all_ofany_ofnone_of
   (C++11)                (C++11)(C++11)
   countcount_if
   mismatch
   equal
   findfind_iffind_if_not
   (C++11)
   find_end
   find_first_of
   adjacent_find
   search
   search_n
   Modifying sequence operations
   Copy operations
   copycopy_if
   (C++11)
   copy_backward
   copy_n
   (C++11)
   move
   (C++11)
   move_backward
   (C++11)
   Swap operations
   swap
   iter_swap
   swap_ranges
   Transformation operations
   replacereplace_if
   transform
   replace_copyreplace_copy_if
   Generation operations
   fill
   fill_n
   generate
   generate_n
   Removing operations
   removeremove_if
   unique
   remove_copyremove_copy_if
   unique_copy
   Order-changing operations
   reverse
   reverse_copy
   rotate
   rotate_copy
   random_shuffleshuffle
   (until C++17)(C++11)
   shift_leftshift_right
   (C++20)(C++20)
   Sampling operations
   sample
   (C++17)
   Sorting and related operations
   Partitioning operations
   partition
   partition_copy
   (C++11)
   stable_partition
   is_partitioned
   (C++11)
   partition_point
   (C++11)
   Sorting operations
   sort
   stable_sort
   partial_sort
   partial_sort_copy
   is_sorted
   (C++11)
   is_sorted_until
   (C++11)
   nth_element
   Binary search operations
   (on partitioned ranges)
   lower_bound
   upper_bound
   equal_range
   binary_search
   Set operations (on sorted ranges)
   includes
   set_union
   set_intersection
   set_difference
   set_symmetric_difference
   Merge operations (on sorted ranges)
   merge
   inplace_merge
   Heap operations
   push_heap
   pop_heap
   make_heap
   sort_heap
   is_heap
   (C++11)
   is_heap_until
   (C++11)
   Minimum/maximum operations
   max
   min
   minmax
   (C++11)
   clamp
   (C++17)
   max_element
   min_element
   minmax_element
   (C++11)
   Lexicographical comparison operations
   lexicographical_compare
   lexicographical_compare_three_way
   (C++20)
   Permutation operations
   next_permutation
   prev_permutation
   is_permutation
   (C++11)
   C library
   qsort
   bsearch
   Numeric operations
   iota
   (C++11)
   inner_product
   adjacent_difference

   accumulate
   reduce
   (C++17)
   transform_reduce
   (C++17)
   partial_sum
   inclusive_scan
   (C++17)
   exclusive_scan
   (C++17)
   transform_inclusive_scan
   (C++17)
   transform_exclusive_scan
   (C++17)
   Operations on uninitialized memory
   uninitialized_copy
   uninitialized_move
   (C++17)
   uninitialized_fill
   uninitialized_copy_n
   (C++11)
   uninitialized_move_n
   (C++17)
   uninitialized_fill_n
   destroy
   (C++17)
   destroy_n
   (C++17)
   destroy_at
   (C++17)
   construct_at
   (C++20)
   uninitialized_default_construct
   (C++17)
   uninitialized_value_construct
   (C++17)
   uninitialized_default_construct_n
   (C++17)
   uninitialized_value_construct_n
   (C++17)

   Numerics library
   Common mathematical functions
   Mathematical special functions (C++17)
   Mathematical constants (C++20)
   Basic linear algebra algorithms (C++26)
   Floating-point environment (C++11)
   Complex numbers
   Numeric arrays
   Pseudo-random number generation
   Factor operations
   gcd
   (C++17)
   lcm
   (C++17)
   Interpolations
   midpoint
   (C++20)
   lerp
   (C++20)
   Saturation arithmetic
   add_sat
   (C++26)
   sub_sat
   (C++26)
   saturate_cast
   (C++26)
   mul_sat
   (C++26)
   div_sat
   (C++26)
   Generic numeric operations
   iota
   (C++11)
   ranges::iota
   (C++23)
   accumulate
   inner_product
   adjacent_difference
   partial_sum
   reduce
   (C++17)
   transform_reduce
   (C++17)
   inclusive_scan
   (C++17)
   exclusive_scan
   (C++17)
   transform_inclusive_scan
   (C++17)
   transform_exclusive_scan
   (C++17)
   Bit operations
   has_single_bit
   (C++20)
   bit_cast
   (C++20)
   bit_ceil
   (C++20)
   bit_floor
   (C++20)
   bit_width
   (C++20)
   rotl
   (C++20)
   rotr
   (C++20)
   popcount
   (C++20)
   countl_zero
   (C++20)
   countl_one
   (C++20)
   countr_zero
   (C++20)
   countr_one
   (C++20)
   byteswap
   (C++23)
   endian
   (C++20)

   Defined in header <numeric>
   template< class InputIt, class OutputIt >

   OutputIt inclusive_scan( InputIt first, InputIt last,
                            OutputIt d_first );
   (1) (since C++17)
   (constexpr since C++20)
   template< class ExecutionPolicy,

             class ForwardIt1, class ForwardIt2 >
   ForwardIt2 inclusive_scan( ExecutionPolicy&& policy,
                              ForwardIt1 first, ForwardIt1 last,
                              ForwardIt2 d_first );
   (2) (since C++17)
   template< class InputIt, class OutputIt, class BinaryOp >

   OutputIt inclusive_scan( InputIt first, InputIt last,
                            OutputIt d_first, BinaryOp op );
   (3) (since C++17)
   (constexpr since C++20)
   template< class ExecutionPolicy,

             class ForwardIt1, class ForwardIt2, class BinaryOp >
   ForwardIt2 inclusive_scan( ExecutionPolicy&& policy,
                              ForwardIt1 first, ForwardIt1 last,
                              ForwardIt2 d_first, BinaryOp op );
   (4) (since C++17)
   template< class InputIt, class OutputIt,

             class BinaryOp, class T >
   OutputIt inclusive_scan( InputIt first, InputIt last,
                            OutputIt d_first, BinaryOp op, T init );
   (5) (since C++17)
   (constexpr since C++20)
   template< class ExecutionPolicy,

             class ForwardIt1, class ForwardIt2,
             class BinaryOp, class T >
   ForwardIt2 inclusive_scan( ExecutionPolicy&& policy,
                              ForwardIt1 first, ForwardIt1 last,
                              ForwardIt2 d_first, BinaryOp op, T init );
   (6) (since C++17)
   1) Equivalent to inclusive_scan(first, last, d_first, std::plus<>().
   3) Computes the inclusive prefix sum using op.
   For each integer i in [0, std::distance(first, last)), performs the
   following operations in order:
    1. Creates a sequence which is formed by the elements of [first, iter]
       in order, where iter is the next i
       th iterator of first.
    2. Computes the generalized noncommutative sum of the sequence over
       op.
    3. Assigns the result to *dest, where dest is the next i
       th iterator of d_first.

   5) Same as (3), but each sequence created is formed by init followed by
   the elements of [first, iter] in order.
   2,4,6) Same as (1,3,5), but executed according to policy.
   These overloads participate in overload resolution only if

   std::is_execution_policy_v<std::decay_t<ExecutionPolicy>> is true.
   (until C++20)

   std::is_execution_policy_v<std::remove_cvref_t<ExecutionPolicy>> is
   true.
   (since C++20)

   The generalized, noncommutative sum of a sequence of elements over a
   binary operation binary_op is defined as follows:
     * If the sequence only has one element, the sum is the value of the
       element.
     * Otherwise, performs the following operations in order:

    1. Selects any two adjacent elements elem1 and elem2 from the
       sequence.
    2. Calculates binary_op(elem1, elem2) and replaces the two elements in
       the sequence with the result.
    3. Repeats steps 1 and 2 until there is only one element in the
       sequence.

   Given binary_op as the actual binary operation:
     * The result is non-deterministic if the binary_op is not associative
       (such as floating-point addition).

     * For overloads (1-4), if binary_op(*first, *first) is not
       convertible to the value type of decltype(first), the program is
       ill-formed.

     * For overloads (5,6), if any of the following values is not
       convertible to T, the program is ill-formed:

          + binary_op(init, *first)
          + binary_op(init, init)
          + binary_op(*first, *first)

     * If any of the following conditions is satisfied, the behavior is
       undefined:

          + For overloads (1-4), the value type of decltype(first) is not
            MoveConstructible.
          + For overloads (5,6), T is not MoveConstructible.
          + binary_op modifies any element of [first, last).
          + binary_op invalidates any iterator or subrange of
            [first, last].

Parameters

   first, last - the range of elements to sum
   d_first - the beginning of the destination range; may be equal to first
   policy - the execution policy to use. See execution policy for details.
   init - the initial value
   op - binary FunctionObject that will be applied in to the result of
   dereferencing the input iterators, the results of other op, and init
   (if provided)
   Type requirements
   -
   InputIt must meet the requirements of LegacyInputIterator.
   -
   OutputIt must meet the requirements of LegacyOutputIterator.
   -
   ForwardIt1, ForwardIt2 must meet the requirements of
   LegacyForwardIterator.

Return value

   Iterator to the element past the last element written.

Complexity

   Given \(\scriptsize N\)N as std::distance(first, last):
   1,2) \(\scriptsize O(N)\)O(N) applications of std::plus<>().
   3-6) \(\scriptsize O(N)\)O(N) applications of op.

Exceptions

   The overloads with a template parameter named ExecutionPolicy report
   errors as follows:
     * If execution of a function invoked as part of the algorithm throws
       an exception and ExecutionPolicy is one of the standard policies,
       std::terminate is called. For any other ExecutionPolicy, the
       behavior is implementation-defined.
     * If the algorithm fails to allocate memory, std::bad_alloc is
       thrown.

Example

   Run this code
#include <functional>
#include <iostream>
#include <iterator>
#include <numeric>
#include <vector>

int main()
{
    std::vector data{3, 1, 4, 1, 5, 9, 2, 6};

    std::cout << "Exclusive sum: ";
    std::exclusive_scan(data.begin(), data.end(),
                        std::ostream_iterator<int>(std::cout, " "),
                        0);

    std::cout << "\nInclusive sum: ";
    std::inclusive_scan(data.begin(), data.end(),
                        std::ostream_iterator<int>(std::cout, " "));

    std::cout << "\n\nExclusive product: ";
    std::exclusive_scan(data.begin(), data.end(),
                        std::ostream_iterator<int>(std::cout, " "),
                        1, std::multiplies<>{});

    std::cout << "\nInclusive product: ";
    std::inclusive_scan(data.begin(), data.end(),
                        std::ostream_iterator<int>(std::cout, " "),
                        std::multiplies<>{});
}

   Output:
Exclusive sum: 0 3 4 8 9 14 23 25
Inclusive sum: 3 4 8 9 14 23 25 31

Exclusive product: 1 3 3 12 12 60 540 1080
Inclusive product: 3 3 12 12 60 540 1080 6480

See also

   adjacent_difference
   computes the differences between adjacent elements in a range
   (function template)
   accumulate
   sums up or folds a range of elements
   (function template)
   partial_sum
   computes the partial sum of a range of elements
   (function template)
   transform_inclusive_scan
   (C++17)
   applies an invocable, then calculates inclusive scan
   (function template)
   exclusive_scan
   (C++17)
   similar to std::partial_sum, excludes the i^th input element from the
   i^th sum
   (function template)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/algorithm/inclus
   ive_scan&oldid=172133"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 29 May 2024, at 15:43.
     * This page has been accessed 86,844 times.
