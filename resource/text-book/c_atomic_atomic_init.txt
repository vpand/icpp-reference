atomic_init

   From cppreference.com
   < c | atomic

   C
   Language
   Headers
   Type support
   Program utilities
   Variadic function support
   Error handling
   Dynamic memory management
   Strings library
   Algorithms
   Numerics
   Date and time utilities
   Input/output support
   Localization support
   Concurrency support (C11)
   Technical Specifications
   Symbol index

   Concurrency support library
   Threads
   thrd_create
   thrd_equal
   thrd_current

   thrd_sleep
   thrd_yield
   thrd_exit
   thrd_detach
   thrd_join
   thrd_successthrd_timedoutthrd_busythrd_nomemthrd_error

   Atomic operations
   atomic_init
   ATOMIC_VAR_INIT
   (until C23)
   ATOMIC_***_LOCK_FREE
   atomic_is_lock_free
   atomic_store
   atomic_load
   atomic_exchange
   atomic_compare_exchange
   atomic_fetch_add
   atomic_fetch_sub
   atomic_fetch_or
   atomic_fetch_xor
   atomic_fetch_and
   Atomic flags
   atomic_flag
   ATOMIC_FLAG_INIT
   atomic_flag_test_and_set
   atomic_flag_clear
   Memory ordering
   memory_order
   kill_dependency
   atomic_thread_fence
   atomic_signal_fence
   Mutual exclusion
   mtx_init
   mtx_lock
   mtx_timedlock
   mtx_trylock
   call_once
   mtx_unlock
   mtx_destroy
   mtx_plainmtx_recursivemtx_timed
   Condition variables
   cnd_init
   cnd_signal
   cnd_broadcast
   cnd_wait
   cnd_timedwait
   cnd_destroy
   Thread-local storage
   thread_local
   TSS_DTOR_ITERATIONS

   tss_create
   tss_get
   tss_set
   tss_delete

   Defined in header <stdatomic.h>
   void atomic_init( volatile A* obj, C desired );
                                                  (since C11)

   Initializes the default-constructed atomic object obj with the value
   desired. The function is not atomic: concurrent access from another
   thread, even through an atomic operation, is a data race.

   This is a generic function defined for all atomic object types A. The
   argument is pointer to a volatile atomic type to accept addresses of
   both non-volatile and volatile (e.g. memory-mapped I/O) atomic objects,
   and volatile semantic is preserved when applying this operation to
   volatile atomic objects. C is the non-atomic type corresponding to A.

   It is unspecified whether the name of a generic function is a macro or
   an identifier declared with external linkage. If a macro definition is
   suppressed in order to access an actual function (e.g. parenthesized
   like (atomic_init)(...)), or a program defines an external identifier
   with the name of a generic function, the behavior is undefined.

Parameters

   obj     - pointer to an atomic object to initialize
   desired - the value to initialize atomic object with

Return value

   (none)

Notes

   atomic_init is the only way to initialize dynamically-allocated atomic
   objects. For example:
_Atomic int *p = malloc(sizeof(_Atomic int));
atomic_init(p, 42);

References

     * C23 standard (ISO/IEC 9899:2023):

          + 7.17.2.2 The atomic_init generic function (p: TBD)

     * C17 standard (ISO/IEC 9899:2018):

          + 7.17.2.2 The atomic_init generic function (p: 201)

     * C11 standard (ISO/IEC 9899:2011):

          + 7.17.2.2 The atomic_init generic function (p: 274-275)

See also

   ATOMIC_VAR_INIT
   (C11)(deprecated in C17)(removed in C23)
   initializes a new atomic object
   (function macro)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=c/atomic/atomic_init
   &oldid=161169"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 22 October 2023, at 13:47.
     * This page has been accessed 48,679 times.
