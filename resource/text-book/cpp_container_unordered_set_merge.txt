std::unordered_set<Key,Hash,KeyEqual,Allocator>::merge

   From cppreference.com
   < cpp | container | unordered set


   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Containers library
   Sequence
   array
   (C++11)
   vector
   vector<bool>
   deque
   forward_list
   (C++11)
   list
   Associative
   set
   multiset
   map
   multimap
   Unordered associative
   unordered_set
   (C++11)
   unordered_multiset
   (C++11)
   unordered_map
   (C++11)
   unordered_multimap
   (C++11)
   Adaptors
   stack
   queue
   priority_queue
   flat_set
   (C++23)
   flat_multiset
   (C++23)
   flat_map
   (C++23)
   flat_multimap
   (C++23)
   Views
   span
   (C++20)
   mdspan
   (C++23)
   Iterator invalidation
   Member function table
   Non-member function table

   std::unordered_set
   Member types
   Member functions
   unordered_set::unordered_set
   unordered_set::~unordered_set
   unordered_set::operator=
   unordered_set::get_allocator
   Iterators
   unordered_set::beginunordered_set::cbegin
   unordered_set::endunordered_set::cend
   Capacity
   unordered_set::size
   unordered_set::max_size
   unordered_set::empty
   Modifiers
   unordered_set::clear
   unordered_set::erase
   unordered_set::swap
   unordered_set::extract
   (C++17)
   unordered_set::merge
   (C++17)
   unordered_set::insert
   unordered_set::insert_range
   (C++23)
   unordered_set::emplace
   unordered_set::emplace_hint
   Lookup
   unordered_set::count
   unordered_set::find
   unordered_set::contains
   (C++20)
   unordered_set::equal_range
   Bucket interface
   unordered_set::begin(size_type)unordered_set::cbegin(size_type)
   unordered_set::end(size_type)unordered_set::cend(size_type)
   unordered_set::bucket_count
   unordered_set::max_bucket_count
   unordered_set::bucket_size
   unordered_set::bucket
   Hash policy
   unordered_set::load_factor
   unordered_set::max_load_factor

   unordered_set::rehash
   unordered_set::reserve
   Observers
   unordered_set::hash_function
   unordered_set::key_eq
   Non-member functions
   operator==operator!=
   (C++11)(C++11)(until C++20)
   std::swap(std::unordered_set)
   (C++11)
   erase_if(std::unordered_set)
   (C++20)
   Deduction guides(C++17)

   template< class H2, class P2 >
   void merge( std::unordered_set<Key, H2, P2, Allocator>& source );
   (1)                           (since C++17)
   template< class H2, class P2 >
   void merge( std::unordered_set<Key, H2, P2, Allocator>&& source );
   (2)                           (since C++17)
   template< class H2, class P2 >
   void merge( std::unordered_multiset<Key, H2, P2, Allocator>& source );
   (3)                           (since C++17)
   template< class H2, class P2 >
   void merge( std::unordered_multiset<Key, H2, P2, Allocator>&& source );
   (4)                           (since C++17)

   Attempts to extract ("splice") each element in source and insert it
   into *this using the hash function and key equality predicate of *this.
   If there is an element in *this with key equivalent to the key of an
   element from source, then that element is not extracted from source. No
   elements are copied or moved, only the internal pointers of the
   container nodes are repointed. All pointers and references to the
   transferred elements remain valid, but now refer into *this, not into
   source. Iterators referring to the transferred elements and all
   iterators referring to *this are invalidated. Iterators to elements
   remaining in source remain valid.

   The behavior is undefined if get_allocator() != source.get_allocator().

Parameters

   source - compatible container to transfer the nodes from

Return value

   (none)

Complexity

   Average case O(N), worst case O(N * size() + N), where N is
   source.size().

Example

   Run this code
#include <iostream>
#include <unordered_set>

// print out a container
template<class Os, class K>
Os& operator<<(Os& os, const std::unordered_set<K>& v)
{
    os << '[' << v.size() << "] {";
    bool o{};
    for (const auto& e : v)
        os << (o ? ", " : (o = 1, " ")) << e;
    return os << " }\n";
}

int main()
{
    std::unordered_set<char>
        p{'C', 'B', 'B', 'A'},
        q{'E', 'D', 'E', 'C'};

    std::cout << "p: " << p << "q: " << q;

    p.merge(q);

    std::cout << "p.merge(q);\n" << "p: " << p << "q: " << q;
}

   Possible output:
p: [3] { A, B, C }
q: [3] { C, D, E }
p.merge(q);
p: [5] { E, D, A, B, C }
q: [1] { C }

See also

   extract
   (C++17)
   extracts nodes from the container
   (public member function)
   insert
   inserts elements or nodes(since C++17)
   (public member function)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/container/unorde
   red_set/merge&oldid=125833"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 12 January 2021, at 06:18.
     * This page has been accessed 45,479 times.
