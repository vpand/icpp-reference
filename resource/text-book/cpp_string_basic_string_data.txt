std::basic_string<CharT,Traits,Allocator>::data

   From cppreference.com
   < cpp | string | basic string

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Strings library
   Null-terminated strings
   Byte strings
   Multibyte strings
   Wide strings
   Classes
   basic_string
   basic_string_view
   (C++17)
   char_traits

   std::basic_string
   Member functions
   basic_string::basic_string
   basic_string::~basic_string
   basic_string::operator=
   basic_string::assign
   basic_string::assign_range
   (C++23)
   basic_string::get_allocator
   Element access
   basic_string::at
   basic_string::operator[]
   basic_string::front
   (DR*)
   basic_string::back
   (DR*)
   basic_string::data
   basic_string::c_str
   basic_string::operator
    basic_string_view
   (C++17)
   Iterators
   basic_string::beginbasic_string::cbegin
   (C++11)
   basic_string::endbasic_string::cend
   (C++11)
   basic_string::rbeginbasic_string::crbegin
   (C++11)
   basic_string::rendbasic_string::crend
   (C++11)
   Capacity
   basic_string::empty
   basic_string::sizebasic_string::length
   basic_string::max_size
   basic_string::reserve
   basic_string::capacity
   basic_string::shrink_to_fit
   (DR*)
   Modifiers
   basic_string::clear
   basic_string::insert
   basic_string::insert_range
   (C++23)
   basic_string::erase
   basic_string::push_back
   basic_string::pop_back
   (DR*)
   basic_string::append
   basic_string::append_range
   (C++23)
   basic_string::operator+=
   basic_string::replace
   basic_string::replace_with_range
   (C++23)
   basic_string::copy
   basic_string::resize
   basic_string::resize_and_overwrite
   (C++23)
   basic_string::swap
   Search
   basic_string::find
   basic_string::rfind
   basic_string::find_first_of
   basic_string::find_first_not_of
   basic_string::find_last_of
   basic_string::find_last_not_of
   Operations
   basic_string::compare
   basic_string::starts_with
   (C++20)
   basic_string::ends_with
   (C++20)
   basic_string::contains
   (C++23)
   basic_string::substr
   Constants
   basic_string::npos
   Non-member functions
   operator+
   swap(std::basic_string)
   erase(std::basic_string)erase_if(std::basic_string)
   (C++20)(C++20)
   I/O
   operator<<operator>>
   getline
   Comparison
   operator==operator!=operator<operator>operator<=operator>=operator<=>
   (until C++20)(until C++20)(until C++20)(until C++20)(until
   C++20)(C++20)
   Numeric conversions
   stoistolstoll
   (C++11)(C++11)(C++11)
   stoulstoull
   (C++11)(C++11)
   stofstodstold
   (C++11)(C++11)(C++11)
   to_string
   (C++11)
   to_wstring
   (C++11)
   Literals
   operator""s
   (C++14)
   Helper classes
   hash<std::basic_string>
   (C++11)
   Deduction guides (C++17)

   const CharT* data() const;
   (1) (noexcept since C++11)
   (constexpr since C++20)
   CharT* data() noexcept;
   (2) (since C++17)
   (constexpr since C++20)

   Returns a pointer to the underlying array serving as character storage.
   The pointer is such that the range

   [data(), data() + size())
   (until C++11)

   [data(), data() + size()]
   (since C++11)

   is valid and the values in it correspond to the values stored in the
   string.

   The returned array is not required to be null-terminated.

   If empty() returns true, the pointer is a non-null pointer that should
   not be dereferenced.
   (until C++11)

   The returned array is null-terminated, that is, data() and c_str()
   perform the same function.

   If empty() returns true, the pointer points to a single null character.
   (since C++11)

   The pointer obtained from data() may be invalidated by:
     * Passing a non-const reference to the string to any standard library
       function, or
     * Calling non-const member functions on the string, excluding
       operator[](), at(), front(), back(), begin(), end(), rbegin(),
       rend().

   1) Modifying the character array accessed through the const overload of
   data has undefined behavior.
   2) Modifying the past-the-end null terminator stored at data() + size()
   to any value other than CharT() has undefined behavior.

Parameters

   (none)

Return value

   A pointer to the underlying character storage.

   data()[i] == operator[](i) for every i in [0, size()).
   (until C++11)

   data() + i == std::addressof(operator[](i)) for every i in [0, size()].
   (since C++11)

Complexity

   Constant.

Example

   Run this code
#include <algorithm>
#include <cassert>
#include <cstring>
#include <string>

int main()
{
    std::string const s("Emplary");
    assert(s.size() == std::strlen(s.data()));
    assert(std::equal(s.begin(), s.end(), s.data()));
    assert(std::equal(s.data(), s.data() + s.size(), s.begin()));
    assert('\0' == *(s.data() + s.size()));
}

See also

   front
   (DR*)
   accesses the first character
   (public member function)
   back
   (DR*)
   accesses the last character
   (public member function)
   c_str
   returns a non-modifiable standard C character array version of the
   string
   (public member function)
   data
   returns a pointer to the first character of a view
   (public member function of std::basic_string_view<CharT,Traits>)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/string/basic_str
   ing/data&oldid=171123"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 22 April 2024, at 06:40.
     * This page has been accessed 285,343 times.
