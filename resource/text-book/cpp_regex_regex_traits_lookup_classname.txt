std::regex_traits<CharT>::lookup_classname

   From cppreference.com
   < cpp | regex | regex traits

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Regular expressions library
   Classes
   basic_regex
   (C++11)
   sub_match
   (C++11)
   match_results
   (C++11)
   Algorithms
   regex_match
   (C++11)
   regex_search
   (C++11)
   regex_replace
   (C++11)
   Iterators
   regex_iterator
   (C++11)
   regex_token_iterator
   (C++11)
   Exceptions
   regex_error
   (C++11)
   Traits
   regex_traits
   (C++11)
   Constants
   syntax_option_type
   (C++11)
   match_flag_type
   (C++11)
   error_type
   (C++11)
   Regex Grammar
   Modified ECMAScript-262
   (C++11)

   std::regex_traits
   Member functions
   regex_traits::regex_traits
   regex_traits::length
   regex_traits::translate
   regex_traits::translate_nocase
   regex_traits::transform
   regex_traits::transform_primary
   regex_traits::lookup_collatename
   regex_traits::lookup_classname
   regex_traits::isctype
   regex_traits::value
   regex_traits::imbue
   regex_traits::getloc

   template< class ForwardIt >

   char_class_type lookup_classname( ForwardIt first,
                                     ForwardIt last,
                                     bool icase = false ) const;

   If the character sequence [first, last) represents the name of a valid
   character class in the currently imbued locale (that is, the string
   between [: and :] in regular expressions), returns the
   implementation-defined value representing this character class.
   Otherwise, returns zero.

   If the parameter icase is true, the character class ignores character
   case, e.g. the regex [:lower:] with std::regex_constants::icase
   generates a call to std::regex_traits<>::lookup_classname() with
   [first, last) indicating the string "lower" and icase == true. This
   call returns the same bitmask as the call generated by the regex
   [:alpha:] with icase == false.

   The following narrow and wide character class names are always
   recognized by std::regex_traits<char> and std::regex_traits<wchar_t>
   respectively, and the classifications returned (with icase == false)
   correspond to the matching classifications obtained by the std::ctype
   facet of the imbued locale, as follows:
     Character class name     std::ctype classification
   Narrow Wide
   "alnum" L"alnum" std::ctype_base::alnum
   "alpha" L"alpha" std::ctype_base::alpha
   "blank" L"blank" std::ctype_base::blank
   "cntrl" L"cntrl" std::ctype_base::cntrl
   "digit" L"digit" std::ctype_base::digit
   "graph" L"graph" std::ctype_base::graph
   "lower" L"lower" std::ctype_base::lower
   "print" L"print" std::ctype_base::print
   "punct" L"punct" std::ctype_base::punct
   "space" L"space" std::ctype_base::space
   "upper" L"upper" std::ctype_base::upper
   "xdigit" L"xdigit" std::ctype_base::xdigit
   "d" L"d" std::ctype_base::digit
   "s" L"s" std::ctype_base::space
   "w" L"w" std::ctype_base::alnum
   with '_' optionally added

   The classification returned for the string "w" may be exactly the same
   as "alnum", in which case isctype() adds '_' explicitly.

   Additional classifications such as "jdigit" or "jkanji" may be provided
   by system-supplied locales (in which case they are also accessible
   through std::wctype).

Parameters

   first, last - a pair of iterators which determines the sequence of
   characters that represents a name of a character class
   icase - if true, ignores the upper/lower case distinction in the
   character classification
   Type requirements
   -
   ForwardIt must meet the requirements of LegacyForwardIterator.

Return value

   The bitmask representing the character classification determined by the
   given character class, or char_class_type() if the class is unknown.

Example

   Demonstrates a custom regex traits implementation of lookup_classname()
   / isctype():
   Run this code
#include <cwctype>
#include <iostream>
#include <locale>
#include <regex>

// This custom regex traits uses wctype/iswctype to implement lookup_classname/i
sctype.
struct wctype_traits : std::regex_traits<wchar_t>
{
    using char_class_type = std::wctype_t;

    template<class It>
    char_class_type lookup_classname(It first, It last, bool = false) const
    {
        return std::wctype(std::string(first, last).c_str());
    }

    bool isctype(wchar_t c, char_class_type f) const
    {
        return std::iswctype(c, f);
    }
};

int main()
{
    std::locale::global(std::locale("ja_JP.utf8"));
    std::wcout.sync_with_stdio(false);
    std::wcout.imbue(std::locale());

    std::wsmatch m;
    std::wstring in = L"¨no·noNaU6SiKa";
    // matches all characters (they are classified as alnum)
    std::regex_search(in, m, std::wregex(L"([[:alnum:]]+)"));
    std::wcout << "alnums: " << m[1] << '\n'; // prints "¨no·noNaU6SiKa"
    // matches only the katakana
    std::regex_search(in, m,
                      std::basic_regex<wchar_t, wctype_traits>(L"([[:jkata:]]+)"
));
    std::wcout << "katakana: " << m[1] << '\n'; // prints "NaU6SiKa"
}

   Output:
alnums: ¨no·noNaU6SiKa
katakana: NaU6SiKa

See also

   isctype
   indicates membership in a character class
   (public member function)
   wctype
   looks up a character classification category in the current C locale
   (function)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/regex/regex_trai
   ts/lookup_classname&oldid=156494"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 9 August 2023, at 22:59.
     * This page has been accessed 15,429 times.
