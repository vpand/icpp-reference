std::allocator_traits

   From cppreference.com
   < cpp | memory

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Dynamic memory management
   Uninitialized memory algorithms
   uninitialized_copy
   uninitialized_fill
   uninitialized_move
   (C++17)
   uninitialized_default_construct
   (C++17)
   uninitialized_value_construct
   (C++17)
   destroy
   (C++17)
   destroy_at
   (C++17)
   voidify
   (C++20)
   uninitialized_copy_n
   (C++11)
   uninitialized_fill_n
   uninitialized_move_n
   (C++17)
   uninitialized_default_construct_n
   (C++17)
   uninitialized_value_construct_n
   (C++17)
   destroy_n
   (C++17)
   construct_at
   (C++20)
   Constrained uninitialized memory algorithms
   ranges::uninitialized_copy
   (C++20)
   ranges::uninitialized_fill
   (C++20)
   ranges::uninitialized_move
   (C++20)
   ranges::construct_at
   (C++20)
   ranges::destroy
   (C++20)
   ranges::destroy_n
   (C++20)
   ranges::destroy_at
   (C++20)
   ranges::uninitialized_copy_n
   (C++20)
   ranges::uninitialized_fill_n
   (C++20)
   ranges::uninitialized_move_n
   (C++20)
   ranges::uninitialized_default_construct
   (C++20)
   ranges::uninitialized_value_construct
   (C++20)
   ranges::uninitialized_default_construct_n
   (C++20)
   ranges::uninitialized_value_construct_n
   (C++20)
   Allocators
   allocator
   allocator_traits
   (C++11)
   allocation_result
   (C++23)
   allocator_arg
   (C++11)
   uses_allocator
   (C++11)
   uses_allocator_construction_args
   (C++20)
   make_obj_using_allocator
   (C++20)
   uninitialized_construct_using_allocator
   (C++20)
   scoped_allocator_adaptor
   (C++11)
   pmr::polymorphic_allocator
   (C++17)
   Memory resources
   pmr::memory_resource
   (C++17)
   pmr::get_default_resource
   (C++17)
   pmr::set_default_resource
   (C++17)
   pmr::new_delete_resource
   (C++17)
   pmr::null_memory_resource
   (C++17)
   pmr::synchronized_pool_resource
   (C++17)
   pmr::unsynchronized_pool_resource
   (C++17)
   pmr::monotonic_buffer_resource
   (C++17)
   pmr::pool_options
   (C++17)
   Garbage collection support
   declare_reachable
   (C++11)(until C++23)
   undeclare_reachable
   (C++11)(until C++23)
   declare_no_pointers
   (C++11)(until C++23)
   undeclare_no_pointers
   (C++11)(until C++23)
   pointer_safety
   (C++11)(until C++23)
   get_pointer_safety
   (C++11)(until C++23)
   Uninitialized storage
   raw_storage_iterator
   (until C++20*)
   get_temporary_buffer
   (until C++20*)
   return_temporary_buffer
   (until C++20*)
   Explicit lifetime management
   start_lifetime_asstart_lifetime_as_array
   (C++23)(C++23)
   Smart pointers
   unique_ptr
   (C++11)
   shared_ptr
   (C++11)
   weak_ptr
   (C++11)
   auto_ptr
   (until C++17*)
   owner_less
   (C++11)
   owner_less<void>
   (C++17)
   owner_hash
   (C++26)
   owner_equal
   (C++26)
   enable_shared_from_this
   (C++11)
   bad_weak_ptr
   (C++11)
   default_delete
   (C++11)
   out_ptr_t
   (C++23)
   inout_ptr_t
   (C++23)
   Low level memory
   management
   operator new
   operator new[]
   operator delete
   operator delete[]
   get_new_handler
   set_new_handler
   launder
   (C++17)
   bad_alloc
   bad_array_new_length
   nothrow_t
   align_val_t
   destroying_delete_t
   new_handler
   nothrow
   Miscellaneous
   pointer_traits
   (C++11)
   to_address
   (C++20)
   addressof
   (C++11)
   align
   (C++11)
   assume_aligned
   (C++20)
   C Library
   malloc
   calloc
   realloc

   aligned_alloc
   (C++17)
   free

   std::allocator_traits
   Member functions
   allocator_traits::allocate
   (C++11)
   allocator_traits::allocate_at_least
   (C++23)
   allocator_traits::deallocate
   (C++11)
   allocator_traits::construct
   (C++11)
   allocator_traits::destroy
   (C++11)
   allocator_traits::max_size
   (C++11)
   allocator_traits::select_on_container_copy_construction
   (C++11)

   Defined in header <memory>
   template< class Alloc >
   struct allocator_traits;
                             (since C++11)

   The allocator_traits class template provides the standardized way to
   access various properties of Allocators. The standard containers and
   other standard library components access allocators through this
   template, which makes it possible to use any class type as an
   allocator, as long as the user-provided specialization of
   std::allocator_traits implements all required functionality.

   A program that declares an explicit or partial specialization of
   std::allocator_traits is ill-formed, no diagnostic required.
   (since C++23)

   The default, non-specialized, std::allocator_traits contains the
   following members:

Member types

   Type Definition
   allocator_type Alloc
   value_type Alloc::value_type
   pointer Alloc::pointer if present, otherwise value_type*
   const_pointer Alloc::const_pointer if present, otherwise
   std::pointer_traits<pointer>::rebind<const value_type>
   void_pointer Alloc::void_pointer if present, otherwise
   std::pointer_traits<pointer>::rebind<void>
   const_void_pointer Alloc::const_void_pointer if present, otherwise
   std::pointer_traits<pointer>::rebind<const void>
   difference_type Alloc::difference_type if present, otherwise
   std::pointer_traits<pointer>::difference_type
   size_type Alloc::size_type if present, otherwise
   std::make_unsigned<difference_type>::type
   propagate_on_container_copy_assignment
   Alloc::propagate_on_container_copy_assignment if present, otherwise
   std::false_type
   propagate_on_container_move_assignment
   Alloc::propagate_on_container_move_assignment if present, otherwise
   std::false_type
   propagate_on_container_swap Alloc::propagate_on_container_swap if
   present, otherwise std::false_type
   is_always_equal Alloc::is_always_equal if present, otherwise
   std::is_empty<Alloc>::type

Member alias templates

   Type Definition
   rebind_alloc<T> Alloc::rebind<T>::other if present, otherwise
   SomeAllocator<T, Args> if this Alloc is of the form SomeAllocator<U,
   Args>, where Args is zero or more type arguments
   rebind_traits<T> std::allocator_traits<rebind_alloc<T>>

Member functions

   allocate
   [static]
   allocates uninitialized storage using the allocator
   (public static member function)
   allocate_at_least
   [static] (C++23)
   allocates storage at least as large as the requested size via an
   allocator
   (public static member function)
   deallocate
   [static]
   deallocates storage using the allocator
   (public static member function)
   construct
   [static]
   constructs an object in the allocated storage
   (function template)
   destroy
   [static]
   destructs an object stored in the allocated storage
   (function template)
   max_size
   [static]
   returns the maximum object size supported by the allocator
   (public static member function)
   select_on_container_copy_construction
   [static]
   obtains the allocator to use after copying a standard container
   (public static member function)

Defect reports

   The following behavior-changing defect reports were applied
   retroactively to previously published C++ standards.
   DR Applied to Behavior as published Correct behavior
   LWG 2108 C++11 there was no way to show an allocator is stateless
   is_always_equal provided

See also

   AllocatorAwareContainer
   (C++11)
   container using allocator; associated traits (e.g.
   propagate_on_container_swap) usage
   (named requirement)
   allocator
   the default allocator
   (class template)
   scoped_allocator_adaptor
   (C++11)
   implements multi-level allocator for multi-level containers
   (class template)
   pointer_traits
   (C++11)
   provides information about pointer-like types
   (class template)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/memory/allocator
   _traits&oldid=168893"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 23 January 2024, at 06:29.
     * This page has been accessed 296,145 times.
