std::set<Key,Compare,Allocator>::emplace

   From cppreference.com
   < cpp | container | set


   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Containers library
   Sequence
   array
   (C++11)
   vector
   vector<bool>
   deque
   forward_list
   (C++11)
   list
   Associative
   set
   multiset
   map
   multimap
   Unordered associative
   unordered_set
   (C++11)
   unordered_multiset
   (C++11)
   unordered_map
   (C++11)
   unordered_multimap
   (C++11)
   Adaptors
   stack
   queue
   priority_queue
   flat_set
   (C++23)
   flat_multiset
   (C++23)
   flat_map
   (C++23)
   flat_multimap
   (C++23)
   Views
   span
   (C++20)
   mdspan
   (C++23)
   Iterator invalidation
   Member function table
   Non-member function table

   std::set
   Member functions
   set::set
   set::~set
   set::operator=
   set::get_allocator
   Iterators
   set::beginset::cbegin
   (C++11)
   set::endset::cend
   (C++11)
   set::rbeginset::crbegin
   (C++11)
   set::rendset::crend
   (C++11)
   Capacity
   set::size
   set::max_size
   set::empty
   Modifiers
   set::clear
   set::erase
   set::swap
   set::extract
   (C++17)
   set::merge
   (C++17)
   set::insert
   set::insert_range
   (C++23)
   set::emplace
   (C++11)
   set::emplace_hint
   (C++11)
   Lookup
   set::count
   set::find
   set::contains
   (C++20)
   set::equal_range
   set::lower_bound
   set::upper_bound
   Observers
   set::key_comp
   set::value_comp
   Non-member functions
   operator==operator!=operator<operator>operator<=operator>=operator<=>
   (until C++20)(until C++20)(until C++20)(until C++20)(until
   C++20)(C++20)
   std::swap(std::set)
   erase_if(std::set)
   (C++20)
   Deduction guides(C++17)

   template< class... Args >
   std::pair<iterator, bool> emplace( Args&&... args );
                            (since C++11)

   Inserts a new element into the container constructed in-place with the
   given args, if there is no element with the key in the container.

   The constructor of the new element is called with exactly the same
   arguments as supplied to emplace, forwarded via
   std::forward<Args>(args).... The element may be constructed even if
   there already is an element with the key in the container, in which
   case the newly constructed element will be destroyed immediately.

   Careful use of emplace allows the new element to be constructed while
   avoiding unnecessary copy or move operations.

   No iterators or references are invalidated.

Parameters

   args - arguments to forward to the constructor of the element

Return value

   A pair consisting of an iterator to the inserted element (or to the
   element that prevented the insertion) and a bool value set to true if
   and only if the insertion took place.

Exceptions

   If an exception is thrown for any reason, this function has no effect
   (strong exception safety guarantee).

Complexity

   Logarithmic in the size of the container.

Example

   Run this code
#include <chrono>
#include <cstddef>
#include <functional>
#include <iomanip>
#include <iostream>
#include <string>
#include <set>

class Dew
{
private:
    int a, b, c;

public:
    Dew(int _a, int _b, int _c)
        : a(_a), b(_b), c(_c)
    {}

    bool operator<(const Dew& other) const
    {
        return (a < other.a) ||
               (a == other.a && b < other.b) ||
               (a == other.a && b == other.b && c < other.c);
    }
};

constexpr int nof_operations{101};

std::size_t set_emplace()
{
    std::set<Dew> set;
    for (int i = 0; i < nof_operations; ++i)
        for (int j = 0; j < nof_operations; ++j)
            for (int k = 0; k < nof_operations; ++k)
                set.emplace(i, j, k);

    return set.size();
}

std::size_t set_insert()
{
    std::set<Dew> set;
    for (int i = 0; i < nof_operations; ++i)
        for (int j = 0; j < nof_operations; ++j)
            for (int k = 0; k < nof_operations; ++k)
                set.insert(Dew(i, j, k));

    return set.size();
}

void time_it(std::function<int()> set_test, std::string what = "")
{
    const auto start = std::chrono::system_clock::now();
    const auto the_size = set_test();
    const auto stop = std::chrono::system_clock::now();
    const std::chrono::duration<double, std::milli> time = stop - start;
    if (!what.empty() && the_size)
        std::cout << std::fixed << std::setprecision(2)
                  << time << " for " << what << '\n';
}

int main()
{
    time_it(set_insert, "cache warming...");
    time_it(set_insert, "insert");
    time_it(set_insert, "insert");
    time_it(set_emplace, "emplace");
    time_it(set_emplace, "emplace");
}

   Possible output:
630.58ms for cache warming...
577.16ms for insert
560.84ms for insert
547.10ms for emplace
549.44ms for emplace

See also

   emplace_hint
   (C++11)
   constructs elements in-place using a hint
   (public member function)
   insert
   inserts elements or nodes(since C++17)
   (public member function)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/container/set/em
   place&oldid=135444"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 20 November 2021, at 19:39.
     * This page has been accessed 196,754 times.
