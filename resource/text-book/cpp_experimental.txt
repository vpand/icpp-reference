Experimental C++ Features

   From cppreference.com
   < cpp

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Experimental
   Technical Specification
   Filesystem library (filesystem TS)
   Library fundamentals (library fundamentals TS)
   Library fundamentals 2 (library fundamentals TS v2)
   Library fundamentals 3 (library fundamentals TS v3)
   Extensions for parallelism (parallelism TS)
   Extensions for parallelism 2 (parallelism TS v2)
   Extensions for concurrency (concurrency TS)
   Extensions for concurrency 2 (concurrency TS v2)
   Concepts (concepts TS)
   Ranges (ranges TS)
   Reflection (reflection TS)
   Mathematical special functions (special functions TR)
   Experimental Non-TS
   Pattern Matching
   Linear Algebra
   std::execution
   Contracts
   2D Graphics

   The C++ standards committee publishes experimental C++ language and
   library extensions for future standardization.

   Note: until 2012, these publications used the TR (technical report)
   format. Since 2012 ISO procedure changed to use the TS (technical
   specification) format.

TR/TS specifications

   ISO number Name Status Links
   ISO/IEC TR 18015:2006 Technical Report on C++ Performance Published
   2006 (ISO store).

   Draft: TR18015 (2006-02-15).
   ISO/IEC TR 19768:2007 Technical Report on C++ Library Extensions
   Published 2007-11-15 (ISO store).

   Draft: N1836 (2005-06-24)
   ISO 29124 split off, the rest merged into C++11.
   ISO/IEC 29124:2010 Extensions to the C++ Library to support
   mathematical special functions Published 2010-09-03 (ISO Store).

   Final draft: N3060 (2010-03-06).
   XMerged into C++17.
   Special functions
   ISO/IEC TR 24733:2011 Extensions for the programming language C++ to
   support decimal floating-point arithmetic Published 2011-10-25 (ISO
   Store)

   Draft: N2849 (2009-03-06).
   May be superseded by a future TS or merged into a future revision of
   C++ (most recent merge proposal was N3871).
   ISO/IEC TS 18822:2015 C++ File System Technical Specification Published
   2015-06-18 (ISO store). Final draft: N4100 (2014-07-04).

   XMerged into C++17.
   Filesystem
   ISO/IEC TS 19570:2015 C++ Extensions for Parallelism Published
   2015-06-24. (ISO Store). Final draft: N4507 (2015-05-05).

   XMerged into C++17.
   Parallelism
   ISO/IEC TS 19841:2015 Transactional Memory TS Published 2015-09-16,
   (ISO Store). Final draft: N4514 (2015-05-08). Transactional memory
   ISO/IEC TS 19568:2015 C++ Extensions for Library Fundamentals Published
   2015-09-30, (ISO Store). Final draft: N4480 (2015-04-07).

   XMerged into C++17 except for invocation traits.
   Library extensions
   ISO/IEC TS 19217:2015 C++ Extensions for Concepts Published 2015-11-13
   (ISO Store). Final draft: N4553 (2015-10-02). Current draft: P0734R0
   (2017-07-14).

   XMerged into C++20 (with modifications).
   Constraints and concepts
   ISO/IEC TS 19571:2016 C++ Extensions for Concurrency Published
   2016-01-19 (ISO Store). Final draft: P0159R0 (2015-10-22).

   XPartially merged into C++20.
   Concurrency
   ISO/IEC TS 19568:2017 C++ Extensions for Library Fundamentals, Version
   2 Published 2017-03-30 (ISO Store). Draft: N4617 (2016-11-28).

   XPartially merged into C++17 and C++20.
   Library extensions 2
   ISO/IEC TS 21425:2017 Ranges TS Published 2017-12-05 (ISO Store).
   Draft: N4685 (2017-07-31).

   XMerged into C++20.
   Ranges
   ISO/IEC TS 22277:2017 Coroutines TS Published 2017-12-05 (ISO Store).
   Draft N4736 (2018-03-31). Latest draft: N4775 (2018-10-07).

   XMerged into C++20.
   ISO/IEC TS 19216:2018 Networking TS Published 2018-04-24 (ISO Store).
   Draft N4734 (2017-04-04). Latest draft: N4771 (2018-10-08). Networking
   ISO/IEC TS 21544:2018 Modules TS Published 2018-05-16 (ISO Store).
   Final Draft N4720 (2018-01-29).

   XMerged into C++20.
   ISO/IEC TS 19570:2018 Parallelism TS Version 2 Published 2018-11-15
   (ISO Store). Final draft: N4793 (2018-11-26). See also non-TS std::simd
   proposals below.

   Post-publication draft: N4808 (2019-03-11).
   Parallelism 2
   ISO/IEC TS 23619:2021 Reflection TS Published 2021-10-11 (ISO store).
   Draft N4856 (2020-03-02). See also non-TS proposals below. Reflection
   Numerics Early development. Draft P1889R1 (2019-12-27).
   ISO/IEC AWI TS 9922 Concurrency TS Version 2 Early development: N4956
   (2023-07-05). Concurrency 2
   ISO/IEC AWI TS 19568 C++ Extensions for Library Fundamentals, Version 3
   Early development. Draft N4948 (2023-05-08). Library extensions 3
   ISO/IEC DTS 12907 Transactional Memory TS, Version 2 Early development:
   N4923 (2022-10-14).
   ISO/IEC NP 19569 Array Extensions TS × Withdrawn. Abandoned draft:
   N3820 (2013-10-10).

Non-TS proposals

   Name Status Links
   Linear Algebra Now targeting mainline standard P1673R13 (2023-11-10),
   P1674R2 (2022-05-15), P1385R7 (2022-10-15).

   XMerged into C++26 (P1673R12).
   std::execution Forwarded to LWG, wording in progress. Proposal P2300R9
   (2024-04-02).
                    More proposals:
     * System execution context - P2079R4 (2024-05-22)
     * Sender-Receiver Interface for Networking - P2762R2 (2023-10-12)
     * Member customization points for Senders and Receivers - P2855R1
       (2024-02-22)
     * An Event Model for C++ Executors - P2882R0 (2023-05-11)
     * Sender Algorithm Customization - P2999R3 (2023-12-13)
     * std::execution introduction - P3090R0 (2024-02-14)
     * A plan for std::execution for C++26 - P3109R0 (2024-02-12)
     * Improving diagnostics for Sender expressions - P3164R0 (2024-03-01)
     * Reconsidering the std::execution::on algorithm - P3175R2
       (2024-05-22)
     * finally, write_env, and unstoppable Sender Adaptors - P3284R0
       (2024-05-16)
     * Fixing Lazy Sender Algorithm Customization - P3303R0 (2024-05-22)

   Execution
   Pattern Matching Early development. Draft P1371R3 (2020-09-15).
                        More proposals:
     * Pattern Matching using is and as - P2392R2 (2022-09-24)
     * Pattern Matching: match expression - P2688R1 (2024-02-15)
     * switch for Pattern Matching - P2940R0 (2022-04-18)
     * Identifiers for Pattern Matching - P2941R0 (2022-02-24)
     * A Postcondition is a Pattern Match - P3210R1 (2024-04-20)
     * A unified syntax for Pattern Matching and Contracts when
       introducing a new name - P3249R0 (2024-05-22)

   Reflection The main document (ISO/IEC TS 23619:2021) is described in
   Reflection TS above.
                     More proposals:
     * Scalable Reflection in C++ - P1240R2 (2022-01-14)
     * Python Bindings with Value-Based Reflection - P2911R1 (2023-10-13)
     * Reflection for C++26 - P2996R3 (2024-05-22)
     * Using Reflection to Replace a Metalanguage for Generating JS
       Bindings - P3010R0 (2023-10-13)
     * ABI comparison with reflection - P3095R0 (2024-02-15)
     * Function Parameter Reflection in Reflection for C++26 - P3096R1
       (2024-05-15)
     * Generative Extensions for Reflection - P3157R1 (2024-05-22)

   Reflection
   std::simd The main document (TS ISO/IEC 19570:2018) is described in
   "C++ Extensions for Parallelism V2" above.
                         More proposals:
     * Expected Feedback from SIMD in Parallelism TS2 - P1915R0
       (2019-10-07)
     * std::simd - Merge data-parallel types from the Parallelism TS 2 -
       P1928R9 (2024-05-22)
     * Intel's response to std::simd - P2638R0 (2022-09-22)
     * Proposal to support interleaved complex values in std::simd -
       P2663R5 (2023-12-08)
     * Proposal to extend std::simd with permutation API - P2664R6
       (2024-01-16)
     * std::simd Intro slides - P2803R0 (2023-02-09)
     * Issaquah Slides for Intel response to std::simd - P2807R0
       (2023-02-10)
     * Proposal to extend std::simd with more constructors and accessors -
       P2876R1 (2024-05-22)
     * Algorithm-like vs std::simd based RNG API - P2880R0 (2023-05-18)
     * std::simd types should be regular - P2892R0 (2023-05-19)
     * std::simd types should be regular - P2892R0 LEWG presentation -
       P2926R0 (2023-06-19)
     * simd_invoke - P2929R0 (2023-07-19)
     * std::simd overloads for <bit> - P2933R1 (2023-12-08)
     * Add saturating library support to std::simd - P2956R0 (2023-08-01)
     * Allowing user-defined types in std::simd - P2964R1 (2024-05-22)
     * Interface Directions for std::simd - P3024R0 (2023-11-30)
     * Provide predefined std::simd permute generator functions for common
       operations - P3067R0 (2024-05-22)
     * Replace std::simd operator[] with getter and setter functions - or
       not - P3275R0 (2024-05-22)
     * Exploration of namespaces for std::simd - P3287R0 (2024-05-22)
     * Range constructors for std::simd - P3299R0 (2024-05-22)
     * Add an iota object for std::simd (and more) - P3319R0 (2024-05-22)

   Data parallel types
   Contracts Early development. Proposal P2659R2 (2022-11-30). Draft
   P2660R0 (2022-10-14).
                            More proposals:
     * A Proposal to Publish a Technical Specification for Contracts -
       P2659R2 (2022-12-05)
     * Miscellaneous amendments to the Contracts TS - P2661R0 (2022-10-15)
     * Contracts for C++: Prioritizing Safety - P2680R1 (2022-12-15)
     * A proposed plan for contracts in C++ - P2695R1 (2023-02-09)
     * Proposal of Condition-centric Contracts Syntax - P2737R0
       (2022-12-30)
     * Contracts for C++: Prioritizing Safety - Presentation slides -
       P2743R0 (2022-12-13)
     * Evaluation of Checked Contracts - P2751R1 (2023-02-14)
     * A Bold Plan for a Complete Contracts Facility - P2755R1
       (2024-04-11)
     * The idea behind the contracts MVP - P2817R0 (2023-03-05)
     * Proposal of Contracts Supporting Const-On-Definition Style -
       P2829R0 (2023-04-13)
     * Contract violation handling semantics for the contracts MVP -
       P2852R0 (2023-04-24)
     * The Lakos Rule: Narrow Contracts and noexcept Are Inherently
       Incompatible - P2861R0 (2023-05-19)
     * Requirements for a Contracts syntax - P2885R3 (2023-10-05)
     * Contracts on lambdas - P2890R2 (2023-12-13)
     * Constant evaluation of Contracts - P2894R2 (2024-01-11)
     * Outstanding design questions for the Contracts MVP - P2896R0
       (2023-08-22)
     * Contracts for C++ - P2900R7 (2024-05-22)
     * A Principled Approach to Open Design Questions for Contracts -
       P2932R3 (2024-01-16)
     * An Attribute-Like Syntax for Contracts - P2935R4 (2023-11-05)
     * Contracts must avoid disclosing sensitive information - P2947R0
       (2023-07-20)
     * Slides for P2861R0: Narrow Contracts and noexcept are Inherently
       Incompatible - P2949R0 (2023-07-14)
     * Contracts and virtual functions for the Contracts MVP - P2954R0
       (2023-08-03)
     * Contracts and coroutines - P2957R1 (2024-01-13)
     * A natural syntax for Contracts - P2961R2 (2023-11-08)
     * An Overview of Syntax Choices for Contracts - P3028R0 (2023-11-05)
     * Protection against modifications in contracts - P3071R1
       (2023-12-17)
     * Remove evaluation_undefined_behavior and will_continue from the
       Contracts MVP - P3073R0 (2024-01-27)
     * Should ignore and observe exist for constant evaluation of
       contracts? - P3079R0 (2024-01-11)
     * Contracts for C++: Support for virtual functions - P3097R0
       (2024-04-15)
     * Undefined and erroneous behaviour are contract violations - P3100R0
       (2024-05-21)
     * Tokyo Technical Fixes to Contracts - P3119R1 (2024-05-09)
     * Contracts on virtual functions for the Contracts MVP - P3165R0
       (2024-02-27)
     * Inherited contracts - P3169R0 (2024-04-14)
     * Contract testing support - P3183R1 (2024-05-22)
     * Slides for LEWG presentation of P2900R6: Contracts for C++ -
       P3189R0 (2024-03-19)
     * Slides for EWG presentation of D2900R7: Contracts for C++ - P3190R0
       (2024-03-20)
     * A response to the Tokyo EWG polls on the Contracts MVP (P2900R6) -
       P3197R0 (2024-04-12)
     * A takeaway from the Tokyo LEWG meeting on Contracts MVP - P3198R0
       (2024-03-29)
     * Contracts for C++: Naming the Louis semantic - P3226R0 (2024-04-12)
     * Contracts for C++: Revisiting contract check elision and
       duplication - P3228R1 (2024-05-21)
     * An alternate proposal for naming contract semantics - P3238R0
       (2024-05-06)
     * A unified syntax for Pattern Matching and Contracts when
       introducing a new name - P3249R0 (2024-05-22)
     * C++ contracts with regards to function pointers - P3250R0
       (2024-05-07)
     * C++ contracts and coroutines - P3251R0 (2024-05-07)
     * Make the predicate of contract_assert more regular - P3257R0
       (2024-04-26)
     * Ship Contracts in a TS - P3265R1 (2024-05-22)
     * Approaches to C++ Contracts - P3267R1 (2024-05-22)
     * C++ Contracts Constification Challenges Concerning Current Code -
       P3268R0 (2024-05-07)
     * Do Not Ship Contracts as a TS - P3269R0 (2024-05-21)
     * Repetition, Elision, and Constification w.r.t. contract_assert -
       P3270R0 (2024-05-22)
     * Function Usage Types (Contracts for Function Pointers) - P3271R0
       (2024-05-20)
     * P2900 Is Superior to a Contracts TS - P3276R0 (2024-05-18)
     * Contracts: Protecting The Protector - P3285R0 (2024-05-15)
     * Integrating Existing Assertions With Contracts - P3290R0
       (2024-05-22)
     * C++26 Needs Contract Checking - P3297R0 (2024-05-20)
     * An opt-in approach for integration of traditional assert facilities
       in C++ contracts - P3311R0 (2024-05-22)
     * Compile time resolved contracts - P3317R0 (2024-05-22)

   std::inplace_vector Early development. Draft P0843R12 (2024-05-21).
                   More proposals:
     * A direction for Vector - P3147R1 (2024-03-18)
     * An allocator-aware std::inplace_vector - P3160R1 (2024-03-09)

   2D Graphics Early development. Draft P0267R10 (2019-10-07).

See also

   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/experimental&old
   id=172050"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 23 May 2024, at 19:56.
     * This page has been accessed 417,935 times.
