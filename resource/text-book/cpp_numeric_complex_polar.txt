std::polar(std::complex)

   From cppreference.com
   < cpp | numeric | complex

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Numerics library
   Common mathematical functions
   Mathematical special functions (C++17)
   Mathematical constants (C++20)
   Basic linear algebra algorithms (C++26)
   Floating-point environment (C++11)
   Complex numbers
   Numeric arrays
   Pseudo-random number generation
   Factor operations
   gcd
   (C++17)
   lcm
   (C++17)
   Interpolations
   midpoint
   (C++20)
   lerp
   (C++20)
   Saturation arithmetic
   add_sat
   (C++26)
   sub_sat
   (C++26)
   saturate_cast
   (C++26)
   mul_sat
   (C++26)
   div_sat
   (C++26)
   Generic numeric operations
   iota
   (C++11)
   ranges::iota
   (C++23)
   accumulate
   inner_product
   adjacent_difference
   partial_sum
   reduce
   (C++17)
   transform_reduce
   (C++17)
   inclusive_scan
   (C++17)
   exclusive_scan
   (C++17)
   transform_inclusive_scan
   (C++17)
   transform_exclusive_scan
   (C++17)
   Bit operations
   has_single_bit
   (C++20)
   bit_cast
   (C++20)
   bit_ceil
   (C++20)
   bit_floor
   (C++20)
   bit_width
   (C++20)
   rotl
   (C++20)
   rotr
   (C++20)
   popcount
   (C++20)
   countl_zero
   (C++20)
   countl_one
   (C++20)
   countr_zero
   (C++20)
   countr_one
   (C++20)
   byteswap
   (C++23)
   endian
   (C++20)

   std::complex
   Member functions
   complex::complex
   complex::operator=
   complex::real
   complex::imag
   complex::operator+=complex::operator-=complex::operator*=complex::opera
   tor/=
   Non-member functions
   operator+operator-
   operator+operator-operator*operator/
   operator==operator!=
   (until C++20)
   operator<<operator>>
   get(std::complex)
   (C++26)
   real
   imag
   abs
   arg
   norm
   conj
   proj
   (C++11)
   polar
   operator""ioperator""ifoperator""il
   (C++14)(C++14)(C++14)
   Exponential functions
   log

   log10

   exp
   Power functions
   pow

   sqrt
   Trigonometric functions
   sin

   cos
   tan
   asin
   (C++11)
   acos
   (C++11)
   atan
   (C++11)
   Hyperbolic functions
   sinh

   cosh
   tanh
   asinh
   (C++11)
   acosh
   (C++11)
   atanh
   (C++11)
   Helper types
   tuple_size<std::complex>
   (C++26)
   tuple_element<std::complex>
   (C++26)

   Defined in header <complex>
   template< class T >
   std::complex<T> polar( const T& r, const T& theta = T() );

   Returns a complex number with magnitude r and phase angle theta.

   The behavior is undefined if r is negative or NaN, or if theta is
   infinite.

Parameters

   r     - magnitude
   theta - phase angle

Return value

   A complex number determined by r and theta.

Notes

   std::polar(r, theta) is equivalent to any of the following expressions:
     * r * std::exp(theta * 1i)
     * r * (cos(theta) + sin(theta) * 1i)
     * std::complex(r * cos(theta), r * sin(theta)).

   Using polar instead of exp can be about 4.5x faster in vectorized
   loops.

Example

   Run this code
#include <cmath>
#include <complex>
#include <iomanip>
#include <iostream>
#include <numbers>
using namespace std::complex_literals;

int main()
{
    constexpr auto p_2{std::numbers::pi / 2.0};
    constexpr auto mag{1.0};

    std::cout
        << std::fixed << std::showpos << std::setprecision(1)
        << "   th: | polar:      | exp:        | complex:    | trig:\n";
    for (int n{}; n != 4; ++n)
    {
        const auto th{n * p_2};
        std::cout << std::setw(4) << 90 * n << "° | "
                  << std::polar(mag, th) << " | "
                  << mag * std::exp(th * 1.0i) << " | "
                  << std::complex(mag * cos(th), mag * sin(th)) << " | "
                  << mag * (cos(th) + 1.0i * sin(th)) << '\n';
    }
}

   Output:
   th: | polar:      | exp:        | complex:    | trig:
  +0° | (+1.0,+0.0) | (+1.0,+0.0) | (+1.0,+0.0) | (+1.0,+0.0)
 +90° | (+0.0,+1.0) | (+0.0,+1.0) | (+0.0,+1.0) | (+0.0,+1.0)
+180° | (-1.0,+0.0) | (-1.0,+0.0) | (-1.0,+0.0) | (-1.0,+0.0)
+270° | (-0.0,-1.0) | (-0.0,-1.0) | (-0.0,-1.0) | (-0.0,-1.0)

Defect reports

   The following behavior-changing defect reports were applied
   retroactively to previously published C++ standards.
   DR Applied to Behavior as published Correct behavior
   LWG 2459 C++98 behavior unclear for some inputs made undefined
   LWG 2870 C++98 default value of parameter theta not dependent made
   dependent

See also

   abs(std::complex)
   returns the magnitude of a complex number
   (function template)
   arg
   returns the phase angle
   (function template)
   exp(std::complex)
   complex base e exponential
   (function template)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/numeric/complex/
   polar&oldid=160824"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 17 October 2023, at 05:38.
     * This page has been accessed 63,777 times.
