std::filesystem::directory_entry::refresh

   From cppreference.com
   < cpp | filesystem | directory entry

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Filesystem library
   Classes
   filesystem::path
   filesystem::filesystem_error
   filesystem::directory_entry
   filesystem::directory_iterator
   filesystem::recursive_directory_iterator

   filesystem::file_status
   filesystem::space_info
   filesystem::file_type
   filesystem::perms
   filesystem::perm_options
   filesystem::copy_options
   filesystem::directory_options
   filesystem::file_time_type
   Functions
   filesystem::absolute
   filesystem::canonicalfilesystem::weakly_canonical
   filesystem::relativefilesystem::proximate
   filesystem::copy
   filesystem::copy_file
   filesystem::copy_symlink
   filesystem::create_directory
   filesystem::create_directories
   filesystem::create_hard_link
   filesystem::create_symlink
   filesystem::create_directory_symlink
   filesystem::current_path
   filesystem::exists
   filesystem::equivalent
   filesystem::file_size
   filesystem::hard_link_count
   filesystem::last_write_time
   filesystem::permissions
   filesystem::read_symlink
   filesystem::remove
   filesystem::remove_all
   filesystem::rename
   filesystem::resize_file
   filesystem::space
   filesystem::status
   filesystem::symlink_status
   filesystem::temp_directory_path
   File types
   filesystem::is_block_file
   filesystem::is_character_file
   filesystem::is_directory
   filesystem::is_empty
   filesystem::status_known
   filesystem::is_fifo
   filesystem::is_other
   filesystem::is_regular_file
   filesystem::is_socket
   filesystem::is_symlink

   std::filesystem::directory_entry
   Member functions
   directory_entry::directory_entry
   Modifiers
   directory_entry::operator=
   directory_entry::assign
   directory_entry::replace_filename
   directory_entry::refresh
   Observers
   directory_entry::pathdirectory_entry::operator const path&
   directory_entry::exists
   directory_entry::is_block_file
   directory_entry::is_character_file
   directory_entry::is_directory
   directory_entry::is_fifo
   directory_entry::is_other
   directory_entry::is_regular_file
   directory_entry::is_socket
   directory_entry::is_symlink
   directory_entry::file_size
   directory_entry::hard_link_count
   directory_entry::last_write_time
   directory_entry::statusdirectory_entry::symlink_status
   directory_entry::operator==directory_entry::operator!=directory_entry::
   operator<directory_entry::operator>directory_entry::operator<=directory
   _entry::operator>=directory_entry::operator<=>
   (until C++20)(until C++20)(until C++20)(until C++20)(until
   C++20)(C++20)
   Non-member functions
   operator<<

   void refresh();
   (1)                                          (since C++17)
   void refresh( std::error_code& ec ) noexcept;
   (2)                                          (since C++17)

   Examines the filesystem object referred to by this directory entry and
   stores its attributes for retrieval with status, exists,
   is_regular_file, and other status accessors.

   If an error occurs, the value of any cached attributes is unspecified.

Parameters

   ec - out-parameter for error reporting in the non-throwing overload

Return value

   (none)

Exceptions

   Any overload not marked noexcept may throw std::bad_alloc if memory
   allocation fails.
   1) Throws std::filesystem::filesystem_error on underlying OS API
   errors, constructed with p as the first path argument and the OS error
   code as the error code argument.
   2) Sets a std::error_code& parameter to the OS API error code if an OS
   API call fails, and executes ec.clear() if no errors occur.

Notes

   Many low-level OS APIs for directory traversal retrieve file attributes
   along with the next directory entry. The constructors and the non-const
   member functions of std::filesystem::directory_iterator store these
   attributes, if any, in the pointed-to std::filesystem::directory_entry
   without calling directory_entry::refresh, which makes it possible to
   examine the attributes of the directory entries as they are being
   iterated over, without making additional system calls.

Example

   This section is incomplete
   Reason: no example

See also

   statussymlink_status
   status of the file designated by this directory entry;
   status of the file/symlink designated by this directory entry
   (public member function)
   exists
   checks whether directory entry refers to existing file system object
   (public member function)
   is_block_file
   checks whether the directory entry refers to block device
   (public member function)
   is_character_file
   checks whether the directory entry refers to a character device
   (public member function)
   is_directory
   checks whether the directory entry refers to a directory
   (public member function)
   is_fifo
   checks whether the directory entry refers to a named pipe
   (public member function)
   is_other
   checks whether the directory entry refers to an other file
   (public member function)
   is_regular_file
   checks whether the directory entry refers to a regular file
   (public member function)
   is_socket
   checks whether the directory entry refers to a named IPC socket
   (public member function)
   is_symlink
   checks whether the directory entry refers to a symbolic link
   (public member function)
   file_size
   returns the size of the file to which the directory entry refers
   (public member function)
   hard_link_count
   returns the number of hard links referring to the file to which the
   directory entry refers
   (public member function)
   last_write_time
   gets the time of the last data modification of the file to which the
   directory entry refers
   (public member function)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/filesystem/direc
   tory_entry/refresh&oldid=158216"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 8 September 2023, at 09:09.
     * This page has been accessed 13,920 times.
