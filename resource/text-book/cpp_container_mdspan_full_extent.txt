std::full_extent, std::full_extent_t

   From cppreference.com
   < cpp | container | mdspan

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Containers library
   Sequence
   array
   (C++11)
   vector
   vector<bool>
   deque
   forward_list
   (C++11)
   list
   Associative
   set
   multiset
   map
   multimap
   Unordered associative
   unordered_set
   (C++11)
   unordered_multiset
   (C++11)
   unordered_map
   (C++11)
   unordered_multimap
   (C++11)
   Adaptors
   stack
   queue
   priority_queue
   flat_set
   (C++23)
   flat_multiset
   (C++23)
   flat_map
   (C++23)
   flat_multimap
   (C++23)
   Views
   span
   (C++20)
   mdspan
   (C++23)
   Iterator invalidation
   Member function table
   Non-member function table

   std::mdspan
   Member functions
   mdspan::mdspan
   mdspan::operator=
   Element access
   mdspan::operator[]
   Observers
   mdspan::size
   mdspan::empty
   mdspan::stride
   mdspan::extents
   mdspan::data_handle
   mdspan::mapping
   mdspan::accessor
   mdspan::is_uniquemdspan::is_exhaustivemdspan::is_stridedmdspan::is_alwa
   ys_uniquemdspan::is_always_exhaustivemdspan::is_always_strided
   Non-member functions
   swap(std::mdspan)
   Subviews
   submdspan_extents
   (C++26)
   submdspan
   (C++26)
   Helper types and templates
   extentsdextents
   layout_right
   layout_left
   layout_stride
   layout_left_padded
   (C++26)
   layout_right_padded
   (C++26)
   default_accessor
   Subviews helpers
   full_extent
   (C++26)
   strided_slice
   (C++26)
   submdspan_mapping_result
   (C++26)
   Deduction guides

   Defined in header <mdspan>
   struct full_extent_t { explicit full_extent_t() = default; };
   (1)                                                          (since C++26)
   inline constexpr std::full_extent_t full_extent {};
   (2)                                                          (since C++26)
   1) The class std::full_extent_t is a slice specifier type that can be
   used in std::submdspan.
   2) The corresponding std::full_extent instance of (1) is a slice
   specifier to indicate full range of indices in the specified extent in
   std::submdspan.

Example

   Run this code
#include <mdspan>
#include <print>

void print_view(auto view)
{
    static_assert(view.rank() <= 2);

    if constexpr (view.rank() == 2)
    {
      for (std::size_t i = 0; i < view.extent(0); ++i)
      {
        for (std::size_t j = 0; j < view.extent(1); ++j)
          std::print("{} ", view[i, j]);
        std::println("");
      }
    }
    else if constexpr (view.rank() == 1)
    {
      for (std::size_t i = 0; i < view.extent(0); ++i)
        std::print("{} ", view[i]);
      std::println("");
    }
    else
    {
      std::println("{}", view[]);
    }
    std::println("");
}

int main()
{
    char letters [] { 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I' };
    std::mdspan view (letters, 3, 3);

    print_view(view);
    print_view(std::submdspan(view, std::full_extent, std::full_extent));
    print_view(std::submdspan(view, std::full_extent, 1));
    print_view(std::submdspan(view, 1, std::full_extent));
    print_view(std::submdspan(view, 2, 1));
}

   Possible output:
A B C
D E F
G H I

A B C
D E F
G H I

B E H

D E F

H

See also

   submdspan
   (C++26)
   returns a view of a subset of an existing mdspan
   (function template)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/container/mdspan
   /full_extent&oldid=167987"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 31 December 2023, at 20:28.
     * This page has been accessed 837 times.
