std::accumulate

   From cppreference.com
   < cpp | algorithm

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Algorithm library
   Constrained algorithms and algorithms on ranges (C++20)
   Constrained algorithms, e.g. ranges::copy, ranges::sort, ...
   Execution policies (C++17)
   is_execution_policy
   (C++17)
   execution::seqexecution::parexecution::par_unseqexecution::unseq
   (C++17)    (C++17)(C++17)(C++20)
   execution::sequenced_policyexecution::parallel_policyexecution::paralle
   l_unsequenced_policyexecution::parallel_unsequenced
   (C++17)(C++17)(C++17)(C++20)
   Non-modifying sequence operations
   Batch operations
   for_each
   for_each_n
   (C++17)
   Search operations
   all_ofany_ofnone_of
   (C++11)                (C++11)(C++11)
   countcount_if
   mismatch
   equal
   findfind_iffind_if_not
   (C++11)
   find_end
   find_first_of
   adjacent_find
   search
   search_n
   Modifying sequence operations
   Copy operations
   copycopy_if
   (C++11)
   copy_backward
   copy_n
   (C++11)
   move
   (C++11)
   move_backward
   (C++11)
   Swap operations
   swap
   iter_swap
   swap_ranges
   Transformation operations
   replacereplace_if
   transform
   replace_copyreplace_copy_if
   Generation operations
   fill
   fill_n
   generate
   generate_n
   Removing operations
   removeremove_if
   unique
   remove_copyremove_copy_if
   unique_copy
   Order-changing operations
   reverse
   reverse_copy
   rotate
   rotate_copy
   random_shuffleshuffle
   (until C++17)(C++11)
   shift_leftshift_right
   (C++20)(C++20)
   Sampling operations
   sample
   (C++17)
   Sorting and related operations
   Partitioning operations
   partition
   partition_copy
   (C++11)
   stable_partition
   is_partitioned
   (C++11)
   partition_point
   (C++11)
   Sorting operations
   sort
   stable_sort
   partial_sort
   partial_sort_copy
   is_sorted
   (C++11)
   is_sorted_until
   (C++11)
   nth_element
   Binary search operations
   (on partitioned ranges)
   lower_bound
   upper_bound
   equal_range
   binary_search
   Set operations (on sorted ranges)
   includes
   set_union
   set_intersection
   set_difference
   set_symmetric_difference
   Merge operations (on sorted ranges)
   merge
   inplace_merge
   Heap operations
   push_heap
   pop_heap
   make_heap
   sort_heap
   is_heap
   (C++11)
   is_heap_until
   (C++11)
   Minimum/maximum operations
   max
   min
   minmax
   (C++11)
   clamp
   (C++17)
   max_element
   min_element
   minmax_element
   (C++11)
   Lexicographical comparison operations
   lexicographical_compare
   lexicographical_compare_three_way
   (C++20)
   Permutation operations
   next_permutation
   prev_permutation
   is_permutation
   (C++11)
   C library
   qsort
   bsearch
   Numeric operations
   iota
   (C++11)
   inner_product
   adjacent_difference

   accumulate
   reduce
   (C++17)
   transform_reduce
   (C++17)
   partial_sum
   inclusive_scan
   (C++17)
   exclusive_scan
   (C++17)
   transform_inclusive_scan
   (C++17)
   transform_exclusive_scan
   (C++17)
   Operations on uninitialized memory
   uninitialized_copy
   uninitialized_move
   (C++17)
   uninitialized_fill
   uninitialized_copy_n
   (C++11)
   uninitialized_move_n
   (C++17)
   uninitialized_fill_n
   destroy
   (C++17)
   destroy_n
   (C++17)
   destroy_at
   (C++17)
   construct_at
   (C++20)
   uninitialized_default_construct
   (C++17)
   uninitialized_value_construct
   (C++17)
   uninitialized_default_construct_n
   (C++17)
   uninitialized_value_construct_n
   (C++17)

   Numerics library
   Common mathematical functions
   Mathematical special functions (C++17)
   Mathematical constants (C++20)
   Basic linear algebra algorithms (C++26)
   Floating-point environment (C++11)
   Complex numbers
   Numeric arrays
   Pseudo-random number generation
   Factor operations
   gcd
   (C++17)
   lcm
   (C++17)
   Interpolations
   midpoint
   (C++20)
   lerp
   (C++20)
   Saturation arithmetic
   add_sat
   (C++26)
   sub_sat
   (C++26)
   saturate_cast
   (C++26)
   mul_sat
   (C++26)
   div_sat
   (C++26)
   Generic numeric operations
   iota
   (C++11)
   ranges::iota
   (C++23)
   accumulate
   inner_product
   adjacent_difference
   partial_sum
   reduce
   (C++17)
   transform_reduce
   (C++17)
   inclusive_scan
   (C++17)
   exclusive_scan
   (C++17)
   transform_inclusive_scan
   (C++17)
   transform_exclusive_scan
   (C++17)
   Bit operations
   has_single_bit
   (C++20)
   bit_cast
   (C++20)
   bit_ceil
   (C++20)
   bit_floor
   (C++20)
   bit_width
   (C++20)
   rotl
   (C++20)
   rotr
   (C++20)
   popcount
   (C++20)
   countl_zero
   (C++20)
   countl_one
   (C++20)
   countr_zero
   (C++20)
   countr_one
   (C++20)
   byteswap
   (C++23)
   endian
   (C++20)

   Defined in header <numeric>
   template< class InputIt, class T >
   T accumulate( InputIt first, InputIt last, T init );
   (1)                                               (constexpr since C++20)
   template< class InputIt, class T, class BinaryOp >
   T accumulate( InputIt first, InputIt last, T init, BinaryOp op );
   (2)                                               (constexpr since C++20)

   Computes the sum of the given value init and the elements in the range
   [first, last).
   1) Initializes the accumulator acc (of type T) with the initial value
   init and then modifies it with acc = acc + *i(until C++20)acc =
   std::move(acc) + *i(since C++20) for every iterator i in the range
   [first, last) in order.
   2) Initializes the accumulator acc (of type T) with the initial value
   init and then modifies it with acc = op(acc, *i)(until C++20)acc =
   op(std::move(acc), *i)(since C++20) for every iterator i in the range
   [first, last) in order.

   If any of the following conditions is satisfied, the behavior is
   undefined:
     * T is not CopyConstructible.
     * T is not CopyAssignable.
     * op modifies any element of [first, last).
     * op invalidates any iterator or subrange in [first, last].

Parameters

   first, last - the range of elements to sum
   init - initial value of the sum
   op - binary operation function object that will be applied.

   The signature of the function should be equivalent to the following:

    Ret fun(const Type1 &a, const Type2 &b);

   The signature does not need to have const &.
   The type  Type1 must be such that an object of type T can be implicitly
   converted to  Type1. The type  Type2 must be such that an object of
   type InputIt can be dereferenced and then implicitly converted to
   Type2. The type Ret must be such that an object of type T can be
   assigned a value of type Ret.
   Type requirements
   -
   InputIt must meet the requirements of LegacyInputIterator.

Return value

   acc after all modifications.

Possible implementation

                       accumulate (1)
template<class InputIt, class T>
constexpr // since C++20
T accumulate(InputIt first, InputIt last, T init)
{
    for (; first != last; ++first)
        init = std::move(init) + *first; // std::move since C++20

    return init;
}

                       accumulate (2)
template<class InputIt, class T, class BinaryOperation>
constexpr // since C++20
T accumulate(InputIt first, InputIt last, T init, BinaryOperation op)
{
    for (; first != last; ++first)
        init = op(std::move(init), *first); // std::move since C++20

    return init;
}

Notes

   std::accumulate performs a left fold. In order to perform a right fold,
   one must reverse the order of the arguments to the binary operator, and
   use reverse iterators.

   If left to type inference, op operates on values of the same type as
   init which can result in unwanted casting of the iterator elements. For
   example, std::accumulate(v.begin(), v.end(), 0) likely does not give
   the result one wishes for when v is of type std::vector<double>.

Example

   Run this code
#include <functional>
#include <iostream>
#include <numeric>
#include <string>
#include <vector>

int main()
{
    std::vector<int> v{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};

    int sum = std::accumulate(v.begin(), v.end(), 0);
    int product = std::accumulate(v.begin(), v.end(), 1, std::multiplies<int>())
;

    auto dash_fold = [](std::string a, int b)
    {
        return std::move(a) + '-' + std::to_string(b);
    };

    std::string s = std::accumulate(std::next(v.begin()), v.end(),
                                    std::to_string(v[0]), // start with first el
ement
                                    dash_fold);

    // Right fold using reverse iterators
    std::string rs = std::accumulate(std::next(v.rbegin()), v.rend(),
                                     std::to_string(v.back()), // start with las
t element
                                     dash_fold);

    std::cout << "sum: " << sum << '\n'
              << "product: " << product << '\n'
              << "dash-separated string: " << s << '\n'
              << "dash-separated string (right-folded): " << rs << '\n';
}

   Output:
sum: 55
product: 3628800
dash-separated string: 1-2-3-4-5-6-7-8-9-10
dash-separated string (right-folded): 10-9-8-7-6-5-4-3-2-1

Defect reports

   The following behavior-changing defect reports were applied
   retroactively to previously published C++ standards.
   DR Applied to Behavior as published Correct behavior
   LWG 242 C++98 op could not have side effects it cannot modify the
   ranges involved
   LWG 2055
   (P0616R0) C++20 acc was not moved while being accumulated it is moved

See also

   adjacent_difference
   computes the differences between adjacent elements in a range
   (function template)
   inner_product
   computes the inner product of two ranges of elements
   (function template)
   partial_sum
   computes the partial sum of a range of elements
   (function template)
   reduce
   (C++17)
   similar to std::accumulate, except out of order
   (function template)
   ranges::fold_left
   (C++23)
   left-folds a range of elements
   (niebloid)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/algorithm/accumu
   late&oldid=170922"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 15 April 2024, at 00:30.
     * This page has been accessed 2,037,871 times.
