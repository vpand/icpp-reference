std::flat_multiset<Key,Compare,KeyContainer>::insert

   From cppreference.com
   < cpp | container | flat multiset

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Containers library
   Sequence
   array
   (C++11)
   vector
   vector<bool>
   deque
   forward_list
   (C++11)
   list
   Associative
   set
   multiset
   map
   multimap
   Unordered associative
   unordered_set
   (C++11)
   unordered_multiset
   (C++11)
   unordered_map
   (C++11)
   unordered_multimap
   (C++11)
   Adaptors
   stack
   queue
   priority_queue
   flat_set
   (C++23)
   flat_multiset
   (C++23)
   flat_map
   (C++23)
   flat_multimap
   (C++23)
   Views
   span
   (C++20)
   mdspan
   (C++23)
   Iterator invalidation
   Member function table
   Non-member function table

   std::flat_multiset
   Member types
   Member functions
   flat_multiset::flat_multiset

   flat_multiset::operator=
   Iterators
   flat_multiset::beginflat_multiset::cbegin
   flat_multiset::endflat_multiset::cend
   flat_multiset::rbeginflat_multiset::crbegin
   flat_multiset::rendflat_multiset::crend
   Capacity
   flat_multiset::size
   flat_multiset::max_size
   flat_multiset::empty
   Modifiers
   flat_multiset::clear
   flat_multiset::insert
   flat_multiset::insert_range
   flat_multiset::emplace
   flat_multiset::emplace_hint
   flat_multiset::erase
   flat_multiset::swap
   flat_multiset::extract
   flat_multiset::replace
   Lookup
   flat_multiset::count
   flat_multiset::find
   flat_multiset::contains
   flat_multiset::equal_range
   flat_multiset::lower_bound
   flat_multiset::upper_bound
   Observers
   flat_multiset::key_comp
   flat_multiset::value_comp
   Non-member functions
   operator==operator<=>
   (C++23)(C++23)
   swap(std::flat_multiset)
   (C++23)
   erase_if(std::flat_multiset)
   (C++23)
   Helper classes
   uses_allocator<std::flat_multiset>
   (C++23)
   Tags
   sorted_equivalent
   (C++23)
   sorted_equivalent_t
   (C++23)
   Deduction guides

   iterator insert( const value_type& value )
   (1)                                                            (since C++23)
   iterator insert( value_type&& value );
   (2)                                                            (since C++23)
   iterator insert( const_iterator pos, const value_type& value );
   (3)                                                            (since C++23)
   iterator insert( const_iterator pos, value_type&& value );
   (4)                                                            (since C++23)
   template< class InputIt >
   void insert( InputIt first, InputIt last );
   (5)                                                            (since C++23)
   template< class InputIt >
   void insert( std::sorted_equivalent_t, InputIt first, InputIt last );
   (6)                                                            (since C++23)
   void insert( std::initializer_list<key_type> ilist );
   (7)                                                            (since C++23)
   void insert( std::sorted_equivalent_t s,
   std::initializer_list<key_type> ilist );
   (8)                                                            (since C++23)

   Inserts element(s) into the container. The order of the remaining
   equivalent elements is preserved.
   1) Inserts value. If the container has elements with equivalent key,
   inserts at the upper bound of that range. Equivalent to return
   emplace(value);.
   2) Inserts value. If the container has elements with equivalent key,
   inserts at the upper bound of that range. Equivalent to return
   emplace(std::move(value));.
   3) Inserts value in the position as close as possible to the position
   just prior to pos. Equivalent to return emplace_hint(pos, value);.
   4) Inserts value in the position as close as possible to the position
   just prior to pos. Equivalent to return emplace_hint(pos,
   std::move(value));.
   5) Inserts elements from range [first, last) as if performing the
   following operations sequentially:
    1. Adds elements to c as if by c.insert(c.end(), first, last);.
    2. Sorts the range of newly inserted elements with respect to compare.
    3. Merges the resulting sorted range and the sorted range of
       pre-existing elements into a single sorted range.

   May allocate memory during the in-place merge stage.
   6) Inserts elements from range [first, last). Equivalent to
   insert(first, last);.
   7) Inserts elements from initializer list ilist. Equivalent to
   insert(ilist.begin(), ilist.end());.
   8) Inserts elements from initializer list ilist. Equivalent to
   insert(s, ilist.begin(), ilist.end());.
   Information on iterator invalidation is copied from here

Parameters

   pos - iterator to the position before which the new element will be
   inserted
   value - element value to insert
   first, last - range of elements to insert
   ilist - initializer list to insert the values from
   s - a disambiguation tag indicating that the input sequence is sorted
   (with respect to key_compare)
   Type requirements
   -
   InputIt must meet the requirements of LegacyInputIterator.

Return value

   1-4) An iterator to the inserted element.
   5-8) (none)

Exceptions

   1-4) Depends on underlying container.
   5-8) No exception safety guarantee.
   This section is incomplete
   Reason: exception guarantees 1..8

Complexity

   1-4) Linear.
   5) N + M·log(M), where NN is the size() before the operation and M is
   std::distance(first, last).
   6) Linear.
   7) N + M·log(M), where NN is the size() before the operation and M is
   ilist.size().
   8) Linear.
   This section is incomplete
   Reason: recheck the complexity: 1-4, 8

Example

   This section is incomplete
   Reason: no example

See also

   emplace
   constructs element in-place
   (public member function)
   emplace_hint
   constructs elements in-place using a hint
   (public member function)
   inserter
   creates a std::insert_iterator of type inferred from the argument
   (function template)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/container/flat_m
   ultiset/insert&oldid=170240"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 20 March 2024, at 06:41.
     * This page has been accessed 327 times.
