std::tuple_size<std::tuple>

   From cppreference.com
   < cpp | utility | tuple

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Utilities library
   Language support
   Type support (basic types, RTTI)
   Library feature-test macros (C++20)
   Dynamic memory management
   Program utilities
   Coroutine support (C++20)
   Variadic functions
   is_constant_evaluated
   (C++20)
   is_within_lifetime
   (C++26)
   initializer_list
   (C++11)
   source_location
   (C++20)
   Debugging support
   is_debugger_present
   (C++26)
   breakpoint_if_debugging
   (C++26)
   breakpoint
   (C++26)
   Three-way comparison
   three_way_comparablethree_way_comparable_with
   (C++20)(C++20)
   strong_ordering
   (C++20)
   weak_ordering
   (C++20)
   partial_ordering
   (C++20)
   common_comparison_category
   (C++20)
   compare_three_way_result
   (C++20)
   compare_three_way
   (C++20)
   strong_order
   (C++20)
   weak_order
   (C++20)
   partial_order
   (C++20)
   compare_strong_order_fallback
   (C++20)
   compare_weak_order_fallback
   (C++20)
   compare_partial_order_fallback
   (C++20)
   is_eqis_ltis_lteq
   (C++20)(C++20)(C++20)
   is_neqis_gtis_gteq
   (C++20)(C++20)(C++20)
   General utilities
   Date and time
   Function objects
   Formatting library (C++20)
   bitset
   hash
   (C++11)
   Relational operators (deprecated in C++20)
   rel_ops::operator!=rel_ops::operator>

   rel_ops::operator<=rel_ops::operator>=
   Integer comparison functions
   cmp_equalcmp_lesscmp_less_than
   (C++20)(C++20)(C++20)
   cmp_not_equalcmp_greatercmp_greater_than
   (C++20)(C++20)(C++20)
   in_range
   (C++20)
   Swap and type operations
   swap
   ranges::swap
   (C++20)
   exchange
   (C++14)
   declval
   (C++11)
   to_underlying
   (C++23)
   forward
   (C++11)
   forward_like
   (C++23)
   move
   (C++11)
   move_if_noexcept
   (C++11)
   as_const
   (C++17)
   Common vocabulary types
   pair
   tuple
   (C++11)
   optional
   (C++17)
   any
   (C++17)
   variant
   (C++17)
   tuple_size
   (C++11)
   tuple_element
   (C++11)
   apply
   (C++17)
   make_from_tuple
   (C++17)
   expected
   (C++23)
   Elementary string conversions
   to_chars
   (C++17)
   from_chars
   (C++17)
   chars_format
   (C++17)
   to_chars_result
   (C++17)
   from_chars_result
   (C++17)

   std::tuple
   Member functions
   tuple::tuple
   tuple::operator=
   tuple::swap
   Non-member functions
   make_tuple
   tie
   forward_as_tuple
   tuple_cat
   operator==operator!=operator<operator<=operator>operator>=operator<=>
   (until C++20)(until C++20)(until C++20)(until C++20)(until
   C++20)(C++20)
   swap(std::tuple)
   get(std::tuple)
   Helper concepts
   tuple-like
   (C++23)
   Helper classes
   tuple_size<std::tuple>
   tuple_element<std::tuple>
   uses_allocator<std::tuple>
   basic_common_reference<std::tuple>
   (C++23)
   common_type<std::tuple>
   (C++23)
   formatter<std::tuple>
   (C++23)
   ignore
   Deduction guides(C++17)

   Defined in header <tuple>
   template< class... Types >

   struct tuple_size< std::tuple<Types...> >
       : std::integral_constant<std::size_t, sizeof...(Types)> { };
                             (since C++11)

   Provides access to the number of elements in a tuple as a compile-time
   constant expression.

Helper variable template

   template< class T >
   inline constexpr std::size_t tuple_size_v = tuple_size<T>::value;
                      (since C++17)

Inherited from std::integral_constant

Member constants

   value
   [static]
   sizeof...(Types)
   (public static member constant)

Member functions

   operator std::size_t
   converts the object to std::size_t, returns value
   (public member function)
   operator()
   (C++14)
   returns value
   (public member function)

Member types

   Type       Definition
   value_type std::size_t
   type       std::integral_constant<std::size_t, value>

Example

   Run this code
#include <iostream>
#include <tuple>

template <class T>
void test(T value)
{
    int a[std::tuple_size_v<T>]; // can be used at compile time

    std::cout << std::tuple_size<T>{} << ' ' // or at run time
              << sizeof a << ' '
              << sizeof value << '\n';
}

int main()
{
    test(std::make_tuple(1, 2, 3.14));
}

   Possible output:
3 12 16

See also

   Structured binding (C++17) binds the specified names to sub-objects or
   tuple elements of the initializer
   tuple_size
   (C++11)
   obtains the number of elements of a tuple-like type
   (class template)
   std::tuple_size<std::pair>
   (C++11)
   obtains the size of a pair
   (class template specialization)
   std::tuple_size<std::array>
   (C++11)
   obtains the size of an array
   (class template specialization)
   std::tuple_size<std::ranges::subrange>
   (C++20)
   obtains the number of components of a std::ranges::subrange
   (class template specialization)
   get(std::tuple)
   (C++11)
   tuple accesses specified element
   (function template)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/utility/tuple/tu
   ple_size&oldid=166805"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 22 December 2023, at 22:51.
     * This page has been accessed 226,094 times.
