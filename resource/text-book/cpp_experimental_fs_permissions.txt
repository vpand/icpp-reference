std::experimental::filesystem::permissions

   From cppreference.com
   < cpp | experimental | fs

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Experimental
   Technical Specification
   Filesystem library (filesystem TS)
   Library fundamentals (library fundamentals TS)
   Library fundamentals 2 (library fundamentals TS v2)
   Library fundamentals 3 (library fundamentals TS v3)
   Extensions for parallelism (parallelism TS)
   Extensions for parallelism 2 (parallelism TS v2)
   Extensions for concurrency (concurrency TS)
   Extensions for concurrency 2 (concurrency TS v2)
   Concepts (concepts TS)
   Ranges (ranges TS)
   Reflection (reflection TS)
   Mathematical special functions (special functions TR)
   Experimental Non-TS
   Pattern Matching
   Linear Algebra
   std::execution
   Contracts
   2D Graphics

   Filesystem library
   Classes
   filesystem::path
   filesystem::filesystem_error
   filesystem::directory_entry
   filesystem::directory_iterator
   filesystem::recursive_directory_iterator
   filesystem::file_status
   filesystem::space_info
   filesystem::file_type
   filesystem::perms
   filesystem::copy_options
   filesystem::directory_options
   filesystem::file_time_type
   Functions
   filesystem::absolute
   filesystem::system_complete
   filesystem::canonical
   filesystem::copy
   filesystem::copy_file
   filesystem::copy_symlink
   filesystem::create_directory
   filesystem::create_directories
   filesystem::create_hard_link
   filesystem::create_symlink
   filesystem::create_directory_symlink
   filesystem::current_path
   filesystem::exists
   filesystem::equivalent
   filesystem::file_size
   filesystem::hard_link_count
   filesystem::last_write_time
   filesystem::permissions
   filesystem::read_symlink
   filesystem::remove
   filesystem::remove_all
   filesystem::rename
   filesystem::resize_file
   filesystem::space
   filesystem::status
   filesystem::symlink_status
   filesystem::temp_directory_path
   File types
   filesystem::is_block_file
   filesystem::is_character_file
   filesystem::is_directory
   filesystem::is_empty
   filesystem::status_known
   filesystem::is_fifo
   filesystem::is_other
   filesystem::is_regular_file
   filesystem::is_socket
   filesystem::is_symlink

   Defined in header <experimental/filesystem>
   void permissions( const path& p, perms prms );
   void permissions( const path& p, perms prms, error_code& ec );
                                                 (filesystem TS)

   Changes access permissions of the file to which p resolves, as if by
   POSIX fchmodat. Symlinks are followed if prms::resolve_symlinks is set.

   The effects depend on prms as follows:
     * If neither perms::add_perms nor perms::remove_perms is set, file
       permissions are set to exactly prms & fs::perms::mask (meaning,
       every valid bit of prms is applied).
     * If perms::add_perms, the file permissions are set to exactly
       status(p).permissions() | (prms & perms::mask) (meaning, any valid
       bit that is set in prms, but not in the file's current permissions
       is added to the file's permissions).
     * If perms::remove_perms is set, the file permissions are set to
       exactly status(p).permissions() & ~(prms & perms::mask) (meaning,
       any valid bit that is clear in prms, but set in the file's current
       permissions is cleared in the file's permissions).
     * If both perms::add_perms and perms::remove_perms are set, error
       occurs.

   The non-throwing overload has no special action on error.

Parameters

   p    - path to examine
   prms - permissions to set, add, or remove
   ec   - out-parameter for error reporting in the non-throwing overload

Return value

   (none)

Exceptions

   The overload that does not take an error_code& parameter throws
   filesystem_error on underlying OS API errors, constructed with p as the
   first argument and the OS error code as the error code argument.
   std::bad_alloc may be thrown if memory allocation fails. The overload
   taking an error_code& parameter sets it to the OS API error code if an
   OS API call fails, and executes ec.clear() if no errors occur. This
   overload has
   noexcept specification:
   noexcept

Notes

   Permissions may not necessarily be implemented as bits, but they are
   treated that way conceptually.

   Some permission bits may be ignored on some systems, and changing some
   bits may automatically change others (e.g. on platforms without
   owner/group/all distinction, setting any of the three write bits set
   all three).

Example

   Run this code
#include <bitset>
#include <experimental/filesystem>
#include <fstream>
#include <iostream>
namespace fs = std::experimental::filesystem;

void demo_perms(fs::perms p)
{
     std::cout << ((p & fs::perms::owner_read) != fs::perms::none ? "r" : "-")
               << ((p & fs::perms::owner_write) != fs::perms::none ? "w" : "-")
               << ((p & fs::perms::owner_exec) != fs::perms::none ? "x" : "-")
               << ((p & fs::perms::group_read) != fs::perms::none ? "r" : "-")
               << ((p & fs::perms::group_write) != fs::perms::none ? "w" : "-")
               << ((p & fs::perms::group_exec) != fs::perms::none ? "x" : "-")
               << ((p & fs::perms::others_read) != fs::perms::none ? "r" : "-")
               << ((p & fs::perms::others_write) != fs::perms::none ? "w" : "-")
               << ((p & fs::perms::others_exec) != fs::perms::none ? "x" : "-")
               << '\n';
}

int main()
{
    std::ofstream("test.txt"); // create file

    std::cout << "Created file with permissions: ";
    demo_perms(fs::status("test.txt").permissions());

    fs::permissions("test.txt", fs::perms::add_perms |
                                fs::perms::owner_all | fs::perms::group_all);

    std::cout << "After adding o+rwx and g+rwx:  ";
    demo_perms(fs::status("test.txt").permissions());

    fs::remove("test.txt");
}

   Possible output:
Created file with permissions: rw-r--r--
After adding o+rwx and g+rwx:  rwxrwxr--

See also

   perms
   identifies file system permissions
   (enum)
   statussymlink_status
   determines file attributes
   determines file attributes, checking the symlink target
   (function)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/experimental/fs/
   permissions&oldid=158866"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 12 September 2023, at 02:48.
     * This page has been accessed 17,779 times.
