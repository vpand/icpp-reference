std::default_initializable

   From cppreference.com
   < cpp | concepts

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Concepts library
   Core language concepts
   same_as
   derived_from
   convertible_to
   common_reference_with

   common_with
   integral
   signed_integral
   unsigned_integral
   floating_point
   swappableswappable_with
   destructible
   constructible_from
   default_initializable
   move_constructible
   copy_constructible
   assignable_from
   Comparison concepts
   equality_comparableequality_comparable_with
   totally_orderedtotally_ordered_with
   Object concepts
   movable
   copyable
   semiregular
   regular
   Callable concepts
   invocableregular_invocable
   predicate
   relation
   equivalence_relation
   strict_weak_order
   Exposition-only concepts
   boolean-testable

   Defined in header <concepts>
   template< class T >

   concept default_initializable = std::constructible_from<T> && requires
   { T{}; } &&
                                   /* T t; is well-formed, see below */;
                               (since C++20)

   The default_initializable concept checks whether variables of type T
   can be
     * value-initialized (T() is well-formed);
     * direct-list-initialized from an empty initializer list (T{} is
       well-formed); and
     * default-initialized (T t; is well-formed).

   Access checking is performed as if in a context unrelated to T. Only
   the validity of the immediate context of the variable initialization is
   considered.

Possible implementation

template<class T>
concept default_initializable =
    std::constructible_from<T> &&
    requires { T{}; } &&
    requires { ::new T; };

See also

   constructible_from
   (C++20)
   specifies that a variable of the type can be constructed from or bound
   to a set of argument types
   (concept)
   is_default_constructibleis_trivially_default_constructibleis_nothrow_de
   fault_constructible
   (C++11)(C++11)(C++11)
   checks if a type has a default constructor
   (class template)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/concepts/default
   _initializable&oldid=161741"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 29 October 2023, at 14:13.
     * This page has been accessed 29,960 times.
