std::tx_exception

   From cppreference.com
   < cpp | error

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Diagnostics library
   Exception handling
   exception
   uncaught_exceptionuncaught_exceptions
   (until C++20*)(C++17)
   exception_ptr
   (C++11)
   make_exception_ptr
   (C++11)
   current_exception
   (C++11)
   rethrow_exception
   (C++11)
   nested_exception
   (C++11)
   throw_with_nested
   (C++11)
   rethrow_if_nested
   (C++11)
   Exception handling failures
   terminate
   terminate_handler
   get_terminate
   (C++11)
   set_terminate
   bad_exception
   unexpected
   (until C++17*)
   unexpected_handler
   (until C++17*)
   get_unexpected
   (C++11)(until C++17*)
   set_unexpected
   (until C++17*)
   Error codes
   Error codes
   errno
   Exception categories
   logic_error
   invalid_argument
   domain_error
   length_error
   out_of_range
   runtime_error
   range_error
   overflow_error
   underflow_error
   tx_exception
   (TM TS)
   System error support
   error_category
   (C++11)
   generic_category
   (C++11)
   system_category
   (C++11)
   error_condition
   (C++11)
   errc
   (C++11)
   error_code
   (C++11)
   system_error
   (C++11)
   Assertions
   assert
   Stacktrace
   stacktrace_entry
   (C++23)
   basic_stacktrace
   (C++23)

   Defined in header <stdexcept>
   template< class T >
   class tx_exception : public std::runtime_error;
                                (TM TS)

   Defines an exception type that can be used to cancel and roll back an
   atomic transaction initiated by the keyword atomic_cancel.

   If T is not TriviallyCopyable, the program that specializes
   std::tx_exception<T> is ill-formed.

Member functions

std::tx_exception::tx_exception

   explicit tx_exception( T value ) transaction_safe;
   (1)                                                                   (TM TS)
   tx_exception( T value, const std::string& what_arg ) transaction_safe;
   (2)                                                                   (TM TS)
   tx_exception( T value, const char* what_arg ) transaction_safe;
   (3)                                                                   (TM TS)
   tx_exception( const tx_exception& other ) transaction_safe noexcept;
   (4)                                                                   (TM TS)
   1-3) Constructs the exception object with what_arg as explanatory
   string that can be accessed through what() and value as the object that
   can be accessed through get().
   4) Copy constructor. If *this and other both have dynamic type
   std::tx_exception<T> then std::strcmp(what(), other.what()) == 0.

Parameters

   value    - payload object
   what_arg - explanatory string
   other    - another exception object to copy

Exceptions

   1-3) May throw implementation-defined exceptions.

std::tx_exception::operator=

   tx_exception& operator=( const tx_exception& other ) transaction_safe
   noexcept;
                                                                        (TM TS)

   Assigns the contents with those of other. If *this and other both have
   dynamic type std::tx_exception<T> then std::strcmp(what(),
   other.what()) == 0 after assignment.

Parameters

   other - another exception object to assign with

Return value

   *this

std::tx_exception::get

   T get() const transaction_safe;
                                  (TM TS)

   Returns the payload object held by the exception object.

Exceptions

   May throw implementation-defined exceptions.

std::tx_exception::what

   virtual const char* what() const transaction_safe_dynamic noexcept;
                                                                      (TM TS)

   Returns the explanatory string.

Parameters

   (none)

Return value

   Pointer to a null-terminated string with explanatory information.

Inherited from std::runtime_error

Inherited from std::exception

Member functions

   (destructor)
   [virtual]
   destroys the exception object
   (virtual public member function of std::exception)
   what
   [virtual]
   returns an explanatory string
   (virtual public member function of std::exception)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/error/tx_excepti
   on&oldid=160413"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 9 October 2023, at 12:20.
     * This page has been accessed 32,243 times.
