std::any

   From cppreference.com
   < cpp | utility

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Utilities library
   Language support
   Type support (basic types, RTTI)
   Library feature-test macros (C++20)
   Dynamic memory management
   Program utilities
   Coroutine support (C++20)
   Variadic functions
   is_constant_evaluated
   (C++20)
   is_within_lifetime
   (C++26)
   initializer_list
   (C++11)
   source_location
   (C++20)
   Debugging support
   is_debugger_present
   (C++26)
   breakpoint_if_debugging
   (C++26)
   breakpoint
   (C++26)
   Three-way comparison
   three_way_comparablethree_way_comparable_with
   (C++20)(C++20)
   strong_ordering
   (C++20)
   weak_ordering
   (C++20)
   partial_ordering
   (C++20)
   common_comparison_category
   (C++20)
   compare_three_way_result
   (C++20)
   compare_three_way
   (C++20)
   strong_order
   (C++20)
   weak_order
   (C++20)
   partial_order
   (C++20)
   compare_strong_order_fallback
   (C++20)
   compare_weak_order_fallback
   (C++20)
   compare_partial_order_fallback
   (C++20)
   is_eqis_ltis_lteq
   (C++20)(C++20)(C++20)
   is_neqis_gtis_gteq
   (C++20)(C++20)(C++20)
   General utilities
   Date and time
   Function objects
   Formatting library (C++20)
   bitset
   hash
   (C++11)
   Relational operators (deprecated in C++20)
   rel_ops::operator!=rel_ops::operator>

   rel_ops::operator<=rel_ops::operator>=
   Integer comparison functions
   cmp_equalcmp_lesscmp_less_than
   (C++20)(C++20)(C++20)
   cmp_not_equalcmp_greatercmp_greater_than
   (C++20)(C++20)(C++20)
   in_range
   (C++20)
   Swap and type operations
   swap
   ranges::swap
   (C++20)
   exchange
   (C++14)
   declval
   (C++11)
   to_underlying
   (C++23)
   forward
   (C++11)
   forward_like
   (C++23)
   move
   (C++11)
   move_if_noexcept
   (C++11)
   as_const
   (C++17)
   Common vocabulary types
   pair
   tuple
   (C++11)
   optional
   (C++17)
   any
   (C++17)
   variant
   (C++17)
   tuple_size
   (C++11)
   tuple_element
   (C++11)
   apply
   (C++17)
   make_from_tuple
   (C++17)
   expected
   (C++23)
   Elementary string conversions
   to_chars
   (C++17)
   from_chars
   (C++17)
   chars_format
   (C++17)
   to_chars_result
   (C++17)
   from_chars_result
   (C++17)

   std::any
   Member functions
   any::any
   any::~any
   any::operator=
   Modifiers
   any::emplace
   any::reset
   any::swap
   Observers
   any::has_value
   any::type
   Non-member functions
   swap(std::any)
   any_cast
   make_any
   Helper classes
   bad_any_cast

   Defined in header <any>
   class any;
                          (since C++17)

   The class any describes a type-safe container for single values of any
   copy constructible type.
   1) An object of class any stores an instance of any type that satisfies
   the constructor requirements or is empty, and this is referred to as
   the state of the class any object. The stored instance is called the
   contained object. Two states are equivalent if they are either both
   empty or if both are not empty and if the contained objects are
   equivalent.
   2) The non-member any_cast functions provide type-safe access to the
   contained object.

   Implementations are encouraged to avoid dynamic allocations for small
   objects, but such an optimization may only be applied to types for
   which std::is_nothrow_move_constructible returns true.

Member functions

   (constructor)
   constructs an any object
   (public member function)
   operator=
   assigns an any object
   (public member function)
   (destructor)
   destroys an any object
   (public member function)

Modifiers

   emplace
   change the contained object, constructing the new object directly
   (public member function)
   reset
   destroys contained object
   (public member function)
   swap
   swaps two any objects
   (public member function)

Observers

   has_value
   checks if object holds a value
   (public member function)
   type
   returns the typeid of the contained value
   (public member function)

Non-member functions

   std::swap(std::any)
   (C++17)
   specializes the std::swap algorithm
   (function)
   any_cast
   (C++17)
   type-safe access to the contained object
   (function template)
   make_any
   (C++17)
   creates an any object
   (function template)

Helper classes

   bad_any_cast
   (C++17)
   exception thrown by the value-returning forms of any_cast on a type
   mismatch
   (class)

Notes

   Feature-test macro  Value    Std   Feature
   __cpp_lib_any      201606L (C++17) std::any

Example

   Run this code
#include <any>
#include <iostream>

int main()
{
    std::cout << std::boolalpha;

    // any type
    std::any a = 1;
    std::cout << a.type().name() << ": " << std::any_cast<int>(a) << '\n';
    a = 3.14;
    std::cout << a.type().name() << ": " << std::any_cast<double>(a) << '\n';
    a = true;
    std::cout << a.type().name() << ": " << std::any_cast<bool>(a) << '\n';

    // bad cast
    try
    {
        a = 1;
        std::cout << std::any_cast<float>(a) << '\n';
    }
    catch (const std::bad_any_cast& e)
    {
        std::cout << e.what() << '\n';
    }

    // has value
    a = 2;
    if (a.has_value())
        std::cout << a.type().name() << ": " << std::any_cast<int>(a) << '\n';

    // reset
    a.reset();
    if (!a.has_value())
        std::cout << "no value\n";

    // pointer to contained data
    a = 3;
    int* i = std::any_cast<int>(&a);
    std::cout << *i << '\n';
}

   Possible output:
int: 1
double: 3.14
bool: true
bad any_cast
int: 2
no value
3

See also

   function
   (C++11)
   wraps callable object of any copy constructible type with specified
   function call signature
   (class template)
   move_only_function
   (C++23)
   wraps callable object of any type with specified function call
   signature
   (class template)
   variant
   (C++17)
   a type-safe discriminated union
   (class template)
   optional
   (C++17)
   a wrapper that may or may not hold an object
   (class template)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/utility/any&oldi
   d=151944"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 20 May 2023, at 12:06.
     * This page has been accessed 881,356 times.
