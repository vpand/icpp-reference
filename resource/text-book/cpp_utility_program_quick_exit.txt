std::quick_exit

   From cppreference.com
   < cpp | utility | program

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Utilities library
   Language support
   Type support (basic types, RTTI)
   Library feature-test macros (C++20)
   Dynamic memory management
   Program utilities
   Coroutine support (C++20)
   Variadic functions
   is_constant_evaluated
   (C++20)
   is_within_lifetime
   (C++26)
   initializer_list
   (C++11)
   source_location
   (C++20)
   Debugging support
   is_debugger_present
   (C++26)
   breakpoint_if_debugging
   (C++26)
   breakpoint
   (C++26)
   Three-way comparison
   three_way_comparablethree_way_comparable_with
   (C++20)(C++20)
   strong_ordering
   (C++20)
   weak_ordering
   (C++20)
   partial_ordering
   (C++20)
   common_comparison_category
   (C++20)
   compare_three_way_result
   (C++20)
   compare_three_way
   (C++20)
   strong_order
   (C++20)
   weak_order
   (C++20)
   partial_order
   (C++20)
   compare_strong_order_fallback
   (C++20)
   compare_weak_order_fallback
   (C++20)
   compare_partial_order_fallback
   (C++20)
   is_eqis_ltis_lteq
   (C++20)(C++20)(C++20)
   is_neqis_gtis_gteq
   (C++20)(C++20)(C++20)
   General utilities
   Date and time
   Function objects
   Formatting library (C++20)
   bitset
   hash
   (C++11)
   Relational operators (deprecated in C++20)
   rel_ops::operator!=rel_ops::operator>

   rel_ops::operator<=rel_ops::operator>=
   Integer comparison functions
   cmp_equalcmp_lesscmp_less_than
   (C++20)(C++20)(C++20)
   cmp_not_equalcmp_greatercmp_greater_than
   (C++20)(C++20)(C++20)
   in_range
   (C++20)
   Swap and type operations
   swap
   ranges::swap
   (C++20)
   exchange
   (C++14)
   declval
   (C++11)
   to_underlying
   (C++23)
   forward
   (C++11)
   forward_like
   (C++23)
   move
   (C++11)
   move_if_noexcept
   (C++11)
   as_const
   (C++17)
   Common vocabulary types
   pair
   tuple
   (C++11)
   optional
   (C++17)
   any
   (C++17)
   variant
   (C++17)
   tuple_size
   (C++11)
   tuple_element
   (C++11)
   apply
   (C++17)
   make_from_tuple
   (C++17)
   expected
   (C++23)
   Elementary string conversions
   to_chars
   (C++17)
   from_chars
   (C++17)
   chars_format
   (C++17)
   to_chars_result
   (C++17)
   from_chars_result
   (C++17)

   Program support utilities
   Program termination
   abort
   exit
   quick_exit
   (C++11)
   _Exit
   (C++11)
   atexit
   at_quick_exit
   (C++11)
   EXIT_SUCCESSEXIT_FAILURE
   Unreachable control flow
   unreachable
   (C++23)
   Communicating with the environment
   system
   getenv
   Signals
   signal
   raise
   sig_atomic_t
   SIG_DFLSIG_IGN
   SIG_ERR
   Signal types
   SIGABRTSIGFPESIGILL
   SIGINTSIGSEGVSIGTERM
   Non-local jumps
   setjmp
   longjmp
   Types
   jmp_buf

   Defined in header <cstdlib>
   [[noreturn]] void quick_exit( int exit_code ) noexcept;
                                                          (since C++11)

   Causes normal program termination to occur without completely cleaning
   the resources.

   Functions passed to std::at_quick_exit are called in reverse order of
   their registration. If an exception tries to propagate out of any of
   the functions, std::terminate is called. After calling the registered
   functions, calls std::_Exit(exit_code).

   Functions passed to std::atexit are not called.

Parameters

   exit_code - exit status of the program

Return value

   (none)

Example

   Run this code
#include <cstdlib>
#include <iostream>

template<int N>
void quick_exit_handler()
{
    std::cout << "quick_exit handler #" << N << std::endl; // flush is intended
}

void at_exit_handler()
{
    std::cout << "at_exit handler\n";
}

int main()
{
    if (std::at_quick_exit(quick_exit_handler<1>) ||
        std::at_quick_exit(quick_exit_handler<2>))
    {
        std::cerr << "Registration failed\n";
        return EXIT_FAILURE;
    }

    std::atexit(at_exit_handler); // the handler will not be called

    struct R { ~R() { std::cout << "destructor\n"; } } resource;

    /*...*/

    std::quick_exit(EXIT_SUCCESS);

    std::cout << "This statement is unreachable...\n";
}

   Output:
quick_exit handler #2
quick_exit handler #1

See also

   abort
   causes abnormal program termination (without cleaning up)
   (function)
   exit
   causes normal program termination with cleaning up
   (function)
   atexit
   registers a function to be called on std::exit() invocation
   (function)
   at_quick_exit
   (C++11)
   registers a function to be called on std::quick_exit invocation
   (function)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/utility/program/
   quick_exit&oldid=161405"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 25 October 2023, at 22:47.
     * This page has been accessed 87,100 times.
