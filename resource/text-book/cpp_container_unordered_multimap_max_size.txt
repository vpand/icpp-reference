std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>::max_size

   From cppreference.com
   < cpp | container | unordered multimap


   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Containers library
   Sequence
   array
   (C++11)
   vector
   vector<bool>
   deque
   forward_list
   (C++11)
   list
   Associative
   set
   multiset
   map
   multimap
   Unordered associative
   unordered_set
   (C++11)
   unordered_multiset
   (C++11)
   unordered_map
   (C++11)
   unordered_multimap
   (C++11)
   Adaptors
   stack
   queue
   priority_queue
   flat_set
   (C++23)
   flat_multiset
   (C++23)
   flat_map
   (C++23)
   flat_multimap
   (C++23)
   Views
   span
   (C++20)
   mdspan
   (C++23)
   Iterator invalidation
   Member function table
   Non-member function table

   std::unordered_multimap
   Member types
   Member functions
   unordered_multimap::unordered_multimap
   unordered_multimap::~unordered_multimap

   unordered_multimap::operator=
   unordered_multimap::get_allocator
   Iterators
   unordered_multimap::beginunordered_multimap::cbegin
   unordered_multimap::endunordered_multimap::cend
   Capacity
   unordered_multimap::size
   unordered_multimap::max_size
   unordered_multimap::empty
   Modifiers
   unordered_multimap::clear
   unordered_multimap::insert
   unordered_multimap::insert_range
   (C++23)
   unordered_multimap::emplace
   unordered_multimap::emplace_hint
   unordered_multimap::erase
   unordered_multimap::swap
   unordered_multimap::extract
   (C++17)
   unordered_multimap::merge
   (C++17)
   Lookup
   unordered_multimap::count
   unordered_multimap::find
   unordered_multimap::contains
   (C++20)
   unordered_multimap::equal_range
   Bucket interface
   unordered_multimap::begin(size_type)unordered_multimap::cbegin(size_typ
   e)
   unordered_multimap::end(size_type)unordered_multimap::cend(size_type)
   unordered_multimap::bucket_count
   unordered_multimap::max_bucket_count
   unordered_multimap::bucket_size
   unordered_multimap::bucket
   Hash policy
   unordered_multimap::load_factor
   unordered_multimap::max_load_factor
   unordered_multimap::rehash
   unordered_multimap::reserve
   Observers
   unordered_multimap::hash_function
   unordered_multimap::key_eq
   Non-member functions
   operator==operator!=
   (C++11)(C++11)(until C++20)
   std::swap(std::unordered_multimap)
   (C++11)
   erase_if(std::unordered_multimap)
   (C++20)
   Deduction guides (C++17)

   size_type max_size() const noexcept;
                                       (since C++11)

   Returns the maximum number of elements the container is able to hold
   due to system or library implementation limitations, i.e.
   std::distance(begin(), end()) for the largest container.

Parameters

   (none)

Return value

   Maximum number of elements.

Complexity

   Constant.

Notes

   This value typically reflects the theoretical limit on the size of the
   container, at most std::numeric_limits<difference_type>::max(). At
   runtime, the size of the container may be limited to a value smaller
   than max_size() by the amount of RAM available.

Example

   Run this code
#include <iostream>
#include <locale>
#include <unordered_map>

int main()
{
    std::unordered_multimap<char, char> p;
    std::unordered_multimap<long, char> q;

    std::cout.imbue(std::locale("en_US.UTF-8"));
    std::cout << std::uppercase
              << "p.max_size() = " << std::dec << p.max_size() << " = 0x"
              << std::hex << p.max_size() << '\n'
              << "q.max_size() = " << std::dec << q.max_size() << " = 0x"
              << std::hex << q.max_size() << '\n';
}

   Possible output:
p.max_size() = 1,152,921,504,606,846,975 = 0xFFF,FFF,FFF,FFF,FFF
q.max_size() = 768,614,336,404,564,650 = 0xAAA,AAA,AAA,AAA,AAA

See also

   size
   returns the number of elements
   (public member function)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/container/unorde
   red_multimap/max_size&oldid=136063"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 4 December 2021, at 11:53.
     * This page has been accessed 22,067 times.
