std::fgets

   From cppreference.com
   < cpp | io | c

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Input/output library
   I/O manipulators
   Print functions (C++23)
   C-style I/O
   Buffers
   basic_streambuf
   basic_filebuf
   basic_stringbuf
   basic_spanbuf
   (C++23)
   strstreambuf
   (C++98/26*)
   basic_syncbuf
   (C++20)
   Streams
   Abstractions
   ios_base
   basic_ios
   basic_istream
   basic_ostream
   basic_iostream
   File I/O
   basic_ifstream
   basic_ofstream
   basic_fstream
   String I/O
   basic_istringstream
   basic_ostringstream
   basic_stringstream
   Array I/O
   basic_ispanstream
   (C++23)
   basic_ospanstream
   (C++23)
   basic_spanstream
   (C++23)
   istrstream
   (C++98/26*)
   ostrstream
   (C++98/26*)
   strstream
   (C++98/26*)
   Synchronized Output
   basic_osyncstream
   (C++20)
   Types
   streamoff
   streamsize
   fpos
   Error category interface
   iostream_category
   (C++11)
   io_errc
   (C++11)

   C-style I/O
   Types and objects
   FILE
   fpos_t
   stdinstdoutstderr
   Functions
   File access
   fopen
   freopen
   fclose
   fflush
   fwide
   setbuf
   setvbuf
   Direct input/output
   fread
   fwrite
   Unformatted input/output
   fgetcgetc
   fgets
   fputcputc
   fputs
   getchar
   gets
   (until C++14)
   putchar
   puts
   ungetc
   fgetwcgetwc
   fgetws
   fputwcputwc
   fputws
   getwchar
   putwchar
   ungetwc
   Formatted input
   scanffscanfsscanf
   vscanfvfscanfvsscanf
   (C++11)(C++11)(C++11)
   wscanffwscanfswscanf
   vwscanfvfwscanfvswscanf
   (C++11)(C++11)(C++11)
   Formatted output
   printffprintfsprintfsnprintf
   (C++11)
   vprintfvfprintfvsprintfvsnprintf
   (C++11)
   wprintffwprintfswprintf
   vwprintfvfwprintfvswprintf
   File positioning
   ftell
   fgetpos
   fseek
   fsetpos
   rewind
   Error handling
   clearerr
   feof
   ferror
   perror
   Operations on files
   remove
   rename
   tmpfile
   tmpnam

   Defined in header <cstdio>
   char* fgets( char* str, int count, std::FILE* stream );

   Reads at most count - 1 characters from the given file stream and
   stores them in the character array pointed to by str. Parsing stops if
   a newline character is found, in which case str will contain that
   newline character, or if end-of-file occurs. If bytes are read and no
   errors occur, writes a null character at the position immediately after
   the last character written to str.

Parameters

   str - pointer to an element of a char array
   count - maximum number of characters to write (typically the length of
   str)
   stream - file stream to read the data from

Return value

   str on success, null pointer on failure.

   If the end-of-file condition is encountered, sets the eof indicator on
   stream (see std::feof()). This is only a failure if it causes no bytes
   to be read, in which case a null pointer is returned and the contents
   of the array pointed to by str are not altered (i.e. the first byte is
   not overwritten with a null character).

   If the failure has been caused by some other error, sets the error
   indicator (see std::ferror()) on stream. The contents of the array
   pointed to by str are indeterminate (it may not even be
   null-terminated).

Notes

   POSIX additionally requires that fgets sets errno if it encounters a
   failure other than the end-of-file condition.

   Although the standard specification is unclear in the cases where count
   <= 1, common implementations do
     * if count < 1, do nothing, report error,
     * if count == 1,

          + some implementations do nothing, report error,
          + others read nothing, store zero in str[0], report success.

Example

   Run this code
#include <cstdio>
#include <cstdlib>
#include <iomanip>
#include <iostream>
#include <span>

void dump(std::span<const char> buf, std::size_t offset)
{
    std::cout << std::dec;
    for (char ch : buf)
        std::cout << (ch >= ' ' ? ch : '.'), offset--;
    std::cout << std::string(offset, ' ') << std::hex
              << std::setfill('0') << std::uppercase;
    for (unsigned ch : buf)
        std::cout << std::setw(2) << ch << ' ';
    std::cout << std::dec << '\n';
}

int main()
{
    std::FILE* tmpf = std::tmpfile();
    std::fputs("Alan Turing\n", tmpf);
    std::fputs("John von Neumann\n", tmpf);
    std::fputs("Alonzo Church\n", tmpf);

    std::rewind(tmpf);
    for (char buf[8]; std::fgets(buf, sizeof buf, tmpf) != nullptr;)
        dump(buf, 10);
}

   Output:
Alan Tu.  41 6C 61 6E 20 54 75 00
ring..u.  72 69 6E 67 0A 00 75 00
John vo.  4A 6F 68 6E 20 76 6F 00
n Neuma.  6E 20 4E 65 75 6D 61 00
nn..uma.  6E 6E 0A 00 75 6D 61 00
Alonzo .  41 6C 6F 6E 7A 6F 20 00
Church..  43 68 75 72 63 68 0A 00

See also

   scanffscanfsscanf
   reads formatted input from stdin, a file stream or a buffer
   (function)
   gets
   (deprecated in C++11)(removed in C++14)
   reads a character string from stdin
   (function)
   fputs
   writes a character string to a file stream
   (function)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/io/c/fgets&oldid
   =158721"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 10 September 2023, at 15:01.
     * This page has been accessed 129,115 times.
