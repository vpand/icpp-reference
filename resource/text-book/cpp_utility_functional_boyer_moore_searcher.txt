std::boyer_moore_searcher

   From cppreference.com
   < cpp | utility | functional

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Utilities library
   Language support
   Type support (basic types, RTTI)
   Library feature-test macros (C++20)
   Dynamic memory management
   Program utilities
   Coroutine support (C++20)
   Variadic functions
   is_constant_evaluated
   (C++20)
   is_within_lifetime
   (C++26)
   initializer_list
   (C++11)
   source_location
   (C++20)
   Debugging support
   is_debugger_present
   (C++26)
   breakpoint_if_debugging
   (C++26)
   breakpoint
   (C++26)
   Three-way comparison
   three_way_comparablethree_way_comparable_with
   (C++20)(C++20)
   strong_ordering
   (C++20)
   weak_ordering
   (C++20)
   partial_ordering
   (C++20)
   common_comparison_category
   (C++20)
   compare_three_way_result
   (C++20)
   compare_three_way
   (C++20)
   strong_order
   (C++20)
   weak_order
   (C++20)
   partial_order
   (C++20)
   compare_strong_order_fallback
   (C++20)
   compare_weak_order_fallback
   (C++20)
   compare_partial_order_fallback
   (C++20)
   is_eqis_ltis_lteq
   (C++20)(C++20)(C++20)
   is_neqis_gtis_gteq
   (C++20)(C++20)(C++20)
   General utilities
   Date and time
   Function objects
   Formatting library (C++20)
   bitset
   hash
   (C++11)
   Relational operators (deprecated in C++20)
   rel_ops::operator!=rel_ops::operator>

   rel_ops::operator<=rel_ops::operator>=
   Integer comparison functions
   cmp_equalcmp_lesscmp_less_than
   (C++20)(C++20)(C++20)
   cmp_not_equalcmp_greatercmp_greater_than
   (C++20)(C++20)(C++20)
   in_range
   (C++20)
   Swap and type operations
   swap
   ranges::swap
   (C++20)
   exchange
   (C++14)
   declval
   (C++11)
   to_underlying
   (C++23)
   forward
   (C++11)
   forward_like
   (C++23)
   move
   (C++11)
   move_if_noexcept
   (C++11)
   as_const
   (C++17)
   Common vocabulary types
   pair
   tuple
   (C++11)
   optional
   (C++17)
   any
   (C++17)
   variant
   (C++17)
   tuple_size
   (C++11)
   tuple_element
   (C++11)
   apply
   (C++17)
   make_from_tuple
   (C++17)
   expected
   (C++23)
   Elementary string conversions
   to_chars
   (C++17)
   from_chars
   (C++17)
   chars_format
   (C++17)
   to_chars_result
   (C++17)
   from_chars_result
   (C++17)

   Function objects
   Function wrappers
   function
   (C++11)
   move_only_function
   (C++23)
   copyable_function
   (C++26)
   function_ref
   (C++26)
   mem_fn
   (C++11)
   bad_function_call
   (C++11)
   Partial function application
   bind_frontbind_back
   (C++20)(C++23)
   bind
   (C++11)
   is_bind_expression
   (C++11)
   is_placeholder
   (C++11)
   _1, _2, _3, ...
   (C++11)
   Function invocation
   invokeinvoke_r
   (C++17)(C++23)
   Identity function object
   identity
   (C++20)
   Reference wrappers
   reference_wrapper
   (C++11)
   refcref
   (C++11)(C++11)
   unwrap_referenceunwrap_ref_decay
   (C++20)(C++20)
   Operator wrappers
   plus
   minus
   negate
   multiplies
   divides
   modulus
   bit_and
   bit_or
   bit_not
   (C++14)
   bit_xor
   equal_to
   not_equal_to
   greater
   less
   greater_equal
   less_equal
   logical_and
   logical_or
   logical_not
   Transparent operator wrappers
   plus<>
   (C++14)
   minus<>
   (C++14)
   negate<>
   (C++14)
   multiplies<>
   (C++14)
   divides<>
   (C++14)
   modulus<>
   (C++14)
   bit_and<>
   (C++14)
   bit_or<>
   (C++14)
   bit_not<>
   (C++14)
   bit_xor<>
   (C++14)
   equal_to<>
   (C++14)
   not_equal_to<>
   (C++14)
   greater<>
   (C++14)
   less<>
   (C++14)
   greater_equal<>
   (C++14)
   less_equal<>
   (C++14)
   logical_and<>
   (C++14)
   logical_or<>
   (C++14)
   logical_not<>
   (C++14)
   Negators
   not_fn
   (C++17)
   Searchers
   default_searcher
   (C++17)
   boyer_moore_searcher
   (C++17)
   boyer_moore_horspool_searcher
   (C++17)
   Constrained comparators
   ranges::equal_to
   (C++20)
   ranges::not_equal_to
   (C++20)
   ranges::greater
   (C++20)
   ranges::less
   (C++20)
   ranges::greater_equal
   (C++20)
   ranges::less_equal
   (C++20)
   compare_three_way
   (C++20)
   Old binders and adaptors
   unary_function
   (until C++17*)
   binary_function
   (until C++17*)
   ptr_fun
   (until C++17*)
   pointer_to_unary_function
   (until C++17*)
   pointer_to_binary_function
   (until C++17*)
   mem_fun
   (until C++17*)
   mem_fun_tmem_fun1_tconst_mem_fun_tconst_mem_fun1_t
   (until C++17*)(until C++17*)(until C++17*)(until C++17*)
   not1
   (until C++20*)
   not2
   (until C++20*)
   binder1stbinder2nd
   (until C++17*)(until C++17*)
   bind1stbind2nd
   (until C++17*)(until C++17*)
   mem_fun_ref
   (until C++17*)
   mem_fun_ref_tmem_fun1_ref_tconst_mem_fun_ref_tconst_mem_fun1_ref_t
   (until C++17*)(until C++17*)(until C++17*)(until C++17*)
   unary_negate
   (until C++20*)
   binary_negate
   (until C++20*)

   Defined in header <functional>
   template< class RandomIt1,

             class Hash = std::hash<typename
   std::iterator_traits<RandomIt1>::value_type>,
             class BinaryPredicate = std::equal_to<> >
   class boyer_moore_searcher;
                                 (since C++17)

   A searcher suitable for use with the Searcher overload of std::search
   that implements the Boyer-Moore string searching algorithm.

   std::boyer_moore_searcher is CopyConstructible and CopyAssignable.

   RandomIt1 must meet the requirements of LegacyRandomAccessIterator.

Member functions

std::boyer_moore_searcher::boyer_moore_searcher

   boyer_moore_searcher( RandomIt1 pat_first,

                         RandomIt1 pat_last,
                         Hash hf = Hash(),
                         BinaryPredicate pred = BinaryPredicate() );

   Constructs a std::boyer_moore_searcher by storing copies of pat_first,
   pat_last, hf, and pred, setting up any necessary internal data
   structures.

   The value type of RandomIt1 must be DefaultConstructible,
   CopyConstructible and CopyAssignable.

   For any two values A and B of the type
   std::iterator_traits<RandomIt1>::value_type, if pred(A, B) == true,
   then hf(A) == hf(B) shall be true.

Parameters

   pat_first, pat_last - a pair of iterators designating the string to be
   searched for
   hf - a callable object used to hash the elements of the string
   pred - a callable object used to determine equality

Exceptions

   Any exceptions thrown by
     * the copy constructor of RandomIt1;
     * the default constructor, copy constructor, and copy assignment
       operator of the value type of RandomIt1; or
     * the copy constructor and function call operator of BinaryPredicate
       or Hash.

   May also throw std::bad_alloc if additional memory required for
   internal data structures cannot be allocated.

std::boyer_moore_searcher::operator()

   template< class RandomIt2 >
   std::pair<RandomIt2, RandomIt2> operator()( RandomIt2 first, RandomIt2
   last ) const;
                              (since C++17)

   The member function called by the Searcher overload of std::search to
   perform a search with this searcher. RandomIt2 must meet the
   requirements of LegacyRandomAccessIterator.

   RandomIt1 and RandomIt2 must have the same value type.

Parameters

   first, last - a pair of iterators designating the string to be examined

Return value

   If the pattern [pat_first, pat_last) is empty, returns
   std::make_pair(first, first).

   Otherwise, returns a pair of iterators to the first and one past last
   positions in [first, last) where a subsequence that compares equal to
   [pat_first, pat_last) as defined by pred is located, or
   std::make_pair(last, last) otherwise.

Notes

         Feature-test macro        Value    Std    Feature
   __cpp_lib_boyer_moore_searcher 201603L (C++17) searchers

Example

   Run this code
#include <algorithm>
#include <functional>
#include <iomanip>
#include <iostream>
#include <string_view>

int main()
{
    constexpr std::string_view haystack =
        "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed "
        "do eiusmod tempor incididunt ut labore et dolore magna aliqua";

    const std::string_view needle{"pisci"};

    if (const auto it = std::search(haystack.begin(), haystack.end(),
            std::boyer_moore_searcher(needle.begin(), needle.end()));
        it != haystack.end()
    )
        std::cout << "The string " << std::quoted(needle) << " found at offset "
                  << it - haystack.begin() << '\n';
    else
        std::cout << "The string " << std::quoted(needle) << " not found\n";
}

   Output:
The string "pisci" found at offset 43

See also

   search
   searches for a range of elements
   (function template)
   default_searcher
   (C++17)
   standard C++ library search algorithm implementation
   (class template)
   boyer_moore_horspool_searcher
   (C++17)
   Boyer-Moore-Horspool search algorithm implementation
   (class template)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/utility/function
   al/boyer_moore_searcher&oldid=152160"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 24 May 2023, at 12:56.
     * This page has been accessed 70,096 times.
