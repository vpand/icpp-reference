acosh, acoshf, acoshl

   From cppreference.com
   < c | numeric | math

   C
   Language
   Headers
   Type support
   Program utilities
   Variadic function support
   Error handling
   Dynamic memory management
   Strings library
   Algorithms
   Numerics
   Date and time utilities
   Input/output support
   Localization support
   Concurrency support (C11)
   Technical Specifications
   Symbol index

   Numerics
   Common mathematical functions
   Floating-point environment (C99)
   Pseudo-random number generation
   Complex number arithmetic (C99)
   Type-generic math (C99)

   Common mathematical functions
   Types
   div_tldiv_tlldiv_timaxdiv_t
   (C99)(C99)
   float_tdouble_t
   (C99)(C99)
   _Decimal32_t_Decimal64_t
   (C23)(C23)
   Functions
   Basic operations
   abslabsllabsimaxabs
   (C99)(C99)
   fabs
   divldivlldivimaxdiv
   (C99)(C99)
   fmod
   remainder
   (C99)
   remquo
   (C99)
   fma
   (C99)
   fdim
   (C99)
   nannanfnanlnandN
   (C99)(C99)(C99)(C23)
   Maximum/minimum operations
   fmax
   (C99)
   fmaximum
   (C23)
   fmaximum_mag
   (C23)
   fmaximum_num
   (C23)
   fmaximum_mag_num
   (C23)
   fmin
   (C99)
   fminimum
   (C23)
   fminimum_mag
   (C23)
   fminimum_num
   (C23)
   fminimum_mag_num
   (C23)
   Exponential functions
   exp
   exp10
   (C23)
   exp2
   (C99)
   expm1
   (C99)
   exp10m1
   (C23)
   exp2m1
   (C23)
   log
   log10
   log2
   (C99)
   log1plogp1
   (C99)(C23)
   log10p1
   (C23)
   log2p1
   (C23)
   Power functions
   sqrt
   cbrt
   (C99)
   rootn
   (C23)
   rsqrt
   (C23)
   hypot
   (C99)
   compound
   (C23)
   pow
   pown
   (C23)
   powr
   (C23)
   Trigonometric and hyperbolic functions
   sin
   cos
   tan
   asin
   acos
   atan
   atan2
   sinpi
   (C23)
   cospi
   (C23)
   tanpi
   (C23)
   asinpi
   (C23)
   acospi
   (C23)
   atanpi
   (C23)
   atan2pi
   (C23)
   sinh
   cosh
   tanh
   asinh
   (C99)
   acosh
   (C99)
   atanh
   (C99)
   Error and gamma functions
   erf
   (C99)
   erfc
   (C99)
   lgamma
   (C99)
   tgamma
   (C99)
   Nearest integer floating-point operations
   ceil
   floor
   roundlroundllround
   (C99)(C99)(C99)
   roundeven
   (C23)
   trunc
   (C99)
   nearbyint
   (C99)
   rintlrintllrint
   (C99)(C99)(C99)
   fromfpfromfpxufromfpufromfpx
   (C23)(C23)(C23)(C23)
   Floating-point manipulation functions
   ldexp
   frexp
   scalbnscalbln
   (C99)(C99)
   ilogbllogb
   (C99)(C23)
   logb
   (C99)
   modf
   nextafternexttoward
   (C99)(C99)
   nextupnextdown
   (C23)(C23)
   copysign
   (C99)
   canonicalize
   (C23)
   Narrowing operations
   fadd
   (C23)
   fsub
   (C23)
   fmul
   (C23)
   fdiv
   (C23)
   ffma
   (C23)
   fsqrt
   (C23)
   Quantum and quantum exponent functions
   quantizedN
   (C23)
   samequantumdN
   (C23)
   quantumdN
   (C23)
   llquantexpdN
   (C23)
   Decimal re-encoding functions
   encodedecdN
   (C23)
   decodedecdN
   (C23)
   encodebindN
   (C23)
   decodebindN
   (C23)
   Total order and payload functions
   totalorder
   (C23)
   getpayload
   (C23)
   setpayload
   (C23)
   setpayloadsig
   (C23)
   Classification
   fpclassify
   (C99)
   iscanonical
   (C23)
   isfinite
   (C99)
   isinf
   (C99)
   isnan
   (C99)
   isnormal
   (C99)
   signbit
   (C99)
   issubnormal
   (C23)
   iszero
   (C23)
   isgreater
   (C99)
   isgreaterequal
   (C99)
   isless
   (C99)
   islessequal
   (C99)
   islessgreater
   (C99)
   isunordered
   (C99)
   issignaling
   (C23)
   iseqsig
   (C23)
   Macro constants
   Special floating-point values
   HUGE_VALFHUGE_VALHUGE_VALLHUGE_VALDN
   (C99)(C99)(C23)
   INFINITYDEC_INFINITY
   (C99)(C23)
   NANDEC_NAN
   (C99)(C23)
   Arguments and return values
   FP_ILOGB0FP_ILOGBNAN
   (C99)(C99)
   FP_INT_UPWARDFP_INT_DOWNWARDFP_INT_TOWARDZEROFP_INT_TONEARESTFROMZEROFP
   _INT_TONEAREST
   (C23)(C23)(C23)(C23)(C23)
   FP_LLOGB0FP_LLOGBNAN
   (C23)(C23)
   FP_NORMALFP_SUBNORMALFP_ZEROFP_INFINITEFP_NAN
   (C99)(C99)(C99)(C99)(C99)
   Error handling
   MATH_ERRNOMATH_ERRNOEXCEPT
   (C99)(C99)
   math_errhandling
   (C99)
   Fast operation indicators
   FP_FAST_FMAFFP_FAST_FMA
   (C99)(C99)
   FP_FAST_FADDFP_FAST_FADDLFP_FAST_DADDLFP_FAST_DMADDDN
   (C23)(C23)(C23)(C23)
   FP_FAST_FMULFP_FAST_FMULLFP_FAST_DMULLFP_FAST_DMMULDN
   (C23)(C23)(C23)(C23)
   FP_FAST_FFMAFP_FAST_FFMALFP_FAST_DFMALFP_FAST_DMFMADN
   (C23)(C23)(C23)(C23)
   FP_FAST_FMALFP_FAST_FMADN
   (C99)(C23)
   FP_FAST_FSUBFP_FAST_FSUBLFP_FAST_DSUBLFP_FAST_DMSUBDN
   (C23)(C23)(C23)(C23)
   FP_FAST_FDIVFP_FAST_FDIVLFP_FAST_DDIVLFP_FAST_DMDIVDN
   (C23)(C23)(C23)(C23)
   FP_FAST_FSQRTFP_FAST_FSQRTLFP_FAST_DSQRTLFP_FAST_DMSQRTDN
   (C23)(C23)(C23)(C23)

   Defined in header <math.h>
   float       acoshf( float arg );
   (1)                                   (since C99)
   double      acosh( double arg );
   (2)                                   (since C99)
   long double acoshl( long double arg );
   (3)                                   (since C99)
   Defined in header <tgmath.h>
   #define acosh( arg )
   (4)                                   (since C99)
   1-3) Computes the inverse hyperbolic cosine of arg.
   4) Type-generic macro: If the argument has type long double, acoshl is
   called. Otherwise, if the argument has integer type or the type double,
   acosh is called. Otherwise, acoshf is called. If the argument is
   complex, then the macro invokes the corresponding complex function
   (cacoshf, cacosh, cacoshl).

Parameters

   arg - floating-point value representing the area of a hyperbolic sector

Return value

   If no errors occur, the inverse hyperbolic cosine of arg (cosh-1
   (arg), or arcosh(arg)) on the interval [0, +infty], is returned.

   If a domain error occurs, an implementation-defined value is returned
   (NaN where supported).

Error handling

   Errors are reported as specified in math_errhandling.

   If the argument is less than 1, a domain error occurs.

   If the implementation supports IEEE floating-point arithmetic (IEC
   60559),
     * If the argument is less than 1, FE_INVALID is raised an NaN is
       returned.
     * If the argument is 1, +0 is returned.
     * If the argument is +infty, +infty is returned.
     * If the argument is NaN, NaN is returned.

Notes

   Although the C standard names this function "arc hyperbolic cosine",
   the inverse functions of the hyperbolic functions are the area
   functions. Their argument is the area of a hyperbolic sector, not an
   arc. The correct name is "inverse hyperbolic cosine" (used by POSIX) or
   "area hyperbolic cosine".

Example

   Run this code
#include <errno.h>
#include <fenv.h>
#include <float.h>
#include <math.h>
#include <stdio.h>
// #pragma STDC FENV_ACCESS ON

int main(void)
{
    printf("acosh(1) = %f\nacosh(10) = %f\n", acosh(1), acosh(10));
    printf("acosh(DBL_MAX) = %f\nacosh(Inf) = %f\n", acosh(DBL_MAX), acosh(INFIN
ITY));

    // error handling
    errno = 0; feclearexcept(FE_ALL_EXCEPT);
    printf("acosh(0.5) = %f\n", acosh(0.5));
    if (errno == EDOM)
        perror("    errno == EDOM");
    if (fetestexcept(FE_INVALID))
        puts("    FE_INVALID raised");
}

   Possible output:
acosh(1) = 0.000000
acosh(10) = 2.993223
acosh(DBL_MAX) = 710.475860
acosh(Inf) = inf
acosh(0.5) = -nan
    errno == EDOM: Numerical argument out of domain
    FE_INVALID raised

References

     * C23 standard (ISO/IEC 9899:2023):

          + 7.12.5.1 The acosh functions (p: TBD)

          + 7.27 Type-generic math <tgmath.h> (p: TBD)

          + F.10.2.1 The acosh functions (p: TBD)

     * C17 standard (ISO/IEC 9899:2018):

          + 7.12.5.1 The acosh functions (p: 175)

          + 7.25 Type-generic math <tgmath.h> (p: 272-273)

          + F.10.2.1 The acosh functions (p: 379)

     * C11 standard (ISO/IEC 9899:2011):

          + 7.12.5.1 The acosh functions (p: 240)

          + 7.25 Type-generic math <tgmath.h> (p: 373-375)

          + F.10.2.1 The acosh functions (p: 520)

     * C99 standard (ISO/IEC 9899:1999):

          + 7.12.5.1 The acosh functions (p: 221)

          + 7.22 Type-generic math <tgmath.h> (p: 335-337)

          + F.9.2.1 The acosh functions (p: 457)

See also

   asinhasinhfasinhl
   (C99)(C99)(C99)
   computes inverse hyperbolic sine (\({\small\operatorname{arsinh}{x}
   }\)arsinh(x))
   (function)
   atanhatanhfatanhl
   (C99)(C99)(C99)
   computes inverse hyperbolic tangent (\({\small\operatorname{artanh}{x}
   }\)artanh(x))
   (function)
   coshcoshfcoshl
   (C99)(C99)
   computes hyperbolic cosine (\({\small\cosh{x} }\)cosh(x))
   (function)
   cacoshcacoshfcacoshl
   (C99)(C99)(C99)
   computes the complex arc hyperbolic cosine
   (function)

External links

     Weisstein, Eric W. "Inverse Hyperbolic Cosine." From MathWorld -- A
   Wolfram Web Resource.
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=c/numeric/math/acosh
   &oldid=172071"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 24 May 2024, at 00:02.
     * This page has been accessed 19,808 times.
