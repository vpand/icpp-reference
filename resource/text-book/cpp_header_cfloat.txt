Standard library header <cfloat>

   From cppreference.com
   < cpp | header

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Standard library headers
   Language support
   <cstddef>
   <cstdlib>
   <version> (C++20)
   <limits>
   <climits>
   <cfloat>
   <cstdint> (C++11)
   <stdfloat> (C++23)
   <new>
   <typeinfo>
   <source_location> (C++20)
   <exception>
   <initializer_list> (C++11)
   <compare> (C++20)
   <coroutine> (C++20)
   <csignal>
   <csetjmp>
   <cstdarg>
   Concepts
   <concepts> (C++20)
   Diagnostics
   <stdexcept>
   <stacktrace> (C++23)
   <cassert>
   <cerrno>
   <system_error> (C++11)
   Memory management
   <memory>
   <memory_resource> (C++17)
   <scoped_allocator> (C++11)
   Metaprogramming
   <type_traits> (C++11)
   <ratio> (C++11)
   General utilities
   <utility>
   <tuple> (C++11)
   <optional> (C++17)
   <variant> (C++17)
   <any> (C++17)
   <debugging> (C++26)
   <expected> (C++23)
   <bitset>
   <functional>
   <typeindex> (C++11)
   <execution> (C++17)
   <charconv> (C++17)
   <format> (C++20)
   <bit> (C++20)
   Strings
   <string_view> (C++17)
   <string>
   <cctype>
   <cwctype>
   <cstring>
   <cwchar>
   <cuchar> (C++11)
   Containers
   <array> (C++11)
   <deque>
   <forward_list> (C++11)
   <list>
   <vector>
   <map>
   <set>
   <unordered_map> (C++11)
   <unordered_set> (C++11)
   <queue>
   <stack>
   <flat_map> (C++23)
   <flat_set> (C++23)
   <span> (C++20)
   <mdspan> (C++23)
   Iterators
   <iterator>
   Ranges
   <ranges> (C++20)
   <generator> (C++23)
   Algorithms
   <algorithm>
   <numeric>
   Numerics
   <cfenv> (C++11)
   <complex>
   <random> (C++11)
   <valarray>
   <cmath>
   <linalg> (C++26)
   <numbers> (C++20)
   Time
   <chrono> (C++11)
   <ctime>
   Localization
   <locale>
   <clocale>
   <codecvt> (C++11/17/26*)
   <text_encoding> (C++26)
   Input/output
   <iosfwd>
   <iostream>
   <ios>
   <streambuf>
   <istream>
   <ostream>
   <iomanip>
   <print> (C++23)
   <sstream>
   <spanstream> (C++23)
   <fstream>
   <syncstream> (C++20)
   <filesystem> (C++17)
   <cstdio>
   <cinttypes> (C++11)
   <strstream> (C++98/26*)
   Regular expressions
   <regex> (C++11)
   Concurrency support
   <stop_token> (C++20)
   <thread> (C++11)
   <atomic> (C++11)
   <rcu> (C++26)
   <stdatomic.h> (C++23)
   <mutex> (C++11)
   <shared_mutex> (C++14)
   <condition_variable> (C++11)
   <semaphore> (C++20)
   <latch> (C++20)
   <barrier> (C++20)
   <future> (C++11)
   <hazard_pointer> (C++26)
   C compatibility
   <cstdbool> (C++11/17/20*)
   <ccomplex> (C++11/17/20*)
   <ctgmath> (C++11/17/20*)
   <cstdalign> (C++11/17/20*)
   <ciso646> (until C++20)

   This header was originally in the C standard library as <float.h>.

   This header is part of the type support library, in particular it's
   part of the C numeric limits interface.

Macros

   FLT_RADIX
   the radix (integer base) used by the representation of all three
   floating-point types
   (macro constant)
   DECIMAL_DIG
   (C++11)
   conversion from long double to decimal with at least DECIMAL_DIG digits
   and back to long double is the identity conversion: this is the decimal
   precision required to serialize/deserialize a long double (see also
   std::numeric_limits::max_digits10)
   (macro constant)
   FLT_DECIMAL_DIGDBL_DECIMAL_DIGLDBL_DECIMAL_DIG
   (C++17)
   conversion from float/double/long double to decimal with at least
   FLT_DECIMAL_DIG/DBL_DECIMAL_DIG/LDBL_DECIMAL_DIG digits and back is the
   identity conversion: this is the decimal precision required to
   serialize/deserialize a floating-point value (see also
   std::numeric_limits::max_digits10). Defined to at least 6, 10, and 10
   respectively, or 9 for IEEE float and 17 for IEEE double.
   (macro constant)
   FLT_MINDBL_MINLDBL_MIN
   minimum normalized positive value of float, double and long double
   respectively
   (macro constant)
   FLT_TRUE_MINDBL_TRUE_MINLDBL_TRUE_MIN
   (C++17)
   minimum positive value of float, double and long double respectively
   (macro constant)
   FLT_MAXDBL_MAXLDBL_MAX
   maximum finite value of float, double and long double respectively
   (macro constant)
   FLT_EPSILONDBL_EPSILONLDBL_EPSILON
   difference between 1.0 and the next representable value for float,
   double and long double respectively
   (macro constant)
   FLT_DIGDBL_DIGLDBL_DIG
   number of decimal digits that are guaranteed to be preserved in text ->
   float/double/long double -> text roundtrip without change due to
   rounding or overflow (see std::numeric_limits::digits10 for
   explanation)
   (macro constant)
   FLT_MANT_DIGDBL_MANT_DIGLDBL_MANT_DIG
   number of base FLT_RADIX digits that can be represented without losing
   precision for float, double and long double respectively
   (macro constant)
   FLT_MIN_EXPDBL_MIN_EXPLDBL_MIN_EXP
   minimum negative integer such that FLT_RADIX raised by power one less
   than that integer is a normalized float, double and long double
   respectively
   (macro constant)
   FLT_MIN_10_EXPDBL_MIN_10_EXPLDBL_MIN_10_EXP
   minimum negative integer such that 10 raised to that power is a
   normalized float, double and long double respectively
   (macro constant)
   FLT_MAX_EXPDBL_MAX_EXPLDBL_MAX_EXP
   maximum positive integer such that FLT_RADIX raised by power one less
   than that integer is a representable finite float, double and long
   double respectively
   (macro constant)
   FLT_MAX_10_EXPDBL_MAX_10_EXPLDBL_MAX_10_EXP
   maximum positive integer such that 10 raised to that power is a
   representable finite float, double and long double respectively
   (macro constant)
   FLT_ROUNDS
   default rounding mode of floating-point arithmetic
   (macro constant)
   FLT_EVAL_METHOD
   (C++11)
   specifies in what precision all arithmetic operations are done
   (macro constant)
   FLT_HAS_SUBNORMDBL_HAS_SUBNORMLDBL_HAS_SUBNORM
   (C++17)
   specifies whether the type supports subnormal (denormal) numbers:
   -1 - indeterminable, 0 - absent, 1 - present
   (macro constant)

Synopsis

#define FLT_ROUNDS           /* see definition */
#define FLT_EVAL_METHOD      /* see definition */
#define FLT_HAS_SUBNORM      /* see definition */
#define DBL_HAS_SUBNORM      /* see definition */
#define LDBL_HAS_SUBNORM     /* see definition */
#define FLT_RADIX            /* see definition */
#define FLT_MANT_DIG         /* see definition */
#define DBL_MANT_DIG         /* see definition */
#define LDBL_MANT_DIG        /* see definition */
#define FLT_DECIMAL_DIG      /* see definition */
#define DBL_DECIMAL_DIG      /* see definition */
#define LDBL_DECIMAL_DIG     /* see definition */
#define DECIMAL_DIG          /* see definition */
#define FLT_DIG              /* see definition */
#define DBL_DIG              /* see definition */
#define LDBL_DIG             /* see definition */
#define FLT_MIN_EXP          /* see definition */
#define DBL_MIN_EXP          /* see definition */
#define LDBL_MIN_EXP         /* see definition */
#define FLT_MIN_10_EXP       /* see definition */
#define DBL_MIN_10_EXP       /* see definition */
#define LDBL_MIN_10_EXP      /* see definition */
#define FLT_MAX_EXP          /* see definition */
#define DBL_MAX_EXP          /* see definition */
#define LDBL_MAX_EXP         /* see definition */
#define FLT_MAX_10_EXP       /* see definition */
#define DBL_MAX_10_EXP       /* see definition */
#define LDBL_MAX_10_EXP      /* see definition */
#define FLT_MAX              /* see definition */
#define DBL_MAX              /* see definition */
#define LDBL_MAX             /* see definition */
#define FLT_EPSILON          /* see definition */
#define DBL_EPSILON          /* see definition */
#define LDBL_EPSILON         /* see definition */
#define FLT_MIN              /* see definition */
#define DBL_MIN              /* see definition */
#define LDBL_MIN             /* see definition */
#define FLT_TRUE_MIN         /* see definition */
#define DBL_TRUE_MIN         /* see definition */
#define LDBL_TRUE_MIN        /* see definition */

See also

   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/header/cfloat&ol
   did=156552"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 11 August 2023, at 14:34.
     * This page has been accessed 67,661 times.
