std::common_iterator<I,S>::common_iterator

   From cppreference.com
   < cpp | iterator | common iterator

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Iterator library
   Iterator concepts
   indirectly_readable
   (C++20)
   indirectly_writable
   (C++20)
   weakly_incrementable
   (C++20)
   incrementable
   (C++20)
   input_or_output_iterator
   (C++20)
   sentinel_for
   (C++20)
   sized_sentinel_for
   (C++20)
   input_iterator
   (C++20)
   output_iterator
   (C++20)
   forward_iterator
   (C++20)
   bidirectional_iterator
   (C++20)
   random_access_iterator
   (C++20)
   contiguous_iterator
   (C++20)
   Iterator primitives
   input_iterator_tagoutput_iterator_tagforward_iterator_tagbidirectional_
   iterator_tagrandom_access_iterator_tagcontiguous_iterator_tag
   (C++20)
   iter_value_titer_difference_titer_reference_titer_const_reference_titer
   _rvalue_reference_titer_common_reference_t
   (C++20)(C++20)(C++20)(C++23)(C++20)(C++20)
   iterator
   (deprecated in C++17)
   iterator_traits
   incrementable_traits
   (C++20)
   indirectly_readable_traits
   (C++20)
   Algorithm concepts and utilities
   Indirect callable concepts
   indirectly_unary_invocableindirectly_regular_unary_invocable
   (C++20)(C++20)
   indirect_unary_predicate
   (C++20)
   indirect_binary_predicate
   (C++20)
   indirect_equivalence_relation
   (C++20)
   indirect_strict_weak_order
   (C++20)
   Common algorithm requirements
   indirectly_movable
   (C++20)
   indirectly_movable_storable
   (C++20)
   indirectly_copyable
   (C++20)
   indirectly_copyable_storable
   (C++20)
   indirectly_swappable
   (C++20)
   indirectly_comparable
   (C++20)
   permutable
   (C++20)
   mergeable
   (C++20)
   sortable
   (C++20)
   Utilities
   indirect_result_t
   (C++20)
   projected
   (C++20)
   projected_value_t
   (C++26)
   Iterator adaptors
   reverse_iterator
   make_reverse_iterator
   (C++14)
   move_iterator
   (C++11)
   make_move_iterator
   (C++11)
   default_sentinel_tdefault_sentinel
   (C++20)(C++20)
   unreachable_sentinel_tunreachable_sentinel
   (C++20)(C++20)
   front_insert_iterator
   back_insert_iterator
   inserter
   insert_iterator
   front_inserter
   back_inserter
   move_sentinel
   (C++20)
   common_iterator
   (C++20)
   counted_iterator
   (C++20)
   basic_const_iterator
   (C++23)
   const_iterator
   (C++23)
   const_sentinel
   (C++23)
   make_const_iterator
   (C++23)
   make_const_sentinel
   (C++23)
   Stream iterators
   istream_iterator

   ostream_iterator
   istreambuf_iterator
   ostreambuf_iterator
   Iterator customization points
   ranges::iter_move
   (C++20)
   ranges::iter_swap
   (C++20)
   Iterator operations
   advance
   distance
   prev
   (C++11)
   next
   (C++11)
   ranges::advance
   (C++20)
   ranges::distance
   (C++20)
   ranges::prev
   (C++20)
   ranges::next
   (C++20)
   Range access
   begincbegin
   (C++11)(C++14)
   rbegincrbegin
   (C++14)(C++14)
   endcend
   (C++11)(C++14)
   rendcrend
   (C++14)(C++14)
   sizessize
   (C++17)(C++20)
   empty
   (C++17)
   data
   (C++17)

   std::common_iterator
   Member functions
   common_iterator::common_iterator
   (C++20)
   common_iterator::operator=
   (C++20)
   common_iterator::operator*common_iterator::operator->
   (C++20)(C++20)
   common_iterator::operator++common_iterator::operator++(int)
   (C++20)(C++20)
   Non-member functions
   operator==
   (C++20)
   operator-
   (C++20)
   iter_move
   (C++20)
   iter_swap
   (C++20)
   Helper classes
   incrementable_traits
   (C++20)
   iterator_traits
   (C++20)

   constexpr common_iterator() requires std::default_initializable<I> =
   default;
   (1) (since C++20)
   constexpr common_iterator( I i );
   (2) (since C++20)
   constexpr common_iterator( S s );
   (3) (since C++20)
   template< class I2, class S2 >

   requires std::convertible_to<const I2&, I> &&
            std::convertible_to<const S2&, S>
   constexpr common_iterator( const common_iterator<I2, S2>& x );
   (4) (since C++20)

   Constructs a new iterator adaptor, effectively initializes the
   underlying std::variant<I, S> member object var to hold an I (iterator)
   or S (sentinel) object.
   1) Default constructor. Default-initializes var. After construction,
   var holds a value-initialized I object. Operations on the resulting
   iterator adaptor have defined behavior if and only if the corresponding
   operations on a value-initialized I also have defined behavior.
   2) After construction, var holds an I object move-constructed from i.
   3) After construction, var holds an S object move-constructed from s.
   4) After construction, var holds an I or S object initialized from the
   I2 or S2 held by x.var, if x.var holds that alternative, respectively.
   The behavior is undefined if x is in an invalid state, that is,
   x.var.valueless_by_exception() is equal to true.

Parameters

   i - iterator to adapt
   s - sentinel to adapt
   x - iterator adaptor to copy

Example

   Run this code
#include <algorithm>
#include <iostream>
#include <iterator>
#include <numeric>
#include <vector>

int main()
{
    std::vector v{3, 1, 4, 1, 5, 9, 2};

    using CI = std::common_iterator<
                   std::counted_iterator<std::vector<int>::iterator>,
                   std::default_sentinel_t>;
    CI unused; // (1)
    CI start{std::counted_iterator{std::next(begin(v)), ssize(v) - 2}}; // (2)
    CI finish{std::default_sentinel}; // (3)
    CI first{start}; // (4)
    CI last{finish}; // (4)

    std::copy(first, last, std::ostream_iterator<int>{std::cout, " "});
    std::cout << '\n';

    std::common_iterator<
        std::counted_iterator<
            std::ostream_iterator<double>>,
            std::default_sentinel_t>
            beg{std::counted_iterator{std::ostream_iterator<double>{std::cout,";
  "}, 5}},
            end{std::default_sentinel};
    std::iota(beg, end, 3.1);
    std::cout << '\n';
}

   Output:
1 4 1 5 9
3.1;  4.1;  5.1;  6.1;  7.1;

See also

   operator=
   (C++20)
   assigns another iterator adaptor
   (public member function)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/common_
   iterator/common_iterator&oldid=159275"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 17 September 2023, at 11:14.
     * This page has been accessed 4,462 times.
