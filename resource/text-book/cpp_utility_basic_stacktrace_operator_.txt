std::basic_stacktrace<Allocator>::operator=

   From cppreference.com
   < cpp | utility | basic stacktrace

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Diagnostics library
   Exception handling
   exception
   uncaught_exceptionuncaught_exceptions
   (until C++20*)(C++17)
   exception_ptr
   (C++11)
   make_exception_ptr
   (C++11)
   current_exception
   (C++11)
   rethrow_exception
   (C++11)
   nested_exception
   (C++11)
   throw_with_nested
   (C++11)
   rethrow_if_nested
   (C++11)
   Exception handling failures
   terminate
   terminate_handler
   get_terminate
   (C++11)
   set_terminate
   bad_exception
   unexpected
   (until C++17*)
   unexpected_handler
   (until C++17*)
   get_unexpected
   (C++11)(until C++17*)
   set_unexpected
   (until C++17*)
   Error codes
   Error codes
   errno
   Exception categories
   logic_error
   invalid_argument
   domain_error
   length_error
   out_of_range
   runtime_error
   range_error
   overflow_error
   underflow_error
   tx_exception
   (TM TS)
   System error support
   error_category
   (C++11)
   generic_category
   (C++11)
   system_category
   (C++11)
   error_condition
   (C++11)
   errc
   (C++11)
   error_code
   (C++11)
   system_error
   (C++11)
   Assertions
   assert
   Stacktrace
   stacktrace_entry
   (C++23)
   basic_stacktrace
   (C++23)

   std::basic_stacktrace
   Member functions
   basic_stacktrace::basic_stacktrace
   basic_stacktrace::~basic_stacktrace
   basic_stacktrace::operator=
   basic_stacktrace::current
   basic_stacktrace::get_allocator
   Iterators
   basic_stacktrace::beginbasic_stacktrace::cbegin
   basic_stacktrace::endbasic_stacktrace::cend
   basic_stacktrace::rbeginbasic_stacktrace::crbegin
   basic_stacktrace::rendbasic_stacktrace::crend
   Capacity
   basic_stacktrace::empty
   basic_stacktrace::size
   basic_stacktrace::max_size
   Element access
   basic_stacktrace::operator[]
   basic_stacktrace::at
   Modifiers
   basic_stacktrace::swap
   Non-member functions
   operator==
   operator<=>
   swap(std::basic_stacktrace)
   to_string(std::basic_stacktrace)
   operator<<
   Helper classes
   hash<std::basic_stacktrace>
   formatter<std::basic_stacktrace>

   basic_stacktrace& operator=( const basic_stacktrace& other );
   (1)                                                          (since C++23)
   basic_stacktrace& operator=( basic_stacktrace&& other )
       noexcept(/* see below */);
   (2)                                                          (since C++23)

   Replaces the contents of the basic_stacktrace.
   1) Copy assignment operator. Replaces the contents with a copy of the
   contents of other.
   If
   std::allocator_traits<allocator_type>::propagate_on_container_copy_assi
   gnment::value is true, the allocator of *this is replaced by a copy of
   that of other. If the allocator of *this after assignment would compare
   unequal to its old value, the old allocator is used to deallocate the
   memory, then the new allocator is used to allocate it before copying
   the entries. Otherwise, the memory owned by *this may be reused when
   possible.
   2) Move assignment operator. Replaces the contents with those of other
   using move semantics (i.e. the data in other is moved from other into
   *this). other is in a valid but unspecified state afterwards.
   If
   std::allocator_traits<allocator_type>::propagate_on_container_move_assi
   gnment::value is true, the allocator of *this is replaced by a copy of
   that of other. If it is false and the allocators of *this and other do
   not compare equal, *this cannot take ownership of the memory owned by
   other and must assign each entries individually, allocating additional
   memory using its own allocator as needed.

   In any case, the stacktrace entries originally belong to *this may be
   either destroyed or replaced by element-wise assignment.

   *this may be set to empty on allocation failure if the implementation
   strengthens the exception specification.

Parameters

   other - another basic_stacktrace to use as source

Return value

   *this

Complexity

   1) Linear in the size of *this and other.
   2) Linear in the size of *this unless the allocators do not compare
   equal and do not propagate, in which case linear in the size of *this
   and other.

Exceptions

   1) May throw implementation-defined exceptions.
   2)
   noexcept specification:
   noexcept(std::allocator_traits<Allocator>::propagate_on_container_move_
   assignment::value
   || std::allocator_traits<Allocator>::is_always_equal::value)

Notes

   After container move assignment (overload (2)), unless element-wise
   move assignment is forced by incompatible allocators, references,
   pointers, and iterators (other than the end iterator) to other remain
   valid, but refer to elements that are now in *this. The current
   standard makes this guarantee via the blanket statement in
   [container.reqmts]/67, and a more direct guarantee is under
   consideration via LWG issue 2321.

Example

   This section is incomplete
   Reason: no example

See also

   (constructor)
   creates a new basic_stacktrace
   (public member function)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/utility/basic_st
   acktrace/operator%3D&oldid=159100"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 15 September 2023, at 11:18.
     * This page has been accessed 5,650 times.
