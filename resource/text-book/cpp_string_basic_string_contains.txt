std::basic_string<CharT,Traits,Allocator>::contains

   From cppreference.com
   < cpp | string | basic string

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Strings library
   Null-terminated strings
   Byte strings
   Multibyte strings
   Wide strings
   Classes
   basic_string
   basic_string_view
   (C++17)
   char_traits

   std::basic_string
   Member functions
   basic_string::basic_string
   basic_string::~basic_string
   basic_string::operator=
   basic_string::assign
   basic_string::assign_range
   (C++23)
   basic_string::get_allocator
   Element access
   basic_string::at
   basic_string::operator[]
   basic_string::front
   (DR*)
   basic_string::back
   (DR*)
   basic_string::data
   basic_string::c_str
   basic_string::operator
    basic_string_view
   (C++17)
   Iterators
   basic_string::beginbasic_string::cbegin
   (C++11)
   basic_string::endbasic_string::cend
   (C++11)
   basic_string::rbeginbasic_string::crbegin
   (C++11)
   basic_string::rendbasic_string::crend
   (C++11)
   Capacity
   basic_string::empty
   basic_string::sizebasic_string::length
   basic_string::max_size
   basic_string::reserve
   basic_string::capacity
   basic_string::shrink_to_fit
   (DR*)
   Modifiers
   basic_string::clear
   basic_string::insert
   basic_string::insert_range
   (C++23)
   basic_string::erase
   basic_string::push_back
   basic_string::pop_back
   (DR*)
   basic_string::append
   basic_string::append_range
   (C++23)
   basic_string::operator+=
   basic_string::replace
   basic_string::replace_with_range
   (C++23)
   basic_string::copy
   basic_string::resize
   basic_string::resize_and_overwrite
   (C++23)
   basic_string::swap
   Search
   basic_string::find
   basic_string::rfind
   basic_string::find_first_of
   basic_string::find_first_not_of
   basic_string::find_last_of
   basic_string::find_last_not_of
   Operations
   basic_string::compare
   basic_string::starts_with
   (C++20)
   basic_string::ends_with
   (C++20)
   basic_string::contains
   (C++23)
   basic_string::substr
   Constants
   basic_string::npos
   Non-member functions
   operator+
   swap(std::basic_string)
   erase(std::basic_string)erase_if(std::basic_string)
   (C++20)(C++20)
   I/O
   operator<<operator>>
   getline
   Comparison
   operator==operator!=operator<operator>operator<=operator>=operator<=>
   (until C++20)(until C++20)(until C++20)(until C++20)(until
   C++20)(C++20)
   Numeric conversions
   stoistolstoll
   (C++11)(C++11)(C++11)
   stoulstoull
   (C++11)(C++11)
   stofstodstold
   (C++11)(C++11)(C++11)
   to_string
   (C++11)
   to_wstring
   (C++11)
   Literals
   operator""s
   (C++14)
   Helper classes
   hash<std::basic_string>
   (C++11)
   Deduction guides (C++17)

   constexpr bool
       contains( std::basic_string_view<CharT,Traits> sv ) const noexcept;
   (1)           (since C++23)
   constexpr bool
       contains( CharT ch ) const noexcept;
   (2)           (since C++23)
   constexpr bool
       contains( const CharT* s ) const;
   (3)           (since C++23)

   Checks if the string contains the given substring. The substring may be
   one of the following:
   1) A string view sv (which may be a result of implicit conversion from
   another std::basic_string).
   2) A single character ch.
   3) A null-terminated character string s.

   All three overloads are equivalent to return find(x) != npos;, where x
   is the parameter.

Parameters

   sv - a string view which may be a result of implicit conversion from
   another std::basic_string
   ch - a single character
   s - a null-terminated character string

Return value

   true if the string contains the provided substring, false otherwise.

Notes

      Feature-test macro      Value    Std        Feature
   __cpp_lib_string_contains 202011L (C++23) contains functions

Example

   Run this code
#include <iomanip>
#include <iostream>
#include <string>
#include <string_view>
#include <type_traits>

template<typename SubstrType>
void test_substring(const std::string& str, SubstrType subs)
{
    constexpr char delim = std::is_scalar_v<SubstrType> ? '\'' : '\"';
    std::cout << std::quoted(str)
              << (str.contains(subs) ? " contains "
                                     : " does not contain ")
              << std::quoted(std::string{subs}, delim) << '\n';
}

int main()
{
    using namespace std::literals;

    auto helloWorld = "hello world"s;

    test_substring(helloWorld, "hello"sv);
    test_substring(helloWorld, "goodbye"sv);
    test_substring(helloWorld, 'w');
    test_substring(helloWorld, 'x');
}

   Output:
"hello world" contains "hello"
"hello world" does not contain "goodbye"
"hello world" contains 'w'
"hello world" does not contain 'x'

See also

   starts_with
   (C++20)
   checks if the string starts with the given prefix
   (public member function)
   ends_with
   (C++20)
   checks if the string ends with the given suffix
   (public member function)
   find
   finds the first occurrence of the given substring
   (public member function)
   substr
   returns a substring
   (public member function)
   contains
   (C++23)
   checks if the string view contains the given substring or character
   (public member function of std::basic_string_view<CharT,Traits>)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/string/basic_str
   ing/contains&oldid=152634"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 1 June 2023, at 01:24.
     * This page has been accessed 91,990 times.
