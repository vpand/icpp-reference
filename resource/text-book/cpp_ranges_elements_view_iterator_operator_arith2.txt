operator+,-(ranges::elements_view::iterator)

   From cppreference.com
   < cpp | ranges | elements view | iterator

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Ranges library
   Range access
   begin
   cbegin
   end
   cend
   rbegin
   crbegin
   rend
   crend
   size
   ssize
   data
   cdata
   empty
   Range conversions
   std::from_range_t
   std::from_range
   (C++23)(C++23)
   to
   (C++23)
   Range primitives
   range_size_trange_difference_trange_value_trange_reference_t
   iterator_tconst_iterator_tsentinel_tconst_sentinel_t
   (C++23)(C++23)
   range_const_reference_trange_rvalue_reference_trange_common_reference_t
   (C++23)
   elements_of
   (C++23)
   Dangling iterator handling
   dangling
   borrowed_iterator_t
   borrowed_subrange_t
   Range concepts
   range
   borrowed_range
   sized_range
   constant_range
   (C++23)
   common_range
   view
   viewable_range
   input_range
   output_range
   forward_range
   bidirectional_range
   random_access_range
   contiguous_range
   Views
   view_interface
   subrange
   Range factories
   empty_viewviews::empty
   single_viewviews::single
   iota_viewviews::iota
   repeat_viewviews::repeat
   (C++23)(C++23)
   basic_istream_viewviews::istream
   Range adaptors
   views::all_tviews::all
   ref_view
   owning_view
   as_rvalue_viewviews::as_rvalue
   (C++23)(C++23)
   filter_viewviews::filter
   transform_viewviews::transform
   take_viewviews::take
   take_while_viewviews::take_while
   concat_viewviews::concat
   (C++26)(C++26)
   drop_viewviews::drop
   drop_while_viewviews::drop_while
   join_viewviews::join
   join_with_viewviews::join_with
   (C++23)(C++23)
   lazy_split_viewviews::lazy_split
   split_viewviews::split
   views::counted
   common_viewviews::common
   reverse_viewviews::reverse
   as_const_viewviews::as_const
   (C++23)(C++23)
   elements_viewviews::elements
   keys_viewviews::keys
   values_viewviews::values
   enumerate_viewviews::enumerate
   (C++23)(C++23)
   zip_viewviews::zip
   (C++23)(C++23)
   zip_transform_viewviews::zip_transform
   (C++23)(C++23)
   adjacent_viewviews::adjacent
   (C++23)(C++23)
   views::pairwise
   (C++23)
   adjacent_transform_viewviews::adjacent_transform
   (C++23)(C++23)
   views::pairwise_transform
   (C++23)
   chunk_viewviews::chunk
   (C++23)(C++23)
   slide_viewviews::slide
   (C++23)(C++23)
   chunk_by_viewviews::chunk_by
   (C++23)(C++23)
   stride_viewviews::stride
   (C++23)(C++23)
   cartesian_product_viewviews::cartesian_product
   (C++23)(C++23)
   Range generators
   std::generator
   (C++23)
   Range adaptor objects
   Range adaptor closure objects
   range_adaptor_closure
   (C++23)
   Helper items
   copyable-box
   movable-box
   (until C++23)(C++23)
   simple-view
   non-propagating-cache

   std::ranges::elements_view
   Member functions
   elements_view::elements_view
   elements_view::base
   elements_view::begin
   elements_view::end
   elements_view::size
   Nested classes
   Iterator
   elements_view::iterator::iterator
   elements_view::iterator::base
   elements_view::iterator::operator*
   elements_view::iterator::operator[]
   elements_view::iterator::operator++
   elements_view::iterator::operator++(int)
   elements_view::iterator::operator--
   elements_view::iterator::operator--(int)
   elements_view::iterator::operator+=
   elements_view::iterator::operator-=
   operator==(elements_view::iterator)
   operator<(elements_view::iterator)
   operator>(elements_view::iterator)
   operator<=(elements_view::iterator)
   operator>=(elements_view::iterator)
   operator<=>(elements_view::iterator)
   operator+(elements_view::iterator)
   operator-(elements_view::iterator)
   Sentinel
   elements_view::sentinel::sentinel
   elements_view::sentinel::base
   operator==(elements_view::iterator,elements_view::sentinel)
   operator-(elements_view::iterator,elements_view::sentinel)

   friend constexpr /*iterator*/ operator+( const /*iterator*/& i,
   difference_type n )
       requires ranges::random_access_range<Base>;
 (1)                                                               (since C++20)
   friend constexpr /*iterator*/ operator+( difference_type n, const
   /*iterator*/& i )
       requires ranges::random_access_range<Base>;
 (2)                                                               (since C++20)
   friend constexpr /*iterator*/ operator-( const /*iterator*/& i,
   difference_type n )
       requires ranges::random_access_range<Base>;
 (3)                                                               (since C++20)
   friend constexpr difference_type operator-( const /*iterator*/& x,

                                               const /*iterator*/& y )
       requires std::sized_sentinel_for<ranges::iterator_t<Base>,
   ranges::iterator_t<Base>>;
 (4)                                                               (since C++20)
   1,2) Returns the iterator i incremented by n.
   3) Returns the iterator i decremented by n.
   4) Returns the distance between x and y.

   These functions are not visible to ordinary unqualified or qualified
   lookup, and can only be found by argument-dependent lookup when
   elements_view::iterator<Const> is an associated class of the arguments.

Parameters

   i, x, y - the iterators
   n       - position relative to current location

Return value

   1,2) [&]{ auto j = i; j += n; return j; }()
   3) [&]{ auto j = i; j -= n; return j; }()
   4) x.base() - y.base()

Example

   This section is incomplete
   Reason: no example

Defect reports

   The following behavior-changing defect reports were applied
   retroactively to previously published C++ standards.
   DR Applied to Behavior as published Correct behavior
   LWG 3483 C++20 elements_view::iterator's difference is overconstrained
   requirement is relaxed
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/ranges/elements_
   view/iterator/operator_arith2&oldid=160883"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 18 October 2023, at 02:14.
     * This page has been accessed 3,932 times.
