std::deque<T,Allocator>::begin, std::deque<T,Allocator>::cbegin

   From cppreference.com
   < cpp | container | deque


   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Containers library
   Sequence
   array
   (C++11)
   vector
   vector<bool>
   deque
   forward_list
   (C++11)
   list
   Associative
   set
   multiset
   map
   multimap
   Unordered associative
   unordered_set
   (C++11)
   unordered_multiset
   (C++11)
   unordered_map
   (C++11)
   unordered_multimap
   (C++11)
   Adaptors
   stack
   queue
   priority_queue
   flat_set
   (C++23)
   flat_multiset
   (C++23)
   flat_map
   (C++23)
   flat_multimap
   (C++23)
   Views
   span
   (C++20)
   mdspan
   (C++23)
   Iterator invalidation
   Member function table
   Non-member function table

   std::deque
   Member types
   Member functions
   deque::deque
   deque::~deque
   deque::operator=
   deque::assign
   deque::assign_range
   (C++23)
   deque::get_allocator
   Element access
   deque::at
   deque::operator[]
   deque::front
   deque::back
   Iterators
   deque::begindeque::cbegin
   (C++11)
   deque::enddeque::cend
   (C++11)
   deque::rbegindeque::crbegin
   (C++11)
   deque::renddeque::crend
   (C++11)
   Capacity
   deque::empty
   deque::size
   deque::max_size
   deque::shrink_to_fit
   (DR*)
   Modifiers
   deque::clear
   deque::insert
   deque::insert_range
   (C++23)
   deque::emplace
   deque::erase
   deque::push_front
   deque::emplace_front
   (C++11)
   deque::prepend_range
   (C++23)
   deque::pop_front
   deque::push_back
   deque::emplace_back
   (C++11)
   deque::append_range
   (C++23)
   deque::pop_back
   deque::resize
   deque::swap
   Non-member functions
   operator==operator!=operator<operator>operator<=operator>=operator<=>
   (until C++20)(until C++20)(until C++20)(until C++20)(until
   C++20)(C++20)
   swap(std::deque)
   erase(std::deque)erase_if(std::deque)
   (C++20)(C++20)
   Deduction guides(C++17)

   iterator begin();
   (1)                                    (noexcept since C++11)
   const_iterator begin() const;
   (2)                                    (noexcept since C++11)
   const_iterator cbegin() const noexcept;
   (3)                                    (since C++11)

   Returns an iterator to the first element of the deque.

   If the deque is empty, the returned iterator will be equal to end().

   range-begin-end.svg

Parameters

   (none)

Return value

   Iterator to the first element.

Complexity

   Constant.

Notes

   libc++ backports cbegin() to C++98 mode.

Example

   Run this code
#include <algorithm>
#include <iostream>
#include <numeric>
#include <string>
#include <deque>

int main()
{
    std::deque<int> nums{1, 2, 4, 8, 16};
    std::deque<std::string> fruits{"orange", "apple", "raspberry"};
    std::deque<char> empty;

    // Print deque.
    std::for_each(nums.begin(), nums.end(), [](const int n) { std::cout << n <<
' '; });
    std::cout << '\n';

    // Sums all integers in the deque nums (if any), printing only the result.
    std::cout << "Sum of nums: "
              << std::accumulate(nums.begin(), nums.end(), 0) << '\n';

    // Prints the first fruit in the deque fruits, checking if there is any.
    if (!fruits.empty())
        std::cout << "First fruit: " << *fruits.begin() << '\n';

    if (empty.begin() == empty.end())
        std::cout << "deque 'empty' is indeed empty.\n";
}

   Output:
1 2 4 8 16
Sum of nums: 31
First fruit: orange
deque 'empty' is indeed empty.

See also

   endcend
   (C++11)
   returns an iterator to the end
   (public member function)
   begincbegin
   (C++11)(C++14)
   returns an iterator to the beginning of a container or array
   (function template)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/container/deque/
   begin&oldid=135173"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 11 November 2021, at 18:52.
     * This page has been accessed 56,156 times.
