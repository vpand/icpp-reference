std::shared_future<T>::wait_until

   From cppreference.com
   < cpp | thread | shared future


   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Concurrency support library
   Threads
   thread
   (C++11)
   jthread
   (C++20)
   stop_token
   (C++20)
   stop_source
   (C++20)
   stop_callback
   (C++20)
   hardware_destructive_interference_sizehardware_constructive_interferenc
   e_size
   (C++17)(C++17)
   this_thread namespace
   get_id
   (C++11)
   yield
   (C++11)
   sleep_for
   (C++11)
   sleep_until
   (C++11)
   Mutual exclusion
   mutex
   (C++11)
   recursive_mutex
   (C++11)
   shared_mutex
   (C++17)
   timed_mutex
   (C++11)
   recursive_timed_mutex
   (C++11)
   shared_timed_mutex
   (C++14)
   Generic lock management
   lock_guard
   (C++11)
   scoped_lock
   (C++17)
   unique_lock
   (C++11)
   shared_lock
   (C++14)
   defer_lock_ttry_to_lock_tadopt_lock_t
   (C++11)(C++11)(C++11)
   lock
   (C++11)
   try_lock
   (C++11)
   defer_locktry_to_lockadopt_lock
   (C++11)(C++11)(C++11)
   once_flag
   (C++11)
   call_once
   (C++11)
   Condition variables
   condition_variable
   (C++11)
   condition_variable_any
   (C++11)
   notify_all_at_thread_exit
   (C++11)
   cv_status
   (C++11)
   Semaphores
   counting_semaphorebinary_semaphore
   (C++20)(C++20)
   Latches and Barriers
   latch
   (C++20)
   barrier
   (C++20)
   Futures
   promise
   (C++11)
   future
   (C++11)
   shared_future
   (C++11)
   packaged_task
   (C++11)
   async
   (C++11)
   launch
   (C++11)
   future_status
   (C++11)
   future_error
   (C++11)
   future_category
   (C++11)
   future_errc
   (C++11)
   Safe Reclamation
   rcu_obj_base
   (C++26)
   rcu_domain
   (C++26)
   rcu_default_domain
   (C++26)
   rcu_synchronize
   (C++26)
   rcu_barrier
   (C++26)
   rcu_retire
   (C++26)
   Hazard Pointers
   hazard_pointer_obj_base
   (C++26)
   hazard_pointer
   (C++26)
   make_hazard_pointer
   (C++26)
   Atomic types
   atomic
   (C++11)
   atomic_ref
   (C++20)
   atomic_flag
   (C++11)
   Initialization of atomic types
   atomic_init
   (C++11)(deprecated in C++20)
   ATOMIC_VAR_INIT
   (C++11)(deprecated in C++20)
   ATOMIC_FLAG_INIT
   (C++11)
   Memory ordering
   memory_order
   (C++11)
   kill_dependency
   (C++11)
   atomic_thread_fence
   (C++11)
   atomic_signal_fence
   (C++11)
   Free functions for atomic operations
   atomic_storeatomic_store_explicit
   (C++11)(C++11)
   atomic_loadatomic_load_explicit
   (C++11)(C++11)
   atomic_exchangeatomic_exchange_explicit
   (C++11)(C++11)
   atomic_compare_exchange_weakatomic_compare_exchange_weak_explicitatomic
   _compare_exchange_strongatomic_compare_exchange_strong_explicit
   (C++11)(C++11)(C++11)(C++11)
   atomic_fetch_addatomic_fetch_add_explicit
   (C++11)(C++11)
   atomic_fetch_subatomic_fetch_sub_explicit
   (C++11)(C++11)
   atomic_fetch_andatomic_fetch_and_explicit
   (C++11)(C++11)
   atomic_fetch_oratomic_fetch_or_explicit
   (C++11)(C++11)
   atomic_fetch_xoratomic_fetch_xor_explicit
   (C++11)(C++11)
   atomic_fetch_maxatomic_fetch_max_explicit
   (C++26)(C++26)
   atomic_fetch_minatomic_fetch_min_explicit
   (C++26)(C++26)
   atomic_is_lock_free
   (C++11)
   atomic_waitatomic_wait_explicit
   (C++20)(C++20)
   atomic_notify_one
   (C++20)
   atomic_notify_all
   (C++20)
   Free functions for atomic flags
   atomic_flag_test_and_setatomic_flag_test_and_set_explicit
   (C++11)(C++11)
   atomic_flag_clearatomic_flag_clear_explicit
   (C++11)(C++11)
   atomic_flag_testatomic_flag_test_explicit
   (C++20)(C++20)
   atomic_flag_waitatomic_flag_wait_explicit
   (C++20)(C++20)
   atomic_flag_notify_one
   (C++20)
   atomic_flag_notify_all
   (C++20)

   std::shared_future
   Member functions
   shared_future::shared_future
   shared_future::~shared_future
   shared_future::operator=
   Getting the result
   shared_future::get
   State
   shared_future::valid
   shared_future::wait
   shared_future::wait_for
   shared_future::wait_until

   template< class Clock, class Duration >
   std::future_status wait_until( const
   std::chrono::time_point<Clock,Duration>& timeout_time ) const;
                                          (since C++11)

   wait_until waits for a result to become available. It blocks until
   specified timeout_time has been reached or the result becomes
   available, whichever comes first. The return value indicates why
   wait_until returned.

   If the future is the result of a call to async that used lazy
   evaluation, this function returns immediately without waiting.

   The behavior is undefined if valid() is false before the call to this
   function, or Clock does not meet the Clock requirements. The programs
   is ill-formed if std::chrono::is_clock_v<Clock> is false.(since C++20)

Parameters

   timeout_time - maximum time point to block until

Return value

   Constant Explanation
   future_status::deferred The shared state contains a deferred function
   using lazy evaluation, so the result will be computed only when
   explicitly requested
   future_status::ready The result is ready
   future_status::timeout The timeout has expired

Exceptions

   Any exception thrown by clock, time_point, or duration during the
   execution (clocks, time points, and durations provided by the standard
   library never throw).

Notes

   The implementations are encouraged to detect the case when valid() ==
   false before the call and throw a std::future_error with an error
   condition of future_errc::no_state.

   The standard recommends that the clock tied to timeout_time be used to
   measure time; that clock is not required to be a monotonic clock. There
   are no guarantees regarding the behavior of this function if the clock
   is adjusted discontinuously, but the existing implementations convert
   timeout_time from Clock to std::chrono::system_clock and delegate to
   POSIX pthread_cond_timedwait so that the wait honors adjustments to the
   system clock, but not to the user-provided Clock. In any case, the
   function also may wait for longer than until after timeout_time has
   been reached due to scheduling or resource contention delays.

Example

   This section is incomplete
   Reason: no example

See also

   wait
   waits for the result to become available
   (public member function)
   wait_for
   waits for the result, returns if it is not available for the specified
   timeout duration
   (public member function)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/thread/shared_fu
   ture/wait_until&oldid=132985"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 28 August 2021, at 09:14.
     * This page has been accessed 15,614 times.
