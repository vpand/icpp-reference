std::ranges::views::take_while, std::ranges::take_while_view

   From cppreference.com
   < cpp | ranges

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Ranges library
   Range access
   begin
   cbegin
   end
   cend
   rbegin
   crbegin
   rend
   crend
   size
   ssize
   data
   cdata
   empty
   Range conversions
   std::from_range_t
   std::from_range
   (C++23)(C++23)
   to
   (C++23)
   Range primitives
   range_size_trange_difference_trange_value_trange_reference_t
   iterator_tconst_iterator_tsentinel_tconst_sentinel_t
   (C++23)(C++23)
   range_const_reference_trange_rvalue_reference_trange_common_reference_t
   (C++23)
   elements_of
   (C++23)
   Dangling iterator handling
   dangling
   borrowed_iterator_t
   borrowed_subrange_t
   Range concepts
   range
   borrowed_range
   sized_range
   constant_range
   (C++23)
   common_range
   view
   viewable_range
   input_range
   output_range
   forward_range
   bidirectional_range
   random_access_range
   contiguous_range
   Views
   view_interface
   subrange
   Range factories
   empty_viewviews::empty
   single_viewviews::single
   iota_viewviews::iota
   repeat_viewviews::repeat
   (C++23)(C++23)
   basic_istream_viewviews::istream
   Range adaptors
   views::all_tviews::all
   ref_view
   owning_view
   as_rvalue_viewviews::as_rvalue
   (C++23)(C++23)
   filter_viewviews::filter
   transform_viewviews::transform
   take_viewviews::take
   take_while_viewviews::take_while
   concat_viewviews::concat
   (C++26)(C++26)
   drop_viewviews::drop
   drop_while_viewviews::drop_while
   join_viewviews::join
   join_with_viewviews::join_with
   (C++23)(C++23)
   lazy_split_viewviews::lazy_split
   split_viewviews::split
   views::counted
   common_viewviews::common
   reverse_viewviews::reverse
   as_const_viewviews::as_const
   (C++23)(C++23)
   elements_viewviews::elements
   keys_viewviews::keys
   values_viewviews::values
   enumerate_viewviews::enumerate
   (C++23)(C++23)
   zip_viewviews::zip
   (C++23)(C++23)
   zip_transform_viewviews::zip_transform
   (C++23)(C++23)
   adjacent_viewviews::adjacent
   (C++23)(C++23)
   views::pairwise
   (C++23)
   adjacent_transform_viewviews::adjacent_transform
   (C++23)(C++23)
   views::pairwise_transform
   (C++23)
   chunk_viewviews::chunk
   (C++23)(C++23)
   slide_viewviews::slide
   (C++23)(C++23)
   chunk_by_viewviews::chunk_by
   (C++23)(C++23)
   stride_viewviews::stride
   (C++23)(C++23)
   cartesian_product_viewviews::cartesian_product
   (C++23)(C++23)
   Range generators
   std::generator
   (C++23)
   Range adaptor objects
   Range adaptor closure objects
   range_adaptor_closure
   (C++23)
   Helper items
   copyable-box
   movable-box
   (until C++23)(C++23)
   simple-view
   non-propagating-cache

   std::ranges::take_while_view
   Member functions
   take_while_view::take_while_view
   take_while_view::base
   take_while_view::pred
   take_while_view::begin
   take_while_view::end
   Deduction guides
   Sentinel
   take_while_view::sentinel::sentinel
   take_while_view::sentinel::base
   operator==(take_while_view::sentinel)

   Defined in header <ranges>
   template< ranges::view V, class Pred >

       requires ranges::input_range<V> &&
                std::is_object_v<Pred> &&
                std::indirect_unary_predicate<const Pred,
   ranges::iterator_t<V>>
   class take_while_view
       : public ranges::view_interface<take_while_view<V, Pred>>
   (1)                                             (since C++20)
   namespace views {

       inline constexpr /*unspecified*/ take_while = /*unspecified*/;
   }
   (2)                                             (since C++20)
   Call signature
   template< ranges::viewable_range R, class Pred >

       requires /* see below */
   constexpr ranges::view auto take_while( R&& r, Pred&& pred );
                                                   (since C++20)
   template< class Pred >
   constexpr /*range adaptor closure*/ take_while( Pred&& pred );
                                                   (since C++20)
   1) A range adaptor that represents view of the elements from an
   underlying sequence, starting at the beginning and ending at the first
   element for which the predicate returns false.
   2) RangeAdaptorObject. The expression views::take_while(e, f) is
   expression-equivalent to take_while_view(e, f) for any suitable
   subexpressions e and f.

   take_while_view models the concepts contiguous_range,
   random_access_range, bidirectional_range, forward_range, and
   input_range when the underlying view V models respective concepts.

Member functions

   (constructor)
   (C++20)
   constructs a take_while_view
   (public member function)
   base
   (C++20)
   returns a copy of the underlying (adapted) view
   (public member function)
   pred
   (C++20)
   returns a reference to the stored predicate
   (public member function)
   begin
   (C++20)
   returns an iterator to the beginning
   (public member function)
   end
   (C++20)
   returns a sentinel representing the end
   (public member function)

Inherited from std::ranges::view_interface

   empty
   (C++20)
   returns whether the derived view is empty. Provided if it satisfies
   sized_range or forward_range.
   (public member function of std::ranges::view_interface<D>)
   cbegin
   (C++23)
   returns a constant iterator to the beginning of the range.
   (public member function of std::ranges::view_interface<D>)
   cend
   (C++23)
   returns a sentinel for the constant iterator of the range.
   (public member function of std::ranges::view_interface<D>)
   operator bool
   (C++20)
   returns whether the derived view is not empty. Provided if
   ranges::empty is applicable to it.
   (public member function of std::ranges::view_interface<D>)
   data
   (C++20)
   gets the address of derived view's data. Provided if its iterator type
   satisfies contiguous_iterator.
   (public member function of std::ranges::view_interface<D>)
   front
   (C++20)
   returns the first element in the derived view. Provided if it satisfies
   forward_range.
   (public member function of std::ranges::view_interface<D>)
   operator[]
   (C++20)
   returns the n^th element in the derived view. Provided if it satisfies
   random_access_range.
   (public member function of std::ranges::view_interface<D>)

Deduction guides

Nested classes

   sentinel
   the sentinel type
   (exposition-only member class template*)

Example

   Run this code
#include <iostream>
#include <ranges>

int main()
{
    for (int year : std::views::iota(2020)
                  | std::views::take_while([](int y) { return y <= 2023; }))
        std::cout << year << ' ';
    std::cout << '\n';

    const char idea[] {"Today is yesterday's tomorrow!..."};
    for (char x : std::ranges::take_while_view(idea, [](char c) { return c != '.
'; }))
        std::cout << x;
    std::cout << '\n';
}

   Output:
2020 2021 2022 2023
Today is yesterday's tomorrow!

See also

   ranges::take_viewviews::take
   (C++20)
   a view consisting of the first N elements of another view
   (class template) (range adaptor object)
   ranges::drop_while_viewviews::drop_while
   (C++20)
   a view consisting of the elements of another view, skipping the initial
   subsequence of elements until the first element where the predicate
   returns false
   (class template) (range adaptor object)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/ranges/take_whil
   e_view&oldid=160939"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 19 October 2023, at 02:52.
     * This page has been accessed 25,286 times.
