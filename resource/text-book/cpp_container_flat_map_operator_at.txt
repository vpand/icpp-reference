std::flat_map<Key,T,Compare,KeyContainer,MappedContainer>::operator[]

   From cppreference.com
   < cpp | container | flat map


   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Containers library
   Sequence
   array
   (C++11)
   vector
   vector<bool>
   deque
   forward_list
   (C++11)
   list
   Associative
   set
   multiset
   map
   multimap
   Unordered associative
   unordered_set
   (C++11)
   unordered_multiset
   (C++11)
   unordered_map
   (C++11)
   unordered_multimap
   (C++11)
   Adaptors
   stack
   queue
   priority_queue
   flat_set
   (C++23)
   flat_multiset
   (C++23)
   flat_map
   (C++23)
   flat_multimap
   (C++23)
   Views
   span
   (C++20)
   mdspan
   (C++23)
   Iterator invalidation
   Member function table
   Non-member function table

   std::flat_map
   Member types
   Member functions
   flat_map::flat_map
   flat_map::operator=
   Element access
   flat_map::at
   flat_map::operator[]
   Iterators
   flat_map::beginflat_map::cbegin
   flat_map::endflat_map::cend
   flat_map::rbeginflat_map::crbegin
   flat_map::rendflat_map::crend
   Capacity
   flat_map::size
   flat_map::max_size
   flat_map::empty
   Modifiers
   flat_map::clear
   flat_map::erase
   flat_map::swap
   flat_map::emplace
   flat_map::extract
   flat_map::replace
   flat_map::insert
   flat_map::insert_range
   flat_map::insert_or_assign
   flat_map::emplace_hint
   flat_map::try_emplace
   Lookup
   flat_map::count
   flat_map::find
   flat_map::contains
   flat_map::equal_range
   flat_map::lower_bound
   flat_map::upper_bound
   Observers
   flat_map::key_comp
   flat_map::keys
   flat_map::value_comp
   flat_map::values
   Non-member functions
   operator==operator<=>
   (C++23)(C++23)
   swap(std::flat_map)
   (C++23)
   erase_if(std::flat_map)
   (C++23)
   Helper classes
   uses_allocator<std::flat_map>
   (C++23)
   Tags
   sorted_unique
   (C++23)
   sorted_unique_t
   (C++23)
   Deduction guides

   T& operator[]( const Key& key );
   (1)                             (since C++23)
   T& operator[]( Key&& key );
   (2)                             (since C++23)
   template< class K >
   T& operator[]( K&& x );
   (3)                             (since C++23)

   Returns a reference to the value that is mapped to a key equivalent to
   key or x respectively, performing an insertion if such key does not
   already exist.
   1) Inserts a value_type object constructed in-place if the key does not
   exist. Equivalent to return try_emplace(x).first->second;.
   2) Inserts a value_type object constructed in-place if the key does not
   exist. Equivalent to return try_emplace(std::move(x)).first->second;
   3) Inserts a value_type object constructed in-place if there is no key
   that transparently compares equivalent to the value x.
   Equivalent to return
   this->try_emplace(std::forward<K>(x)).first->second;. This overload
   participates in overload resolution only if the qualified-id
   Compare::is_transparent is valid and denotes a type. It allows calling
   this function without constructing an instance of Key.
   Information on iterator invalidation is copied from here

Parameters

   key - the key of the element to find
   x   - a value of any type that can be transparently compared with a key

Return value

   1,2) A reference to the mapped value of the new element if no element
   with key key existed. Otherwise, a reference to the mapped value of the
   existing element whose key is equivalent to key.
   3) A reference to the mapped value of the new element if no element
   with key that compares equivalent to the value x existed. Otherwise, a
   reference to the mapped value of the existing element whose key
   compares equivalent to x.

Exceptions

   If an exception is thrown by any operation, the insertion has no
   effect.

Complexity

   Logarithmic in the size of the container, plus the cost of insertion
   (if any) of an empty element.

Notes

   operator[] is non-const because it inserts the key if it doesn't exist.
   If this behavior is undesirable or if the container is const, at may be
   used.

   insert_or_assign returns more information than operator[] and does not
   require default-constructibility of the mapped type.

Example

   Run this code
#include <iostream>
#include <string>
#include <flat_map>

void println(auto const comment, auto const& map)
{
    std::cout << comment << '{';
    for (const auto& pair : map)
        std::cout << '{' << pair.first << ": " << pair.second << '}';
    std::cout << "}\n";
}

int main()
{
    std::flat_map<char, int> letter_counts{{'a', 27}, {'b', 3}, {'c', 1}};

    println("letter_counts initially contains: ", letter_counts);

    letter_counts['b'] = 42; // updates an existing value
    letter_counts['x'] = 9;  // inserts a new value

    println("after modifications it contains: ", letter_counts);

    // count the number of occurrences of each word
    // (the first call to operator[] initialized the counter with zero)
    std::flat_map<std::string, int>  word_map;
    for (const auto& w : {"this", "sentence", "is", "not", "a", "sentence",
                          "this", "sentence", "is", "a", "hoax"})
        ++word_map[w];
    word_map["that"]; // just inserts the pair {"that", 0}

    for (const auto& [word, count] : word_map)
        std::cout << count << " occurrence(s) of word '" << word << "'\n";
}

   Output:
letter_counts initially contains: {{a: 27}{b: 3}{c: 1}}
after modifications it contains: {{a: 27}{b: 42}{c: 1}{x: 9}}
2 occurrence(s) of word 'a'
1 occurrence(s) of word 'hoax'
2 occurrence(s) of word 'is'
1 occurrence(s) of word 'not'
3 occurrence(s) of word 'sentence'
0 occurrence(s) of word 'that'
2 occurrence(s) of word 'this'

See also

   at
   access specified element with bounds checking
   (public member function)
   insert_or_assign
   inserts an element or assigns to the current element if the key already
   exists
   (public member function)
   try_emplace
   inserts in-place if the key does not exist, does nothing if the key
   exists
   (public member function)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/container/flat_m
   ap/operator_at&oldid=168907"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 23 January 2024, at 17:40.
     * This page has been accessed 975 times.
