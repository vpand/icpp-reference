std::experimental::ranges::Writable

   From cppreference.com
   < cpp | experimental | ranges

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Experimental
   Technical Specification
   Filesystem library (filesystem TS)
   Library fundamentals (library fundamentals TS)
   Library fundamentals 2 (library fundamentals TS v2)
   Library fundamentals 3 (library fundamentals TS v3)
   Extensions for parallelism (parallelism TS)
   Extensions for parallelism 2 (parallelism TS v2)
   Extensions for concurrency (concurrency TS)
   Extensions for concurrency 2 (concurrency TS v2)
   Concepts (concepts TS)
   Ranges (ranges TS)
   Reflection (reflection TS)
   Mathematical special functions (special functions TR)
   Experimental Non-TS
   Pattern Matching
   Linear Algebra
   std::execution
   Contracts
   2D Graphics

   Ranges
   Concepts
   General utilities
   Iterators
   Ranges
   Algorithms

   Iterators library
   Iterator concepts
   Readable
   Writable
   WeaklyIncrementable
   Incrementable
   Iterator
   Sentinel
   SizedSentinel
   InputIterator
   ForwardIterator
   BidirectionalIterator
   RandomAccessIterator
   OutputIterator
   Indirect callable concepts
   IndirectUnaryInvocableIndirectRegularUnaryInvocable
   IndirectUnaryPredicate

   IndirectRelation

   IndirectStrictWeakOrder

   Common algorithm requirements
   IndirectlyMovable
   IndirectlyMovableStorable

   IndirectlyCopyable
   IndirectlyCopyableStorable
   IndirectlySwappable
   IndirectlyComparable
   Permutable
   Mergeable
   Sortable
   Concept utilities
   indirect_result_of
   projected
   Iterator utilities and operations
   iter_move
   iter_swap
   advance
   distance
   next
   prev
   Iterator traits
   difference_type
   value_type
   reference_trvalue_reference_titer_common_reference_t
   iterator_category
   input_iterator_tagoutput_iterator_tagforward_iterator_tagbidirectional_
   iterator_tagrandom_access_iterator_tag
   ranges::iterator_traits
   std::iterator_traits<InputIterator>std::iterator_traits<OutputIterator>
   Iterator adaptors
   reverse_iterator
   move_iterator
   move_sentinel
   back_insert_iterator
   front_insert_iterator
   insert_iterator
   common_iterator
   counted_iterator
   default_sentinel
   danglingborrowed_iterator_t
   unreachable
   Stream iterators
   istream_iterator
   ostream_iterator
   istreambuf_iterator
   ostreambuf_iterator

   Defined in header <experimental/ranges/iterator>
   template< class Out, class T >

   concept bool Writable =
       requires(Out&& o, T&& t) {
           *o = std::forward<T>(t);
           *std::forward<Out>(o) = std::forward<T>(t);
           const_cast<const ranges::reference_t<Out>&&>(*o) =
               std::forward<T>(t);
           const_cast<const
   ranges::reference_t<Out>&&>(*std::forward<Out>(o)) =
               std::forward<T>(t);
       };
       /* none of the four expressions above are required to be
   equality-preserving */
                                                   (ranges TS)

   The concept Writable<Out, T> specifies the requirements for writing a
   value whose type and value category are encoded by T into an iterator
   Out's referenced object.

   Let E be an expression such that decltype((E)) is T, and o be a
   dereferenceable object of type Out, then Writable<Out, T> is satisfied
   only if:
     * If Readable<Out> && Same<ranges::value_type_t<Out>,
       std::decay_t<T>> is satisfied, then *o after any above assignment
       is equal to the value of E before the assignment.

   o is not required to be dereferenceable after evaluating any of the
   assignment expressions above. If E is an xvalue, the resulting state of
   the object it denotes is valid but unspecified.

Equality preservation

   An expression is equality preserving if it results in equal outputs
   given equal inputs.
     * The inputs to an expression consist of its operands.
     * The outputs of an expression consist of its result and all operands
       modified by the expression (if any).

   Every expression required to be equality preserving is further required
   to be stable: two evaluations of such an expression with the same input
   objects must have equal outputs absent any explicit intervening
   modification of those input objects.

Notes

   The only valid use of operator* is on the left side of an assignment
   expression. Assignment through the same value of a writable type may
   happen only once.

   The required expressions with const_cast prevent Readable objects with
   prvalue reference types from satisfying the syntactic requirements of
   Writable by accident, while permitting proxy references to continue to
   work as long as their constness is shallow. See Ranges TS issue 381.
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/experimental/ran
   ges/iterator/Writable&oldid=155653"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 28 July 2023, at 05:47.
     * This page has been accessed 10,403 times.
