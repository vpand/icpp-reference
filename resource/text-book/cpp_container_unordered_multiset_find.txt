std::unordered_multiset<Key,Hash,KeyEqual,Allocator>::find

   From cppreference.com
   < cpp | container | unordered multiset


   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Containers library
   Sequence
   array
   (C++11)
   vector
   vector<bool>
   deque
   forward_list
   (C++11)
   list
   Associative
   set
   multiset
   map
   multimap
   Unordered associative
   unordered_set
   (C++11)
   unordered_multiset
   (C++11)
   unordered_map
   (C++11)
   unordered_multimap
   (C++11)
   Adaptors
   stack
   queue
   priority_queue
   flat_set
   (C++23)
   flat_multiset
   (C++23)
   flat_map
   (C++23)
   flat_multimap
   (C++23)
   Views
   span
   (C++20)
   mdspan
   (C++23)
   Iterator invalidation
   Member function table
   Non-member function table

   std::unordered_multiset
   Member types
   Member functions
   unordered_multiset::unordered_multiset
   unordered_multiset::~unordered_multiset

   unordered_multiset::operator=
   unordered_multiset::get_allocator
   Iterators
   unordered_multiset::beginunordered_multiset::cbegin
   unordered_multiset::endunordered_multiset::cend
   Capacity
   unordered_multiset::size
   unordered_multiset::max_size
   unordered_multiset::empty
   Modifiers
   unordered_multiset::clear
   unordered_multiset::insert
   unordered_multiset::insert_range
   (C++23)
   unordered_multiset::emplace
   unordered_multiset::emplace_hint
   unordered_multiset::erase
   unordered_multiset::swap
   unordered_multiset::extract
   (C++17)
   unordered_multiset::merge
   (C++17)
   Lookup
   unordered_multiset::count
   unordered_multiset::find
   unordered_multiset::contains
   (C++20)
   unordered_multiset::equal_range
   Bucket interface
   unordered_multiset::begin(size_type)unordered_multiset::cbegin(size_typ
   e)
   unordered_multiset::end(size_type)unordered_multiset::cend(size_type)
   unordered_multiset::bucket_count
   unordered_multiset::max_bucket_count
   unordered_multiset::bucket_size
   unordered_multiset::bucket
   Hash policy
   unordered_multiset::load_factor
   unordered_multiset::max_load_factor
   unordered_multiset::rehash
   unordered_multiset::reserve
   Observers
   unordered_multiset::hash_function
   unordered_multiset::key_eq
   Non-member functions
   operator==operator!=
   (C++11)(C++11)(until C++20)
   std::swap(std::unordered_multiset)
   (C++11)
   erase_if(std::unordered_multiset)
   (C++20)
   Deduction guides(C++17)

   iterator find( const Key& key );
   (1)                                         (since C++11)
   const_iterator find( const Key& key ) const;
   (2)                                         (since C++11)
   template< class K >
   iterator find( const K& x );
   (3)                                         (since C++20)
   template< class K >
   const_iterator find( const K& x ) const;
   (4)                                         (since C++20)
   1,2) Finds an element with key equivalent to key. If there are several
   elements with the requested key in the container, any of them may be
   returned.
   3,4) Finds an element with key that compares equivalent to the value x.
   This overload participates in overload resolution only if
   Hash::is_transparent and KeyEqual::is_transparent are valid and each
   denotes a type. This assumes that such Hash is callable with both K and
   Key type, and that the KeyEqual is transparent, which, together, allows
   calling this function without constructing an instance of Key.

Parameters

   key - key value of the element to search for
   x   - a value of any type that can be transparently compared with a key

Return value

   An iterator to the requested element. If no such element is found,
   past-the-end (see end()) iterator is returned.

Complexity

   Constant on average, worst case linear in the size of the container.

Notes

   Feature-test macro Value Std Feature
   __cpp_lib_generic_unordered_lookup 201811L (C++20) Heterogeneous
   comparison lookup in unordered associative containers; overloads (3,4)

Example

   Run this code
#include <iostream>
#include <unordered_set>

int main()
{
    // Simple comparison demo.
    std::unordered_multiset<int> example = {1, 2, 3, 4};

    if (auto search = example.find(2); search != example.end())
        std::cout << "Found " << (*search) << '\n';
    else
        std::cout << "Not found\n";
}

   Output:
Found 2

See also

   count
   returns the number of elements matching specific key
   (public member function)
   equal_range
   returns range of elements matching a specific key
   (public member function)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/container/unorde
   red_multiset/find&oldid=136017"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 4 December 2021, at 08:39.
     * This page has been accessed 30,831 times.
