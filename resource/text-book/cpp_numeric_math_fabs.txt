std::abs(float), std::fabs, std::fabsf, std::fabsl

   From cppreference.com
   < cpp | numeric | math

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Numerics library
   Common mathematical functions
   Mathematical special functions (C++17)
   Mathematical constants (C++20)
   Basic linear algebra algorithms (C++26)
   Floating-point environment (C++11)
   Complex numbers
   Numeric arrays
   Pseudo-random number generation
   Factor operations
   gcd
   (C++17)
   lcm
   (C++17)
   Interpolations
   midpoint
   (C++20)
   lerp
   (C++20)
   Saturation arithmetic
   add_sat
   (C++26)
   sub_sat
   (C++26)
   saturate_cast
   (C++26)
   mul_sat
   (C++26)
   div_sat
   (C++26)
   Generic numeric operations
   iota
   (C++11)
   ranges::iota
   (C++23)
   accumulate
   inner_product
   adjacent_difference
   partial_sum
   reduce
   (C++17)
   transform_reduce
   (C++17)
   inclusive_scan
   (C++17)
   exclusive_scan
   (C++17)
   transform_inclusive_scan
   (C++17)
   transform_exclusive_scan
   (C++17)
   Bit operations
   has_single_bit
   (C++20)
   bit_cast
   (C++20)
   bit_ceil
   (C++20)
   bit_floor
   (C++20)
   bit_width
   (C++20)
   rotl
   (C++20)
   rotr
   (C++20)
   popcount
   (C++20)
   countl_zero
   (C++20)
   countl_one
   (C++20)
   countr_zero
   (C++20)
   countr_one
   (C++20)
   byteswap
   (C++23)
   endian
   (C++20)

   Common mathematical functions
   Functions
   Basic operations
   abs(int)labsllabsimaxabs
   (C++11)
   abs(float)fabs
   divldivlldivimaxdiv
   (C++11)
   fmod
   remainder
   (C++11)
   remquo
   (C++11)
   fma
   (C++11)
   fmax
   (C++11)
   fmin
   (C++11)
   fdim
   (C++11)
   nannanfnanl
   (C++11)(C++11)(C++11)
   Exponential functions
   exp
   exp2
   (C++11)
   expm1
   (C++11)
   log
   log10
   log1p
   (C++11)
   log2
   (C++11)
   Power functions
   sqrt
   cbrt
   (C++11)
   hypot
   (C++11)
   pow
   Trigonometric and hyperbolic functions
   sin
   cos
   tan
   asin
   acos
   atan
   atan2
   sinh
   cosh
   tanh
   asinh
   (C++11)
   acosh
   (C++11)
   atanh
   (C++11)
   Error and gamma functions
   erf
   (C++11)
   erfc
   (C++11)
   lgamma
   (C++11)
   tgamma
   (C++11)
   Nearest integer floating point operations
   ceil
   floor
   roundlroundllround
   (C++11)(C++11)(C++11)
   trunc
   (C++11)
   nearbyint
   (C++11)
   rintlrintllrint
   (C++11)(C++11)(C++11)
   Floating point manipulation functions
   ldexp
   scalbnscalbln
   (C++11)(C++11)
   ilogb
   (C++11)
   logb
   (C++11)
   frexp
   modf
   nextafternexttoward
   (C++11)(C++11)
   copysign
   (C++11)
   Classification/Comparison
   fpclassify
   (C++11)
   isfinite
   (C++11)
   isinf
   (C++11)
   isnan
   (C++11)
   isnormal
   (C++11)
   signbit
   (C++11)
   isgreater
   (C++11)
   isgreaterequal
   (C++11)
   isless
   (C++11)
   islessequal
   (C++11)
   islessgreater
   (C++11)
   isunordered
   (C++11)
   Macro constants
   HUGE_VALFHUGE_VALHUGE_VALL
   (C++11)(C++11)
   INFINITY
   (C++11)
   NAN
   (C++11)
   math_errhandlingMATH_ERRNOMATH_ERREXCEPT
   (C++11)
   FP_NORMALFP_SUBNORMALFP_ZEROFP_INFINITEFP_NAN
   (C++11)(C++11)(C++11)(C++11)(C++11)

   Defined in header <cmath>
   Defined in header <cstdlib>
   (1)
   float       abs( float num );

   double      abs( double num );
   long double abs( long double num );
   (until C++23)
   constexpr /* floating-point-type */
               abs( /* floating-point-type */ num );
   (since C++23)
   Defined in header <cmath>
   (2)
   float       fabs ( float num );

   double      fabs ( double num );
   long double fabs ( long double num );
   (until C++23)
   constexpr /* floating-point-type */
               fabs ( /* floating-point-type */ num );
   (since C++23)
   float       fabsf( float num );
   (3) (since C++11)
   (constexpr since C++23)
   long double fabsl( long double num );
   (4) (since C++11)
   (constexpr since C++23)
   Additional overloads (since C++11)
   Defined in header <cmath>
   template< class Integer >
   double      fabs ( Integer num );
   (A) (since C++11)
   (constexpr since C++23)
   1-4) Computes the absolute value of the floating-point value num. The
   library provides overloads of std::abs and std::fabs for all
   cv-unqualified floating-point types as the type of the parameter
   num.(since C++23)
   A) Additional overloads are provided for all integer types, which are
   treated as double.
   (since C++11)

   For integral arguments, the integral overloads of std::abs are likely
   better matches. If std::abs is called with an unsigned integral
   argument that cannot be converted to int by integral promotion, the
   program is ill-formed.

Parameters

   num - floating-point or integer value

Return value

   If successful, returns the absolute value of arg (|arg|). The value
   returned is exact and does not depend on any rounding modes.

Error handling

   This function is not subject to any of the error conditions specified
   in math_errhandling.

   If the implementation supports IEEE floating-point arithmetic (IEC
   60559),
     * If the argument is ±0, +0 is returned.
     * If the argument is ±infty, +infty is returned.
     * If the argument is NaN, NaN is returned.

Notes

   The additional overloads are not required to be provided exactly as
   (A). They only need to be sufficient to ensure that for their argument
   num of integer type, std::fabs(num) has the same effect as
   std::fabs(static_cast<double>(num)).

Example

   Run this code
#include <cmath>
#include <iostream>

int main()
{
    std::cout << "abs(+3.0) = " << std::abs(+3.0) << '\n'
              << "abs(-3.0) = " << std::abs(-3.0) << '\n';

    // special values
    std::cout << "abs(-0.0) = " << std::abs(-0.0) << '\n'
              << "abs(-Inf) = " << std::abs(-INFINITY) << '\n'
              << "abs(-NaN) = " << std::abs(-NAN) << '\n';
}

   Possible output:
abs(+3.0) = 3
abs(-3.0) = 3
abs(-0.0) = 0
abs(-Inf) = inf
abs(-NaN) = nan

Defect reports

   The following behavior-changing defect reports were applied
   retroactively to previously published C++ standards.
   DR Applied to Behavior as published Correct behavior
   LWG 2192 C++98 overloads of std::abs were
   inconsistently declared in two headers declared these overloads
   in both headers
   LWG 2735 C++11 overloads of std::abs for integer types
   returning double was erroneously required removed the requirement

See also

   abs(int)labsllabs
   (C++11)
   computes absolute value of an integral value (\(\small{|x|}\)|x|)
   (function)
   copysigncopysignfcopysignl
   (C++11)(C++11)(C++11)
   copies the sign of a floating point value
   (function)
   signbit
   (C++11)
   checks if the given number is negative
   (function)
   abs(std::complex)
   returns the magnitude of a complex number
   (function template)
   abs(std::valarray)
   applies the function abs to each element of valarray
   (function template)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/numeric/math/fab
   s&oldid=160728"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 15 October 2023, at 10:02.
     * This page has been accessed 437,893 times.
