std::ranges::drop_view<V>::begin

   From cppreference.com
   < cpp | ranges | drop view

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Ranges library
   Range access
   begin
   cbegin
   end
   cend
   rbegin
   crbegin
   rend
   crend
   size
   ssize
   data
   cdata
   empty
   Range conversions
   std::from_range_t
   std::from_range
   (C++23)(C++23)
   to
   (C++23)
   Range primitives
   range_size_trange_difference_trange_value_trange_reference_t
   iterator_tconst_iterator_tsentinel_tconst_sentinel_t
   (C++23)(C++23)
   range_const_reference_trange_rvalue_reference_trange_common_reference_t
   (C++23)
   elements_of
   (C++23)
   Dangling iterator handling
   dangling
   borrowed_iterator_t
   borrowed_subrange_t
   Range concepts
   range
   borrowed_range
   sized_range
   constant_range
   (C++23)
   common_range
   view
   viewable_range
   input_range
   output_range
   forward_range
   bidirectional_range
   random_access_range
   contiguous_range
   Views
   view_interface
   subrange
   Range factories
   empty_viewviews::empty
   single_viewviews::single
   iota_viewviews::iota
   repeat_viewviews::repeat
   (C++23)(C++23)
   basic_istream_viewviews::istream
   Range adaptors
   views::all_tviews::all
   ref_view
   owning_view
   as_rvalue_viewviews::as_rvalue
   (C++23)(C++23)
   filter_viewviews::filter
   transform_viewviews::transform
   take_viewviews::take
   take_while_viewviews::take_while
   concat_viewviews::concat
   (C++26)(C++26)
   drop_viewviews::drop
   drop_while_viewviews::drop_while
   join_viewviews::join
   join_with_viewviews::join_with
   (C++23)(C++23)
   lazy_split_viewviews::lazy_split
   split_viewviews::split
   views::counted
   common_viewviews::common
   reverse_viewviews::reverse
   as_const_viewviews::as_const
   (C++23)(C++23)
   elements_viewviews::elements
   keys_viewviews::keys
   values_viewviews::values
   enumerate_viewviews::enumerate
   (C++23)(C++23)
   zip_viewviews::zip
   (C++23)(C++23)
   zip_transform_viewviews::zip_transform
   (C++23)(C++23)
   adjacent_viewviews::adjacent
   (C++23)(C++23)
   views::pairwise
   (C++23)
   adjacent_transform_viewviews::adjacent_transform
   (C++23)(C++23)
   views::pairwise_transform
   (C++23)
   chunk_viewviews::chunk
   (C++23)(C++23)
   slide_viewviews::slide
   (C++23)(C++23)
   chunk_by_viewviews::chunk_by
   (C++23)(C++23)
   stride_viewviews::stride
   (C++23)(C++23)
   cartesian_product_viewviews::cartesian_product
   (C++23)(C++23)
   Range generators
   std::generator
   (C++23)
   Range adaptor objects
   Range adaptor closure objects
   range_adaptor_closure
   (C++23)
   Helper items
   copyable-box
   movable-box
   (until C++23)(C++23)
   simple-view
   non-propagating-cache

   std::ranges::drop_view
   Member functions
   drop_view::drop_view
   drop_view::base
   drop_view::begin
   drop_view::end
   drop_view::size
   Deduction guides

   constexpr auto begin()

       requires (!(__SimpleView<V> &&
                    ranges::random_access_range<const V> &&
                    ranges::sized_range<const V>));
   (1)                         (since C++20)
   constexpr auto begin() const

       requires ranges::random_access_range<const V> &&
                ranges::sized_range<const V>;
   (2)                         (since C++20)

   Returns an iterator to the first element of the drop_view, that is, an
   iterator to the N^th element of the underlying view, or to the end of
   the underlying view if it has less than N elements.

   If V is not a random_access_range or a sized_range, in order to provide
   the amortized constant time complexity required by the range concept,
   the overload (1) caches the result within the drop_view object for use
   on subsequent calls.

Parameters

   (none)

Return value

   ranges::next(ranges::begin(base_), count_, ranges::end(base_)), where
   base_ is the underlying view, and count_ is the number of elements to
   skip.

Example

   Run this code
#include <array>
#include <concepts>
#include <iostream>
#include <iterator>
#include <ranges>

void println(std::ranges::range auto const& range)
{
    for (auto const& elem : range)
        std::cout << elem;
    std::cout << '\n';
}

int main()
{
    std::array hi{'H', 'e', 'l', 'l', 'o', ',', ' ', 'C', '+', '+', '2', '0', '!
'};
    println(hi);

    const auto pos = std::distance(hi.begin(), std::ranges::find(hi, 'C'));
    auto cxx = std::ranges::drop_view{hi, pos};
    std::cout << "*drop_view::begin() == '" << *cxx.begin() << "'\n";
//  *cxx.begin() = 'c'; // undefined: 'views' are to be used as observers
    println(cxx);
}

   Output:
Hello, C++20!
*drop_view::begin() == 'C'
C++20!

Defect reports

   The following behavior-changing defect reports were applied
   retroactively to previously published C++ standards.
   DR Applied to Behavior as published Correct behavior
   LWG 3482 C++20 the const overload can be called with unsized ranges the
   const overload requires sized_range

See also

   end
   (C++20)
   returns an iterator or a sentinel to the end
   (public member function)
   ranges::begin
   (C++20)
   returns an iterator to the beginning of a range
   (customization point object)
   ranges::end
   (C++20)
   returns a sentinel indicating the end of a range
   (customization point object)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/ranges/drop_view
   /begin&oldid=160920"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 18 October 2023, at 14:33.
     * This page has been accessed 5,250 times.
