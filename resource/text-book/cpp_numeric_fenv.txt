Floating-point environment

   From cppreference.com
   < cpp | numeric

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Numerics library
   Common mathematical functions
   Mathematical special functions (C++17)
   Mathematical constants (C++20)
   Basic linear algebra algorithms (C++26)
   Floating-point environment (C++11)
   Complex numbers
   Numeric arrays
   Pseudo-random number generation
   Factor operations
   gcd
   (C++17)
   lcm
   (C++17)
   Interpolations
   midpoint
   (C++20)
   lerp
   (C++20)
   Saturation arithmetic
   add_sat
   (C++26)
   sub_sat
   (C++26)
   saturate_cast
   (C++26)
   mul_sat
   (C++26)
   div_sat
   (C++26)
   Generic numeric operations
   iota
   (C++11)
   ranges::iota
   (C++23)
   accumulate
   inner_product
   adjacent_difference
   partial_sum
   reduce
   (C++17)
   transform_reduce
   (C++17)
   inclusive_scan
   (C++17)
   exclusive_scan
   (C++17)
   transform_inclusive_scan
   (C++17)
   transform_exclusive_scan
   (C++17)
   Bit operations
   has_single_bit
   (C++20)
   bit_cast
   (C++20)
   bit_ceil
   (C++20)
   bit_floor
   (C++20)
   bit_width
   (C++20)
   rotl
   (C++20)
   rotr
   (C++20)
   popcount
   (C++20)
   countl_zero
   (C++20)
   countl_one
   (C++20)
   countr_zero
   (C++20)
   countr_one
   (C++20)
   byteswap
   (C++23)
   endian
   (C++20)

   Floating-point environment
   Functions
   feclearexcept
   (C++11)
   fetestexcept
   (C++11)
   feraiseexcept
   (C++11)
   fegetexceptflagfesetexceptflag
   (C++11)(C++11)
   fegetroundfesetround
   (C++11)(C++11)
   fegetenvfesetenv
   (C++11)(C++11)
   feholdexcept
   (C++11)
   feupdateenv
   (C++11)
   Macro constants
   FE_ALL_EXCEPTFE_DIVBYZEROFE_INEXACTFE_INVALIDFE_OVERFLOWFE_UNDERFLOW
   (C++11)(C++11)(C++11)(C++11)(C++11)(C++11)
   FE_DOWNWARDFE_TONEARESTFE_TOWARDZEROFE_UPWARD
   (C++11)(C++11)(C++11)(C++11)
   FE_DFL_ENV
   (C++11)

   The floating-point environment is the set of floating-point status
   flags and control modes supported by the implementation. It is
   thread-local. Each thread inherits the initial state of its
   floating-point environment from the parent thread. Floating-point
   operations modify the floating-point status flags to indicate abnormal
   results or auxiliary information. The state of floating-point control
   modes affects the outcomes of some floating-point operations.

   The floating-point environment access and modification is only
   meaningful when #pragma STDC FENV_ACCESS is supported and is set to ON.
   Otherwise the implementation is free to assume that floating-point
   control modes are always the default ones and that floating-point
   status flags are never tested or modified. In practice, few current
   compilers, such as HP aCC, Oracle Studio, or IBM XL, support the
   #pragma explicitly, but most compilers allow meaningful access to the
   floating-point environment anyway.

Types

   Defined in header <cfenv>
   fenv_t The type representing the entire floating-point environment
   fexcept_t The type representing all floating-point status flags
   collectively

Functions

   feclearexcept
   (C++11)
   clears the specified floating-point status flags
   (function)
   fetestexcept
   (C++11)
   determines which of the specified floating-point status flags are set
   (function)
   feraiseexcept
   (C++11)
   raises the specified floating-point exceptions
   (function)
   fegetexceptflagfesetexceptflag
   (C++11)(C++11)
   copies the state of the specified floating-point status flags from or
   to the floating-point environment
   (function)
   fegetroundfesetround
   (C++11)(C++11)
   gets or sets rounding direction
   (function)
   fegetenvfesetenv
   (C++11)
   saves or restores the current floating-point environment
   (function)
   feholdexcept
   (C++11)
   saves the environment, clears all status flags and ignores all future
   errors
   (function)
   feupdateenv
   (C++11)
   restores the floating-point environment and raises the previously
   raised exceptions
   (function)

Macros

   FE_ALL_EXCEPTFE_DIVBYZEROFE_INEXACTFE_INVALIDFE_OVERFLOWFE_UNDERFLOW
   (C++11)
   floating-point exceptions
   (macro constant)
   FE_DOWNWARDFE_TONEARESTFE_TOWARDZEROFE_UPWARD
   (C++11)
   floating-point rounding direction
   (macro constant)
   FE_DFL_ENV
   (C++11)
   default floating-point environment
   (macro constant)

Notes

   The floating-point exceptions are not related to the C++ exceptions.
   When a floating-point operation raises a floating-point exception, the
   status of the floating-point environment changes, which can be tested
   with std::fetestexcept, but the execution of a C++ program on most
   implementations continues uninterrupted.

   There are compiler extensions that may be used to generate C++
   exceptions automatically whenever a floating-point exception is raised:
     * GNU libc function feenableexcept() enables trapping of the
       floating-point exceptions, which generates the signal SIGFPE. If
       the compiler option -fnon-call-exceptions was used, the handler for
       that signal may throw a user-defined C++ exception.
     * MSVC function _control87() enables trapping of the floating-point
       exceptions, which generates a hardware exception, which can be
       converted to C++ exceptions with _set_se_translator.

See also

   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/numeric/fenv&old
   id=159329"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 18 September 2023, at 06:41.
     * This page has been accessed 161,795 times.
