std::bad_expected_access

   From cppreference.com
   < cpp | utility | expected

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Utilities library
   Language support
   Type support (basic types, RTTI)
   Library feature-test macros (C++20)
   Dynamic memory management
   Program utilities
   Coroutine support (C++20)
   Variadic functions
   is_constant_evaluated
   (C++20)
   is_within_lifetime
   (C++26)
   initializer_list
   (C++11)
   source_location
   (C++20)
   Debugging support
   is_debugger_present
   (C++26)
   breakpoint_if_debugging
   (C++26)
   breakpoint
   (C++26)
   Three-way comparison
   three_way_comparablethree_way_comparable_with
   (C++20)(C++20)
   strong_ordering
   (C++20)
   weak_ordering
   (C++20)
   partial_ordering
   (C++20)
   common_comparison_category
   (C++20)
   compare_three_way_result
   (C++20)
   compare_three_way
   (C++20)
   strong_order
   (C++20)
   weak_order
   (C++20)
   partial_order
   (C++20)
   compare_strong_order_fallback
   (C++20)
   compare_weak_order_fallback
   (C++20)
   compare_partial_order_fallback
   (C++20)
   is_eqis_ltis_lteq
   (C++20)(C++20)(C++20)
   is_neqis_gtis_gteq
   (C++20)(C++20)(C++20)
   General utilities
   Date and time
   Function objects
   Formatting library (C++20)
   bitset
   hash
   (C++11)
   Relational operators (deprecated in C++20)
   rel_ops::operator!=rel_ops::operator>

   rel_ops::operator<=rel_ops::operator>=
   Integer comparison functions
   cmp_equalcmp_lesscmp_less_than
   (C++20)(C++20)(C++20)
   cmp_not_equalcmp_greatercmp_greater_than
   (C++20)(C++20)(C++20)
   in_range
   (C++20)
   Swap and type operations
   swap
   ranges::swap
   (C++20)
   exchange
   (C++14)
   declval
   (C++11)
   to_underlying
   (C++23)
   forward
   (C++11)
   forward_like
   (C++23)
   move
   (C++11)
   move_if_noexcept
   (C++11)
   as_const
   (C++17)
   Common vocabulary types
   pair
   tuple
   (C++11)
   optional
   (C++17)
   any
   (C++17)
   variant
   (C++17)
   tuple_size
   (C++11)
   tuple_element
   (C++11)
   apply
   (C++17)
   make_from_tuple
   (C++17)
   expected
   (C++23)
   Elementary string conversions
   to_chars
   (C++17)
   from_chars
   (C++17)
   chars_format
   (C++17)
   to_chars_result
   (C++17)
   from_chars_result
   (C++17)

   std::expected
   Member functions
   expected::expected
   expected::~expected
   expected::operator=
   Observers
   expected::operator->expected::operator*
   expected::operator boolexpected::has_value
   expected::value
   expected::error
   expected::value_or
   Monadic operations
   expected::and_then
   expected::or_else
   expected::transform
   expected::transform_error
   Modifiers
   expected::emplace
   expected::swap
   Non-member functions
   operator==
   swap(std::expected)
   Helper classes
   unexpected
   bad_expected_access
   unexpect_tunexpect

   Defined in header <expected>
   template< class E >
   class bad_expected_access : public std::bad_expected_access<void>
   (1)                         (since C++23)
   template<>
   class bad_expected_access<void> : public std::exception
   (2)                         (since C++23)
   1) Defines a type of object to be thrown by std::expected::value when
   accessing an expected object that contains an unexpected value.
   bad_expected_access<E> stores a copy of the unexpected value.
   2) bad_expected_access<void> is the base class of all other
   bad_expected_access specializations.
   This section is incomplete
   Reason: inheritance diagram

Members of the primary template

   (constructor)
   constructs a bad_expected_access object
   (public member function)
   error
   returns the stored value
   (public member function)
   what
   returns the explanatory string
   (public member function)

std::bad_expected_access::bad_expected_access

   explicit bad_expected_access( E e );

   Constructs a new bad_expected_access<E> object. Initializes the stored
   value with std::move(e).

std::bad_expected_access::error

   const E& error() const & noexcept;

   E& error() & noexcept;
   const E&& error() const && noexcept;
   E&& error() && noexcept;

   Returns a reference to the stored value.

std::bad_expected_access::what

   const char* what() const noexcept override;

   Returns the explanatory string.

Parameters

   (none)

Return value

   Pointer to a null-terminated string with explanatory information. The
   string is suitable for conversion and display as a std::wstring. The
   pointer is guaranteed to be valid at least until the exception object
   from which it is obtained is destroyed, or until a non-const member
   function (e.g. copy assignment operator) on the exception object is
   called.

Notes

   Implementations are allowed but not required to override what().

Members of the bad_expected_access<void> specialization

   (constructor)
   constructs a bad_expected_access<void> object
   (protected member function)
   (destructor)
   destroys the bad_expected_access<void> object
   (protected member function)
   operator=
   replaces the bad_expected_access<void> object
   (protected member function)
   what
   returns the explanatory string
   (public member function)

   Special member functions of bad_expected_access<void> are protected.
   They can only be called by derived classes.

Example

   This section is incomplete
   Reason: no example
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/utility/expected
   /bad_expected_access&oldid=150644"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 17 April 2023, at 10:48.
     * This page has been accessed 9,246 times.
