C++ named requirements: LegacyIterator

   From cppreference.com
   < cpp | named req

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   C++ named requirements
   Basic
   DefaultConstructible
   CopyAssignable
   CopyConstructible
   MoveAssignable
   (C++11)
   MoveConstructible
   (C++11)
   Destructible
   Type properties
   ScalarType
   TriviallyCopyable
   (C++11)
   StandardLayoutType
   (C++11)
   PODType
   TrivialType
   (C++11)
   ImplicitLifetimeType
   Library-Wide
   EqualityComparable
   LessThanComparable
   Swappable
   ValueSwappable
   (C++11)
   NullablePointer
   (C++11)
   Hash
   (C++11)
   Allocator
   FunctionObject
   Callable
   Predicate
   BinaryPredicate
   Compare
   Container
   Container
   SequenceContainer
   ContiguousContainer
   (C++17)
   ReversibleContainer
   AssociativeContainer
   AllocatorAwareContainer
   UnorderedAssociativeContainer
   (C++11)
   Container Elements
   DefaultInsertable
   (C++11)
   CopyInsertable
   (C++11)
   MoveInsertable
   (C++11)
   EmplaceConstructible
   (C++11)
   Erasable
   (C++11)
   Iterator
   LegacyIterator
   LegacyOutputIterator
   LegacyInputIterator
   LegacyForwardIterator
   LegacyBidirectionalIterator
   LegacyRandomAccessIterator
   LegacyContiguousIterator
   (C++17)
   ConstexprIterator
   (C++20)
   Stream I/O
   FormattedInputFunction
   UnformattedInputFunction
   FormattedOutputFunction
   UnformattedOutputFunction
   Formatters
   BasicFormatter
   (C++20)
   Formatter
   (C++20)
   Random Numbers
   SeedSequence
   (C++11)
   RandomNumberEngine
   (C++11)
   RandomNumberDistribution
   (C++11)
   UniformRandomBitGenerator
   (C++11)
   RandomNumberEngineAdaptor
   (C++11)
   Concurrency
   BasicLockable
   (C++11)
   Lockable
   (C++11)
   TimedLockable
   (C++11)
   SharedLockable
   (C++14)
   SharedTimedLockable
   (C++14)
   Mutex
   (C++11)
   TimedMutex
   (C++11)
   SharedMutex
   (C++17)
   SharedTimedMutex
   (C++14)
   Ranges
   RangeAdaptorObject
   (C++20)
   RangeAdaptorClosureObject
   (C++20)
   Other
   CharTraits
   RegexTraits
   (C++11)
   BitmaskType
   LiteralType
   (C++11)
   NumericType
   UnaryTypeTrait
   (C++11)
   BinaryTypeTrait
   (C++11)
   TransformationTrait
   (C++11)
   Clock
   (C++11)
   TrivialClock
   (C++11)

   The LegacyIterator requirements describe types that can be used to
   identify and traverse the elements of a container.

   LegacyIterator is the base set of requirements used by other iterator
   types: LegacyInputIterator, LegacyOutputIterator,
   LegacyForwardIterator, LegacyBidirectionalIterator, and
   LegacyRandomAccessIterator. Iterators can be thought of as an
   abstraction of pointers.

   All the categories of iterators require only those functions that are
   realizable for a given category in constant time (amortized).
   Therefore, requirement tables and concept definitions (since C++20)for
   the iterators do not specify complexity.

Requirements

   The type It satisfies LegacyIterator if
     * The type It satisfies CopyConstructible, and
     * The type It satisfies CopyAssignable, and
     * The type It satisfies Destructible, and
     * lvalues of type It satisfy Swappable, and
     * std::iterator_traits<It> has member typedefs value_type(until
       C++20), difference_type, reference, pointer, and iterator_category,
       and
     * Given r, an lvalue of type It, the following expressions must be
       valid and have their specified effects:

   Expression Return Type Precondition
   *r unspecified r is dereferenceable
   ++r It& r is incrementable (the behavior of the expression ++r is
   defined)

Concept

   For the definition of std::iterator_traits, the following
   exposition-only concept is defined.
   template<class I>

   concept __LegacyIterator =
       requires(I i)
       {
           {   *i } -> __Referenceable;
           {  ++i } -> std::same_as<I&>;
           { *i++ } -> __Referenceable;
       } && std::copyable<I>;

   where the exposition-only concept __Referenceable<T> is satisfied if
   and only if T& is a valid type (in particular, T must not be void).
   (since C++20)

Defect reports

   The following behavior-changing defect reports were applied
   retroactively to previously published C++ standards.
   DR Applied to Behavior as published Correct behavior
   LWG 3420 C++20 the exposition-only concept checks copyable first
   copyable is checked only if the requires-expression yields true

See also

   input_or_output_iterator
   (C++20)
   specifies that objects of a type can be incremented and dereferenced
   (concept)
   Iterator library provides definitions for iterators, iterator traits,
   adaptors, and utility functions
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/named_req/Iterat
   or&oldid=169689"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 9 February 2024, at 01:08.
     * This page has been accessed 349,576 times.
