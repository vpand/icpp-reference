std::numeric_limits<T>::traps

   From cppreference.com
   < cpp | types | numeric limits

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Utilities library
   Language support
   Type support (basic types, RTTI)
   Library feature-test macros (C++20)
   Dynamic memory management
   Program utilities
   Coroutine support (C++20)
   Variadic functions
   is_constant_evaluated
   (C++20)
   is_within_lifetime
   (C++26)
   initializer_list
   (C++11)
   source_location
   (C++20)
   Debugging support
   is_debugger_present
   (C++26)
   breakpoint_if_debugging
   (C++26)
   breakpoint
   (C++26)
   Three-way comparison
   three_way_comparablethree_way_comparable_with
   (C++20)(C++20)
   strong_ordering
   (C++20)
   weak_ordering
   (C++20)
   partial_ordering
   (C++20)
   common_comparison_category
   (C++20)
   compare_three_way_result
   (C++20)
   compare_three_way
   (C++20)
   strong_order
   (C++20)
   weak_order
   (C++20)
   partial_order
   (C++20)
   compare_strong_order_fallback
   (C++20)
   compare_weak_order_fallback
   (C++20)
   compare_partial_order_fallback
   (C++20)
   is_eqis_ltis_lteq
   (C++20)(C++20)(C++20)
   is_neqis_gtis_gteq
   (C++20)(C++20)(C++20)
   General utilities
   Date and time
   Function objects
   Formatting library (C++20)
   bitset
   hash
   (C++11)
   Relational operators (deprecated in C++20)
   rel_ops::operator!=rel_ops::operator>

   rel_ops::operator<=rel_ops::operator>=
   Integer comparison functions
   cmp_equalcmp_lesscmp_less_than
   (C++20)(C++20)(C++20)
   cmp_not_equalcmp_greatercmp_greater_than
   (C++20)(C++20)(C++20)
   in_range
   (C++20)
   Swap and type operations
   swap
   ranges::swap
   (C++20)
   exchange
   (C++14)
   declval
   (C++11)
   to_underlying
   (C++23)
   forward
   (C++11)
   forward_like
   (C++23)
   move
   (C++11)
   move_if_noexcept
   (C++11)
   as_const
   (C++17)
   Common vocabulary types
   pair
   tuple
   (C++11)
   optional
   (C++17)
   any
   (C++17)
   variant
   (C++17)
   tuple_size
   (C++11)
   tuple_element
   (C++11)
   apply
   (C++17)
   make_from_tuple
   (C++17)
   expected
   (C++23)
   Elementary string conversions
   to_chars
   (C++17)
   from_chars
   (C++17)
   chars_format
   (C++17)
   to_chars_result
   (C++17)
   from_chars_result
   (C++17)

   Type support
   Basic types
   Fixed width integer types (C++11)
   Fixed width floating-point types (C++23)
   ptrdiff_t
   size_t
   max_align_t
   (C++11)
   byte
   (C++17)
   nullptr_t
   (C++11)
   offsetof
   NULL
   Numeric limits
   numeric_limits
   C numeric limits interface
   Runtime type information
   type_info
   type_index
   (C++11)
   bad_typeid
   bad_cast

   std::numeric_limits
   Static constants
   numeric_limits::is_specialized
   numeric_limits::is_signed
   numeric_limits::is_integer
   numeric_limits::is_exact
   numeric_limits::has_infinity
   numeric_limits::has_quiet_NaN
   numeric_limits::has_signaling_NaN
   numeric_limits::has_denorm
   numeric_limits::has_denorm_loss
   numeric_limits::round_style
   numeric_limits::is_iec559
   numeric_limits::is_bounded
   numeric_limits::is_modulo
   numeric_limits::digits
   numeric_limits::digits10
   numeric_limits::max_digits10
   (C++11)
   numeric_limits::radix
   numeric_limits::min_exponent
   numeric_limits::min_exponent10
   numeric_limits::max_exponent
   numeric_limits::max_exponent10
   numeric_limits::traps
   numeric_limits::tinyness_before
   Static member functions
   numeric_limits::min
   numeric_limits::lowest
   (C++11)
   numeric_limits::max
   numeric_limits::epsilon
   numeric_limits::round_error
   numeric_limits::infinity
   numeric_limits::quiet_NaN
   numeric_limits::signaling_NaN
   numeric_limits::denorm_min
   Helper types
   float_round_style
   float_denorm_style

   static const bool traps;
                               (until C++11)
   static constexpr bool traps;
                               (since C++11)

   The value of std::numeric_limits<T>::traps is true for all arithmetic
   types T that have at least one value at the start of the program that,
   if used as an argument to an arithmetic operation, will generate a
   trap.

Standard specializations

   T                                value of std::numeric_limits<T>::traps
   /* non-specialized */            false
   bool                             false
   char                             usually true
   signed char                      usually true
   unsigned char                    usually true
   wchar_t                          usually true
   char8_t (since C++20)            usually true
   char16_t (since C++11)           usually true
   char32_t (since C++11)           usually true
   short                            usually true
   unsigned short                   usually true
   int                              usually true
   unsigned int                     usually true
   long                             usually true
   unsigned long                    usually true
   long long (since C++11)          usually true
   unsigned long long (since C++11) usually true
   float                            usually false
   double                           usually false
   long double                      usually false

Notes

   On most platforms integer division by zero always traps, and
   std::numeric_limits<T>::traps is true for all integer types that
   support the value 0. The exception is the type bool: even though
   division by false traps due to integral promotion from bool to int, it
   is the zero-valued int that traps. Zero is not a value of type bool.

   On most platforms, floating-point exceptions may be turned on and off
   at run time (e.g. feenableexcept() on Linux or _controlfp on Windows),
   in which case the value of std::numeric_limits<T>::traps for
   floating-point types reflects the state of floating-point trapping
   facility at the time of program startup, which is false on most modern
   systems. An exception would be a DEC Alpha program, where it is true if
   compiled without -ieee.

Example

   Run this code
#include <iostream>
#include <limits>

int main()
{
    std::cout << std::boolalpha
              << "bool:     traps = " << std::numeric_limits<bool>::traps << '\n
'
              << "char:     traps = " << std::numeric_limits<char>::traps << '\n
'
              << "char16_t: traps = " << std::numeric_limits<char16_t>::traps <<
 '\n'
              << "long:     traps = " << std::numeric_limits<long>::traps << '\n
'
              << "float:    traps = " << std::numeric_limits<float>::traps << '\
n';
}

   Possible output:
// GCC output:
bool:     traps = true
char:     traps = true
char16_t: traps = true
long:     traps = true
float:    traps = false

// Clang output:
bool:     traps = false
char:     traps = true
char16_t: traps = true
long:     traps = true
float:    traps = false

Defect reports

   The following behavior-changing defect reports were applied
   retroactively to previously published C++ standards.
   DR Applied to Behavior as published Correct behavior
   LWG 497 C++98 it was unclear what is returned if trapping
   is enabled or disabled at runtime returns the enable status
   at the start of the program

See also

   Floating-point environment
   tinyness_before
   [static]
   identifies floating-point types that detect tinyness before rounding
   (public static member constant)
   has_denorm_loss
   [static]
   identifies the floating-point types that detect loss of precision as
   denormalization loss rather than inexact result
   (public static member constant)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/types/numeric_li
   mits/traps&oldid=148550"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 24 February 2023, at 13:19.
     * This page has been accessed 25,917 times.
