std::partial_sort

   From cppreference.com
   < cpp | algorithm

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Algorithm library
   Constrained algorithms and algorithms on ranges (C++20)
   Constrained algorithms, e.g. ranges::copy, ranges::sort, ...
   Execution policies (C++17)
   is_execution_policy
   (C++17)
   execution::seqexecution::parexecution::par_unseqexecution::unseq
   (C++17)    (C++17)(C++17)(C++20)
   execution::sequenced_policyexecution::parallel_policyexecution::paralle
   l_unsequenced_policyexecution::parallel_unsequenced
   (C++17)(C++17)(C++17)(C++20)
   Non-modifying sequence operations
   Batch operations
   for_each
   for_each_n
   (C++17)
   Search operations
   all_ofany_ofnone_of
   (C++11)                (C++11)(C++11)
   countcount_if
   mismatch
   equal
   findfind_iffind_if_not
   (C++11)
   find_end
   find_first_of
   adjacent_find
   search
   search_n
   Modifying sequence operations
   Copy operations
   copycopy_if
   (C++11)
   copy_backward
   copy_n
   (C++11)
   move
   (C++11)
   move_backward
   (C++11)
   Swap operations
   swap
   iter_swap
   swap_ranges
   Transformation operations
   replacereplace_if
   transform
   replace_copyreplace_copy_if
   Generation operations
   fill
   fill_n
   generate
   generate_n
   Removing operations
   removeremove_if
   unique
   remove_copyremove_copy_if
   unique_copy
   Order-changing operations
   reverse
   reverse_copy
   rotate
   rotate_copy
   random_shuffleshuffle
   (until C++17)(C++11)
   shift_leftshift_right
   (C++20)(C++20)
   Sampling operations
   sample
   (C++17)
   Sorting and related operations
   Partitioning operations
   partition
   partition_copy
   (C++11)
   stable_partition
   is_partitioned
   (C++11)
   partition_point
   (C++11)
   Sorting operations
   sort
   stable_sort
   partial_sort
   partial_sort_copy
   is_sorted
   (C++11)
   is_sorted_until
   (C++11)
   nth_element
   Binary search operations
   (on partitioned ranges)
   lower_bound
   upper_bound
   equal_range
   binary_search
   Set operations (on sorted ranges)
   includes
   set_union
   set_intersection
   set_difference
   set_symmetric_difference
   Merge operations (on sorted ranges)
   merge
   inplace_merge
   Heap operations
   push_heap
   pop_heap
   make_heap
   sort_heap
   is_heap
   (C++11)
   is_heap_until
   (C++11)
   Minimum/maximum operations
   max
   min
   minmax
   (C++11)
   clamp
   (C++17)
   max_element
   min_element
   minmax_element
   (C++11)
   Lexicographical comparison operations
   lexicographical_compare
   lexicographical_compare_three_way
   (C++20)
   Permutation operations
   next_permutation
   prev_permutation
   is_permutation
   (C++11)
   C library
   qsort
   bsearch
   Numeric operations
   iota
   (C++11)
   inner_product
   adjacent_difference

   accumulate
   reduce
   (C++17)
   transform_reduce
   (C++17)
   partial_sum
   inclusive_scan
   (C++17)
   exclusive_scan
   (C++17)
   transform_inclusive_scan
   (C++17)
   transform_exclusive_scan
   (C++17)
   Operations on uninitialized memory
   uninitialized_copy
   uninitialized_move
   (C++17)
   uninitialized_fill
   uninitialized_copy_n
   (C++11)
   uninitialized_move_n
   (C++17)
   uninitialized_fill_n
   destroy
   (C++17)
   destroy_n
   (C++17)
   destroy_at
   (C++17)
   construct_at
   (C++20)
   uninitialized_default_construct
   (C++17)
   uninitialized_value_construct
   (C++17)
   uninitialized_default_construct_n
   (C++17)
   uninitialized_value_construct_n
   (C++17)

   Defined in header <algorithm>
   template< class RandomIt >
   void partial_sort( RandomIt first, RandomIt middle, RandomIt last );
   (1) (constexpr since C++20)
   template< class ExecutionPolicy, class RandomIt >

   void partial_sort( ExecutionPolicy&& policy,
                      RandomIt first, RandomIt middle, RandomIt last );
   (2) (since C++17)
   template< class RandomIt, class Compare >

   void partial_sort( RandomIt first, RandomIt middle, RandomIt last,
                      Compare comp );
   (3) (constexpr since C++20)
   template< class ExecutionPolicy, class RandomIt, class Compare >

   void partial_sort( ExecutionPolicy&& policy,
                      RandomIt first, RandomIt middle, RandomIt last,
                      Compare comp );
   (4) (since C++17)

   Rearranges elements such that the range [first, middle) contains the
   sorted middle - first smallest elements in the range [first, last).

   The order of equal elements is not guaranteed to be preserved. The
   order of the remaining elements in the range [middle, last) is
   unspecified.
   1) Elements are sorted with respect to operator<(until
   C++20)std::less{}(since C++20).
   3) Elements are sorted with respect to comp.
   2,4) Same as (1,3), but executed according to policy.
   These overloads participate in overload resolution only if

   std::is_execution_policy_v<std::decay_t<ExecutionPolicy>> is true.
   (until C++20)

   std::is_execution_policy_v<std::remove_cvref_t<ExecutionPolicy>> is
   true.
   (since C++20)

   If any of the following conditions is satisfied, the behavior is
   undefined:
     * [first, middle) or [middle, last) is not a valid range.

     * The type of *first is not Swappable.

   (until C++11)
     * RandomIt is not ValueSwappable.
     * The type of *first is not MoveConstructible.
     * The type of *first is not MoveAssignable.

   (since C++11)

Parameters

   first, last - random access iterators defining the range
   middle - random access iterator defining the one-past-the-end iterator
   of the range to be sorted
   policy - the execution policy to use. See execution policy for details.
   comp - comparison function object (i.e. an object that satisfies the
   requirements of Compare) which returns true if the first argument is
   less than (i.e. is ordered before) the second.

   The signature of the comparison function should be equivalent to the
   following:

   bool cmp(const Type1& a, const Type2& b);

   While the signature does not need to have const&, the function must not
   modify the objects passed to it and must be able to accept all values
   of type (possibly const) Type1 and Type2 regardless of value category
   (thus, Type1& is not allowed, nor is Type1 unless for Type1 a move is
   equivalent to a copy(since C++11)).
   The types Type1 and Type2 must be such that an object of type RandomIt
   can be dereferenced and then implicitly converted to both of them.
   Type requirements
   -
   RandomIt must meet the requirements of LegacyRandomAccessIterator.
   -
   Compare must meet the requirements of Compare.

Complexity

   Given \(\scriptsize M\)M as middle - first, \(\scriptsize N\)N as last
   - first:
   1,2) Approximately \(\scriptsize N \cdot \log(M)\)N·log(M) comparisons
   using operator<(until C++20)std::less{}(since C++20).
   3,4) Approximately \(\scriptsize N \cdot \log(M)\)N·log(M) applications
   of the comparator comp.

Exceptions

   The overloads with a template parameter named ExecutionPolicy report
   errors as follows:
     * If execution of a function invoked as part of the algorithm throws
       an exception and ExecutionPolicy is one of the standard policies,
       std::terminate is called. For any other ExecutionPolicy, the
       behavior is implementation-defined.
     * If the algorithm fails to allocate memory, std::bad_alloc is
       thrown.

Possible implementation

   See also the implementations in libstdc++ and libc++.
        partial_sort (1)
template<typename RandomIt>
constexpr //< since C++20
void partial_sort(RandomIt first, RandomIt middle, RandomIt last)
{
    typedef typename std::iterator_traits<RandomIt>::value_type VT;
    std::partial_sort(first, middle, last, std::less<VT>());
}

        partial_sort (3)
namespace impl
{
    template<typename RandomIt, typename Compare>
    constexpr //< since C++20
    void sift_down(RandomIt first, RandomIt last, const Compare& comp)
    {
        // sift down element at "first"
        const auto length = static_cast<std::size_t>(last - first);
        std::size_t current = 0;
        std::size_t next = 2;
        while (next < length)
        {
            if (comp(*(first + next), *(first + (next - 1))))
                --next;
            if (!comp(*(first + current), *(first + next)))
                return;
            std::iter_swap(first + current, first + next);
            current = next;
            next = 2 * current + 2;
        }
        --next;
        if (next < length && comp(*(first + current), *(first + next)))
            std::iter_swap(first + current, first + next);
    }

    template<typename RandomIt, typename Compare>
    constexpr //< since C++20
    void heap_select(RandomIt first, RandomIt middle, RandomIt last, const Compa
re& comp)
    {
        std::make_heap(first, middle, comp);
        for (auto i = middle; i != last; ++i)
        {
            if (comp(*i, *first))
            {
                std::iter_swap(first, i);
                sift_down(first, middle, comp);
            }
        }
    }
} // namespace impl

template<typename RandomIt, typename Compare>
constexpr //< since C++20
void partial_sort(RandomIt first, RandomIt middle, RandomIt last, Compare comp)
{
    impl::heap_select(first, middle, last, comp);
    std::sort_heap(first, middle, comp);
}

Notes

Algorithm

   The algorithm used is typically heap select to select the smallest
   elements, and heap sort to sort the selected elements in the heap in
   ascending order.

   To select elements, a heap is used (see heap). For example, for
   operator< as comparison function, max-heap is used to select middle -
   first smallest elements.

   Heap sort is used after selection to sort [first, middle) selected
   elements (see std::sort_heap).

Intended use

   std::partial_sort algorithms are intended to be used for small constant
   numbers of [first, middle) selected elements.

Example

   Run this code
#include <algorithm>
#include <array>
#include <functional>
#include <iostream>

void print(const auto& s, int middle)
{
    for (int a : s)
        std::cout << a << ' ';
    std::cout << '\n';
    if (middle > 0)
    {
        while (middle-- > 0)
            std::cout << "--";
        std::cout << '^';
    }
    else if (middle < 0)
    {
        for (auto i = s.size() + middle; --i; std::cout << "  ")
        {}

        for (std::cout << '^'; middle++ < 0; std::cout << "--")
        {}
    }
    std::cout << '\n';
};

int main()
{
    std::array<int, 10> s{5, 7, 4, 2, 8, 6, 1, 9, 0, 3};
    print(s, 0);
    std::partial_sort(s.begin(), s.begin() + 3, s.end());
    print(s, 3);
    std::partial_sort(s.rbegin(), s.rbegin() + 4, s.rend());
    print(s, -4);
    std::partial_sort(s.rbegin(), s.rbegin() + 5, s.rend(), std::greater{});
    print(s, -5);
}

   Possible output:
5 7 4 2 8 6 1 9 0 3

0 1 2 7 8 6 5 9 4 3
------^
4 5 6 7 8 9 3 2 1 0
          ^--------
4 3 2 1 0 5 6 7 8 9
        ^----------

Defect reports

   The following behavior-changing defect reports were applied
   retroactively to previously published C++ standards.
   DR Applied to Behavior as published Correct behavior
   P0896R4 C++98 [first, middle) and [middle, last)
   were not required to be valid ranges the behavior is undefined
   if any of them is invalid

See also

   nth_element
   partially sorts the given range making sure that it is partitioned by
   the given element
   (function template)
   partial_sort_copy
   copies and partially sorts a range of elements
   (function template)
   stable_sort
   sorts a range of elements while preserving order between equal elements
   (function template)
   sort
   sorts a range into ascending order
   (function template)
   ranges::partial_sort
   (C++20)
   sorts the first N elements of a range
   (niebloid)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/algorithm/partia
   l_sort&oldid=170564"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 2 April 2024, at 00:27.
     * This page has been accessed 235,459 times.
