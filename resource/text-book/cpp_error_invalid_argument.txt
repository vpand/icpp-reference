std::invalid_argument

   From cppreference.com
   < cpp | error

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Diagnostics library
   Exception handling
   exception
   uncaught_exceptionuncaught_exceptions
   (until C++20*)(C++17)
   exception_ptr
   (C++11)
   make_exception_ptr
   (C++11)
   current_exception
   (C++11)
   rethrow_exception
   (C++11)
   nested_exception
   (C++11)
   throw_with_nested
   (C++11)
   rethrow_if_nested
   (C++11)
   Exception handling failures
   terminate
   terminate_handler
   get_terminate
   (C++11)
   set_terminate
   bad_exception
   unexpected
   (until C++17*)
   unexpected_handler
   (until C++17*)
   get_unexpected
   (C++11)(until C++17*)
   set_unexpected
   (until C++17*)
   Error codes
   Error codes
   errno
   Exception categories
   logic_error
   invalid_argument
   domain_error
   length_error
   out_of_range
   runtime_error
   range_error
   overflow_error
   underflow_error
   tx_exception
   (TM TS)
   System error support
   error_category
   (C++11)
   generic_category
   (C++11)
   system_category
   (C++11)
   error_condition
   (C++11)
   errc
   (C++11)
   error_code
   (C++11)
   system_error
   (C++11)
   Assertions
   assert
   Stacktrace
   stacktrace_entry
   (C++23)
   basic_stacktrace
   (C++23)

   Defined in header <stdexcept>
   class invalid_argument;

   Defines a type of object to be thrown as exception. It reports errors
   that arise because an argument value has not been accepted.

   This exception is thrown by std::bitset::bitset, and the std::stoi and
   std::stof families of functions.
   std-invalid argument-inheritance.svg

   Inheritance diagram

Member functions

   (constructor)
   constructs a new invalid_argument object with the given message
   (public member function)
   operator=
   replaces the invalid_argument object
   (public member function)

std::invalid_argument::invalid_argument

   invalid_argument( const std::string& what_arg );
   (1)
   invalid_argument( const char* what_arg );
   (2)
   invalid_argument( const invalid_argument& other );
   (3)                                               (noexcept since C++11)
   1) Constructs the exception object with what_arg as explanatory string.
   After construction, std::strcmp(what(), what_arg.c_str()) == 0.
   2) Constructs the exception object with what_arg as explanatory string.
   After construction, std::strcmp(what(), what_arg) == 0.
   3) Copy constructor. If *this and other both have dynamic type
   std::invalid_argument then std::strcmp(what(), other.what()) == 0. No
   exception can be thrown from the copy constructor.

Parameters

   what_arg - explanatory string
   other    - another exception object to copy

Exceptions

   1,2) May throw std::bad_alloc.

Notes

   Because copying std::invalid_argument is not permitted to throw
   exceptions, this message is typically stored internally as a
   separately-allocated reference-counted string. This is also why there
   is no constructor taking std::string&&: it would have to copy the
   content anyway.

   Before the resolution of LWG issue 254, the non-copy constructor can
   only accept std::string. It makes dynamic allocation mandatory in order
   to construct a std::string object.

   After the resolution of LWG issue 471, a derived standard exception
   class must have a publicly accessible copy constructor. It can be
   implicitly defined as long as the explanatory strings obtained by
   what() are the same for the original object and the copied object.

std::invalid_argument::operator=

   invalid_argument& operator=( const invalid_argument& other );
   (noexcept since C++11)

   Assigns the contents with those of other. If *this and other both have
   dynamic type std::invalid_argument then std::strcmp(what(),
   other.what()) == 0 after assignment. No exception can be thrown from
   the copy assignment operator.

Parameters

   other - another exception object to assign with

Return value

   *this

Notes

   After the resolution of LWG issue 471, a derived standard exception
   class must have a publicly accessible copy assignment operator. It can
   be implicitly defined as long as the explanatory strings obtained by
   what() are the same for the original object and the copied object.

Inherited from std::logic_error

Inherited from std::exception

Member functions

   (destructor)
   [virtual]
   destroys the exception object
   (virtual public member function of std::exception)
   what
   [virtual]
   returns an explanatory string
   (virtual public member function of std::exception)

Notes

   The purpose of this exception type is similar to the error condition
   std::errc::invalid_argument (thrown in std::system_error from member
   functions of std::thread) and the related errno constant EINVAL.

Example

   Run this code
#include <bitset>
#include <iostream>
#include <stdexcept>
#include <string>

int main()
{
    try
    {
        std::bitset<4>{"012"}; // Throws: only '0' or '1' expected
    }
    catch (std::invalid_argument const& ex)
    {
        std::cout << "#1: " << ex.what() << '\n';
    }

    try
    {
        [[maybe_unused]] int f = std::stoi("ABBA"); // Throws: no conversion
    }
    catch (std::invalid_argument const& ex)
    {
        std::cout << "#2: " << ex.what() << '\n';
    }

    try
    {
        [[maybe_unused]] float f = std::stof("(3.14)"); // Throws: no conversion
    }
    catch (std::invalid_argument const& ex)
    {
        std::cout << "#3: " << ex.what() << '\n';
    }
}

   Possible output:
#1: bitset string ctor has invalid argument
#2: stoi: no conversion
#3: stof: no conversion

Defect reports

   The following behavior-changing defect reports were applied
   retroactively to previously published C++ standards.
   DR Applied to Behavior as published Correct behavior
   LWG 254 C++98 the constructor accepting const char* was missing added
   LWG 471 C++98 the explanatory strings of std::invalid_argument's
   copies were implementation-defined they are the same as that of the
   original std::invalid_argument object
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/error/invalid_ar
   gument&oldid=144538"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 23 October 2022, at 22:51.
     * This page has been accessed 566,053 times.
