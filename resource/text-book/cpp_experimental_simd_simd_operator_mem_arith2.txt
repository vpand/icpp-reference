std::experimental::simd<T,Abi>::operator!,~,+,-

   From cppreference.com
   < cpp | experimental | simd | simd

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Experimental
   Technical Specification
   Filesystem library (filesystem TS)
   Library fundamentals (library fundamentals TS)
   Library fundamentals 2 (library fundamentals TS v2)
   Library fundamentals 3 (library fundamentals TS v3)
   Extensions for parallelism (parallelism TS)
   Extensions for parallelism 2 (parallelism TS v2)
   Extensions for concurrency (concurrency TS)
   Extensions for concurrency 2 (concurrency TS v2)
   Concepts (concepts TS)
   Ranges (ranges TS)
   Reflection (reflection TS)
   Mathematical special functions (special functions TR)
   Experimental Non-TS
   Pattern Matching
   Linear Algebra
   std::execution
   Contracts
   2D Graphics

   Extensions for parallelism v2
   Parallel exceptions
   exception_list
   Additional execution policies
   execution::vector_policy
   execution::unsequenced_policy
   Algorithms
   induction
   reductionreduction_plusreduction_minusreduction_multiplies

   reduction_bit_andreduction_bit_orreduction_bit_xorreduction_minreductio
   n_max

   for_loopfor_loop_stridedfor_loop_nfor_loop_n_strided
   execution::no_vec
   execution::ordered_update_t
   Task blocks
   task_block
   task_cancelled_exception
   define_task_blockdefine_task_block_restore_thread
   Data-parallel vectors

   SIMD library
   Main classes
   simd
   simd_mask
   ABI tags
   simd_abi::scalar
   simd_abi::fixed_size

   simd_abi::native
   simd_abi::compatible

   simd_abi::max_fixed_size
   simd_abi::deduce
   Alignment tags
   element_aligned_tagelement_aligned
   vector_aligned_tagvector_aligned
   overaligned_tagoveraligned
   Where expression
   where
   where_expression
   const_where_expression
   Casts
   simd_caststatic_simd_cast
   to_fixed_sizeto_compatibleto_native
   splitsplit_by
   concat
   Algorithms
   min
   max
   minmax
   clamp
   Reduction
   reducehminhmax
   Mask reduction
   all_ofany_ofnone_ofsome_of
   popcount
   find_first_setfind_last_set
   Traits
   is_simdis_simd_mask
   is_abi_tag
   is_simd_flag_type
   simd_size
   memory_alignment
   rebind_simdresize_simd
   Math functions

   std::experimental::simd
   Member functions
   simd
   copy_from
   copy_to
   size
   operator!operator~operator+operator-
   operator[]
   operator++operator--
   Non-member functions
   operator+operator-operator*operator/operator%operator&operator|operator
   ^operator<<operator>>

   operator+=operator-=operator*=operator/=operator%=operator&=operator|=o
   perator^=operator<<=operator>>=

   operator==operator!=operator>=operator<=operator>operator<

   mask_type operator!() const noexcept;
   (1)                                  (parallelism TS v2)
   simd operator~() const noexcept;
   (2)                                  (parallelism TS v2)
   simd operator+() const noexcept;
   (3)                                  (parallelism TS v2)
   simd operator-() const noexcept;
   (4)                                  (parallelism TS v2)

   Applies the given unary operator on each element of the simd.
   1) Returns a simd_mask<T, Abi> where the i^th element equals
   !operator[](i) for all i in the range of [0, size()).
   2) Returns a simd where each bit is the inverse of the corresponding
   bit in *this. This overload participates in overload resolution only if
   T is an integral type.
   3) Returns a copy of itself.
   4) Returns a simd where the i^th element is initialized to
   -operator[](i) for all i in the range of [0, size()).

Example

   Run this code
#include <cstddef>
#include <experimental/simd>
#include <iostream>
#include <string_view>
namespace stdx = std::experimental;

void println(std::string_view op, const stdx::native_simd_mask<int> x)
{
    std::cout << op << ": ";
    for (std::size_t i = 0; i < x.size(); ++i)
        std::cout << std::boolalpha << x[i] << ' ';
    std::cout << '\n';
}

void println(std::string_view op, const stdx::native_simd<int> x)
{
    std::cout << op << ": ";
    for (std::size_t i = 0; i < x.size(); ++i)
        std::cout << x[i] << ' ';
    std::cout << '\n';
}

int main()
{
    const stdx::native_simd<int> a([](int i) { return i; });

    println("  a", a);
    println(" !a", !a);
    println(" ~a", ~a);
    println("~~a", ~~a);
    println(" +a", +a);
    println(" -a", -a);
    println("+-a", +-a);
}

   Possible output:
  a: 0 1 2 3
 !a: true false false false
 ~a: -1 -2 -3 -4
~~a: 0 1 2 3
 +a: 0 1 2 3
 -a: 0 -1 -2 -3
+-a: 0 -1 -2 -3

   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/experimental/sim
   d/simd/operator_mem_arith2&oldid=159989"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 2 October 2023, at 07:26.
     * This page has been accessed 2,394 times.
