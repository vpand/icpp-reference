std::ranges::transform, std::ranges::unary_transform_result,
std::ranges::binary_transform_result

   From cppreference.com
   < cpp | algorithm | ranges

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Algorithm library
   Constrained algorithms and algorithms on ranges (C++20)
   Constrained algorithms, e.g. ranges::copy, ranges::sort, ...
   Execution policies (C++17)
   is_execution_policy
   (C++17)
   execution::seqexecution::parexecution::par_unseqexecution::unseq
   (C++17)    (C++17)(C++17)(C++20)
   execution::sequenced_policyexecution::parallel_policyexecution::paralle
   l_unsequenced_policyexecution::parallel_unsequenced
   (C++17)(C++17)(C++17)(C++20)
   Non-modifying sequence operations
   Batch operations
   for_each
   for_each_n
   (C++17)
   Search operations
   all_ofany_ofnone_of
   (C++11)                (C++11)(C++11)
   countcount_if
   mismatch
   equal
   findfind_iffind_if_not
   (C++11)
   find_end
   find_first_of
   adjacent_find
   search
   search_n
   Modifying sequence operations
   Copy operations
   copycopy_if
   (C++11)
   copy_backward
   copy_n
   (C++11)
   move
   (C++11)
   move_backward
   (C++11)
   Swap operations
   swap
   iter_swap
   swap_ranges
   Transformation operations
   replacereplace_if
   transform
   replace_copyreplace_copy_if
   Generation operations
   fill
   fill_n
   generate
   generate_n
   Removing operations
   removeremove_if
   unique
   remove_copyremove_copy_if
   unique_copy
   Order-changing operations
   reverse
   reverse_copy
   rotate
   rotate_copy
   random_shuffleshuffle
   (until C++17)(C++11)
   shift_leftshift_right
   (C++20)(C++20)
   Sampling operations
   sample
   (C++17)
   Sorting and related operations
   Partitioning operations
   partition
   partition_copy
   (C++11)
   stable_partition
   is_partitioned
   (C++11)
   partition_point
   (C++11)
   Sorting operations
   sort
   stable_sort
   partial_sort
   partial_sort_copy
   is_sorted
   (C++11)
   is_sorted_until
   (C++11)
   nth_element
   Binary search operations
   (on partitioned ranges)
   lower_bound
   upper_bound
   equal_range
   binary_search
   Set operations (on sorted ranges)
   includes
   set_union
   set_intersection
   set_difference
   set_symmetric_difference
   Merge operations (on sorted ranges)
   merge
   inplace_merge
   Heap operations
   push_heap
   pop_heap
   make_heap
   sort_heap
   is_heap
   (C++11)
   is_heap_until
   (C++11)
   Minimum/maximum operations
   max
   min
   minmax
   (C++11)
   clamp
   (C++17)
   max_element
   min_element
   minmax_element
   (C++11)
   Lexicographical comparison operations
   lexicographical_compare
   lexicographical_compare_three_way
   (C++20)
   Permutation operations
   next_permutation
   prev_permutation
   is_permutation
   (C++11)
   C library
   qsort
   bsearch
   Numeric operations
   iota
   (C++11)
   inner_product
   adjacent_difference

   accumulate
   reduce
   (C++17)
   transform_reduce
   (C++17)
   partial_sum
   inclusive_scan
   (C++17)
   exclusive_scan
   (C++17)
   transform_inclusive_scan
   (C++17)
   transform_exclusive_scan
   (C++17)
   Operations on uninitialized memory
   uninitialized_copy
   uninitialized_move
   (C++17)
   uninitialized_fill
   uninitialized_copy_n
   (C++11)
   uninitialized_move_n
   (C++17)
   uninitialized_fill_n
   destroy
   (C++17)
   destroy_n
   (C++17)
   destroy_at
   (C++17)
   construct_at
   (C++20)
   uninitialized_default_construct
   (C++17)
   uninitialized_value_construct
   (C++17)
   uninitialized_default_construct_n
   (C++17)
   uninitialized_value_construct_n
   (C++17)

   Constrained algorithms
   All names in this menu belong to namespace std::ranges
   Non-modifying sequence operations
   all_ofany_ofnone_of
   for_each
   for_each_n

   countcount_if
   adjacent_find
   mismatch
   equal
   lexicographical_compare

   containscontains_subrange
   (C++23)(C++23)
   findfind_iffind_if_not
   find_lastfind_last_iffind_last_if_not
   (C++23)(C++23)(C++23)
   find_end
   find_first_of
   search
   search_n
   starts_with
   (C++23)
   ends_with
   (C++23)
   Modifying sequence operations
   copycopy_if
   copy_n
   copy_backward

   move
   move_backward
   shift_leftshift_right
   (C++23)(C++23)
   fill
   fill_n
   generate
   generate_n

   transform
   swap_ranges

   shuffle
   sample
   removeremove_if
   replacereplace_if
   reverse
   rotate
   remove_copyremove_copy_if

   unique
   replace_copyreplace_copy_if
   reverse_copy
   rotate_copy
   unique_copy
   Partitioning operations
   is_partitioned

   partition_point

   partition

   partition_copy

   stable_partition
   Sorting operations
   is_sorted
   is_sorted_until

   sort
   stable_sort

   partial_sort

   nth_element
   partial_sort_copy
   Binary search operations (on sorted ranges)
   lower_bound

   upper_bound

   binary_search

   equal_range
   Set operations (on sorted ranges)
   merge
   inplace_merge

   set_difference
   set_intersection

   set_union

   includes
   set_symmetric_difference
   Heap operations
   is_heap
   is_heap_until

   make_heap

   sort_heap
   push_heap
   pop_heap
   Minimum/maximum operations
   max
   max_element

   min
   min_element

   minmax
   minmax_element

   clamp
   Permutation operations
   is_permutation

   next_permutation

   prev_permutation
   Fold operations
   fold_left
   (C++23)
   fold_left_first
   (C++23)
   fold_right
   (C++23)
   fold_right_last
   (C++23)
   fold_left_with_iter
   (C++23)
   fold_left_first_with_iter
   (C++23)
   Numeric operations
   iota
   (C++23)
   Random number generation
   generate_random
   (C++26)
   Operations on uninitialized storage
   construct_at

   destroy
   destroy_n
   destroy_at
   uninitialized_copy

   uninitialized_move
   uninitialized_fill
   uninitialized_copy_n

   uninitialized_move_n
   uninitialized_fill_n
   uninitialized_default_construct
   uninitialized_default_construct_n
   uninitialized_value_construct
   uninitialized_value_construct_n
   Return types
   in_fun_result
   in_in_result
   in_found_result

   in_out_result
   in_in_out_result

   in_out_out_result

   min_max_result
   out_value_result
   (C++23)
   in_value_result
   (C++23)

   Defined in header <algorithm>
   Call signature
   template< std::input_iterator I, std::sentinel_for<I> S,
   std::weakly_incrementable O,

             std::copy_constructible F, class Proj = std::identity >
   requires std::indirectly_writable<O,
                                     std::indirect_result_t<F&,
   std::projected<I, Proj>>>
   constexpr unary_transform_result<I, O>
       transform( I first1, S last1, O result, F op, Proj proj = {} );
   (1)                                                          (since C++20)
   template< ranges::input_range R, std::weakly_incrementable O,

             std::copy_constructible F, class Proj = std::identity >
   requires std::indirectly_writable<O,
                std::indirect_result_t<F&,
   std::projected<ranges::iterator_t<R>, Proj>>>
   constexpr unary_transform_result<ranges::borrowed_iterator_t<R>, O>
       transform( R&& r, O result, F op, Proj proj = {} );
   (2)                                                          (since C++20)
   template< std::input_iterator I1, std::sentinel_for<I1> S1,

             std::input_iterator I2, std::sentinel_for<I2> S2,
             std::weakly_incrementable O,
             std::copy_constructible F,
             class Proj1 = std::identity, class Proj2 = std::identity >
   requires std::indirectly_writable<O,
                std::indirect_result_t<F&,
                                       std::projected<I1, Proj1>,
                                       std::projected<I2, Proj2>>>
   constexpr binary_transform_result<I1, I2, O>
       transform( I1 first1, S1 last1, I2 first2, S2 last2, O result,
                  F binary_op, Proj1 proj1 = {}, Proj2 proj2 = {} );
   (3)                                                          (since C++20)
   template< ranges::input_range R1,

             ranges::input_range R2,
             std::weakly_incrementable O,
             std::copy_constructible F,
             class Proj1 = std::identity, class Proj2 = std::identity >
   requires std::indirectly_writable<O,
                std::indirect_result_t<F&,
                    std::projected<ranges::iterator_t<R1>, Proj1>,
                    std::projected<ranges::iterator_t<R2>, Proj2>>>
   constexpr binary_transform_result<ranges::borrowed_iterator_t<R1>,
                                     ranges::borrowed_iterator_t<R2>, O>
       transform( R1&& r1, R2&& r2, O result, F binary_op,
                  Proj1 proj1 = {}, Proj2 proj2 = {} );
   (4)                                                          (since C++20)
   Helper types
   template< class I, class O >
   using unary_transform_result = ranges::in_out_result<I, O>;
   (5)                                                          (since C++20)
   template< class I1, class I2, class O >
   using binary_transform_result = ranges::in_in_out_result<I1, I2, O>;
   (6)                                                          (since C++20)

   Applies the given function to a range and stores the result in another
   range, beginning at result.
   1) The unary operation op is applied to the range defined by
   [first1, last1) (after projecting with the projection proj).
   2) Same as (1), but uses r as the source range, as if using
   ranges::begin(r) as first and ranges::end(r) as last.
   3) The binary operation binary_op is applied to pairs of elements from
   two ranges: one defined by [first1, last1) and the other defined by
   [first2, last2) (after respectively projecting with the projections
   proj1 and proj2).
   4) Same as (3), but uses r1 as the first source range, as if using
   ranges::begin(r1) as first1 and ranges::end(r1) as last1, and similarly
   for r2.

   The function-like entities described on this page are niebloids, that
   is:
     * Explicit template argument lists cannot be specified when calling
       any of them.
     * None of them are visible to argument-dependent lookup.
     * When any of them are found by normal unqualified lookup as the name
       to the left of the function-call operator, argument-dependent
       lookup is inhibited.

   In practice, they may be implemented as function objects, or with
   special compiler extensions.

Parameters

   first1, last1 - the first range of elements to transform
   r, r1 - the first range of elements to transform
   first2, last2 - the second range of elements to transform
   r2 - the second range of elements to transform
   result - the beginning of the destination range, may be equal to first1
   or first2
   op, binary_op - operation to apply to the projected element(s)
   proj1 - projection to apply to the elements in the first range
   proj2 - projection to apply to the elements in the second range

Return value

   1,2) A unary_transform_result contains an input iterator equal to last
   and an output iterator to the element past the last element
   transformed.
   3,4) A binary_transform_result contains input iterators to last
   transformed elements from ranges [first1, last1) and [first2, last2) as
   in1 and in2 respectively, and the output iterator to the element past
   the last element transformed as out.

Complexity

   1,2) Exactly ranges::distance(first1, last1) applications of op and
   proj.
   3,4) Exactly ranges::min(ranges::distance(first1, last1),
   ranges::distance(first2, last2)) applications of binary_op and
   projections.

Possible implementation

struct transform_fn
{
    // First version
    template<std::input_iterator I, std::sentinel_for<I> S, std::weakly_incremen
table O,
             std::copy_constructible F, class Proj = std::identity>
    requires std::indirectly_writable<O, std::indirect_result_t<F&,
                                                                std::projected<I
, Proj>>>
    constexpr ranges::unary_transform_result<I, O>
        operator()(I first1, S last1, O result, F op, Proj proj = {}) const
    {
        for (; first1 != last1; ++first1, (void)++result)
            *result = std::invoke(op, std::invoke(proj, *first1));

        return {first1, result};
    }

    // Second version
    template<ranges::input_range R, std::weakly_incrementable O,
             std::copy_constructible F, class Proj = std::identity>
    requires std::indirectly_writable<O,
                 std::indirect_result_t<F&, std::projected<ranges::iterator_t<R>
, Proj>>>
    constexpr ranges::unary_transform_result<ranges::borrowed_iterator_t<R>, O>
        operator()(R&& r, O result, F op, Proj proj = {}) const
    {
        return (*this)(ranges::begin(r), ranges::end(r), result,
                       std::ref(op), std::ref(proj));
    }

    // Third version
    template<std::input_iterator I1, std::sentinel_for<I1> S1,
             std::input_iterator I2, std::sentinel_for<I2> S2,
             std::weakly_incrementable O,
             std::copy_constructible F,
             class Proj1 = std::identity, class Proj2 = std::identity>
    requires std::indirectly_writable<O,
                 std::indirect_result_t<F&,
                                        std::projected<I1, Proj1>,
                                        std::projected<I2, Proj2>>>
    constexpr ranges::binary_transform_result<I1, I2, O>
        operator()(I1 first1, S1 last1, I2 first2, S2 last2, O result,
                   F binary_op, Proj1 proj1 = {}, Proj2 proj2 = {}) const
    {
        for (; first1 != last1 && first2 != last2;
             ++first1, (void)++first2, (void)++result)
            *result = std::invoke(binary_op,
                                  std::invoke(proj1, *first1),
                                  std::invoke(proj2, *first2));

        return {first1, first2, result};
    }

    // Fourth version
    template<ranges::input_range R1, ranges::input_range R2,
             std::weakly_incrementable O, std::copy_constructible F,
             class Proj1 = std::identity, class Proj2 = std::identity>
    requires std::indirectly_writable<O,
                 std::indirect_result_t<F&,
                     std::projected<ranges::iterator_t<R1>, Proj1>,
                     std::projected<ranges::iterator_t<R2>, Proj2>>>
    constexpr ranges::binary_transform_result<ranges::borrowed_iterator_t<R1>,
                                              ranges::borrowed_iterator_t<R2>, O
>
        operator()(R1&& r1, R2&& r2, O result,
                   F binary_op, Proj1 proj1 = {}, Proj2 proj2 = {}) const
    {
        return (*this)(ranges::begin(r1), ranges::end(r1),
                       ranges::begin(r2), ranges::end(r2),
                       result, std::ref(binary_op),
                       std::ref(proj1), std::ref(proj2));
    }
};

inline constexpr transform_fn transform;

Notes

   ranges::transform does not guarantee in-order application of op or
   binary_op. To apply a function to a sequence in-order or to apply a
   function that modifies the elements of a sequence, use
   ranges::for_each.

Example

   The following code uses ranges::transform to convert a string in place
   to uppercase using the std::toupper function and then transforms each
   char to its ordinal value. Then ranges::transform with a projection is
   used to transform elements of std::vector<Foo> into chars to fill a
   std::string.
   Run this code
#include <algorithm>
#include <cctype>
#include <functional>
#include <iostream>
#include <string>
#include <vector>

int main()
{
    std::string s{"hello"};
    auto op = [](unsigned char c) -> unsigned char { return std::toupper(c); };

    namespace ranges = std::ranges;

    // uppercase the string in-place
    ranges::transform(s.begin(), s.end(), s.begin(), op );

    std::vector<std::size_t> ordinals;
    // convert each char to size_t
    ranges::transform(s, std::back_inserter(ordinals),
                      [](unsigned char c) -> std::size_t { return c; });

    std::cout << s << ':';
    for (auto ord : ordinals)
        std::cout << ' ' << ord;

    // double each ordinal
    ranges::transform(ordinals, ordinals, ordinals.begin(), std::plus {});

    std::cout << '\n';
    for (auto ord : ordinals)
        std::cout << ord << ' ';
    std::cout << '\n';

    struct Foo
    {
        char bar;
    };
    const std::vector<Foo> f = {{'h'},{'e'},{'l'},{'l'},{'o'}};
    std::string result;
    // project, then uppercase
    ranges::transform(f, std::back_inserter(result), op, &Foo::bar);
    std::cout << result << '\n';
}

   Output:
HELLO: 72 69 76 76 79
144 138 152 152 158
HELLO

See also

   ranges::for_each
   (C++20)
   applies a function to a range of elements
   (niebloid)
   ranges::transform_viewviews::transform
   (C++20)
   a view of a sequence that applies a transformation function to each
   element
   (class template) (range adaptor object)
   transform
   applies a function to a range of elements, storing results in a
   destination range
   (function template)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/algorithm/ranges
   /transform&oldid=161426"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 26 October 2023, at 11:50.
     * This page has been accessed 96,856 times.
