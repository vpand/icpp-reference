std::sqrt(std::complex)

   From cppreference.com
   < cpp | numeric | complex

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Numerics library
   Common mathematical functions
   Mathematical special functions (C++17)
   Mathematical constants (C++20)
   Basic linear algebra algorithms (C++26)
   Floating-point environment (C++11)
   Complex numbers
   Numeric arrays
   Pseudo-random number generation
   Factor operations
   gcd
   (C++17)
   lcm
   (C++17)
   Interpolations
   midpoint
   (C++20)
   lerp
   (C++20)
   Saturation arithmetic
   add_sat
   (C++26)
   sub_sat
   (C++26)
   saturate_cast
   (C++26)
   mul_sat
   (C++26)
   div_sat
   (C++26)
   Generic numeric operations
   iota
   (C++11)
   ranges::iota
   (C++23)
   accumulate
   inner_product
   adjacent_difference
   partial_sum
   reduce
   (C++17)
   transform_reduce
   (C++17)
   inclusive_scan
   (C++17)
   exclusive_scan
   (C++17)
   transform_inclusive_scan
   (C++17)
   transform_exclusive_scan
   (C++17)
   Bit operations
   has_single_bit
   (C++20)
   bit_cast
   (C++20)
   bit_ceil
   (C++20)
   bit_floor
   (C++20)
   bit_width
   (C++20)
   rotl
   (C++20)
   rotr
   (C++20)
   popcount
   (C++20)
   countl_zero
   (C++20)
   countl_one
   (C++20)
   countr_zero
   (C++20)
   countr_one
   (C++20)
   byteswap
   (C++23)
   endian
   (C++20)

   std::complex
   Member functions
   complex::complex
   complex::operator=
   complex::real
   complex::imag
   complex::operator+=complex::operator-=complex::operator*=complex::opera
   tor/=
   Non-member functions
   operator+operator-
   operator+operator-operator*operator/
   operator==operator!=
   (until C++20)
   operator<<operator>>
   get(std::complex)
   (C++26)
   real
   imag
   abs
   arg
   norm
   conj
   proj
   (C++11)
   polar
   operator""ioperator""ifoperator""il
   (C++14)(C++14)(C++14)
   Exponential functions
   log

   log10

   exp
   Power functions
   pow

   sqrt
   Trigonometric functions
   sin

   cos
   tan
   asin
   (C++11)
   acos
   (C++11)
   atan
   (C++11)
   Hyperbolic functions
   sinh

   cosh
   tanh
   asinh
   (C++11)
   acosh
   (C++11)
   atanh
   (C++11)
   Helper types
   tuple_size<std::complex>
   (C++26)
   tuple_element<std::complex>
   (C++26)

   Defined in header <complex>
   template< class T >
   std::complex<T> sqrt( const std::complex<T>& z );

   Computes the square root of the complex number z with a branch cut
   along the negative real axis.

Parameters

   z - complex number to take the square root of

Return value

   If no errors occur, returns the square root of z, in the range of the
   right half-plane, including the imaginary axis ([0; +infty) along the
   real axis and (-infty; +infty) along the imaginary axis).

Error handling and special values

   Errors are reported consistent with math_errhandling.

   If the implementation supports IEEE floating-point arithmetic,
     * The function is continuous onto the branch cut taking into account
       the sign of imaginary part
     * std::sqrt(std::conj(z)) == std::conj(std::sqrt(z))
     * If z is (±0,+0), the result is (+0,+0)
     * If z is (x,+infty), the result is (+infty,+infty) even if x is NaN
     * If z is (x,NaN), the result is (NaN,NaN) (unless x is ±infty) and
       FE_INVALID may be raised
     * If z is (-infty,y), the result is (+0,+infty) for finite positive y
     * If z is (+infty,y), the result is (+infty,+0) for finite positive y
     * If z is (-infty,NaN), the result is (NaN,infty) (sign of imaginary
       part unspecified)
     * If z is (+infty,NaN), the result is (+infty,NaN)
     * If z is (NaN,y), the result is (NaN,NaN) and FE_INVALID may be
       raised
     * If z is (NaN,NaN), the result is (NaN,NaN)

Notes

   The semantics of this function are intended to be consistent with the C
   function csqrt.

Example

   Run this code
#include <complex>
#include <iostream>

int main()
{
    std::cout << "Square root of -4 is "
              << std::sqrt(std::complex<double>(-4.0, 0.0)) << '\n'
              << "Square root of (-4,-0) is "
              << std::sqrt(std::complex<double>(-4.0, -0.0))
              << " (the other side of the cut)\n";
}

   Output:
Square root of -4 is (0,2)
Square root of (-4,-0) is (0,-2) (the other side of the cut)

Defect reports

   The following behavior-changing defect reports were applied
   retroactively to previously published C++ standards.
   DR Applied to Behavior as published Correct behavior
   LWG 2597 C++98 specification mishandles signed zero imaginary parts
   erroneous requirement removed

See also

   pow(std::complex)
   complex power, one or both arguments may be a complex number
   (function template)
   sqrtsqrtfsqrtl
   (C++11)(C++11)
   computes square root (\(\small{\sqrt{x}}\) SQRT x)
   (function)
   sqrt(std::valarray)
   applies the function std::sqrt to each element of valarray
   (function template)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/numeric/complex/
   sqrt&oldid=150872"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 22 April 2023, at 08:27.
     * This page has been accessed 52,499 times.
