std::deque<T,Allocator>::swap

   From cppreference.com
   < cpp | container | deque


   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Containers library
   Sequence
   array
   (C++11)
   vector
   vector<bool>
   deque
   forward_list
   (C++11)
   list
   Associative
   set
   multiset
   map
   multimap
   Unordered associative
   unordered_set
   (C++11)
   unordered_multiset
   (C++11)
   unordered_map
   (C++11)
   unordered_multimap
   (C++11)
   Adaptors
   stack
   queue
   priority_queue
   flat_set
   (C++23)
   flat_multiset
   (C++23)
   flat_map
   (C++23)
   flat_multimap
   (C++23)
   Views
   span
   (C++20)
   mdspan
   (C++23)
   Iterator invalidation
   Member function table
   Non-member function table

   std::deque
   Member types
   Member functions
   deque::deque
   deque::~deque
   deque::operator=
   deque::assign
   deque::assign_range
   (C++23)
   deque::get_allocator
   Element access
   deque::at
   deque::operator[]
   deque::front
   deque::back
   Iterators
   deque::begindeque::cbegin
   (C++11)
   deque::enddeque::cend
   (C++11)
   deque::rbegindeque::crbegin
   (C++11)
   deque::renddeque::crend
   (C++11)
   Capacity
   deque::empty
   deque::size
   deque::max_size
   deque::shrink_to_fit
   (DR*)
   Modifiers
   deque::clear
   deque::insert
   deque::insert_range
   (C++23)
   deque::emplace
   deque::erase
   deque::push_front
   deque::emplace_front
   (C++11)
   deque::prepend_range
   (C++23)
   deque::pop_front
   deque::push_back
   deque::emplace_back
   (C++11)
   deque::append_range
   (C++23)
   deque::pop_back
   deque::resize
   deque::swap
   Non-member functions
   operator==operator!=operator<operator>operator<=operator>=operator<=>
   (until C++20)(until C++20)(until C++20)(until C++20)(until
   C++20)(C++20)
   swap(std::deque)
   erase(std::deque)erase_if(std::deque)
   (C++20)(C++20)
   Deduction guides(C++17)

   void swap( deque& other );
                                                       (until C++17)
   void swap( deque& other ) noexcept(/* see below */);
                                                       (since C++17)

   Exchanges the contents of the container with those of other. Does not
   invoke any move, copy, or swap operations on individual elements.

   All iterators and references remain valid. The end() iterator is
   invalidated.

   If
   std::allocator_traits<allocator_type>::propagate_on_container_swap::val
   ue is true, then the allocators are exchanged using an unqualified call
   to non-member swap. Otherwise, they are not swapped (and if
   get_allocator() != other.get_allocator(), the behavior is undefined).
   (since C++11)

Parameters

   other - container to exchange the contents with

Return value

   (none)

Exceptions

   (none)
   (until C++17)
   noexcept specification:
   noexcept(std::allocator_traits<Allocator>::is_always_equal::value)
   (since C++17)

Complexity

   Constant.

Example

   Run this code
#include <iostream>
#include <deque>

template<class Os, class Co>
Os& operator<<(Os& os, const Co& co)
{
    os << '{';
    for (auto const& i : co)
        os << ' ' << i;
    return os << " } ";
}

int main()
{
    std::deque<int> a1{1, 2, 3}, a2{4, 5};

    auto it1 = std::next(a1.begin());
    auto it2 = std::next(a2.begin());

    int& ref1 = a1.front();
    int& ref2 = a2.front();

    std::cout << a1 << a2 << *it1 << ' ' << *it2 << ' ' << ref1 << ' ' << ref2 <
< '\n';
    a1.swap(a2);
    std::cout << a1 << a2 << *it1 << ' ' << *it2 << ' ' << ref1 << ' ' << ref2 <
< '\n';

    // Note that after swap the iterators and references stay associated with th
eir
    // original elements, e.g. it1 that pointed to an element in 'a1' with value
 2
    // still points to the same element, though this element was moved into 'a2'
.
}

   Output:
{ 1 2 3 } { 4 5 } 2 5 1 4
{ 4 5 } { 1 2 3 } 2 5 1 4

See also

   std::swap(std::deque)
   specializes the std::swap algorithm
   (function template)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/container/deque/
   swap&oldid=135187"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 11 November 2021, at 18:55.
     * This page has been accessed 38,242 times.
