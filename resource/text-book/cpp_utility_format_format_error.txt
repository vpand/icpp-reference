std::format_error

   From cppreference.com
   < cpp | utility | format

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Utilities library
   Language support
   Type support (basic types, RTTI)
   Library feature-test macros (C++20)
   Dynamic memory management
   Program utilities
   Coroutine support (C++20)
   Variadic functions
   is_constant_evaluated
   (C++20)
   is_within_lifetime
   (C++26)
   initializer_list
   (C++11)
   source_location
   (C++20)
   Debugging support
   is_debugger_present
   (C++26)
   breakpoint_if_debugging
   (C++26)
   breakpoint
   (C++26)
   Three-way comparison
   three_way_comparablethree_way_comparable_with
   (C++20)(C++20)
   strong_ordering
   (C++20)
   weak_ordering
   (C++20)
   partial_ordering
   (C++20)
   common_comparison_category
   (C++20)
   compare_three_way_result
   (C++20)
   compare_three_way
   (C++20)
   strong_order
   (C++20)
   weak_order
   (C++20)
   partial_order
   (C++20)
   compare_strong_order_fallback
   (C++20)
   compare_weak_order_fallback
   (C++20)
   compare_partial_order_fallback
   (C++20)
   is_eqis_ltis_lteq
   (C++20)(C++20)(C++20)
   is_neqis_gtis_gteq
   (C++20)(C++20)(C++20)
   General utilities
   Date and time
   Function objects
   Formatting library (C++20)
   bitset
   hash
   (C++11)
   Relational operators (deprecated in C++20)
   rel_ops::operator!=rel_ops::operator>

   rel_ops::operator<=rel_ops::operator>=
   Integer comparison functions
   cmp_equalcmp_lesscmp_less_than
   (C++20)(C++20)(C++20)
   cmp_not_equalcmp_greatercmp_greater_than
   (C++20)(C++20)(C++20)
   in_range
   (C++20)
   Swap and type operations
   swap
   ranges::swap
   (C++20)
   exchange
   (C++14)
   declval
   (C++11)
   to_underlying
   (C++23)
   forward
   (C++11)
   forward_like
   (C++23)
   move
   (C++11)
   move_if_noexcept
   (C++11)
   as_const
   (C++17)
   Common vocabulary types
   pair
   tuple
   (C++11)
   optional
   (C++17)
   any
   (C++17)
   variant
   (C++17)
   tuple_size
   (C++11)
   tuple_element
   (C++11)
   apply
   (C++17)
   make_from_tuple
   (C++17)
   expected
   (C++23)
   Elementary string conversions
   to_chars
   (C++17)
   from_chars
   (C++17)
   chars_format
   (C++17)
   to_chars_result
   (C++17)
   from_chars_result
   (C++17)

   Formatting library
   Standard format specification
   Formatting functions
   format
   (C++20)
   format_to
   (C++20)
   format_to_n
   (C++20)
   formatted_size
   (C++20)
   vformat
   (C++20)
   vformat_to
   (C++20)
   Format strings
   basic_format_stringformat_stringwformat_string
   (C++20)(C++20)(C++20)
   runtime_format
   (C++26)
   Formatting concepts
   formattable
   (C++23)
   Formatter
   formatter
   (C++20)
   formatter<pair-or-tuple>
   (C++23)
   formatter<range>
   (C++23)
   range_formatter
   (C++23)
   enable_nonlocking_formatter_optimization
   (C++23)
   basic_format_parse_contextformat_parse_contextwformat_parse_context
   (C++20)(C++20)(C++20)
   basic_format_contextformat_contextwformat_context
   (C++20)(C++20)(C++20)
   range_format
   (C++23)
   format_kind
   (C++23)
   Formatting arguments
   basic_format_arg
   (C++20)
   basic_format_arg::handle
   (C++20)
   basic_format_argsformat_argswformat_args
   (C++20)(C++20)(C++20)
   visit_format_arg
   (C++20) (deprecated in C++26)
   make_format_argsmake_wformat_args
   (C++20)(C++20)
   Format error
   format_error
   (C++20)

   Defined in header <format>
   class format_error;
                             (since C++20)

   Defines the type of exception object thrown to report errors in the
   formatting library.
   std-format error-inheritance.svg

   Inheritance diagram

Member functions

   (constructor)
   constructs a new format_error object with the given message
   (public member function)
   operator=
   replaces the format_error object
   (public member function)

std::format_error::format_error

   format_error( const std::string& what_arg );
   (1)
   format_error( const char* what_arg );
   (2)
   format_error( const format_error& other ) noexcept;
   (3)
   1) Constructs the exception object with what_arg as explanatory string.
   After construction, std::strcmp(what(), what_arg.c_str()) == 0.
   2) Constructs the exception object with what_arg as explanatory string.
   After construction, std::strcmp(what(), what_arg) == 0.
   3) Copy constructor. If *this and other both have dynamic type
   std::format_error then std::strcmp(what(), other.what()) == 0. No
   exception can be thrown from the copy constructor.

Parameters

   what_arg - explanatory string
   other    - another exception object to copy

Exceptions

   1,2) May throw std::bad_alloc.

Notes

   Because copying std::format_error is not permitted to throw exceptions,
   this message is typically stored internally as a separately-allocated
   reference-counted string. This is also why there is no constructor
   taking std::string&&: it would have to copy the content anyway.

   A derived standard exception class must have a publicly accessible copy
   constructor. It can be implicitly defined as long as the explanatory
   strings obtained by what() are the same for the original object and the
   copied object.

std::format_error::operator=

   format_error& operator=( const format_error& other ) noexcept;

   Assigns the contents with those of other. If *this and other both have
   dynamic type std::format_error then std::strcmp(what(), other.what())
   == 0 after assignment. No exception can be thrown from the copy
   assignment operator.

Parameters

   other - another exception object to assign with

Return value

   *this

Notes

   A derived standard exception class must have a publicly accessible copy
   assignment operator. It can be implicitly defined as long as the
   explanatory strings obtained by what() are the same for the original
   object and the copied object.

Inherited from std::runtime_error

Inherited from std::exception

Member functions

   (destructor)
   [virtual]
   destroys the exception object
   (virtual public member function of std::exception)
   what
   [virtual]
   returns an explanatory string
   (virtual public member function of std::exception)

Example

   This section is incomplete
   Reason: no example

See also

   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/utility/format/f
   ormat_error&oldid=125645"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 7 January 2021, at 11:21.
     * This page has been accessed 28,200 times.
