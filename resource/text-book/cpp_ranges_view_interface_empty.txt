std::ranges::view_interface<D>::empty

   From cppreference.com
   < cpp | ranges | view interface

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Ranges library
   Range access
   begin
   cbegin
   end
   cend
   rbegin
   crbegin
   rend
   crend
   size
   ssize
   data
   cdata
   empty
   Range conversions
   std::from_range_t
   std::from_range
   (C++23)(C++23)
   to
   (C++23)
   Range primitives
   range_size_trange_difference_trange_value_trange_reference_t
   iterator_tconst_iterator_tsentinel_tconst_sentinel_t
   (C++23)(C++23)
   range_const_reference_trange_rvalue_reference_trange_common_reference_t
   (C++23)
   elements_of
   (C++23)
   Dangling iterator handling
   dangling
   borrowed_iterator_t
   borrowed_subrange_t
   Range concepts
   range
   borrowed_range
   sized_range
   constant_range
   (C++23)
   common_range
   view
   viewable_range
   input_range
   output_range
   forward_range
   bidirectional_range
   random_access_range
   contiguous_range
   Views
   view_interface
   subrange
   Range factories
   empty_viewviews::empty
   single_viewviews::single
   iota_viewviews::iota
   repeat_viewviews::repeat
   (C++23)(C++23)
   basic_istream_viewviews::istream
   Range adaptors
   views::all_tviews::all
   ref_view
   owning_view
   as_rvalue_viewviews::as_rvalue
   (C++23)(C++23)
   filter_viewviews::filter
   transform_viewviews::transform
   take_viewviews::take
   take_while_viewviews::take_while
   concat_viewviews::concat
   (C++26)(C++26)
   drop_viewviews::drop
   drop_while_viewviews::drop_while
   join_viewviews::join
   join_with_viewviews::join_with
   (C++23)(C++23)
   lazy_split_viewviews::lazy_split
   split_viewviews::split
   views::counted
   common_viewviews::common
   reverse_viewviews::reverse
   as_const_viewviews::as_const
   (C++23)(C++23)
   elements_viewviews::elements
   keys_viewviews::keys
   values_viewviews::values
   enumerate_viewviews::enumerate
   (C++23)(C++23)
   zip_viewviews::zip
   (C++23)(C++23)
   zip_transform_viewviews::zip_transform
   (C++23)(C++23)
   adjacent_viewviews::adjacent
   (C++23)(C++23)
   views::pairwise
   (C++23)
   adjacent_transform_viewviews::adjacent_transform
   (C++23)(C++23)
   views::pairwise_transform
   (C++23)
   chunk_viewviews::chunk
   (C++23)(C++23)
   slide_viewviews::slide
   (C++23)(C++23)
   chunk_by_viewviews::chunk_by
   (C++23)(C++23)
   stride_viewviews::stride
   (C++23)(C++23)
   cartesian_product_viewviews::cartesian_product
   (C++23)(C++23)
   Range generators
   std::generator
   (C++23)
   Range adaptor objects
   Range adaptor closure objects
   range_adaptor_closure
   (C++23)
   Helper items
   copyable-box
   movable-box
   (until C++23)(C++23)
   simple-view
   non-propagating-cache

   std::ranges::view_interface
   Member functions
   empty
   cbegin
   (C++23)
   cend
   (C++23)
   operator bool
   data
   size
   front
   back
   operator[]

   constexpr bool empty()
       requires ranges::sized_range<D> || ranges::forward_range<D>;
   (1)                         (since C++20)
   constexpr bool empty() const
       requires ranges::sized_range<const D> ||
   ranges::forward_range<const D>;
   (2)                         (since C++20)

   The default implementation of empty() member function checks whether
   the object of the derived type's size is 0 (if valid), or whether the
   beginning iterator and the sentinel compare equal.
   1) Let derived be a reference bound to static_cast<D&>(*this).
   Equivalent to return ranges::size(derived) == 0; if D satisfies
   sized_range. Otherwise, equivalent to return ranges::begin(derived) ==
   ranges::end(derived);.
   2) Same as (1), except that derived is static_cast<const D&>(*this).

Parameters

   (none)

Return value

   true if the size of the object of the derived type is 0 (if D satisfies
   std::ranges::sized_range), or its beginning iterator and the sentinel
   compare equal, false otherwise.

Notes

   Following derived types may use the default implementation of empty:
     * std::ranges::common_view
     * std::ranges::drop_view
     * std::ranges::drop_while_view
     * std::ranges::elements_view
     * std::ranges::filter_view
     * std::ranges::join_view
     * std::ranges::lazy_split_view
     * std::ranges::reverse_view
     * std::ranges::single_view
     * std::ranges::split_view
     * std::ranges::take_view
     * std::ranges::take_while_view
     * std::ranges::transform_view

     * std::ranges::adjacent_transform_view
     * std::ranges::adjacent_view
     * std::ranges::as_const_view
     * std::ranges::as_rvalue_view
     * std::ranges::cartesian_product_view
     * std::ranges::chunk_view
     * std::ranges::chunk_by_view
     * std::ranges::join_with_view
     * std::ranges::repeat_view
     * std::ranges::slide_view
     * std::ranges::stride_view
     * std::ranges::zip_view
     * std::ranges::zip_transform_view

   (since C++23)

   Although std::ranges::basic_istream_view inherits from
   std::ranges::view_interface and does not declare the empty() member
   function, it cannot use the default implementation, because it never
   satisfies neither std::ranges::sized_range nor
   std::ranges::forward_range.

Example

   Run this code
#include <array>
#include <ranges>

int main()
{
    constexpr std::array a{0, 1, 2, 3, 4};
    static_assert(!std::ranges::single_view(a).empty());
    static_assert((a | std::views::take(0)).empty());
    static_assert(!(a | std::views::take(5)).empty());
    static_assert((a | std::views::drop(5)).empty());
    static_assert(!(a | std::views::drop(3)).empty());
    static_assert(std::views::iota(0,0).empty());
    static_assert(!std::views::iota(0).empty());
}

Defect reports

   The following behavior-changing defect reports were applied
   retroactively to previously published C++ standards.
    DR    Applied to           Behavior as published            Correct behavior
 LWG 3715 C++20      empty() only supported forward_range types
   sized_range-only types are also supported

See also

   empty
   (C++17)
   checks whether the container is empty
   (function template)
   ranges::empty
   (C++20)
   checks whether a range is empty
   (customization point object)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/ranges/view_inte
   rface/empty&oldid=162841"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 15 November 2023, at 12:04.
     * This page has been accessed 7,488 times.
