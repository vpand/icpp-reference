std::seed_seq

   From cppreference.com
   < cpp | numeric | random

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Numerics library
   Common mathematical functions
   Mathematical special functions (C++17)
   Mathematical constants (C++20)
   Basic linear algebra algorithms (C++26)
   Floating-point environment (C++11)
   Complex numbers
   Numeric arrays
   Pseudo-random number generation
   Factor operations
   gcd
   (C++17)
   lcm
   (C++17)
   Interpolations
   midpoint
   (C++20)
   lerp
   (C++20)
   Saturation arithmetic
   add_sat
   (C++26)
   sub_sat
   (C++26)
   saturate_cast
   (C++26)
   mul_sat
   (C++26)
   div_sat
   (C++26)
   Generic numeric operations
   iota
   (C++11)
   ranges::iota
   (C++23)
   accumulate
   inner_product
   adjacent_difference
   partial_sum
   reduce
   (C++17)
   transform_reduce
   (C++17)
   inclusive_scan
   (C++17)
   exclusive_scan
   (C++17)
   transform_inclusive_scan
   (C++17)
   transform_exclusive_scan
   (C++17)
   Bit operations
   has_single_bit
   (C++20)
   bit_cast
   (C++20)
   bit_ceil
   (C++20)
   bit_floor
   (C++20)
   bit_width
   (C++20)
   rotl
   (C++20)
   rotr
   (C++20)
   popcount
   (C++20)
   countl_zero
   (C++20)
   countl_one
   (C++20)
   countr_zero
   (C++20)
   countr_one
   (C++20)
   byteswap
   (C++23)
   endian
   (C++20)

   Pseudo-random number generation
   Uniform random bit generators
   uniform_random_bit_generator
   (C++20)
   Random number engines
   linear_congruential_engine
   (C++11)
   mersenne_twister_engine
   (C++11)
   subtract_with_carry_engine
   (C++11)
   Random number engine adaptors
   discard_block_engine
   (C++11)
   independent_bits_engine
   (C++11)
   shuffle_order_engine
   (C++11)
   Predefined random number generators
   Non-deterministic random numbers
   random_device
   (C++11)
   Random number distributions
   Uniform distributions
   uniform_int_distribution
   (C++11)
   uniform_real_distribution
   (C++11)
   generate_canonical
   (C++11)
   Bernoulli distributions
   bernoulli_distribution
   (C++11)
   binomial_distribution
   (C++11)
   negative_binomial_distribution
   (C++11)
   geometric_distribution
   (C++11)
   Poisson distributions
   poisson_distribution
   (C++11)
   exponential_distribution
   (C++11)
   gamma_distribution
   (C++11)
   weibull_distribution
   (C++11)
   extreme_value_distribution
   (C++11)
   Normal distributions
   normal_distribution
   (C++11)
   lognormal_distribution
   (C++11)
   chi_squared_distribution
   (C++11)
   cauchy_distribution
   (C++11)
   fisher_f_distribution
   (C++11)
   student_t_distribution
   (C++11)
   Sampling distributions
   discrete_distribution
   (C++11)
   piecewise_constant_distribution
   (C++11)
   piecewise_linear_distribution
   (C++11)
   Utilities
   generate_canonical
   (C++11)
   seed_seq
   (C++11)
   Random number algorithms
   ranges::generate_random
   (C++26)
   C random library
   rand
   srand
   RAND_MAX

   std::seed_seq
   Member functions
   seed_seq::seed_seq
   (C++11)
   seed_seq::generate
   (C++11)
   seed_seq::size
   (C++11)
   seed_seq::param
   (C++11)

   Defined in header <random>
   class seed_seq;
                             (since C++11)

   std::seed_seq consumes a sequence of integer-valued data and produces a
   requested number of unsigned integer values i, 0 <= i < 232
   , based on the consumed data. The produced values are distributed over
   the entire 32-bit range even if the consumed values are close.

   It provides a way to seed a large number of random number engines or to
   seed a generator that requires a lot of entropy, given a small seed or
   a poorly distributed initial seed sequence.

   std::seed_seq meets the requirements of SeedSequence.

Member types

   Member type         Definition
   result_type (C++11) std::uint_least32_t

Member functions

   (constructor)
   (C++11)
   constructs and seeds the std::seed_seq object
   (public member function)
   operator=
   [deleted] (C++11)
   seed_seq is not assignable
   (public member function)
   generate
   (C++11)
   calculates the bias-eliminated, evenly distributed 32-bit values
   (public member function)
   size
   (C++11)
   obtains the number of 32-bit values stored in std::seed_seq
   (public member function)
   param
   (C++11)
   obtains the 32-bit values stored in std::seed_seq
   (public member function)

Example

   Run this code
#include <cstdint>
#include <iostream>
#include <random>

int main()
{
    std::seed_seq seq{1, 2, 3, 4, 5};
    std::vector<std::uint32_t> seeds(10);
    seq.generate(seeds.begin(), seeds.end());
    for (std::uint32_t n : seeds)
        std::cout << n << '\n';
}

   Possible output:
4204997637
4246533866
1856049002
1129615051
690460811
1075771511
46783058
3904109078
1534123438
1495905678

   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/numeric/random/s
   eed_seq&oldid=151407"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 5 May 2023, at 23:52.
     * This page has been accessed 95,330 times.
