std::rend, std::crend

   From cppreference.com
   < cpp | iterator

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Iterator library
   Iterator concepts
   indirectly_readable
   (C++20)
   indirectly_writable
   (C++20)
   weakly_incrementable
   (C++20)
   incrementable
   (C++20)
   input_or_output_iterator
   (C++20)
   sentinel_for
   (C++20)
   sized_sentinel_for
   (C++20)
   input_iterator
   (C++20)
   output_iterator
   (C++20)
   forward_iterator
   (C++20)
   bidirectional_iterator
   (C++20)
   random_access_iterator
   (C++20)
   contiguous_iterator
   (C++20)
   Iterator primitives
   input_iterator_tagoutput_iterator_tagforward_iterator_tagbidirectional_
   iterator_tagrandom_access_iterator_tagcontiguous_iterator_tag
   (C++20)
   iter_value_titer_difference_titer_reference_titer_const_reference_titer
   _rvalue_reference_titer_common_reference_t
   (C++20)(C++20)(C++20)(C++23)(C++20)(C++20)
   iterator
   (deprecated in C++17)
   iterator_traits
   incrementable_traits
   (C++20)
   indirectly_readable_traits
   (C++20)
   Algorithm concepts and utilities
   Indirect callable concepts
   indirectly_unary_invocableindirectly_regular_unary_invocable
   (C++20)(C++20)
   indirect_unary_predicate
   (C++20)
   indirect_binary_predicate
   (C++20)
   indirect_equivalence_relation
   (C++20)
   indirect_strict_weak_order
   (C++20)
   Common algorithm requirements
   indirectly_movable
   (C++20)
   indirectly_movable_storable
   (C++20)
   indirectly_copyable
   (C++20)
   indirectly_copyable_storable
   (C++20)
   indirectly_swappable
   (C++20)
   indirectly_comparable
   (C++20)
   permutable
   (C++20)
   mergeable
   (C++20)
   sortable
   (C++20)
   Utilities
   indirect_result_t
   (C++20)
   projected
   (C++20)
   projected_value_t
   (C++26)
   Iterator adaptors
   reverse_iterator
   make_reverse_iterator
   (C++14)
   move_iterator
   (C++11)
   make_move_iterator
   (C++11)
   default_sentinel_tdefault_sentinel
   (C++20)(C++20)
   unreachable_sentinel_tunreachable_sentinel
   (C++20)(C++20)
   front_insert_iterator
   back_insert_iterator
   inserter
   insert_iterator
   front_inserter
   back_inserter
   move_sentinel
   (C++20)
   common_iterator
   (C++20)
   counted_iterator
   (C++20)
   basic_const_iterator
   (C++23)
   const_iterator
   (C++23)
   const_sentinel
   (C++23)
   make_const_iterator
   (C++23)
   make_const_sentinel
   (C++23)
   Stream iterators
   istream_iterator

   ostream_iterator
   istreambuf_iterator
   ostreambuf_iterator
   Iterator customization points
   ranges::iter_move
   (C++20)
   ranges::iter_swap
   (C++20)
   Iterator operations
   advance
   distance
   prev
   (C++11)
   next
   (C++11)
   ranges::advance
   (C++20)
   ranges::distance
   (C++20)
   ranges::prev
   (C++20)
   ranges::next
   (C++20)
   Range access
   begincbegin
   (C++11)(C++14)
   rbegincrbegin
   (C++14)(C++14)
   endcend
   (C++11)(C++14)
   rendcrend
   (C++14)(C++14)
   sizessize
   (C++17)(C++20)
   empty
   (C++17)
   data
   (C++17)

   Defined in header <array>
   Defined in header <deque>
   Defined in header <flat_map>
   Defined in header <flat_set>
   Defined in header <forward_list>
   Defined in header <iterator>
   Defined in header <list>
   Defined in header <map>
   Defined in header <regex>
   Defined in header <set>
   Defined in header <span>
   Defined in header <string>
   Defined in header <string_view>
   Defined in header <unordered_map>
   Defined in header <unordered_set>
   Defined in header <vector>
                                     (1)
   template< class C >
   auto rend( C& c ) -> decltype(c.rend());
   (since C++14)
   (until C++17)
   template< class C >
   constexpr auto rend( C& c ) -> decltype(c.rend());
                                         (since C++17)
                                     (2)
   template< class C >
   auto rend( const C& c ) -> decltype(c.rend());
   (since C++14)
   (until C++17)
   template< class C >
   constexpr auto rend( const C& c ) -> decltype(c.rend());
                                         (since C++17)
                                     (3)
   template< class T, std::size_t N >
   std::reverse_iterator<T*> rend( T (&array)[N] );
   (since C++14)
   (until C++17)
   template< class T, std::size_t N >
   constexpr std::reverse_iterator<T*> rend( T (&array)[N] );
                                         (since C++17)
                                     (4)
   template< class T >
   std::reverse_iterator<const T*> rend( std::initializer_list<T> il );
   (since C++14)
   (until C++17)
   template< class T >
   constexpr std::reverse_iterator<const T*> rend(
   std::initializer_list<T> il );
                                         (since C++17)
                                     (5)
   template< class C >
   auto crend( const C& c ) -> decltype(std::rend(c));
   (since C++14)
   (until C++17)
   template< class C >
   constexpr auto crend( const C& c ) -> decltype(std::rend(c));
                                         (since C++17)

   Returns an iterator to the reverse-end of the given range.
   1,2) Returns c.rend(), which is typically an iterator one past the
   reverse-end of the sequence represented by c.
   1) If C is a standard Container, returns a C::reverse_iterator object.
   2) If C is a standard Container, returns a C::const_reverse_iterator
   object.
   3) Returns an std::reverse_iterator<T*> object to the reverse-end of
   array.
   4) Returns an std::reverse_iterator<const T*> object to the reverse-end
   of il.
   5) Returns std::end(c), with c always treated as const-qualified.
   If C is a standard Container, returns a C::const_reverse_iterator
   object.

   range-rbegin-rend.svg

Parameters

   c     - a container or view with a rend member function
   array - an array of arbitrary type
   il    - an std::initializer_list

Return value

   1,2) c.rend()
   3) std::reverse_iterator<T*>(array)
   4) std::reverse_iterator<const T*>(il.begin())
   5) c.rend()

Exceptions

   May throw implementation-defined exceptions.

Overloads

   Custom overloads of rend may be provided for classes and enumerations
   that do not expose a suitable rend() member function, yet can be
   iterated.

   Overloads of rend found by argument-dependent lookup can be used to
   customize the behavior of std::ranges::rend and std::ranges::crend.
   (since C++20)

Notes

   The overload for std::initializer_list is necessary because it does not
   have a member function rend.

Example

   Run this code
#include <algorithm>
#include <iostream>
#include <iterator>
#include <vector>

int main()
{
    int a[]{4, 6, -3, 9, 10};
    std::cout << "C-style array `a` backwards: ";
    std::copy(std::rbegin(a), std::rend(a), std::ostream_iterator<int>(std::cout
, " "));

    auto il = {3, 1, 4};
    std::cout << "\nstd::initializer_list `il` backwards: ";
    std::copy(std::rbegin(il), std::rend(il), std::ostream_iterator<int>(std::co
ut, " "));

    std::vector<int> v{4, 6, -3, 9, 10};
    std::cout << "\nstd::vector `v` backwards: ";
    std::copy(std::rbegin(v), std::rend(v), std::ostream_iterator<int>(std::cout
, " "));
    std::cout << '\n';
}

   Output:
C-style array `a` backwards: 10 9 -3 6 4
std::initializer_list `il` backwards: 4 1 3
std::vector `v` backwards: 10 9 -3 6 4

See also

   endcend
   (C++11)(C++14)
   returns an iterator to the end of a container or array
   (function template)
   rbegincrbegin
   (C++14)
   returns a reverse iterator to the beginning of a container or array
   (function template)
   begincbegin
   (C++11)(C++14)
   returns an iterator to the beginning of a container or array
   (function template)
   ranges::rend
   (C++20)
   returns a reverse end iterator to a range
   (customization point object)
   ranges::crend
   (C++20)
   returns a reverse end iterator to a read-only range
   (customization point object)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/rend&ol
   did=169873"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 20 February 2024, at 02:25.
     * This page has been accessed 51,512 times.
