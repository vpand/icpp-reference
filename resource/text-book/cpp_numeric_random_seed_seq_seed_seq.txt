std::seed_seq::seed_seq

   From cppreference.com
   < cpp | numeric | random | seed seq

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Numerics library
   Common mathematical functions
   Mathematical special functions (C++17)
   Mathematical constants (C++20)
   Basic linear algebra algorithms (C++26)
   Floating-point environment (C++11)
   Complex numbers
   Numeric arrays
   Pseudo-random number generation
   Factor operations
   gcd
   (C++17)
   lcm
   (C++17)
   Interpolations
   midpoint
   (C++20)
   lerp
   (C++20)
   Saturation arithmetic
   add_sat
   (C++26)
   sub_sat
   (C++26)
   saturate_cast
   (C++26)
   mul_sat
   (C++26)
   div_sat
   (C++26)
   Generic numeric operations
   iota
   (C++11)
   ranges::iota
   (C++23)
   accumulate
   inner_product
   adjacent_difference
   partial_sum
   reduce
   (C++17)
   transform_reduce
   (C++17)
   inclusive_scan
   (C++17)
   exclusive_scan
   (C++17)
   transform_inclusive_scan
   (C++17)
   transform_exclusive_scan
   (C++17)
   Bit operations
   has_single_bit
   (C++20)
   bit_cast
   (C++20)
   bit_ceil
   (C++20)
   bit_floor
   (C++20)
   bit_width
   (C++20)
   rotl
   (C++20)
   rotr
   (C++20)
   popcount
   (C++20)
   countl_zero
   (C++20)
   countl_one
   (C++20)
   countr_zero
   (C++20)
   countr_one
   (C++20)
   byteswap
   (C++23)
   endian
   (C++20)

   Pseudo-random number generation
   Uniform random bit generators
   uniform_random_bit_generator
   (C++20)
   Random number engines
   linear_congruential_engine
   (C++11)
   mersenne_twister_engine
   (C++11)
   subtract_with_carry_engine
   (C++11)
   Random number engine adaptors
   discard_block_engine
   (C++11)
   independent_bits_engine
   (C++11)
   shuffle_order_engine
   (C++11)
   Predefined random number generators
   Non-deterministic random numbers
   random_device
   (C++11)
   Random number distributions
   Uniform distributions
   uniform_int_distribution
   (C++11)
   uniform_real_distribution
   (C++11)
   generate_canonical
   (C++11)
   Bernoulli distributions
   bernoulli_distribution
   (C++11)
   binomial_distribution
   (C++11)
   negative_binomial_distribution
   (C++11)
   geometric_distribution
   (C++11)
   Poisson distributions
   poisson_distribution
   (C++11)
   exponential_distribution
   (C++11)
   gamma_distribution
   (C++11)
   weibull_distribution
   (C++11)
   extreme_value_distribution
   (C++11)
   Normal distributions
   normal_distribution
   (C++11)
   lognormal_distribution
   (C++11)
   chi_squared_distribution
   (C++11)
   cauchy_distribution
   (C++11)
   fisher_f_distribution
   (C++11)
   student_t_distribution
   (C++11)
   Sampling distributions
   discrete_distribution
   (C++11)
   piecewise_constant_distribution
   (C++11)
   piecewise_linear_distribution
   (C++11)
   Utilities
   generate_canonical
   (C++11)
   seed_seq
   (C++11)
   Random number algorithms
   ranges::generate_random
   (C++26)
   C random library
   rand
   srand
   RAND_MAX

   std::seed_seq
   Member functions
   seed_seq::seed_seq
   (C++11)
   seed_seq::generate
   (C++11)
   seed_seq::size
   (C++11)
   seed_seq::param
   (C++11)

   seed_seq() noexcept;
   (1)                                  (since C++11)
   seed_seq( const seed_seq& ) = delete;
   (2)                                  (since C++11)
   template< class InputIt >
   seed_seq( InputIt begin, InputIt end );
   (3)                                  (since C++11)
   template< class T >
   seed_seq( std::initializer_list<T> il );
   (4)                                  (since C++11)
   1) The default constructor creates a std::seed_seq object with an
   initial seed sequence of length zero.
   2) The copy constructor is deleted: std::seed_seq is not copyable.
   3) Constructs a std::seed_seq with the initial seed sequence obtained
   by iterating over the range [begin, end) and copying the values
   obtained by dereferencing the iterator, modulo 232
   (that is, the lower 32 bits are copied).
   4) Equivalent to seed_seq(il.begin(), il.end()). This constructor
   enables list-initialization from the list of seed values. This overload
   participates in overload resolution only if T is an integer type.

Parameters

   begin, end - the initial seed sequence represented as a pair of input
   iterators whose std::iterator_traits<>::value_type is an integer type
   il - std::initializer_list of objects of integer type, providing the
   initial seed sequence
   Type requirements
   -
   InputIt must meet the requirements of LegacyInputIterator.

Exceptions

   3,4) Throws std::bad_alloc on allocation failure.

Example

   Run this code
#include <iterator>
#include <random>
#include <sstream>

int main()
{
    std::seed_seq s1; // default-constructible
    std::seed_seq s2{1, 2, 3}; // can use list-initialization
    std::seed_seq s3 = {-1, 0, 1}; // another form of list-initialization
    int a[10] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    std::seed_seq s4(a, a + 10); // can use iterators
    std::istringstream buf("1 2 3 4 5");
    std::istream_iterator<int> beg(buf), end;
    std::seed_seq s5(beg, end); // even stream input iterators
}

Defect reports

   The following behavior-changing defect reports were applied
   retroactively to previously published C++ standards.
   DR Applied to Behavior as published Correct behavior
   LWG 3422 C++11 the default constructor never fails but might be not
   noexcept;
   the initializer list constructor disabled list-initialization from
   iterator pairs made noexcept;
   constrained
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/numeric/random/s
   eed_seq/seed_seq&oldid=160847"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 17 October 2023, at 12:01.
     * This page has been accessed 26,051 times.
