std::chrono::treat_as_floating_point

   From cppreference.com
   < cpp | chrono

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Utilities library
   Language support
   Type support (basic types, RTTI)
   Library feature-test macros (C++20)
   Dynamic memory management
   Program utilities
   Coroutine support (C++20)
   Variadic functions
   is_constant_evaluated
   (C++20)
   is_within_lifetime
   (C++26)
   initializer_list
   (C++11)
   source_location
   (C++20)
   Debugging support
   is_debugger_present
   (C++26)
   breakpoint_if_debugging
   (C++26)
   breakpoint
   (C++26)
   Three-way comparison
   three_way_comparablethree_way_comparable_with
   (C++20)(C++20)
   strong_ordering
   (C++20)
   weak_ordering
   (C++20)
   partial_ordering
   (C++20)
   common_comparison_category
   (C++20)
   compare_three_way_result
   (C++20)
   compare_three_way
   (C++20)
   strong_order
   (C++20)
   weak_order
   (C++20)
   partial_order
   (C++20)
   compare_strong_order_fallback
   (C++20)
   compare_weak_order_fallback
   (C++20)
   compare_partial_order_fallback
   (C++20)
   is_eqis_ltis_lteq
   (C++20)(C++20)(C++20)
   is_neqis_gtis_gteq
   (C++20)(C++20)(C++20)
   General utilities
   Date and time
   Function objects
   Formatting library (C++20)
   bitset
   hash
   (C++11)
   Relational operators (deprecated in C++20)
   rel_ops::operator!=rel_ops::operator>

   rel_ops::operator<=rel_ops::operator>=
   Integer comparison functions
   cmp_equalcmp_lesscmp_less_than
   (C++20)(C++20)(C++20)
   cmp_not_equalcmp_greatercmp_greater_than
   (C++20)(C++20)(C++20)
   in_range
   (C++20)
   Swap and type operations
   swap
   ranges::swap
   (C++20)
   exchange
   (C++14)
   declval
   (C++11)
   to_underlying
   (C++23)
   forward
   (C++11)
   forward_like
   (C++23)
   move
   (C++11)
   move_if_noexcept
   (C++11)
   as_const
   (C++17)
   Common vocabulary types
   pair
   tuple
   (C++11)
   optional
   (C++17)
   any
   (C++17)
   variant
   (C++17)
   tuple_size
   (C++11)
   tuple_element
   (C++11)
   apply
   (C++17)
   make_from_tuple
   (C++17)
   expected
   (C++23)
   Elementary string conversions
   to_chars
   (C++17)
   from_chars
   (C++17)
   chars_format
   (C++17)
   to_chars_result
   (C++17)
   from_chars_result
   (C++17)

   Date and time utilities
   Time point
   time_point
   (C++11)
   clock_time_conversion
   (C++20)
   clock_cast
   (C++20)
   Duration
   duration
   (C++11)
   Clocks
   system_clock
   (C++11)
   steady_clock
   (C++11)
   high_resolution_clock
   (C++11)
   is_clock
   (C++20)
   utc_clock
   (C++20)
   tai_clock
   (C++20)
   gps_clock
   (C++20)
   file_clock
   (C++20)
   local_t
   (C++20)
   Time of day
   is_amis_pm
   (C++20)(C++20)
   make12make24
   (C++20)(C++20)
   hh_mm_ss
   (C++20)
   Calendars
   day
   (C++20)
   month
   (C++20)
   year
   (C++20)
   weekday
   (C++20)
   operator/
   (C++20)
   year_month_day
   (C++20)
   year_month_day_last
   (C++20)
   year_month_weekday
   (C++20)
   year_month_weekday_last
   (C++20)
   weekday_indexed
   (C++20)
   weekday_last
   (C++20)
   month_day
   (C++20)
   month_day_last
   (C++20)
   month_weekday
   (C++20)
   month_weekday_last
   (C++20)
   year_month
   (C++20)
   last_speclast
   (C++20)(C++20)
   Time zones
   tzdb
   (C++20)
   tzdb_list
   (C++20)
   get_tzdbget_tzdb_listreload_tzdbremote_version
   (C++20)(C++20)(C++20)(C++20)
   sys_info
   (C++20)
   local_info
   (C++20)
   nonexistent_local_time
   (C++20)
   ambiguous_local_time
   (C++20)
   locate_zone
   (C++20)
   current_zone
   (C++20)
   time_zone
   (C++20)
   choose
   (C++20)
   zoned_traits
   (C++20)
   zoned_time
   (C++20)
   time_zone_link
   (C++20)
   leap_second
   (C++20)
   leap_second_info
   (C++20)
   get_leap_second_info
   (C++20)
   chrono I/O
   parse
   (C++20)
   C-style date and time

   std::chrono::duration
   Member functions
   duration::duration
   duration::operator=
   duration::count
   duration::zero
   duration::min
   duration::max
   duration::operator+duration::operator-
   duration::operator++duration::operator--
   duration::operator+=duration::operator-=duration::operator*=duration::o
   perator/=duration::operator%=
   Non-member functions
   operator+operator-operator*operator/operator%
   operator==operator!=operator<operator<=operator>operator>=operator<=>
   (until C++20)(C++20)
   operator<<
   (C++20)
   duration_cast
   floor
   (C++17)
   ceil
   (C++17)
   round
   (C++17)
   abs
   (C++17)
   operator""h
   (C++14)
   operator""min
   (C++14)
   operator""s
   (C++14)
   operator""ms
   (C++14)
   operator""us
   (C++14)
   operator""ns
   (C++14)
   from_stream
   (C++20)
   Helper classes
   common_type
   treat_as_floating_point

   duration_values
   formatter<std::chrono::duration>
   (C++20)
   hash<std::chrono::duration>
   (C++26)

   Defined in header <chrono>
   template< class Rep >
   struct treat_as_floating_point : std::is_floating_point<Rep> {};
                             (since C++11)

   The std::chrono::treat_as_floating_point trait helps determine if a
   duration can be converted to another duration with a different tick
   period.

   Implicit conversions between two durations normally depends on the tick
   period of the durations. However, implicit conversions can happen
   regardless of tick period if
   std::chrono::treat_as_floating_point<Rep>::value == true.

Helper variable template

   template< class Rep >
   inline constexpr bool treat_as_floating_point_v =
   treat_as_floating_point<Rep>::value;
                        (since C++17)

Specializations

   std::chrono::treat_as_floating_point may be specialized for
   program-defined types.

Example

   Run this code
#include <chrono>
#include <iostream>
#include <thread>

void timed_piece_of_code()
{
    std::chrono::milliseconds simulated_work(2);
    std::this_thread::sleep_for(simulated_work);
}

int main()
{
    auto start = std::chrono::high_resolution_clock::now();

    std::cout << "Running some timed piece of code...\n";
    timed_piece_of_code();

    auto stop = std::chrono::high_resolution_clock::now();

    // A floating point milliseconds type
    using FpMilliseconds =
        std::chrono::duration<float, std::chrono::milliseconds::period>;

    static_assert(std::chrono::treat_as_floating_point<FpMilliseconds::rep>::val
ue,
                  "Rep required to be floating point");

    // Note that implicit conversion is not allowed here
    auto i_ms = std::chrono::duration_cast<std::chrono::milliseconds>(stop - sta
rt);

    // Note that implicit conversion is allowed here
    auto f_ms = FpMilliseconds(stop - start);

    std::cout << "Timing stats:\n";

    std::cout << "  Time in milliseconds, using default rep: "
              << i_ms.count() << '\n';

    std::cout << "  Time in milliseconds, using floating point rep: "
              << f_ms.count() << '\n';
}

   Possible output:
Running some timed piece of code...
Timing stats:
  Time in milliseconds, using default rep: 2
  Time in milliseconds, using floating point rep: 2.57307

See also

   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/chrono/treat_as_
   floating_point&oldid=157209"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 23 August 2023, at 10:23.
     * This page has been accessed 48,396 times.
