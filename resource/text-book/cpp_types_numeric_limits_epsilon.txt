std::numeric_limits<T>::epsilon

   From cppreference.com
   < cpp | types | numeric limits

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Utilities library
   Language support
   Type support (basic types, RTTI)
   Library feature-test macros (C++20)
   Dynamic memory management
   Program utilities
   Coroutine support (C++20)
   Variadic functions
   is_constant_evaluated
   (C++20)
   is_within_lifetime
   (C++26)
   initializer_list
   (C++11)
   source_location
   (C++20)
   Debugging support
   is_debugger_present
   (C++26)
   breakpoint_if_debugging
   (C++26)
   breakpoint
   (C++26)
   Three-way comparison
   three_way_comparablethree_way_comparable_with
   (C++20)(C++20)
   strong_ordering
   (C++20)
   weak_ordering
   (C++20)
   partial_ordering
   (C++20)
   common_comparison_category
   (C++20)
   compare_three_way_result
   (C++20)
   compare_three_way
   (C++20)
   strong_order
   (C++20)
   weak_order
   (C++20)
   partial_order
   (C++20)
   compare_strong_order_fallback
   (C++20)
   compare_weak_order_fallback
   (C++20)
   compare_partial_order_fallback
   (C++20)
   is_eqis_ltis_lteq
   (C++20)(C++20)(C++20)
   is_neqis_gtis_gteq
   (C++20)(C++20)(C++20)
   General utilities
   Date and time
   Function objects
   Formatting library (C++20)
   bitset
   hash
   (C++11)
   Relational operators (deprecated in C++20)
   rel_ops::operator!=rel_ops::operator>

   rel_ops::operator<=rel_ops::operator>=
   Integer comparison functions
   cmp_equalcmp_lesscmp_less_than
   (C++20)(C++20)(C++20)
   cmp_not_equalcmp_greatercmp_greater_than
   (C++20)(C++20)(C++20)
   in_range
   (C++20)
   Swap and type operations
   swap
   ranges::swap
   (C++20)
   exchange
   (C++14)
   declval
   (C++11)
   to_underlying
   (C++23)
   forward
   (C++11)
   forward_like
   (C++23)
   move
   (C++11)
   move_if_noexcept
   (C++11)
   as_const
   (C++17)
   Common vocabulary types
   pair
   tuple
   (C++11)
   optional
   (C++17)
   any
   (C++17)
   variant
   (C++17)
   tuple_size
   (C++11)
   tuple_element
   (C++11)
   apply
   (C++17)
   make_from_tuple
   (C++17)
   expected
   (C++23)
   Elementary string conversions
   to_chars
   (C++17)
   from_chars
   (C++17)
   chars_format
   (C++17)
   to_chars_result
   (C++17)
   from_chars_result
   (C++17)

   Type support
   Basic types
   Fixed width integer types (C++11)
   Fixed width floating-point types (C++23)
   ptrdiff_t
   size_t
   max_align_t
   (C++11)
   byte
   (C++17)
   nullptr_t
   (C++11)
   offsetof
   NULL
   Numeric limits
   numeric_limits
   C numeric limits interface
   Runtime type information
   type_info
   type_index
   (C++11)
   bad_typeid
   bad_cast

   std::numeric_limits
   Static constants
   numeric_limits::is_specialized
   numeric_limits::is_signed
   numeric_limits::is_integer
   numeric_limits::is_exact
   numeric_limits::has_infinity
   numeric_limits::has_quiet_NaN
   numeric_limits::has_signaling_NaN
   numeric_limits::has_denorm
   numeric_limits::has_denorm_loss
   numeric_limits::round_style
   numeric_limits::is_iec559
   numeric_limits::is_bounded
   numeric_limits::is_modulo
   numeric_limits::digits
   numeric_limits::digits10
   numeric_limits::max_digits10
   (C++11)
   numeric_limits::radix
   numeric_limits::min_exponent
   numeric_limits::min_exponent10
   numeric_limits::max_exponent
   numeric_limits::max_exponent10
   numeric_limits::traps
   numeric_limits::tinyness_before
   Static member functions
   numeric_limits::min
   numeric_limits::lowest
   (C++11)
   numeric_limits::max
   numeric_limits::epsilon
   numeric_limits::round_error
   numeric_limits::infinity
   numeric_limits::quiet_NaN
   numeric_limits::signaling_NaN
   numeric_limits::denorm_min
   Helper types
   float_round_style
   float_denorm_style

   static T epsilon() throw();
                                         (until C++11)
   static constexpr T epsilon() noexcept;
                                         (since C++11)

   Returns the machine epsilon, that is, the difference between 1.0 and
   the next value representable by the floating-point type T. It is only
   meaningful if std::numeric_limits<T>::is_integer == false.

Return value

   T                               std::numeric_limits<T>::epsilon()
   /* non-specialized */           T()
   bool                            false
   char                            0
   signed char                     0
   unsigned char                   0
   wchar_t                         0
   char8_t (since C++20)           0
   char16_t (since C++11)          0
   char32_t (since C++11)          0
   short                           0
   unsigned short                  0
   int                             0
   unsigned int                    0
   long                            0
   unsigned long                   0
   long long (since C++11)         0
   unsigned long long(since C++11) 0
   float                           FLT_EPSILON
   double                          DBL_EPSILON
   long double                     LDBL_EPSILON

Example

   Demonstrates the use of machine epsilon to compare floating-point
   values for equality:
   Run this code
#include <algorithm>
#include <cmath>
#include <cstddef>
#include <iomanip>
#include <iostream>
#include <limits>
#include <type_traits>

template <class T>
std::enable_if_t<not std::numeric_limits<T>::is_integer, bool>
equal_within_ulps(T x, T y, std::size_t n)
{
    // Since `epsilon()` is the gap size (ULP, unit in the last place)
    // of floating-point numbers in interval [1, 2), we can scale it to
    // the gap size in interval [2^e, 2^{e+1}), where `e` is the exponent
    // of `x` and `y`.

    // If `x` and `y` have different gap sizes (which means they have
    // different exponents), we take the smaller one. Taking the bigger
    // one is also reasonable, I guess.
    const T m = std::min(std::fabs(x), std::fabs(y));

    // Subnormal numbers have fixed exponent, which is `min_exponent - 1`.
    const int exp = m < std::numeric_limits<T>::min()
                  ? std::numeric_limits<T>::min_exponent - 1
                  : std::ilogb(m);

    // We consider `x` and `y` equal if the difference between them is
    // within `n` ULPs.
    return std::fabs(x - y) <= n * std::ldexp(std::numeric_limits<T>::epsilon(),
 exp);
}

int main()
{
    double x = 0.3;
    double y = 0.1 + 0.2;
    std::cout << std::hexfloat;
    std::cout << "x = " << x << '\n';
    std::cout << "y = " << y << '\n';
    std::cout << (x == y ? "x == y" : "x != y") << '\n';
    for (std::size_t n = 0; n <= 10; ++n)
        if (equal_within_ulps(x, y, n))
        {
            std::cout << "x equals y within " << n << " ulps" << '\n';
            break;
        }
}

   Output:
x = 0x1.3333333333333p-2
y = 0x1.3333333333334p-2
x != y
x equals y within 1 ulps

See also

   nextafternextafterfnextafterlnexttowardnexttowardfnexttowardl
   (C++11)(C++11)(C++11)(C++11)(C++11)(C++11)
   next representable floating-point value towards the given value
   (function)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/types/numeric_li
   mits/epsilon&oldid=161249"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 23 October 2023, at 14:55.
     * This page has been accessed 372,366 times.
