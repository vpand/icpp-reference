std::rotate

   From cppreference.com
   < cpp | algorithm

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Algorithm library
   Constrained algorithms and algorithms on ranges (C++20)
   Constrained algorithms, e.g. ranges::copy, ranges::sort, ...
   Execution policies (C++17)
   is_execution_policy
   (C++17)
   execution::seqexecution::parexecution::par_unseqexecution::unseq
   (C++17)    (C++17)(C++17)(C++20)
   execution::sequenced_policyexecution::parallel_policyexecution::paralle
   l_unsequenced_policyexecution::parallel_unsequenced
   (C++17)(C++17)(C++17)(C++20)
   Non-modifying sequence operations
   Batch operations
   for_each
   for_each_n
   (C++17)
   Search operations
   all_ofany_ofnone_of
   (C++11)                (C++11)(C++11)
   countcount_if
   mismatch
   equal
   findfind_iffind_if_not
   (C++11)
   find_end
   find_first_of
   adjacent_find
   search
   search_n
   Modifying sequence operations
   Copy operations
   copycopy_if
   (C++11)
   copy_backward
   copy_n
   (C++11)
   move
   (C++11)
   move_backward
   (C++11)
   Swap operations
   swap
   iter_swap
   swap_ranges
   Transformation operations
   replacereplace_if
   transform
   replace_copyreplace_copy_if
   Generation operations
   fill
   fill_n
   generate
   generate_n
   Removing operations
   removeremove_if
   unique
   remove_copyremove_copy_if
   unique_copy
   Order-changing operations
   reverse
   reverse_copy
   rotate
   rotate_copy
   random_shuffleshuffle
   (until C++17)(C++11)
   shift_leftshift_right
   (C++20)(C++20)
   Sampling operations
   sample
   (C++17)
   Sorting and related operations
   Partitioning operations
   partition
   partition_copy
   (C++11)
   stable_partition
   is_partitioned
   (C++11)
   partition_point
   (C++11)
   Sorting operations
   sort
   stable_sort
   partial_sort
   partial_sort_copy
   is_sorted
   (C++11)
   is_sorted_until
   (C++11)
   nth_element
   Binary search operations
   (on partitioned ranges)
   lower_bound
   upper_bound
   equal_range
   binary_search
   Set operations (on sorted ranges)
   includes
   set_union
   set_intersection
   set_difference
   set_symmetric_difference
   Merge operations (on sorted ranges)
   merge
   inplace_merge
   Heap operations
   push_heap
   pop_heap
   make_heap
   sort_heap
   is_heap
   (C++11)
   is_heap_until
   (C++11)
   Minimum/maximum operations
   max
   min
   minmax
   (C++11)
   clamp
   (C++17)
   max_element
   min_element
   minmax_element
   (C++11)
   Lexicographical comparison operations
   lexicographical_compare
   lexicographical_compare_three_way
   (C++20)
   Permutation operations
   next_permutation
   prev_permutation
   is_permutation
   (C++11)
   C library
   qsort
   bsearch
   Numeric operations
   iota
   (C++11)
   inner_product
   adjacent_difference

   accumulate
   reduce
   (C++17)
   transform_reduce
   (C++17)
   partial_sum
   inclusive_scan
   (C++17)
   exclusive_scan
   (C++17)
   transform_inclusive_scan
   (C++17)
   transform_exclusive_scan
   (C++17)
   Operations on uninitialized memory
   uninitialized_copy
   uninitialized_move
   (C++17)
   uninitialized_fill
   uninitialized_copy_n
   (C++11)
   uninitialized_move_n
   (C++17)
   uninitialized_fill_n
   destroy
   (C++17)
   destroy_n
   (C++17)
   destroy_at
   (C++17)
   construct_at
   (C++20)
   uninitialized_default_construct
   (C++17)
   uninitialized_value_construct
   (C++17)
   uninitialized_default_construct_n
   (C++17)
   uninitialized_value_construct_n
   (C++17)

   Defined in header <algorithm>
   template< class ForwardIt >
   ForwardIt rotate( ForwardIt first, ForwardIt middle, ForwardIt last );
   (1)                                               (constexpr since C++20)
   template< class ExecutionPolicy, class ForwardIt >

   ForwardIt rotate( ExecutionPolicy&& policy,
                     ForwardIt first, ForwardIt middle, ForwardIt last );
   (2)                                               (since C++17)
   1) Performs a left rotation on a range of elements.
   Specifically, std::rotate swaps the elements in the range [first, last)
   in such a way that the elements in [first, middle) are placed after the
   elements in [middle, last) while the orders of the elements in both
   ranges are preserved.
   2) Same as (1), but executed according to policy.
   This overload participates in overload resolution only if

   std::is_execution_policy_v<std::decay_t<ExecutionPolicy>> is true.
   (until C++20)

   std::is_execution_policy_v<std::remove_cvref_t<ExecutionPolicy>> is
   true.
   (since C++20)

   If any of the following conditions is satisfied, the behavior is
   undefined:
     * [first, middle) or [middle, last) is not a valid range.

     * The type of *first is not Swappable.

   (until C++11)
     * ForwardIt is not ValueSwappable.
     * The type of *first is not MoveConstructible.
     * The type of *first is not MoveAssignable.

   (since C++11)

Parameters

   first - the beginning of the original range
   middle - the element that should appear at the beginning of the rotated
   range
   last - the end of the original range
   policy - the execution policy to use. See execution policy for details.
   Type requirements
   -
   ForwardIt must meet the requirements of LegacyForwardIterator.

Return value

   The iterator to the element originally referenced by *first, i.e. the
   std::distance(middle, last)
   th next iterator of first.

Complexity

   At most std::distance(first, last) swaps.

Exceptions

   The overload with a template parameter named ExecutionPolicy reports
   errors as follows:
     * If execution of a function invoked as part of the algorithm throws
       an exception and ExecutionPolicy is one of the standard policies,
       std::terminate is called. For any other ExecutionPolicy, the
       behavior is implementation-defined.
     * If the algorithm fails to allocate memory, std::bad_alloc is
       thrown.

Possible implementation

   See also the implementations in libstdc++, libc++, and MSVC STL.
template<class ForwardIt>
constexpr // since C++20
ForwardIt rotate(ForwardIt first, ForwardIt middle, ForwardIt last)
{
    if (first == middle)
        return last;

    if (middle == last)
        return first;

    ForwardIt write = first;
    ForwardIt next_read = first; // read position for when "read" hits "last"

    for (ForwardIt read = middle; read != last; ++write, ++read)
    {
        if (write == next_read)
            next_read = read; // track where "first" went
        std::iter_swap(write, read);
    }

    // rotate the remaining sequence into place
    rotate(write, next_read, last);
    return write;
}

Notes

   std::rotate has better efficiency on common implementations if
   ForwardIt satisfies LegacyBidirectionalIterator or (better)
   LegacyRandomAccessIterator.

   Implementations (e.g. MSVC STL) may enable vectorization when the
   iterator type satisfies LegacyContiguousIterator and swapping its value
   type calls neither non-trivial special member function nor ADL-found
   swap.

Example

   std::rotate is a common building block in many algorithms. This example
   demonstrates insertion sort.
   Run this code
#include <algorithm>
#include <iostream>
#include <vector>

auto print = [](const auto remark, const auto& v)
{
    std::cout << remark;
    for (auto n : v)
        std::cout << n << ' ';
    std::cout << '\n';
};

int main()
{
    std::vector<int> v{2, 4, 2, 0, 5, 10, 7, 3, 7, 1};
    print("before sort:\t\t", v);

    // insertion sort
    for (auto i = v.begin(); i != v.end(); ++i)
        std::rotate(std::upper_bound(v.begin(), i, *i), i, i + 1);
    print("after sort:\t\t", v);

    // simple rotation to the left
    std::rotate(v.begin(), v.begin() + 1, v.end());
    print("simple rotate left:\t", v);

    // simple rotation to the right
    std::rotate(v.rbegin(), v.rbegin() + 1, v.rend());
    print("simple rotate right:\t", v);
}

   Output:
before sort:            2 4 2 0 5 10 7 3 7 1
after sort:             0 1 2 2 3 4 5 7 7 10
simple rotate left:     1 2 2 3 4 5 7 7 10 0
simple rotate right:    0 1 2 2 3 4 5 7 7 10

Defect reports

   The following behavior-changing defect reports were applied
   retroactively to previously published C++ standards.
   DR Applied to Behavior as published Correct behavior
   LWG 488 C++98 the new location of the element pointed by first was not
   returned returned

See also

   rotate_copy
   copies and rotate a range of elements
   (function template)
   ranges::rotate
   (C++20)
   rotates the order of elements in a range
   (niebloid)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/algorithm/rotate
   &oldid=170516"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 27 March 2024, at 23:09.
     * This page has been accessed 401,417 times.
