Basic concepts

   From cppreference.com
   < cpp | language

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   C++ language
   General topics
   Preprocessor
   Comments
   Keywords
   Escape sequences
   Flow control
   Conditional execution statements
   if
   switch
   Iteration statements (loops)
   for
   range-for (C++11)
   while
   do-while
   Jump statements
   continue - break
   goto - return
   Functions
   Function declaration
   Lambda function expression
   inline specifier
   Dynamic exception specifications (until C++17*)
   noexcept specifier (C++11)
   Exceptions
   throw-expression
   try block
   handler
   Namespaces
   Namespace declaration
   Namespace aliases
   Types
   Fundamental types
   Enumeration types
   Function types
   Class/struct types
   Union types
   Specifiers
   const/volatile
   decltype (C++11)
   auto (C++11)
   constexpr (C++11)
   consteval (C++20)
   constinit (C++20)
   Storage duration specifiers
   Initialization
   Default-initialization
   Value-initialization
   Zero-initialization
   Copy-initialization
   Direct-initialization
   Aggregate initialization
   List-initialization (C++11)
   Constant initialization
   Reference initialization
   Expressions
   Value categories
   Order of evaluation
   Operators
   Operator precedence
   Alternative representations
   Literals
   Boolean - Integer - Floating-point
   Character - String - nullptr (C++11)
   User-defined (C++11)
   Utilities
   Attributes (C++11)
   Types
   typedef declaration
   Type alias declaration (C++11)
   Casts
   Implicit conversions
   static_cast
   const_cast
   Explicit conversions
   dynamic_cast
   reinterpret_cast
   Memory allocation
   new expression
   delete expression
   Classes
   Class declaration
   Constructors
   this pointer
   Access specifiers
   friend specifier
   Class-specific function properties
   Virtual function
   override specifier (C++11)
   final specifier (C++11)
   explicit (C++11)
   static
   Special member functions
   Default constructor
   Copy constructor
   Move constructor (C++11)
   Copy assignment
   Move assignment (C++11)
   Destructor
   Templates
   Class template
   Function template
   Template specialization
   Parameter packs (C++11)
   Miscellaneous
   Inline assembly
   History of C++

   Basic Concepts
   Comments
   ASCII
   Punctuation
   Names and identifiers
   Types
   Fundamental types
   Objects
   Scope
   Object lifetime
   Storage duration and linkage
   Definitions and ODR
   Name lookup
   Qualified name lookup
   Unqualified name lookup
   The as-if rule
   Undefined behavior
   Memory model
   Multi-threaded executions and data races (C++11)
   Character sets and encodings
   Phases of translation
   The main function
   Modules (C++20)

   This section provides definitions for the specific terminology and the
   concepts used when describing the C++ programming language.

   A C++ program is a sequence of text files (typically header and source
   files) that contain declarations. They undergo translation to become an
   executable program, which is executed when the C++ implementation calls
   its main function.

   Certain words in a C++ program have special meaning, and these are
   known as keywords. Others can be used as identifiers. Comments are
   ignored during translation. C++ programs also contain literals, the
   values of characters inside them are determined by character sets and
   encodings. Certain characters in the program have to be represented
   with escape sequences.

   The entities of a C++ program are values, objects, references,
   structured bindings(since C++17), functions, enumerators, types, class
   members, templates, template specializations, parameter packs(since
   C++11), and namespaces. Preprocessor macros are not C++ entities.

   Declarations may introduce entities, associate them with names and
   define their properties. The declarations that define all properties
   required to use an entity are definitions. A program must contain only
   one definition of any non-inline function or variable that is odr-used.

   Definitions of functions usually include sequences of statements, some
   of which include expressions, which specify the computations to be
   performed by the program.

   Names encountered in a program are associated with the declarations
   that introduced them using name lookup. Each name is only valid within
   a part of the program called its scope. Some names have linkage which
   makes them refer to the same entities when they appear in different
   scopes or translation units.

   Each object, reference, function, expression in C++ is associated with
   a type, which may be fundamental, compound, or user-defined, complete
   or incomplete, etc.

   Declared objects and declared references that are not non-static data
   members are variables.

See also

   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/language/basic_c
   oncepts&oldid=168909"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 23 January 2024, at 18:29.
     * This page has been accessed 849,708 times.
