std::move_constructible

   From cppreference.com
   < cpp | concepts

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Concepts library
   Core language concepts
   same_as
   derived_from
   convertible_to
   common_reference_with

   common_with
   integral
   signed_integral
   unsigned_integral
   floating_point
   swappableswappable_with
   destructible
   constructible_from
   default_initializable
   move_constructible
   copy_constructible
   assignable_from
   Comparison concepts
   equality_comparableequality_comparable_with
   totally_orderedtotally_ordered_with
   Object concepts
   movable
   copyable
   semiregular
   regular
   Callable concepts
   invocableregular_invocable
   predicate
   relation
   equivalence_relation
   strict_weak_order
   Exposition-only concepts
   boolean-testable

   Defined in header <concepts>
   template< class T >
   concept move_constructible = std::constructible_from<T, T> &&
   std::convertible_to<T, T>;
                               (since C++20)

   The concept move_constructible is satisfied if T is a reference type,
   or if it is an object type where an object of that type can be
   constructed from an rvalue of that type in both direct- and
   copy-initialization contexts, with the usual semantics.

Semantic requirements

   If T is an object type, then move_constructible<T> is modeled only if
   given
     * rv, an rvalue of type T, and
     * u2, a distinct object of type T equal to rv,

   the following are true:
     * After the definition T u = rv;, u is equal to u2;
     * T(rv) is equal to u2; and
     * If T is not const-qualified, then rv's resulting state (after the
       definition/expression is evaluated in either bullets above) is
       valid but unspecified; otherwise, it is unchanged.

See also

   is_move_constructibleis_trivially_move_constructibleis_nothrow_move_con
   structible
   (C++11)(C++11)(C++11)
   checks if a type can be constructed from an rvalue reference
   (class template)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/concepts/move_co
   nstructible&oldid=161742"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 29 October 2023, at 14:14.
     * This page has been accessed 25,237 times.
