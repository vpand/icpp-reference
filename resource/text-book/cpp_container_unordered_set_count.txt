std::unordered_set<Key,Hash,KeyEqual,Allocator>::count

   From cppreference.com
   < cpp | container | unordered set


   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Containers library
   Sequence
   array
   (C++11)
   vector
   vector<bool>
   deque
   forward_list
   (C++11)
   list
   Associative
   set
   multiset
   map
   multimap
   Unordered associative
   unordered_set
   (C++11)
   unordered_multiset
   (C++11)
   unordered_map
   (C++11)
   unordered_multimap
   (C++11)
   Adaptors
   stack
   queue
   priority_queue
   flat_set
   (C++23)
   flat_multiset
   (C++23)
   flat_map
   (C++23)
   flat_multimap
   (C++23)
   Views
   span
   (C++20)
   mdspan
   (C++23)
   Iterator invalidation
   Member function table
   Non-member function table

   std::unordered_set
   Member types
   Member functions
   unordered_set::unordered_set
   unordered_set::~unordered_set
   unordered_set::operator=
   unordered_set::get_allocator
   Iterators
   unordered_set::beginunordered_set::cbegin
   unordered_set::endunordered_set::cend
   Capacity
   unordered_set::size
   unordered_set::max_size
   unordered_set::empty
   Modifiers
   unordered_set::clear
   unordered_set::erase
   unordered_set::swap
   unordered_set::extract
   (C++17)
   unordered_set::merge
   (C++17)
   unordered_set::insert
   unordered_set::insert_range
   (C++23)
   unordered_set::emplace
   unordered_set::emplace_hint
   Lookup
   unordered_set::count
   unordered_set::find
   unordered_set::contains
   (C++20)
   unordered_set::equal_range
   Bucket interface
   unordered_set::begin(size_type)unordered_set::cbegin(size_type)
   unordered_set::end(size_type)unordered_set::cend(size_type)
   unordered_set::bucket_count
   unordered_set::max_bucket_count
   unordered_set::bucket_size
   unordered_set::bucket
   Hash policy
   unordered_set::load_factor
   unordered_set::max_load_factor

   unordered_set::rehash
   unordered_set::reserve
   Observers
   unordered_set::hash_function
   unordered_set::key_eq
   Non-member functions
   operator==operator!=
   (C++11)(C++11)(until C++20)
   std::swap(std::unordered_set)
   (C++11)
   erase_if(std::unordered_set)
   (C++20)
   Deduction guides(C++17)

   size_type count( const Key& key ) const;
   (1)                                     (since C++11)
   template< class K >
   size_type count( const K& x ) const;
   (2)                                     (since C++20)
   1) Returns the number of elements with key that compares equal to the
   specified argument key, which is either 0 or 1 since this container
   does not allow duplicates.
   2) Returns the number of elements with key that compares equivalent to
   the specified argument x. This overload participates in overload
   resolution only if Hash::is_transparent and KeyEqual::is_transparent
   are valid and each denotes a type. This assumes that such Hash is
   callable with both K and Key type, and that the KeyEqual is
   transparent, which, together, allows calling this function without
   constructing an instance of Key.

Parameters

   key - key value of the elements to count
   x   - a value of any type that can be transparently compared with a key

Return value

   1) Number of elements with key key, that is either 1 or 0.
   2) Number of elements with key that compares equivalent to x.

Complexity

   Constant on average, worst case linear in the size of the container.

Notes

   Feature-test macro Value Std Feature
   __cpp_lib_generic_unordered_lookup 201811L (C++20) Heterogeneous
   comparison lookup in unordered associative containers, overload (2)

Example

   Run this code
#include <algorithm>
#include <iostream>
#include <unordered_set>

int main()
{
    std::unordered_set set{2, 7, 1, 8, 2, 8, 1, 8, 2, 8};

    std::cout << "The set is: ";
    for (int e : set)
        std::cout << e << ' ';

    const auto [min, max] = std::ranges::minmax(set);

    std::cout << "\nNumbers from " << min << " to " << max << " that are in the
set: ";
    for (int i{min}; i <= max; ++i)
        if (set.count(i) == 1)
            std::cout << i << ' ';
    std::cout << '\n';
}

   Possible output:
The set is: 8 1 7 2
Numbers from 1 to 8 that are in the set: 1 2 7 8

See also

   find
   finds element with specific key
   (public member function)
   contains
   (C++20)
   checks if the container contains element with specific key
   (public member function)
   equal_range
   returns range of elements matching a specific key
   (public member function)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/container/unorde
   red_set/count&oldid=135901"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 29 November 2021, at 13:46.
     * This page has been accessed 101,063 times.
