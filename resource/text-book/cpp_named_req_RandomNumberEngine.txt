C++ named requirements: RandomNumberEngine (since C++11)

   From cppreference.com
   < cpp | named req

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   C++ named requirements
   Basic
   DefaultConstructible
   CopyAssignable
   CopyConstructible
   MoveAssignable
   (C++11)
   MoveConstructible
   (C++11)
   Destructible
   Type properties
   ScalarType
   TriviallyCopyable
   (C++11)
   StandardLayoutType
   (C++11)
   PODType
   TrivialType
   (C++11)
   ImplicitLifetimeType
   Library-Wide
   EqualityComparable
   LessThanComparable
   Swappable
   ValueSwappable
   (C++11)
   NullablePointer
   (C++11)
   Hash
   (C++11)
   Allocator
   FunctionObject
   Callable
   Predicate
   BinaryPredicate
   Compare
   Container
   Container
   SequenceContainer
   ContiguousContainer
   (C++17)
   ReversibleContainer
   AssociativeContainer
   AllocatorAwareContainer
   UnorderedAssociativeContainer
   (C++11)
   Container Elements
   DefaultInsertable
   (C++11)
   CopyInsertable
   (C++11)
   MoveInsertable
   (C++11)
   EmplaceConstructible
   (C++11)
   Erasable
   (C++11)
   Iterator
   LegacyIterator
   LegacyOutputIterator
   LegacyInputIterator
   LegacyForwardIterator
   LegacyBidirectionalIterator
   LegacyRandomAccessIterator
   LegacyContiguousIterator
   (C++17)
   ConstexprIterator
   (C++20)
   Stream I/O
   FormattedInputFunction
   UnformattedInputFunction
   FormattedOutputFunction
   UnformattedOutputFunction
   Formatters
   BasicFormatter
   (C++20)
   Formatter
   (C++20)
   Random Numbers
   SeedSequence
   (C++11)
   RandomNumberEngine
   (C++11)
   RandomNumberDistribution
   (C++11)
   UniformRandomBitGenerator
   (C++11)
   RandomNumberEngineAdaptor
   (C++11)
   Concurrency
   BasicLockable
   (C++11)
   Lockable
   (C++11)
   TimedLockable
   (C++11)
   SharedLockable
   (C++14)
   SharedTimedLockable
   (C++14)
   Mutex
   (C++11)
   TimedMutex
   (C++11)
   SharedMutex
   (C++17)
   SharedTimedMutex
   (C++14)
   Ranges
   RangeAdaptorObject
   (C++20)
   RangeAdaptorClosureObject
   (C++20)
   Other
   CharTraits
   RegexTraits
   (C++11)
   BitmaskType
   LiteralType
   (C++11)
   NumericType
   UnaryTypeTrait
   (C++11)
   BinaryTypeTrait
   (C++11)
   TransformationTrait
   (C++11)
   Clock
   (C++11)
   TrivialClock
   (C++11)

   A random number engine is a function object returning unsigned integer
   values such that each value in the range of possible results has
   (ideally) equal probability.

   Any random number engine is also a UniformRandomBitGenerator, and
   therefore may be plugged into any random number distribution in order
   to obtain a random number (formally, a random variate).

Requirements

   A type satisfies RandomNumberEngine if it satisfies
   UniformRandomBitGenerator and, given the following types and values,
   the semantic and complexity requirements in the table below are
   satisfied:
   Type  Definition
   E     a RandomNumberEngine type
   T     E::result_type
   Value Definition
   e     a value of type E
   v     an lvalue of type E
   x, y  values of type (possibly const-qualified) E
   s     a value of type T
   q     a SeedSequence lvalue
   z     a value of type unsigned long long
   os    an lvalue whose type is a specialization of std::basic_ostream
   is    an lvalue whose type is a specialization of std::basic_istream
   n     the size of E's state
   TA    the transition algorithm of E
   GA    the generation algorithm of E
   Expression Return type Semantics Complexity
   E() N/A Creates an engine with the same initial state as all other
   default-constructed engines of type E. \(O(n)\)O(n)
   E(x) Creates an engine that compares equal to x. \(O(n)\)O(n)
   E(s) Creates an engine whose initial state is determined by s.
   \(O(n)\)O(n)
   E(q) Creates an engine whose initial state is determined by a single
   call to q.generate. same as the complexity of q.generate called on a
   sequence whose length is n
   e.seed() void Postcondition: e == E(). same as E()
   e.seed(s) void Postcondition: e == E(s). same as E(s)
   e.seed(q) void Postcondition: e == E(q). same as E(q)
   e() T Advances e's state from e
   i to e
   i+1 (i.e. TA(e
   i)) and returns GA(e
   i). amortized constant
   e.discard(z) void Advances e's state from e
   i to e
   i+z by any means equivalent to z consecutive calls of e(). no worse
   than the complexity of z consecutive calls of e()
   x == y bool For all positive integer i, if the ith consecutive calls of
   x() and y() return the same value, returns true. Otherwise returns
   false. \(O(n)\)O(n)
   x != y bool !(x == y) \(O(n)\)O(n)
   os << x decltype(os)&  With fmtflags set to std::ios_base::dec |
   std::ios_base::left and the fill character set to the space character,
   writes to os the textual representation of x's current state.

   Postcondition: os's fmtflags and the fill character are the same as
   before.
   \(O(n)\)O(n)
   is >> v decltype(is)& With fmtflags set to std::ios_base::dec, reads
   from is the textual representation of v's current state. If bad input
   is encountered, ensures that v's state is unchanged by the operation
   and calls is.setstate(std::ios_base::failbit) (which may throw
   std::ios_base::failure).

   Precondition: is provides a textual representation that was previously
   written using an output stream pr satisfying all following conditions:
     * is.getloc() == pr.getloc() is true.
     * std::is_same<decltype(is)::char_type,
                    decltype(pr)::char_type>::value is true.
     * std::is_same<decltype(is)::traits_type,
                    decltype(pr)::traits_type>::value is true.

   Postcondition: is's fmtflags are the same as before.
   \(O(n)\)O(n)

Standard library

   The following standard library facilities satisfy RandomNumberEngine:
   linear_congruential_engine
   (C++11)
   implements linear congruential algorithm
   (class template)
   mersenne_twister_engine
   (C++11)
   implements Mersenne twister algorithm
   (class template)
   subtract_with_carry_engine
   (C++11)
   implements a subtract-with-carry (lagged Fibonacci) algorithm
   (class template)
   discard_block_engine
   (C++11)
   discards some output of a random number engine
   (class template)
   independent_bits_engine
   (C++11)
   packs the output of a random number engine into blocks of a specified
   number of bits
   (class template)
   shuffle_order_engine
   (C++11)
   delivers the output of a random number engine in a different order
   (class template)

   The following standard library facilities satisfy
   UniformRandomBitGenerator but not RandomNumberEngine:
   random_device
   (C++11)
   non-deterministic random number generator using hardware entropy source
   (class)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/named_req/Random
   NumberEngine&oldid=169620"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 6 February 2024, at 00:44.
     * This page has been accessed 22,293 times.
