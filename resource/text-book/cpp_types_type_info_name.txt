std::type_info::name

   From cppreference.com
   < cpp | types | type info

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Utilities library
   Language support
   Type support (basic types, RTTI)
   Library feature-test macros (C++20)
   Dynamic memory management
   Program utilities
   Coroutine support (C++20)
   Variadic functions
   is_constant_evaluated
   (C++20)
   is_within_lifetime
   (C++26)
   initializer_list
   (C++11)
   source_location
   (C++20)
   Debugging support
   is_debugger_present
   (C++26)
   breakpoint_if_debugging
   (C++26)
   breakpoint
   (C++26)
   Three-way comparison
   three_way_comparablethree_way_comparable_with
   (C++20)(C++20)
   strong_ordering
   (C++20)
   weak_ordering
   (C++20)
   partial_ordering
   (C++20)
   common_comparison_category
   (C++20)
   compare_three_way_result
   (C++20)
   compare_three_way
   (C++20)
   strong_order
   (C++20)
   weak_order
   (C++20)
   partial_order
   (C++20)
   compare_strong_order_fallback
   (C++20)
   compare_weak_order_fallback
   (C++20)
   compare_partial_order_fallback
   (C++20)
   is_eqis_ltis_lteq
   (C++20)(C++20)(C++20)
   is_neqis_gtis_gteq
   (C++20)(C++20)(C++20)
   General utilities
   Date and time
   Function objects
   Formatting library (C++20)
   bitset
   hash
   (C++11)
   Relational operators (deprecated in C++20)
   rel_ops::operator!=rel_ops::operator>

   rel_ops::operator<=rel_ops::operator>=
   Integer comparison functions
   cmp_equalcmp_lesscmp_less_than
   (C++20)(C++20)(C++20)
   cmp_not_equalcmp_greatercmp_greater_than
   (C++20)(C++20)(C++20)
   in_range
   (C++20)
   Swap and type operations
   swap
   ranges::swap
   (C++20)
   exchange
   (C++14)
   declval
   (C++11)
   to_underlying
   (C++23)
   forward
   (C++11)
   forward_like
   (C++23)
   move
   (C++11)
   move_if_noexcept
   (C++11)
   as_const
   (C++17)
   Common vocabulary types
   pair
   tuple
   (C++11)
   optional
   (C++17)
   any
   (C++17)
   variant
   (C++17)
   tuple_size
   (C++11)
   tuple_element
   (C++11)
   apply
   (C++17)
   make_from_tuple
   (C++17)
   expected
   (C++23)
   Elementary string conversions
   to_chars
   (C++17)
   from_chars
   (C++17)
   chars_format
   (C++17)
   to_chars_result
   (C++17)
   from_chars_result
   (C++17)

   Type support
   Basic types
   Fixed width integer types (C++11)
   Fixed width floating-point types (C++23)
   ptrdiff_t
   size_t
   max_align_t
   (C++11)
   byte
   (C++17)
   nullptr_t
   (C++11)
   offsetof
   NULL
   Numeric limits
   numeric_limits
   C numeric limits interface
   Runtime type information
   type_info
   type_index
   (C++11)
   bad_typeid
   bad_cast

   std::type_info
   Member functions
   type_info::~type_info
   type_info::operator==type_info::operator!=
   (until C++20)
   type_info::before
   type_info::hash_code
   (C++11)
   type_info::name

   const char* name() const;
                                     (until C++11)
   const char* name() const noexcept;
                                     (since C++11)

   Returns an implementation defined null-terminated character string
   containing the name of the type. No guarantees are given; in
   particular, the returned string can be identical for several types and
   change between invocations of the same program.

Parameters

   (none)

Return value

   Null-terminated character string containing the name of the type.

Notes

   The lifetime of the array pointed to by the returned pointer is not
   specified, but in practice it persists as long as the RTTI data
   structure for the given type exists, which has application lifetime
   unless loaded from a dynamic library (that can be unloaded).

   Some implementations (such as MSVC, IBM, Oracle) produce a
   human-readable type name. Others, most notably gcc and clang, return
   the mangled name, which is specified by the Itanium C++ ABI. The
   mangled name can be converted to human-readable form using
   implementation-specific API such as abi::__cxa_demangle directly or
   through boost::core::demangle. It can also be piped through the
   command-line utility c++filt -t.

Example

   Run this code
#include <boost/core/demangle.hpp>
#include <cstdlib>
#include <iostream>
#include <string>
#include <typeinfo>

struct Base { virtual ~Base() = default; };
struct Derived : Base {};

int main()
{
    Base b1;
    Derived d1;

    const Base* pb = &b1;
    std::cout << typeid(*pb).name() << '\n';
    pb = &d1;
    std::cout << typeid(*pb).name() << '\n';

    std::string real_name = boost::core::demangle(typeid(pb).name());
    std::cout << typeid(pb).name() << " => " << real_name << '\n';

    std::cout << "c++filt => " << std::flush;
    std::string s = typeid(pb).name();
    std::system(("c++filt -t " + s).data());
}

   Possible output:
// GCC/Clang:
4Base
7Derived
PK4Base => Base const*
c++filt => Base const*

// MSVC:
struct Base
struct Derived
struct Base const * __ptr64 => struct Base const * __ptr64

See also

   hash_code
   (C++11)
   returns a value which is identical for the same types
   (public member function)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/types/type_info/
   name&oldid=168469"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 6 January 2024, at 01:45.
     * This page has been accessed 232,760 times.
