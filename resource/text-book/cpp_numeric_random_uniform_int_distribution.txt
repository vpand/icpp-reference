std::uniform_int_distribution

   From cppreference.com
   < cpp | numeric | random

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Numerics library
   Common mathematical functions
   Mathematical special functions (C++17)
   Mathematical constants (C++20)
   Basic linear algebra algorithms (C++26)
   Floating-point environment (C++11)
   Complex numbers
   Numeric arrays
   Pseudo-random number generation
   Factor operations
   gcd
   (C++17)
   lcm
   (C++17)
   Interpolations
   midpoint
   (C++20)
   lerp
   (C++20)
   Saturation arithmetic
   add_sat
   (C++26)
   sub_sat
   (C++26)
   saturate_cast
   (C++26)
   mul_sat
   (C++26)
   div_sat
   (C++26)
   Generic numeric operations
   iota
   (C++11)
   ranges::iota
   (C++23)
   accumulate
   inner_product
   adjacent_difference
   partial_sum
   reduce
   (C++17)
   transform_reduce
   (C++17)
   inclusive_scan
   (C++17)
   exclusive_scan
   (C++17)
   transform_inclusive_scan
   (C++17)
   transform_exclusive_scan
   (C++17)
   Bit operations
   has_single_bit
   (C++20)
   bit_cast
   (C++20)
   bit_ceil
   (C++20)
   bit_floor
   (C++20)
   bit_width
   (C++20)
   rotl
   (C++20)
   rotr
   (C++20)
   popcount
   (C++20)
   countl_zero
   (C++20)
   countl_one
   (C++20)
   countr_zero
   (C++20)
   countr_one
   (C++20)
   byteswap
   (C++23)
   endian
   (C++20)

   Pseudo-random number generation
   Uniform random bit generators
   uniform_random_bit_generator
   (C++20)
   Random number engines
   linear_congruential_engine
   (C++11)
   mersenne_twister_engine
   (C++11)
   subtract_with_carry_engine
   (C++11)
   Random number engine adaptors
   discard_block_engine
   (C++11)
   independent_bits_engine
   (C++11)
   shuffle_order_engine
   (C++11)
   Predefined random number generators
   Non-deterministic random numbers
   random_device
   (C++11)
   Random number distributions
   Uniform distributions
   uniform_int_distribution
   (C++11)
   uniform_real_distribution
   (C++11)
   generate_canonical
   (C++11)
   Bernoulli distributions
   bernoulli_distribution
   (C++11)
   binomial_distribution
   (C++11)
   negative_binomial_distribution
   (C++11)
   geometric_distribution
   (C++11)
   Poisson distributions
   poisson_distribution
   (C++11)
   exponential_distribution
   (C++11)
   gamma_distribution
   (C++11)
   weibull_distribution
   (C++11)
   extreme_value_distribution
   (C++11)
   Normal distributions
   normal_distribution
   (C++11)
   lognormal_distribution
   (C++11)
   chi_squared_distribution
   (C++11)
   cauchy_distribution
   (C++11)
   fisher_f_distribution
   (C++11)
   student_t_distribution
   (C++11)
   Sampling distributions
   discrete_distribution
   (C++11)
   piecewise_constant_distribution
   (C++11)
   piecewise_linear_distribution
   (C++11)
   Utilities
   generate_canonical
   (C++11)
   seed_seq
   (C++11)
   Random number algorithms
   ranges::generate_random
   (C++26)
   C random library
   rand
   srand
   RAND_MAX

   std::uniform_int_distribution
   Member functions
   uniform_int_distribution::uniform_int_distribution
   (C++11)
   uniform_int_distribution::reset
   (C++11)
   Generation
   uniform_int_distribution::operator()
   (C++11)
   Characteristics
   uniform_int_distribution::auniform_int_distribution::b
   (C++11)(C++11)
   uniform_int_distribution::param
   (C++11)
   uniform_int_distribution::min
   (C++11)
   uniform_int_distribution::max
   (C++11)
   Non-member functions
   operator==operator!=
   (C++11)(C++11)(until C++20)
   operator<<operator>>
   (C++11)(C++11)

   Defined in header <random>
   template< class IntType = int >
   class uniform_int_distribution;
                                  (since C++11)

   Produces random integer values \(\small i\)i, uniformly distributed on
   the closed interval \(\small[a, b]\)[a, b], that is, distributed
   according to the discrete probability function

          \({\small P(i|a,b) =}\frac{1}{b - a + 1}\)P(i|a,b) =

          1
          b - a + 1

          .

   std::uniform_int_distribution satisfies all requirements of
   RandomNumberDistribution.

Template parameters

   IntType - The result type generated by the generator. The effect is
   undefined if this is not one of short, int, long, long long, unsigned
   short, unsigned int, unsigned long, or unsigned long long.

Member types

   Member type Definition
   result_type (C++11) IntType
   param_type (C++11) the type of the parameter set, see
   RandomNumberDistribution.

Member functions

   (constructor)
   (C++11)
   constructs new distribution
   (public member function)
   reset
   (C++11)
   resets the internal state of the distribution
   (public member function)

Generation

   operator()
   (C++11)
   generates the next random number in the distribution
   (public member function)

Characteristics

   ab
   (C++11)
   returns the distribution parameters
   (public member function)
   param
   (C++11)
   gets or sets the distribution parameter object
   (public member function)
   min
   (C++11)
   returns the minimum potentially generated value
   (public member function)
   max
   (C++11)
   returns the maximum potentially generated value
   (public member function)

Non-member functions

   operator==operator!=
   (C++11)(C++11)(removed in C++20)
   compares two distribution objects
   (function)
   operator<<operator>>
   (C++11)
   performs stream input and output on pseudo-random number distribution
   (function template)

Example

   This program simulates throwing 6-sided dice.
   Run this code
#include <iostream>
#include <random>

int main()
{
    std::random_device rd;  // a seed source for the random number engine
    std::mt19937 gen(rd()); // mersenne_twister_engine seeded with rd()
    std::uniform_int_distribution<> distrib(1, 6);

    // Use distrib to transform the random unsigned int
    // generated by gen into an int in [1, 6]
    for (int n = 0; n != 10; ++n)
        std::cout << distrib(gen) << ' ';
    std::cout << '\n';
}

   Possible output:
1 1 6 5 2 2 5 5 6 2

   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/numeric/random/u
   niform_int_distribution&oldid=151420"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 6 May 2023, at 00:56.
     * This page has been accessed 979,235 times.
