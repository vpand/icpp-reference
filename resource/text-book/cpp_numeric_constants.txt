Mathematical constants

   From cppreference.com
   < cpp | numeric

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Numerics library
   Common mathematical functions
   Mathematical special functions (C++17)
   Mathematical constants (C++20)
   Basic linear algebra algorithms (C++26)
   Floating-point environment (C++11)
   Complex numbers
   Numeric arrays
   Pseudo-random number generation
   Factor operations
   gcd
   (C++17)
   lcm
   (C++17)
   Interpolations
   midpoint
   (C++20)
   lerp
   (C++20)
   Saturation arithmetic
   add_sat
   (C++26)
   sub_sat
   (C++26)
   saturate_cast
   (C++26)
   mul_sat
   (C++26)
   div_sat
   (C++26)
   Generic numeric operations
   iota
   (C++11)
   ranges::iota
   (C++23)
   accumulate
   inner_product
   adjacent_difference
   partial_sum
   reduce
   (C++17)
   transform_reduce
   (C++17)
   inclusive_scan
   (C++17)
   exclusive_scan
   (C++17)
   transform_inclusive_scan
   (C++17)
   transform_exclusive_scan
   (C++17)
   Bit operations
   has_single_bit
   (C++20)
   bit_cast
   (C++20)
   bit_ceil
   (C++20)
   bit_floor
   (C++20)
   bit_width
   (C++20)
   rotl
   (C++20)
   rotr
   (C++20)
   popcount
   (C++20)
   countl_zero
   (C++20)
   countl_one
   (C++20)
   countr_zero
   (C++20)
   countr_one
   (C++20)
   byteswap
   (C++23)
   endian
   (C++20)

   Mathematical constants

Constants (since C++20)

   Defined in header <numbers>
   Defined in namespace std::numbers
   e_v
   the mathematical constant \(\small e\)e
   (variable template)
   log2e_v
   \(\log_{2}e\)log
   2e
   (variable template)
   log10e_v
   \(\log_{10}e\)log
   10e
   (variable template)
   pi_v
   the mathematical constant \(\pi\)p
   (variable template)
   inv_pi_v
   \(\frac1\pi\)
   1
   p
   (variable template)
   inv_sqrtpi_v
   \(\frac1{\sqrt\pi}\)
   1
   SQRT p
   (variable template)
   ln2_v
   \(\ln{2}\)ln 2
   (variable template)
   ln10_v
   \(\ln{10}\)ln 10
   (variable template)
   sqrt2_v
   \(\sqrt2\) SQRT 2
   (variable template)
   sqrt3_v
   \(\sqrt3\) SQRT 3
   (variable template)
   inv_sqrt3_v
   \(\frac1{\sqrt3}\)
   1
   SQRT 3
   (variable template)
   egamma_v
   the Euler-Mascheroni constant g
   (variable template)
   phi_v
   the golden ratio F (\(\frac{1+\sqrt5}2\)
   1 + SQRT 5
   2
   )
   (variable template)
   inline constexpr double e
   e_v<double>
   (constant)
   inline constexpr double log2e
   log2e_v<double>
   (constant)
   inline constexpr double log10e
   log10e_v<double>
   (constant)
   inline constexpr double pi
   pi_v<double>
   (constant)
   inline constexpr double inv_pi
   inv_pi_v<double>
   (constant)
   inline constexpr double inv_sqrtpi
   inv_sqrtpi_v<double>
   (constant)
   inline constexpr double ln2
   ln2_v<double>
   (constant)
   inline constexpr double ln10
   ln10_v<double>
   (constant)
   inline constexpr double sqrt2
   sqrt2_v<double>
   (constant)
   inline constexpr double sqrt3
   sqrt3_v<double>
   (constant)
   inline constexpr double inv_sqrt3
   inv_sqrt3_v<double>
   (constant)
   inline constexpr double egamma
   egamma_v<double>
   (constant)
   inline constexpr double phi
   phi_v<double>
   (constant)

Notes

   A program that instantiates a primary template of a mathematical
   constant variable template is ill-formed.

   The standard library specializes mathematical constant variable
   templates for all floating-point types (i.e. float, double and long
   double).

   A program may partially or explicitly specialize a mathematical
   constant variable template provided that the specialization depends on
   a program-defined type.
      Feature-test macro     Value    Std          Feature
   __cpp_lib_math_constants 201907L (c++20) Mathematical constants

Example

   Run this code
#include <cmath>
#include <iomanip>
#include <iostream>
#include <limits>
#include <numbers>
#include <string_view>

auto egamma_aprox(const unsigned iterations)
{
    long double s = 0;
    for (unsigned m = 2; m < iterations; ++m)
    {
        if (const long double t = std::riemann_zetal(m) / m; m % 2)
            s -= t;
        else
            s += t;
    }
    return s;
};

int main()
{
    using namespace std::numbers;

    const auto x = std::sqrt(inv_pi) / inv_sqrtpi +
        std::ceil(std::exp2(log2e)) + sqrt3 * inv_sqrt3 + std::exp(0);
    const auto v = (phi * phi - phi) + 1 / std::log2(sqrt2) +
        log10e * ln10 + std::pow(e, ln2) - std::cos(pi);

    std::cout << "The answer is " << x * v << '\n';

    using namespace std::string_view_literals;
    constexpr auto g = "0.577215664901532860606512090082402"sv;

    std::cout
        << "g as 10^6 sums of ±z(m)/m   = "
        << egamma_aprox(1'000'000) << '\n'
        << "g as egamma_v<float>       = "
        << std::setprecision(std::numeric_limits<float>::digits10 + 1)
        << egamma_v<float> << '\n'
        << "g as egamma_v<double>      = "
        << std::setprecision(std::numeric_limits<double>::digits10 + 1)
        << egamma_v<double> << '\n'
        << "g as egamma_v<long double> = "
        << std::setprecision(std::numeric_limits<long double>::digits10 + 1)
        << egamma_v<long double> << '\n'
        << "g with " << g.length() - 1 << " digits precision = " << g << '\n';
}

   Possible output:
The answer is 42
g as 10^6 sums of ±z(m)/m   = 0.577215
g as egamma_v<float>       = 0.5772157
g as egamma_v<double>      = 0.5772156649015329
g as egamma_v<long double> = 0.5772156649015328606
g with 34 digits precision = 0.577215664901532860606512090082402

See also

   ratio
   (C++11)
   represents exact rational fraction
   (class template)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/numeric/constant
   s&oldid=170163"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 13 March 2024, at 20:03.
     * This page has been accessed 201,347 times.
