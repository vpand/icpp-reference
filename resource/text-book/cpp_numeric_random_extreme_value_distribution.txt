std::extreme_value_distribution

   From cppreference.com
   < cpp | numeric | random

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Numerics library
   Common mathematical functions
   Mathematical special functions (C++17)
   Mathematical constants (C++20)
   Basic linear algebra algorithms (C++26)
   Floating-point environment (C++11)
   Complex numbers
   Numeric arrays
   Pseudo-random number generation
   Factor operations
   gcd
   (C++17)
   lcm
   (C++17)
   Interpolations
   midpoint
   (C++20)
   lerp
   (C++20)
   Saturation arithmetic
   add_sat
   (C++26)
   sub_sat
   (C++26)
   saturate_cast
   (C++26)
   mul_sat
   (C++26)
   div_sat
   (C++26)
   Generic numeric operations
   iota
   (C++11)
   ranges::iota
   (C++23)
   accumulate
   inner_product
   adjacent_difference
   partial_sum
   reduce
   (C++17)
   transform_reduce
   (C++17)
   inclusive_scan
   (C++17)
   exclusive_scan
   (C++17)
   transform_inclusive_scan
   (C++17)
   transform_exclusive_scan
   (C++17)
   Bit operations
   has_single_bit
   (C++20)
   bit_cast
   (C++20)
   bit_ceil
   (C++20)
   bit_floor
   (C++20)
   bit_width
   (C++20)
   rotl
   (C++20)
   rotr
   (C++20)
   popcount
   (C++20)
   countl_zero
   (C++20)
   countl_one
   (C++20)
   countr_zero
   (C++20)
   countr_one
   (C++20)
   byteswap
   (C++23)
   endian
   (C++20)

   Pseudo-random number generation
   Uniform random bit generators
   uniform_random_bit_generator
   (C++20)
   Random number engines
   linear_congruential_engine
   (C++11)
   mersenne_twister_engine
   (C++11)
   subtract_with_carry_engine
   (C++11)
   Random number engine adaptors
   discard_block_engine
   (C++11)
   independent_bits_engine
   (C++11)
   shuffle_order_engine
   (C++11)
   Predefined random number generators
   Non-deterministic random numbers
   random_device
   (C++11)
   Random number distributions
   Uniform distributions
   uniform_int_distribution
   (C++11)
   uniform_real_distribution
   (C++11)
   generate_canonical
   (C++11)
   Bernoulli distributions
   bernoulli_distribution
   (C++11)
   binomial_distribution
   (C++11)
   negative_binomial_distribution
   (C++11)
   geometric_distribution
   (C++11)
   Poisson distributions
   poisson_distribution
   (C++11)
   exponential_distribution
   (C++11)
   gamma_distribution
   (C++11)
   weibull_distribution
   (C++11)
   extreme_value_distribution
   (C++11)
   Normal distributions
   normal_distribution
   (C++11)
   lognormal_distribution
   (C++11)
   chi_squared_distribution
   (C++11)
   cauchy_distribution
   (C++11)
   fisher_f_distribution
   (C++11)
   student_t_distribution
   (C++11)
   Sampling distributions
   discrete_distribution
   (C++11)
   piecewise_constant_distribution
   (C++11)
   piecewise_linear_distribution
   (C++11)
   Utilities
   generate_canonical
   (C++11)
   seed_seq
   (C++11)
   Random number algorithms
   ranges::generate_random
   (C++26)
   C random library
   rand
   srand
   RAND_MAX

   std::extreme_value_distribution
   Member functions
   extreme_value_distribution::extreme_value_distribution
   (C++11)
   extreme_value_distribution::reset
   (C++11)
   Generation
   extreme_value_distribution::operator()
   (C++11)
   Characteristics
   extreme_value_distribution::aextreme_value_distribution::b
   (C++11)(C++11)
   extreme_value_distribution::param
   (C++11)
   extreme_value_distribution::min
   (C++11)
   extreme_value_distribution::max
   (C++11)
   Non-member functions
   operator==operator!=
   (C++11)(C++11)(until C++20)
   operator<<operator>>
   (C++11)(C++11)

   Defined in header <random>
   template< class RealType = double >
   class extreme_value_distribution;
                                      (since C++11)

   Produces random numbers according to the Generalized extreme value
   distribution (it is also known as Gumbel Type I, log-Weibull,
   Fisher-Tippett Type I):

          \({\small p(x;a,b) = \frac{1}{b}
          \exp{(\frac{a-x}{b}-\exp{(\frac{a-x}{b})})} }\)p(x;a,b) =

          1
          b

          exp

          a-x
          b

          - exp

          a-x
          b

          
          

   std::extreme_value_distribution satisfies all requirements of
   RandomNumberDistribution.

Template parameters

   RealType - The result type generated by the generator. The effect is
   undefined if this is not one of float, double, or long double.

Member types

   Member type Definition
   result_type (C++11) RealType
   param_type (C++11) the type of the parameter set, see
   RandomNumberDistribution.

Member functions

   (constructor)
   (C++11)
   constructs new distribution
   (public member function)
   reset
   (C++11)
   resets the internal state of the distribution
   (public member function)

Generation

   operator()
   (C++11)
   generates the next random number in the distribution
   (public member function)

Characteristics

   ab
   (C++11)
   returns the distribution parameters
   (public member function)
   param
   (C++11)
   gets or sets the distribution parameter object
   (public member function)
   min
   (C++11)
   returns the minimum potentially generated value
   (public member function)
   max
   (C++11)
   returns the maximum potentially generated value
   (public member function)

Non-member functions

   operator==operator!=
   (C++11)(C++11)(removed in C++20)
   compares two distribution objects
   (function)
   operator<<operator>>
   (C++11)
   performs stream input and output on pseudo-random number distribution
   (function template)

Example

   Run this code
#include <algorithm>
#include <cmath>
#include <iomanip>
#include <iostream>
#include <map>
#include <random>
#include <vector>

template<int Height = 5, int BarWidth = 1, int Padding = 1, int Offset = 0, clas
s Seq>
void draw_vbars(Seq&& s, const bool DrawMinMax = true)
{
    static_assert(0 < Height and 0 < BarWidth and 0 <= Padding and 0 <= Offset);

    auto cout_n = [](auto&& v, int n = 1)
    {
        while (n-- > 0)
            std::cout << v;
    };

    const auto [min, max] = std::minmax_element(std::cbegin(s), std::cend(s));

    std::vector<std::div_t> qr;
    for (typedef decltype(*std::cbegin(s)) V; V e : s)
        qr.push_back(std::div(std::lerp(V(0), 8 * Height,
                                        (e - *min) / (*max - *min)), 8));

    for (auto h{Height}; h-- > 0; cout_n('\n'))
    {
        cout_n(' ', Offset);

        for (auto dv : qr)
        {
            const auto q{dv.quot}, r{dv.rem};
            unsigned char d[]{0xe2, 0x96, 0x88, 0}; // Full Block: 'FB'
            q < h ? d[0] = ' ', d[1] = 0 : q == h ? d[2] -= (7 - r) : 0;
            cout_n(d, BarWidth), cout_n(' ', Padding);
        }

        if (DrawMinMax && Height > 1)
            Height - 1 == h ? std::cout << "+ " << *max:
                          h ? std::cout << "| "
                            : std::cout << "+ " << *min;
    }
}

int main()
{
    std::random_device rd{};
    std::mt19937 gen{rd()};

    std::extreme_value_distribution<> d{-1.618f, 1.618f};

    const int norm = 10'000;
    const float cutoff = 0.000'3f;

    std::map<int, int> hist{};
    for (int n = 0; n != norm; ++n)
        ++hist[std::round(d(gen))];

    std::vector<float> bars;
    std::vector<int> indices;
    for (const auto& [n, p] : hist)
        if (const float x = p * (1.0f / norm); x > cutoff)
        {
            bars.push_back(x);
            indices.push_back(n);
        }

    draw_vbars<8,4>(bars);

    for (int n : indices)
        std::cout << ' ' << std::setw(2) << n << "  ";
    std::cout << '\n';
}

   Possible output:
               FBFBFBFB
+ 0.2186
               FBFBFBFB FBFBFBFB
        |
           FBFBFBFB FBFBFBFB
|
          FBFBFBFB FBFBFBFB FBFBFBFB FBFBFBFB
                |
          FBFBFBFB FBFBFBFB FBFBFBFB FBFBFBFB
            |
          FBFBFBFB FBFBFBFB FBFBFBFB FBFBFBFB FBFBFBFB
                |
     LBLBLBLB FBFBFBFB FBFBFBFB FBFBFBFB FBFBFBFB FBFBFBFB FBFBFBFB
                        |
 FBFBFBFB FBFBFBFB FBFBFBFB FBFBFBFB FBFBFBFB FBFBFBFB FBFBFBFB FBFBFBFB
+ 0.0005
 -5   -4   -3   -2   -1    0    1    2    3    4    5    6    7    8    9   10

External links

   Weisstein, Eric W. "Extreme Value Distribution." From MathWorld -- A
   Wolfram Web Resource.
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/numeric/random/e
   xtreme_value_distribution&oldid=160839"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 17 October 2023, at 11:40.
     * This page has been accessed 29,841 times.
