MATH_ERRNO, MATH_ERREXCEPT, math_errhandling

   From cppreference.com
   < c | numeric | math

   C
   Language
   Headers
   Type support
   Program utilities
   Variadic function support
   Error handling
   Dynamic memory management
   Strings library
   Algorithms
   Numerics
   Date and time utilities
   Input/output support
   Localization support
   Concurrency support (C11)
   Technical Specifications
   Symbol index

   Numerics
   Common mathematical functions
   Floating-point environment (C99)
   Pseudo-random number generation
   Complex number arithmetic (C99)
   Type-generic math (C99)

   Common mathematical functions
   Types
   div_tldiv_tlldiv_timaxdiv_t
   (C99)(C99)
   float_tdouble_t
   (C99)(C99)
   _Decimal32_t_Decimal64_t
   (C23)(C23)
   Functions
   Basic operations
   abslabsllabsimaxabs
   (C99)(C99)
   fabs
   divldivlldivimaxdiv
   (C99)(C99)
   fmod
   remainder
   (C99)
   remquo
   (C99)
   fma
   (C99)
   fdim
   (C99)
   nannanfnanlnandN
   (C99)(C99)(C99)(C23)
   Maximum/minimum operations
   fmax
   (C99)
   fmaximum
   (C23)
   fmaximum_mag
   (C23)
   fmaximum_num
   (C23)
   fmaximum_mag_num
   (C23)
   fmin
   (C99)
   fminimum
   (C23)
   fminimum_mag
   (C23)
   fminimum_num
   (C23)
   fminimum_mag_num
   (C23)
   Exponential functions
   exp
   exp10
   (C23)
   exp2
   (C99)
   expm1
   (C99)
   exp10m1
   (C23)
   exp2m1
   (C23)
   log
   log10
   log2
   (C99)
   log1plogp1
   (C99)(C23)
   log10p1
   (C23)
   log2p1
   (C23)
   Power functions
   sqrt
   cbrt
   (C99)
   rootn
   (C23)
   rsqrt
   (C23)
   hypot
   (C99)
   compound
   (C23)
   pow
   pown
   (C23)
   powr
   (C23)
   Trigonometric and hyperbolic functions
   sin
   cos
   tan
   asin
   acos
   atan
   atan2
   sinpi
   (C23)
   cospi
   (C23)
   tanpi
   (C23)
   asinpi
   (C23)
   acospi
   (C23)
   atanpi
   (C23)
   atan2pi
   (C23)
   sinh
   cosh
   tanh
   asinh
   (C99)
   acosh
   (C99)
   atanh
   (C99)
   Error and gamma functions
   erf
   (C99)
   erfc
   (C99)
   lgamma
   (C99)
   tgamma
   (C99)
   Nearest integer floating-point operations
   ceil
   floor
   roundlroundllround
   (C99)(C99)(C99)
   roundeven
   (C23)
   trunc
   (C99)
   nearbyint
   (C99)
   rintlrintllrint
   (C99)(C99)(C99)
   fromfpfromfpxufromfpufromfpx
   (C23)(C23)(C23)(C23)
   Floating-point manipulation functions
   ldexp
   frexp
   scalbnscalbln
   (C99)(C99)
   ilogbllogb
   (C99)(C23)
   logb
   (C99)
   modf
   nextafternexttoward
   (C99)(C99)
   nextupnextdown
   (C23)(C23)
   copysign
   (C99)
   canonicalize
   (C23)
   Narrowing operations
   fadd
   (C23)
   fsub
   (C23)
   fmul
   (C23)
   fdiv
   (C23)
   ffma
   (C23)
   fsqrt
   (C23)
   Quantum and quantum exponent functions
   quantizedN
   (C23)
   samequantumdN
   (C23)
   quantumdN
   (C23)
   llquantexpdN
   (C23)
   Decimal re-encoding functions
   encodedecdN
   (C23)
   decodedecdN
   (C23)
   encodebindN
   (C23)
   decodebindN
   (C23)
   Total order and payload functions
   totalorder
   (C23)
   getpayload
   (C23)
   setpayload
   (C23)
   setpayloadsig
   (C23)
   Classification
   fpclassify
   (C99)
   iscanonical
   (C23)
   isfinite
   (C99)
   isinf
   (C99)
   isnan
   (C99)
   isnormal
   (C99)
   signbit
   (C99)
   issubnormal
   (C23)
   iszero
   (C23)
   isgreater
   (C99)
   isgreaterequal
   (C99)
   isless
   (C99)
   islessequal
   (C99)
   islessgreater
   (C99)
   isunordered
   (C99)
   issignaling
   (C23)
   iseqsig
   (C23)
   Macro constants
   Special floating-point values
   HUGE_VALFHUGE_VALHUGE_VALLHUGE_VALDN
   (C99)(C99)(C23)
   INFINITYDEC_INFINITY
   (C99)(C23)
   NANDEC_NAN
   (C99)(C23)
   Arguments and return values
   FP_ILOGB0FP_ILOGBNAN
   (C99)(C99)
   FP_INT_UPWARDFP_INT_DOWNWARDFP_INT_TOWARDZEROFP_INT_TONEARESTFROMZEROFP
   _INT_TONEAREST
   (C23)(C23)(C23)(C23)(C23)
   FP_LLOGB0FP_LLOGBNAN
   (C23)(C23)
   FP_NORMALFP_SUBNORMALFP_ZEROFP_INFINITEFP_NAN
   (C99)(C99)(C99)(C99)(C99)
   Error handling
   MATH_ERRNOMATH_ERRNOEXCEPT
   (C99)(C99)
   math_errhandling
   (C99)
   Fast operation indicators
   FP_FAST_FMAFFP_FAST_FMA
   (C99)(C99)
   FP_FAST_FADDFP_FAST_FADDLFP_FAST_DADDLFP_FAST_DMADDDN
   (C23)(C23)(C23)(C23)
   FP_FAST_FMULFP_FAST_FMULLFP_FAST_DMULLFP_FAST_DMMULDN
   (C23)(C23)(C23)(C23)
   FP_FAST_FFMAFP_FAST_FFMALFP_FAST_DFMALFP_FAST_DMFMADN
   (C23)(C23)(C23)(C23)
   FP_FAST_FMALFP_FAST_FMADN
   (C99)(C23)
   FP_FAST_FSUBFP_FAST_FSUBLFP_FAST_DSUBLFP_FAST_DMSUBDN
   (C23)(C23)(C23)(C23)
   FP_FAST_FDIVFP_FAST_FDIVLFP_FAST_DDIVLFP_FAST_DMDIVDN
   (C23)(C23)(C23)(C23)
   FP_FAST_FSQRTFP_FAST_FSQRTLFP_FAST_DSQRTLFP_FAST_DMSQRTDN
   (C23)(C23)(C23)(C23)

   Defined in header <math.h>
   #define MATH_ERRNO        1
                                                       (since C99)
   #define MATH_ERREXCEPT    2
                                                       (since C99)
   #define math_errhandling  /*implementation defined*/
                                                       (since C99)

   The macro constant math_errhandling expands to an expression of type
   int that is either equal to MATH_ERRNO, or equal to MATH_ERREXCEPT, or
   equal to their bitwise OR (MATH_ERRNO | MATH_ERREXCEPT).

   The value of math_errhandling indicates the type of error handling that
   is performed by the floating-point operators and functions:
   Constant Explanation
   MATH_ERREXCEPT indicates that floating-point exceptions are used: at
   least FE_DIVBYZERO, FE_INVALID, and FE_OVERFLOW are defined in
   <fenv.h>.
   MATH_ERRNO indicates that floating-point operations use the variable
   errno to report errors.

   If the implementation supports IEEE floating-point arithmetic (IEC
   60559), math_errhandling & MATH_ERREXCEPT is required to be non-zero.

   The following floating-point error conditions are recognized:
   Condition Explanation errno floating-point exception Example
   Domain error the argument is outside the range in which the operation
   is mathematically defined (the description of each function lists the
   required domain errors) EDOM FE_INVALID acos(2)
   Pole error the mathematical result of the function is exactly infinite
   or undefined ERANGE FE_DIVBYZERO log(0.0), 1.0/0.0
   Range error due to overflow the mathematical result is finite, but
   becomes infinite after rounding, or becomes the largest representable
   finite value after rounding down ERANGE FE_OVERFLOW pow(DBL_MAX,2)
   Range error due to underflow the result is non-zero, but becomes zero
   after rounding, or becomes subnormal with a loss of precision ERANGE or
   unchanged (implementation-defined) FE_UNDERFLOW or nothing
   (implementation-defined) DBL_TRUE_MIN/2
   Inexact result the result has to be rounded to fit in the destination
   type unchanged FE_INEXACT or nothing (unspecified) sqrt(2), 1.0/10.0

Notes

   Whether FE_INEXACT is raised by the mathematical library functions is
   unspecified in general, but may be explicitly specified in the
   description of the function (e.g. rint vs nearbyint).

   Before C99, floating-point exceptions were not specified, EDOM was
   required for any domain error, ERANGE was required for overflows and
   implementation-defined for underflows.

Example

   Run this code
#include <stdio.h>
#include <fenv.h>
#include <math.h>
#include <errno.h>
#pragma STDC FENV_ACCESS ON
int main(void)
{
    printf("MATH_ERRNO is %s\n", math_errhandling & MATH_ERRNO ? "set" : "not se
t");
    printf("MATH_ERREXCEPT is %s\n",
           math_errhandling & MATH_ERREXCEPT ? "set" : "not set");
    feclearexcept(FE_ALL_EXCEPT);
    errno = 0;
    printf("log(0) = %f\n", log(0));
    if(errno == ERANGE)
        perror("errno == ERANGE");
    if(fetestexcept(FE_DIVBYZERO))
        puts("FE_DIVBYZERO (pole error) reported");
}

   Possible output:
MATH_ERRNO is set
MATH_ERREXCEPT is set
log(0) = -inf
errno = ERANGE: Numerical result out of range
FE_DIVBYZERO (pole error) reported

References

     * C17 standard (ISO/IEC 9899:2018):

          + 7.12/9 MATH_ERRNO, MATH_ERREXCEPT, math_errhandling (p: 170)

          + F.10/4 MATH_ERREXCEPT, math_errhandling (p: 377)

     * C11 standard (ISO/IEC 9899:2011):

          + 7.12/9 MATH_ERRNO, MATH_ERREXCEPT, math_errhandling (p: 233)

          + F.10/4 MATH_ERREXCEPT, math_errhandling (p: 517)

     * C99 standard (ISO/IEC 9899:1999):

          + 7.12/9 MATH_ERRNO, MATH_ERREXCEPT, math_errhandling (p: 214)

          + F.9/4 MATH_ERREXCEPT, math_errhandling> (p: 454)

See also

   FE_ALL_EXCEPTFE_DIVBYZEROFE_INEXACTFE_INVALIDFE_OVERFLOWFE_UNDERFLOW
   (C99)
   floating-point exceptions
   (macro constant)
   errno
   macro which expands to POSIX-compatible thread-local error number
   variable
   (macro variable)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=c/numeric/math/math_
   errhandling&oldid=140217"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 12 June 2022, at 14:35.
     * This page has been accessed 29,958 times.
