std::ranges::size

   From cppreference.com
   < cpp | ranges

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Ranges library
   Range access
   begin
   cbegin
   end
   cend
   rbegin
   crbegin
   rend
   crend
   size
   ssize
   data
   cdata
   empty
   Range conversions
   std::from_range_t
   std::from_range
   (C++23)(C++23)
   to
   (C++23)
   Range primitives
   range_size_trange_difference_trange_value_trange_reference_t
   iterator_tconst_iterator_tsentinel_tconst_sentinel_t
   (C++23)(C++23)
   range_const_reference_trange_rvalue_reference_trange_common_reference_t
   (C++23)
   elements_of
   (C++23)
   Dangling iterator handling
   dangling
   borrowed_iterator_t
   borrowed_subrange_t
   Range concepts
   range
   borrowed_range
   sized_range
   constant_range
   (C++23)
   common_range
   view
   viewable_range
   input_range
   output_range
   forward_range
   bidirectional_range
   random_access_range
   contiguous_range
   Views
   view_interface
   subrange
   Range factories
   empty_viewviews::empty
   single_viewviews::single
   iota_viewviews::iota
   repeat_viewviews::repeat
   (C++23)(C++23)
   basic_istream_viewviews::istream
   Range adaptors
   views::all_tviews::all
   ref_view
   owning_view
   as_rvalue_viewviews::as_rvalue
   (C++23)(C++23)
   filter_viewviews::filter
   transform_viewviews::transform
   take_viewviews::take
   take_while_viewviews::take_while
   concat_viewviews::concat
   (C++26)(C++26)
   drop_viewviews::drop
   drop_while_viewviews::drop_while
   join_viewviews::join
   join_with_viewviews::join_with
   (C++23)(C++23)
   lazy_split_viewviews::lazy_split
   split_viewviews::split
   views::counted
   common_viewviews::common
   reverse_viewviews::reverse
   as_const_viewviews::as_const
   (C++23)(C++23)
   elements_viewviews::elements
   keys_viewviews::keys
   values_viewviews::values
   enumerate_viewviews::enumerate
   (C++23)(C++23)
   zip_viewviews::zip
   (C++23)(C++23)
   zip_transform_viewviews::zip_transform
   (C++23)(C++23)
   adjacent_viewviews::adjacent
   (C++23)(C++23)
   views::pairwise
   (C++23)
   adjacent_transform_viewviews::adjacent_transform
   (C++23)(C++23)
   views::pairwise_transform
   (C++23)
   chunk_viewviews::chunk
   (C++23)(C++23)
   slide_viewviews::slide
   (C++23)(C++23)
   chunk_by_viewviews::chunk_by
   (C++23)(C++23)
   stride_viewviews::stride
   (C++23)(C++23)
   cartesian_product_viewviews::cartesian_product
   (C++23)(C++23)
   Range generators
   std::generator
   (C++23)
   Range adaptor objects
   Range adaptor closure objects
   range_adaptor_closure
   (C++23)
   Helper items
   copyable-box
   movable-box
   (until C++23)(C++23)
   simple-view
   non-propagating-cache

   Defined in header <ranges>
   Defined in header <iterator>
   inline namespace /* unspecified */ {

       inline constexpr auto size = /* unspecified */;
   }
   (since C++20)
   (customization point object)
   Call signature
   template< class T >

       requires /* see below */
   constexpr auto size( T&& t );
                                       (since C++20)

   Calculates the number of elements in t in constant time.

   A call to ranges::size is expression-equivalent to:
    1. decay-copy(std::extent_v<T>)(until
       C++23)auto(std::extent_v<T>)(since C++23), if T is an array type
       with a known bound.
    2. Otherwise, decay-copy(t.size())(until C++23)auto(t.size())(since
       C++23), if ranges::disable_sized_range<std::remove_cv_t<T>> is
       false, and that expression is valid and has an integer-like type.
    3. Otherwise, decay-copy(size(t))(until C++23)auto(size(t))(since
       C++23), if ranges::disable_sized_range<std::remove_cv_t<T>> is
       false, and the converted expression is valid and has an
       integer-like type, where the meaning of size is established as if
       by performing argument-dependent lookup only.
    4. Otherwise, /* to-unsigned-like */(ranges::end(t) -
       ranges::begin(t)), if T models ranges::forward_range and
       ranges::sentinel_t<T> models
       std::sized_sentinel_for<ranges::iterator_t<T>>,

                where /* to-unsigned-like */ denotes an explicit
                conversion to an unsigned-integer-like type.

   In all other cases, a call to ranges::size is ill-formed, which can
   result in substitution failure when ranges::size(t) appears in the
   immediate context of a template instantiation.

Customization point objects

   The name ranges::size denotes a customization point object, which is a
   const function object of a literal semiregular class type. For
   exposition purposes, the cv-unqualified version of its type is denoted
   as __size_fn.

   All instances of __size_fn are equal. The effects of invoking different
   instances of type __size_fn on the same arguments are equivalent,
   regardless of whether the expression denoting the instance is an lvalue
   or rvalue, and is const-qualified or not (however, a volatile-qualified
   instance is not required to be invocable). Thus, ranges::size can be
   copied freely and its copies can be used interchangeably.

   Given a set of types Args..., if std::declval<Args>()... meet the
   requirements for arguments to ranges::size above, __size_fn models
     * std::invocable<__size_fn, Args...>,
     * std::invocable<const __size_fn, Args...>,
     * std::invocable<__size_fn&, Args...>, and
     * std::invocable<const __size_fn&, Args...>.

   Otherwise, no function call operator of __size_fn participates in
   overload resolution.

Notes

   Whenever ranges::size(e) is valid for an expression e, the return type
   is integer-like.

   The C++20 standard requires that if the underlying size function call
   returns a prvalue, the return value is move-constructed from the
   materialized temporary object. All implementations directly return the
   prvalue instead. The requirement is corrected by the post-C++20
   proposal P0849R8 to match the implementations.

   The expression ranges::distance(e) can also be used to determine the
   size of a range e. Unlike ranges::size(e), ranges::distance(e) works
   even if e is an unsized range, at the cost of having linear complexity
   in that case.

Example

   Run this code
#include <iostream>
#include <ranges>
#include <type_traits>
#include <vector>

int main()
{
    auto v = std::vector<int>{};
    std::cout << "ranges::size(v) == " << std::ranges::size(v) << '\n';

    auto il = {7};     // std::initializer_list
    std::cout << "ranges::size(il) == " << std::ranges::size(il) << '\n';

    int array[]{4, 5}; // array has a known bound
    std::cout << "ranges::size(array) == " << std::ranges::size(array) << '\n';

    static_assert(std::is_signed_v<decltype(std::ranges::size(v))> == false);
}

   Output:
ranges::size(v) == 0
ranges::size(il) == 1
ranges::size(array) == 2

Defect reports

   The following behavior-changing defect reports were applied
   retroactively to previously published C++ standards.
   DR Applied to Behavior as published Correct behavior
   P2602R2 C++20 there's machinery to prohibit certain non-member size
   found by ADL removed such machinery

See also

   ranges::ssize
   (C++20)
   returns a signed integer equal to the size of a range
   (customization point object)
   ranges::sized_range
   (C++20)
   specifies that a range knows its size in constant time
   (concept)
   ranges::distance
   (C++20)
   returns the distance between an iterator and a sentinel, or between the
   beginning and end of a range
   (niebloid)
   sizessize
   (C++17)(C++20)
   returns the size of a container or array
   (function template)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/ranges/size&oldi
   d=161839"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 31 October 2023, at 20:45.
     * This page has been accessed 34,085 times.
