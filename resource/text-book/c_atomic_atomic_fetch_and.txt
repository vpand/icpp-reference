atomic_fetch_and, atomic_fetch_and_explicit

   From cppreference.com
   < c | atomic

   C
   Language
   Headers
   Type support
   Program utilities
   Variadic function support
   Error handling
   Dynamic memory management
   Strings library
   Algorithms
   Numerics
   Date and time utilities
   Input/output support
   Localization support
   Concurrency support (C11)
   Technical Specifications
   Symbol index

   Concurrency support library
   Threads
   thrd_create
   thrd_equal
   thrd_current

   thrd_sleep
   thrd_yield
   thrd_exit
   thrd_detach
   thrd_join
   thrd_successthrd_timedoutthrd_busythrd_nomemthrd_error

   Atomic operations
   atomic_init
   ATOMIC_VAR_INIT
   (until C23)
   ATOMIC_***_LOCK_FREE
   atomic_is_lock_free
   atomic_store
   atomic_load
   atomic_exchange
   atomic_compare_exchange
   atomic_fetch_add
   atomic_fetch_sub
   atomic_fetch_or
   atomic_fetch_xor
   atomic_fetch_and
   Atomic flags
   atomic_flag
   ATOMIC_FLAG_INIT
   atomic_flag_test_and_set
   atomic_flag_clear
   Memory ordering
   memory_order
   kill_dependency
   atomic_thread_fence
   atomic_signal_fence
   Mutual exclusion
   mtx_init
   mtx_lock
   mtx_timedlock
   mtx_trylock
   call_once
   mtx_unlock
   mtx_destroy
   mtx_plainmtx_recursivemtx_timed
   Condition variables
   cnd_init
   cnd_signal
   cnd_broadcast
   cnd_wait
   cnd_timedwait
   cnd_destroy
   Thread-local storage
   thread_local
   TSS_DTOR_ITERATIONS

   tss_create
   tss_get
   tss_set
   tss_delete

   Defined in header <stdatomic.h>
   C atomic_fetch_and( volatile A* obj, M arg );
   (1) (since C11)
   C atomic_fetch_and_explicit( volatile A* obj, M arg, memory_order order
   );
   (2) (since C11)

   Atomically replaces the value pointed by obj with the result of bitwise
   AND between the old value of obj and arg, and returns the value obj
   held previously. The operation is read-modify-write operation. The
   first version orders memory accesses according to memory_order_seq_cst,
   the second version orders memory accesses according to order.

   This is a generic function defined for all atomic object types A. The
   argument is pointer to a volatile atomic type to accept addresses of
   both non-volatile and volatile (e.g. memory-mapped I/O) atomic objects,
   and volatile semantic is preserved when applying this operation to
   volatile atomic objects. M is either the non-atomic type corresponding
   to A if A is atomic integer type, or ptrdiff_t if A is atomic pointer
   type.

   It is unspecified whether the name of a generic function is a macro or
   an identifier declared with external linkage. If a macro definition is
   suppressed in order to access an actual function (e.g. parenthesized
   like (atomic_fetch_and)(...)), or a program defines an external
   identifier with the name of a generic function, the behavior is
   undefined.

Parameters

   obj - pointer to the atomic object to modify
   arg - the value to bitwise AND to the value stored in the atomic object
   order - the memory synchronization ordering for this operation: all
   values are permitted

Return value

   The value held previously be the atomic object pointed to by obj.

References

     * C17 standard (ISO/IEC 9899:2018):

          + 7.17.7.5 The atomic_fetch and modify generic functions (p:
            208)

     * C11 standard (ISO/IEC 9899:2011):

          + 7.17.7.5 The atomic_fetch and modify generic functions (p:
            284-285)

See also

   atomic_fetch_oratomic_fetch_or_explicit
   (C11)
   atomic bitwise OR
   (function)
   atomic_fetch_xoratomic_fetch_xor_explicit
   (C11)
   atomic bitwise exclusive OR
   (function)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=c/atomic/atomic_fetc
   h_and&oldid=147141"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 27 January 2023, at 17:26.
     * This page has been accessed 18,497 times.
