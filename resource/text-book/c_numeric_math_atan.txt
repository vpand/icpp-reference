atan, atanf, atanl

   From cppreference.com
   < c | numeric | math

   C
   Language
   Headers
   Type support
   Program utilities
   Variadic function support
   Error handling
   Dynamic memory management
   Strings library
   Algorithms
   Numerics
   Date and time utilities
   Input/output support
   Localization support
   Concurrency support (C11)
   Technical Specifications
   Symbol index

   Numerics
   Common mathematical functions
   Floating-point environment (C99)
   Pseudo-random number generation
   Complex number arithmetic (C99)
   Type-generic math (C99)

   Common mathematical functions
   Types
   div_tldiv_tlldiv_timaxdiv_t
   (C99)(C99)
   float_tdouble_t
   (C99)(C99)
   _Decimal32_t_Decimal64_t
   (C23)(C23)
   Functions
   Basic operations
   abslabsllabsimaxabs
   (C99)(C99)
   fabs
   divldivlldivimaxdiv
   (C99)(C99)
   fmod
   remainder
   (C99)
   remquo
   (C99)
   fma
   (C99)
   fdim
   (C99)
   nannanfnanlnandN
   (C99)(C99)(C99)(C23)
   Maximum/minimum operations
   fmax
   (C99)
   fmaximum
   (C23)
   fmaximum_mag
   (C23)
   fmaximum_num
   (C23)
   fmaximum_mag_num
   (C23)
   fmin
   (C99)
   fminimum
   (C23)
   fminimum_mag
   (C23)
   fminimum_num
   (C23)
   fminimum_mag_num
   (C23)
   Exponential functions
   exp
   exp10
   (C23)
   exp2
   (C99)
   expm1
   (C99)
   exp10m1
   (C23)
   exp2m1
   (C23)
   log
   log10
   log2
   (C99)
   log1plogp1
   (C99)(C23)
   log10p1
   (C23)
   log2p1
   (C23)
   Power functions
   sqrt
   cbrt
   (C99)
   rootn
   (C23)
   rsqrt
   (C23)
   hypot
   (C99)
   compound
   (C23)
   pow
   pown
   (C23)
   powr
   (C23)
   Trigonometric and hyperbolic functions
   sin
   cos
   tan
   asin
   acos
   atan
   atan2
   sinpi
   (C23)
   cospi
   (C23)
   tanpi
   (C23)
   asinpi
   (C23)
   acospi
   (C23)
   atanpi
   (C23)
   atan2pi
   (C23)
   sinh
   cosh
   tanh
   asinh
   (C99)
   acosh
   (C99)
   atanh
   (C99)
   Error and gamma functions
   erf
   (C99)
   erfc
   (C99)
   lgamma
   (C99)
   tgamma
   (C99)
   Nearest integer floating-point operations
   ceil
   floor
   roundlroundllround
   (C99)(C99)(C99)
   roundeven
   (C23)
   trunc
   (C99)
   nearbyint
   (C99)
   rintlrintllrint
   (C99)(C99)(C99)
   fromfpfromfpxufromfpufromfpx
   (C23)(C23)(C23)(C23)
   Floating-point manipulation functions
   ldexp
   frexp
   scalbnscalbln
   (C99)(C99)
   ilogbllogb
   (C99)(C23)
   logb
   (C99)
   modf
   nextafternexttoward
   (C99)(C99)
   nextupnextdown
   (C23)(C23)
   copysign
   (C99)
   canonicalize
   (C23)
   Narrowing operations
   fadd
   (C23)
   fsub
   (C23)
   fmul
   (C23)
   fdiv
   (C23)
   ffma
   (C23)
   fsqrt
   (C23)
   Quantum and quantum exponent functions
   quantizedN
   (C23)
   samequantumdN
   (C23)
   quantumdN
   (C23)
   llquantexpdN
   (C23)
   Decimal re-encoding functions
   encodedecdN
   (C23)
   decodedecdN
   (C23)
   encodebindN
   (C23)
   decodebindN
   (C23)
   Total order and payload functions
   totalorder
   (C23)
   getpayload
   (C23)
   setpayload
   (C23)
   setpayloadsig
   (C23)
   Classification
   fpclassify
   (C99)
   iscanonical
   (C23)
   isfinite
   (C99)
   isinf
   (C99)
   isnan
   (C99)
   isnormal
   (C99)
   signbit
   (C99)
   issubnormal
   (C23)
   iszero
   (C23)
   isgreater
   (C99)
   isgreaterequal
   (C99)
   isless
   (C99)
   islessequal
   (C99)
   islessgreater
   (C99)
   isunordered
   (C99)
   issignaling
   (C23)
   iseqsig
   (C23)
   Macro constants
   Special floating-point values
   HUGE_VALFHUGE_VALHUGE_VALLHUGE_VALDN
   (C99)(C99)(C23)
   INFINITYDEC_INFINITY
   (C99)(C23)
   NANDEC_NAN
   (C99)(C23)
   Arguments and return values
   FP_ILOGB0FP_ILOGBNAN
   (C99)(C99)
   FP_INT_UPWARDFP_INT_DOWNWARDFP_INT_TOWARDZEROFP_INT_TONEARESTFROMZEROFP
   _INT_TONEAREST
   (C23)(C23)(C23)(C23)(C23)
   FP_LLOGB0FP_LLOGBNAN
   (C23)(C23)
   FP_NORMALFP_SUBNORMALFP_ZEROFP_INFINITEFP_NAN
   (C99)(C99)(C99)(C99)(C99)
   Error handling
   MATH_ERRNOMATH_ERRNOEXCEPT
   (C99)(C99)
   math_errhandling
   (C99)
   Fast operation indicators
   FP_FAST_FMAFFP_FAST_FMA
   (C99)(C99)
   FP_FAST_FADDFP_FAST_FADDLFP_FAST_DADDLFP_FAST_DMADDDN
   (C23)(C23)(C23)(C23)
   FP_FAST_FMULFP_FAST_FMULLFP_FAST_DMULLFP_FAST_DMMULDN
   (C23)(C23)(C23)(C23)
   FP_FAST_FFMAFP_FAST_FFMALFP_FAST_DFMALFP_FAST_DMFMADN
   (C23)(C23)(C23)(C23)
   FP_FAST_FMALFP_FAST_FMADN
   (C99)(C23)
   FP_FAST_FSUBFP_FAST_FSUBLFP_FAST_DSUBLFP_FAST_DMSUBDN
   (C23)(C23)(C23)(C23)
   FP_FAST_FDIVFP_FAST_FDIVLFP_FAST_DDIVLFP_FAST_DMDIVDN
   (C23)(C23)(C23)(C23)
   FP_FAST_FSQRTFP_FAST_FSQRTLFP_FAST_DSQRTLFP_FAST_DMSQRTDN
   (C23)(C23)(C23)(C23)

   Defined in header <math.h>
   float       atanf( float arg );
   (1)                                     (since C99)
   double      atan( double arg );
   (2)
   long double atanl( long double arg );
   (3)                                     (since C99)
   _Decimal32  atand32( _Decimal32 arg );
   (4)                                     (since C23)
   _Decimal64  atand64( _Decimal64 arg );
   (5)                                     (since C23)
   _Decimal128 atand128( _Decimal128 arg );
   (6)                                     (since C23)
   Defined in header <tgmath.h>
   #define atan( arg )
   (7)                                     (since C99)
   1-6) Computes the principal value of the arc tangent of arg.
   7) Type-generic macro: If the argument has type long double, (3)
   (atanl) is called. Otherwise, if the argument has integer type or the
   type double, (2) (atan) is called. Otherwise, (1) (atanf) is called. If
   the argument is complex, then the macro invokes the corresponding
   complex function (catanf, catan, catanl).

   The functions (4-6) are declared if and only if the implementation
   predefines __STDC_IEC_60559_DFP__ (i.e. the implementation supports
   decimal floating-point numbers).
   (since C23)

Parameters

   arg - floating-point value

Return value

   If no errors occur, the arc tangent of arg (arctan(arg)) in the range
   [-
   p
   2
    ; +
   p
   2
   ] radians, is returned.

   If a range error occurs due to underflow, the correct result (after
   rounding) is returned.

Error handling

   Errors are reported as specified in math_errhandling.

   If the implementation supports IEEE floating-point arithmetic (IEC
   60559):
     * if the argument is ±0, it is returned unmodified;
     * if the argument is +infty, +p/2 is returned;
     * if the argument is -infty, -p/2 is returned;
     * if the argument is NaN, NaN is returned.

Notes

   POSIX specifies that in case of underflow, arg is returned unmodified,
   and if that is not supported, an implementation-defined value no
   greater than DBL_MIN, FLT_MIN, and LDBL_MIN is returned.

Example

   Run this code
#include <math.h>
#include <stdio.h>

int main(void)
{
    printf("atan(1) = %f, 4*atan(1)=%f\n", atan(1), 4 * atan(1));
    // special values
    printf("atan(Inf) = %f, 2*atan(Inf) = %f\n", atan(INFINITY), 2 * atan(INFINI
TY));
    printf("atan(-0.0) = %+f, atan(+0.0) = %+f\n", atan(-0.0), atan(0));
}

   Output:
atan(1) = 0.785398, 4*atan(1)=3.141593
atan(Inf) = 1.570796, 2*atan(Inf) = 3.141593
atan(-0.0) = -0.000000, atan(+0.0) = +0.000000

References

     * C23 standard (ISO/IEC 9899:2023):

          + 7.12.4.3 The atan functions (p: TBD)

          + 7.25 Type-generic math <tgmath.h> (p: TBD)

          + F.10.1.3 The atan functions (p: TBD)

     * C17 standard (ISO/IEC 9899:2018):

          + 7.12.4.3 The atan functions (p: 174)

          + 7.25 Type-generic math <tgmath.h> (p: 272-273)

          + F.10.1.3 The atan functions (p: 378)

     * C11 standard (ISO/IEC 9899:2011):

          + 7.12.4.3 The atan functions (p: 238-239)

          + 7.25 Type-generic math <tgmath.h> (p: 373-375)

          + F.10.1.3 The atan functions (p: 519)

     * C99 standard (ISO/IEC 9899:1999):

          + 7.12.4.3 The atan functions (p: 219)

          + 7.22 Type-generic math <tgmath.h> (p: 335-337)

          + F.9.1.3 The atan functions (p: 456)

     * C89/C90 standard (ISO/IEC 9899:1990):

          + 4.5.2.3 The atan function

See also

   atan2atan2fatan2l
   (C99)(C99)
   computes arc tangent, using signs to determine quadrants
   (function)
   asinasinfasinl
   (C99)(C99)
   computes arc sine (\({\small\arcsin{x} }\)arcsin(x))
   (function)
   acosacosfacosl
   (C99)(C99)
   computes arc cosine (\({\small\arccos{x} }\)arccos(x))
   (function)
   tantanftanl
   (C99)(C99)
   computes tangent (\({\small\tan{x} }\)tan(x))
   (function)
   catancatanfcatanl
   (C99)(C99)(C99)
   computes the complex arc tangent
   (function)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=c/numeric/math/atan&
   oldid=172075"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 24 May 2024, at 00:08.
     * This page has been accessed 39,826 times.
