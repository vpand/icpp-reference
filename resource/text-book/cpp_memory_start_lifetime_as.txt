std::start_lifetime_as, std::start_lifetime_as_array

   From cppreference.com
   < cpp | memory

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Utilities library
   Language support
   Type support (basic types, RTTI)
   Library feature-test macros (C++20)
   Dynamic memory management
   Program utilities
   Coroutine support (C++20)
   Variadic functions
   is_constant_evaluated
   (C++20)
   is_within_lifetime
   (C++26)
   initializer_list
   (C++11)
   source_location
   (C++20)
   Debugging support
   is_debugger_present
   (C++26)
   breakpoint_if_debugging
   (C++26)
   breakpoint
   (C++26)
   Three-way comparison
   three_way_comparablethree_way_comparable_with
   (C++20)(C++20)
   strong_ordering
   (C++20)
   weak_ordering
   (C++20)
   partial_ordering
   (C++20)
   common_comparison_category
   (C++20)
   compare_three_way_result
   (C++20)
   compare_three_way
   (C++20)
   strong_order
   (C++20)
   weak_order
   (C++20)
   partial_order
   (C++20)
   compare_strong_order_fallback
   (C++20)
   compare_weak_order_fallback
   (C++20)
   compare_partial_order_fallback
   (C++20)
   is_eqis_ltis_lteq
   (C++20)(C++20)(C++20)
   is_neqis_gtis_gteq
   (C++20)(C++20)(C++20)
   General utilities
   Date and time
   Function objects
   Formatting library (C++20)
   bitset
   hash
   (C++11)
   Relational operators (deprecated in C++20)
   rel_ops::operator!=rel_ops::operator>

   rel_ops::operator<=rel_ops::operator>=
   Integer comparison functions
   cmp_equalcmp_lesscmp_less_than
   (C++20)(C++20)(C++20)
   cmp_not_equalcmp_greatercmp_greater_than
   (C++20)(C++20)(C++20)
   in_range
   (C++20)
   Swap and type operations
   swap
   ranges::swap
   (C++20)
   exchange
   (C++14)
   declval
   (C++11)
   to_underlying
   (C++23)
   forward
   (C++11)
   forward_like
   (C++23)
   move
   (C++11)
   move_if_noexcept
   (C++11)
   as_const
   (C++17)
   Common vocabulary types
   pair
   tuple
   (C++11)
   optional
   (C++17)
   any
   (C++17)
   variant
   (C++17)
   tuple_size
   (C++11)
   tuple_element
   (C++11)
   apply
   (C++17)
   make_from_tuple
   (C++17)
   expected
   (C++23)
   Elementary string conversions
   to_chars
   (C++17)
   from_chars
   (C++17)
   chars_format
   (C++17)
   to_chars_result
   (C++17)
   from_chars_result
   (C++17)

   Dynamic memory management
   Uninitialized memory algorithms
   uninitialized_copy
   uninitialized_fill
   uninitialized_move
   (C++17)
   uninitialized_default_construct
   (C++17)
   uninitialized_value_construct
   (C++17)
   destroy
   (C++17)
   destroy_at
   (C++17)
   voidify
   (C++20)
   uninitialized_copy_n
   (C++11)
   uninitialized_fill_n
   uninitialized_move_n
   (C++17)
   uninitialized_default_construct_n
   (C++17)
   uninitialized_value_construct_n
   (C++17)
   destroy_n
   (C++17)
   construct_at
   (C++20)
   Constrained uninitialized memory algorithms
   ranges::uninitialized_copy
   (C++20)
   ranges::uninitialized_fill
   (C++20)
   ranges::uninitialized_move
   (C++20)
   ranges::construct_at
   (C++20)
   ranges::destroy
   (C++20)
   ranges::destroy_n
   (C++20)
   ranges::destroy_at
   (C++20)
   ranges::uninitialized_copy_n
   (C++20)
   ranges::uninitialized_fill_n
   (C++20)
   ranges::uninitialized_move_n
   (C++20)
   ranges::uninitialized_default_construct
   (C++20)
   ranges::uninitialized_value_construct
   (C++20)
   ranges::uninitialized_default_construct_n
   (C++20)
   ranges::uninitialized_value_construct_n
   (C++20)
   Allocators
   allocator
   allocator_traits
   (C++11)
   allocation_result
   (C++23)
   allocator_arg
   (C++11)
   uses_allocator
   (C++11)
   uses_allocator_construction_args
   (C++20)
   make_obj_using_allocator
   (C++20)
   uninitialized_construct_using_allocator
   (C++20)
   scoped_allocator_adaptor
   (C++11)
   pmr::polymorphic_allocator
   (C++17)
   Memory resources
   pmr::memory_resource
   (C++17)
   pmr::get_default_resource
   (C++17)
   pmr::set_default_resource
   (C++17)
   pmr::new_delete_resource
   (C++17)
   pmr::null_memory_resource
   (C++17)
   pmr::synchronized_pool_resource
   (C++17)
   pmr::unsynchronized_pool_resource
   (C++17)
   pmr::monotonic_buffer_resource
   (C++17)
   pmr::pool_options
   (C++17)
   Garbage collection support
   declare_reachable
   (C++11)(until C++23)
   undeclare_reachable
   (C++11)(until C++23)
   declare_no_pointers
   (C++11)(until C++23)
   undeclare_no_pointers
   (C++11)(until C++23)
   pointer_safety
   (C++11)(until C++23)
   get_pointer_safety
   (C++11)(until C++23)
   Uninitialized storage
   raw_storage_iterator
   (until C++20*)
   get_temporary_buffer
   (until C++20*)
   return_temporary_buffer
   (until C++20*)
   Explicit lifetime management
   start_lifetime_asstart_lifetime_as_array
   (C++23)(C++23)
   Smart pointers
   unique_ptr
   (C++11)
   shared_ptr
   (C++11)
   weak_ptr
   (C++11)
   auto_ptr
   (until C++17*)
   owner_less
   (C++11)
   owner_less<void>
   (C++17)
   owner_hash
   (C++26)
   owner_equal
   (C++26)
   enable_shared_from_this
   (C++11)
   bad_weak_ptr
   (C++11)
   default_delete
   (C++11)
   out_ptr_t
   (C++23)
   inout_ptr_t
   (C++23)
   Low level memory
   management
   operator new
   operator new[]
   operator delete
   operator delete[]
   get_new_handler
   set_new_handler
   launder
   (C++17)
   bad_alloc
   bad_array_new_length
   nothrow_t
   align_val_t
   destroying_delete_t
   new_handler
   nothrow
   Miscellaneous
   pointer_traits
   (C++11)
   to_address
   (C++20)
   addressof
   (C++11)
   align
   (C++11)
   assume_aligned
   (C++20)
   C Library
   malloc
   calloc
   realloc

   aligned_alloc
   (C++17)
   free

   Defined in header <memory>
   start_lifetime_as
   template< class T >
   T* start_lifetime_as( void* p ) noexcept;
   (1)                       (since C++23)
   template< class T >
   const T* start_lifetime_as( const void* p ) noexcept;
   (2)                       (since C++23)
   template< class T >
   volatile T* start_lifetime_as( volatile void* p ) noexcept;
   (3)                       (since C++23)
   template< class T >
   const volatile T* start_lifetime_as( const volatile void* p ) noexcept;
   (4)                       (since C++23)
   start_lifetime_as_array
   template< class T >
   T* start_lifetime_as_array( void* p, std::size_t n ) noexcept;
   (5)                       (since C++23)
   template< class T >

   const T* start_lifetime_as_array( const void* p,
                                     std::size_t n ) noexcept;
   (6)                       (since C++23)
   template< class T >

   volatile T* start_lifetime_as_array( volatile void* p,
                                        std::size_t n ) noexcept;
   (7)                       (since C++23)
   template< class T >

   const volatile T* start_lifetime_as_array( const volatile void* p,
                                              std::size_t n ) noexcept;
   (8)                       (since C++23)
   1-4) Implicitly creates a complete object of type T (whose address is
   p) and objects nested within it. The value of each created object obj
   of TriviallyCopyable type U is determined in the same manner as for a
   call to std::bit_cast<U>(E) except that the storage is not actually
   accessed, where E is the lvalue of type U denoting obj. Otherwise, the
   values of such created objects are unspecified.
     * T shall be an ImplicitLifetimeType and shall be a complete type.
       Otherwise, the program is ill-formed.
     * The behavior is undefined if:

          + [p, (char*)p + sizeof(T)) does not denote a region of
            allocated storage that is a subset of the region of storage
            reachable through p, or
          + the region is not suitably aligned for the T.

     * Note that the unspecified value can be indeterminate.

   5-8) Implicitly creates an array with element type T and length n. To
   be precise, if n > 0 is true, it is equivalent to
   std::start_lifetime_as<U>(p) where U is the type "array of n Ts".
   Otherwise, the function has no effects.
     * T shall be a complete type. Otherwise, the program is ill-formed.
     * The behavior is undefined if:

          + Non-null p is not suitably aligned for an array of T, or
          + n <= std::size_t(-1) / sizeof(T) is false, or
          + n > 0 and [(char*)p, (char*)p + (n * sizeof(T))) does not
            denote a region of allocated storage that is a subset of the
            region of storage reachable through p.

Parameters

   p - the address of the region consisting objects
   n - the number of the element of the array to be created

Return value

   1-4) A pointer to the complete object as described above.
   5-8) A pointer to the first element of the created array, if any;
   otherwise, a pointer that compares equal to p.

Notes

   new (void_ptr) unsigned char[size] or new (void_ptr) std::byte[size]
   works as an untyped version of std::start_lifetime_as, but it does not
   keep the object representation.

   std::start_lifetime_as handles non-array types as well as arrays of
   known bound, while std::start_lifetime_as_array handles arrays of
   unknown bound.
   Feature-test macro Value Std Feature
   __cpp_lib_start_lifetime_as 202207L (C++23) Explicit lifetime
   management

Example

   Run this code
#include <complex>
#include <iostream>
#include <memory>

int main()
{
    alignas(std::complex<float>) unsigned char network_data[sizeof(std::complex<
float>)]{
        0xcd, 0xcc, 0xcc, 0x3d, 0xcd, 0xcc, 0x4c, 0x3e
    };

//  auto d = *reinterpret_cast<std::complex<float>*>(network_data);
//  std::cout << d << '\n'; // UB: network_data does not point to a complex<floa
t>

//  auto d = *std::launder(reinterpret_cast<std::complex<float>*>(network_data))
;
//  std::cout << d << '\n'; // Possible UB, related to CWG1997:
//      the implicitly created complex<float> may hold indeterminate value

    auto d = *std::start_lifetime_as<std::complex<float>>(network_data);
    std::cout << d << '\n'; // OK
}

   Possible output:
(0.1,0.2)

References

     * C++23 standard (ISO/IEC 14882:2023):

          + 20.2.6 Explicit lifetime management [obj.lifetime]

See also

   bit_cast
   (C++20)
   reinterpret the object representation of one type as that of another
   (function template)
   as_bytesas_writable_bytes
   (C++20)
   converts a span into a view of its underlying bytes
   (function template)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/memory/start_lif
   etime_as&oldid=160857"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 17 October 2023, at 20:57.
     * This page has been accessed 17,023 times.
