std::ranges::elements_view<V,N>::end

   From cppreference.com
   < cpp | ranges | elements view

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Ranges library
   Range access
   begin
   cbegin
   end
   cend
   rbegin
   crbegin
   rend
   crend
   size
   ssize
   data
   cdata
   empty
   Range conversions
   std::from_range_t
   std::from_range
   (C++23)(C++23)
   to
   (C++23)
   Range primitives
   range_size_trange_difference_trange_value_trange_reference_t
   iterator_tconst_iterator_tsentinel_tconst_sentinel_t
   (C++23)(C++23)
   range_const_reference_trange_rvalue_reference_trange_common_reference_t
   (C++23)
   elements_of
   (C++23)
   Dangling iterator handling
   dangling
   borrowed_iterator_t
   borrowed_subrange_t
   Range concepts
   range
   borrowed_range
   sized_range
   constant_range
   (C++23)
   common_range
   view
   viewable_range
   input_range
   output_range
   forward_range
   bidirectional_range
   random_access_range
   contiguous_range
   Views
   view_interface
   subrange
   Range factories
   empty_viewviews::empty
   single_viewviews::single
   iota_viewviews::iota
   repeat_viewviews::repeat
   (C++23)(C++23)
   basic_istream_viewviews::istream
   Range adaptors
   views::all_tviews::all
   ref_view
   owning_view
   as_rvalue_viewviews::as_rvalue
   (C++23)(C++23)
   filter_viewviews::filter
   transform_viewviews::transform
   take_viewviews::take
   take_while_viewviews::take_while
   concat_viewviews::concat
   (C++26)(C++26)
   drop_viewviews::drop
   drop_while_viewviews::drop_while
   join_viewviews::join
   join_with_viewviews::join_with
   (C++23)(C++23)
   lazy_split_viewviews::lazy_split
   split_viewviews::split
   views::counted
   common_viewviews::common
   reverse_viewviews::reverse
   as_const_viewviews::as_const
   (C++23)(C++23)
   elements_viewviews::elements
   keys_viewviews::keys
   values_viewviews::values
   enumerate_viewviews::enumerate
   (C++23)(C++23)
   zip_viewviews::zip
   (C++23)(C++23)
   zip_transform_viewviews::zip_transform
   (C++23)(C++23)
   adjacent_viewviews::adjacent
   (C++23)(C++23)
   views::pairwise
   (C++23)
   adjacent_transform_viewviews::adjacent_transform
   (C++23)(C++23)
   views::pairwise_transform
   (C++23)
   chunk_viewviews::chunk
   (C++23)(C++23)
   slide_viewviews::slide
   (C++23)(C++23)
   chunk_by_viewviews::chunk_by
   (C++23)(C++23)
   stride_viewviews::stride
   (C++23)(C++23)
   cartesian_product_viewviews::cartesian_product
   (C++23)(C++23)
   Range generators
   std::generator
   (C++23)
   Range adaptor objects
   Range adaptor closure objects
   range_adaptor_closure
   (C++23)
   Helper items
   copyable-box
   movable-box
   (until C++23)(C++23)
   simple-view
   non-propagating-cache

   std::ranges::elements_view
   Member functions
   elements_view::elements_view
   elements_view::base
   elements_view::begin
   elements_view::end
   elements_view::size
   Nested classes
   Iterator
   elements_view::iterator::iterator
   elements_view::iterator::base
   elements_view::iterator::operator*
   elements_view::iterator::operator[]
   elements_view::iterator::operator++
   elements_view::iterator::operator++(int)
   elements_view::iterator::operator--
   elements_view::iterator::operator--(int)
   elements_view::iterator::operator+=
   elements_view::iterator::operator-=
   operator==(elements_view::iterator)
   operator<(elements_view::iterator)
   operator>(elements_view::iterator)
   operator<=(elements_view::iterator)
   operator>=(elements_view::iterator)
   operator<=>(elements_view::iterator)
   operator+(elements_view::iterator)
   operator-(elements_view::iterator)
   Sentinel
   elements_view::sentinel::sentinel
   elements_view::sentinel::base
   operator==(elements_view::iterator,elements_view::sentinel)
   operator-(elements_view::iterator,elements_view::sentinel)

   constexpr auto end() requires (!__SimpleView<V> &&
   !ranges::common_range<V>);
 (1)                                                               (since C++20)
   constexpr auto end() requires (!__SimpleView<V> &&
   ranges::common_range<V>);
 (2)                                                               (since C++20)
 constexpr auto end() const requires ranges::range<const V>;
 (3)                                                               (since C++20)
 constexpr auto end() const requires ranges::common_range<const V>;
 (4)                                                               (since C++20)

   Returns a sentinel or an iterator representing the end of the
   elements_view.

   Let base_ be the underlying view:
   1) Equivalent to return /*sentinel*/<false>{ranges::end(base_)};.
   2) Equivalent to return /*iterator*/<false>{ranges::end(base_)};.
   3) Equivalent to return /*sentinel*/<true>{ranges::end(base_)};.
   4) Equivalent to return /*iterator*/<true>{ranges::end(base_)};.

Parameters

   (none)

Return value

   1,3) sentinel which compares equal to the end iterator
   2,4) iterator to the element following the last element

Notes

   end() returns an iterator if and only if the underlying view is a
   common_range: elements_view<V,F> models common_range whenever V does.

Example

   This section is incomplete
   Reason: no example

See also

   begin
   (C++20)
   returns an iterator to the beginning
   (public member function)
   ranges::end
   (C++20)
   returns a sentinel indicating the end of a range
   (customization point object)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/ranges/elements_
   view/end&oldid=130949"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 29 June 2021, at 09:36.
     * This page has been accessed 3,967 times.
