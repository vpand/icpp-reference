operator==,!=,<,<=,>,>=,<=>(std::unique_ptr)

   From cppreference.com
   < cpp | memory | unique ptr

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Utilities library
   Language support
   Type support (basic types, RTTI)
   Library feature-test macros (C++20)
   Dynamic memory management
   Program utilities
   Coroutine support (C++20)
   Variadic functions
   is_constant_evaluated
   (C++20)
   is_within_lifetime
   (C++26)
   initializer_list
   (C++11)
   source_location
   (C++20)
   Debugging support
   is_debugger_present
   (C++26)
   breakpoint_if_debugging
   (C++26)
   breakpoint
   (C++26)
   Three-way comparison
   three_way_comparablethree_way_comparable_with
   (C++20)(C++20)
   strong_ordering
   (C++20)
   weak_ordering
   (C++20)
   partial_ordering
   (C++20)
   common_comparison_category
   (C++20)
   compare_three_way_result
   (C++20)
   compare_three_way
   (C++20)
   strong_order
   (C++20)
   weak_order
   (C++20)
   partial_order
   (C++20)
   compare_strong_order_fallback
   (C++20)
   compare_weak_order_fallback
   (C++20)
   compare_partial_order_fallback
   (C++20)
   is_eqis_ltis_lteq
   (C++20)(C++20)(C++20)
   is_neqis_gtis_gteq
   (C++20)(C++20)(C++20)
   General utilities
   Date and time
   Function objects
   Formatting library (C++20)
   bitset
   hash
   (C++11)
   Relational operators (deprecated in C++20)
   rel_ops::operator!=rel_ops::operator>

   rel_ops::operator<=rel_ops::operator>=
   Integer comparison functions
   cmp_equalcmp_lesscmp_less_than
   (C++20)(C++20)(C++20)
   cmp_not_equalcmp_greatercmp_greater_than
   (C++20)(C++20)(C++20)
   in_range
   (C++20)
   Swap and type operations
   swap
   ranges::swap
   (C++20)
   exchange
   (C++14)
   declval
   (C++11)
   to_underlying
   (C++23)
   forward
   (C++11)
   forward_like
   (C++23)
   move
   (C++11)
   move_if_noexcept
   (C++11)
   as_const
   (C++17)
   Common vocabulary types
   pair
   tuple
   (C++11)
   optional
   (C++17)
   any
   (C++17)
   variant
   (C++17)
   tuple_size
   (C++11)
   tuple_element
   (C++11)
   apply
   (C++17)
   make_from_tuple
   (C++17)
   expected
   (C++23)
   Elementary string conversions
   to_chars
   (C++17)
   from_chars
   (C++17)
   chars_format
   (C++17)
   to_chars_result
   (C++17)
   from_chars_result
   (C++17)

   Dynamic memory management
   Uninitialized memory algorithms
   uninitialized_copy
   uninitialized_fill
   uninitialized_move
   (C++17)
   uninitialized_default_construct
   (C++17)
   uninitialized_value_construct
   (C++17)
   destroy
   (C++17)
   destroy_at
   (C++17)
   voidify
   (C++20)
   uninitialized_copy_n
   (C++11)
   uninitialized_fill_n
   uninitialized_move_n
   (C++17)
   uninitialized_default_construct_n
   (C++17)
   uninitialized_value_construct_n
   (C++17)
   destroy_n
   (C++17)
   construct_at
   (C++20)
   Constrained uninitialized memory algorithms
   ranges::uninitialized_copy
   (C++20)
   ranges::uninitialized_fill
   (C++20)
   ranges::uninitialized_move
   (C++20)
   ranges::construct_at
   (C++20)
   ranges::destroy
   (C++20)
   ranges::destroy_n
   (C++20)
   ranges::destroy_at
   (C++20)
   ranges::uninitialized_copy_n
   (C++20)
   ranges::uninitialized_fill_n
   (C++20)
   ranges::uninitialized_move_n
   (C++20)
   ranges::uninitialized_default_construct
   (C++20)
   ranges::uninitialized_value_construct
   (C++20)
   ranges::uninitialized_default_construct_n
   (C++20)
   ranges::uninitialized_value_construct_n
   (C++20)
   Allocators
   allocator
   allocator_traits
   (C++11)
   allocation_result
   (C++23)
   allocator_arg
   (C++11)
   uses_allocator
   (C++11)
   uses_allocator_construction_args
   (C++20)
   make_obj_using_allocator
   (C++20)
   uninitialized_construct_using_allocator
   (C++20)
   scoped_allocator_adaptor
   (C++11)
   pmr::polymorphic_allocator
   (C++17)
   Memory resources
   pmr::memory_resource
   (C++17)
   pmr::get_default_resource
   (C++17)
   pmr::set_default_resource
   (C++17)
   pmr::new_delete_resource
   (C++17)
   pmr::null_memory_resource
   (C++17)
   pmr::synchronized_pool_resource
   (C++17)
   pmr::unsynchronized_pool_resource
   (C++17)
   pmr::monotonic_buffer_resource
   (C++17)
   pmr::pool_options
   (C++17)
   Garbage collection support
   declare_reachable
   (C++11)(until C++23)
   undeclare_reachable
   (C++11)(until C++23)
   declare_no_pointers
   (C++11)(until C++23)
   undeclare_no_pointers
   (C++11)(until C++23)
   pointer_safety
   (C++11)(until C++23)
   get_pointer_safety
   (C++11)(until C++23)
   Uninitialized storage
   raw_storage_iterator
   (until C++20*)
   get_temporary_buffer
   (until C++20*)
   return_temporary_buffer
   (until C++20*)
   Explicit lifetime management
   start_lifetime_asstart_lifetime_as_array
   (C++23)(C++23)
   Smart pointers
   unique_ptr
   (C++11)
   shared_ptr
   (C++11)
   weak_ptr
   (C++11)
   auto_ptr
   (until C++17*)
   owner_less
   (C++11)
   owner_less<void>
   (C++17)
   owner_hash
   (C++26)
   owner_equal
   (C++26)
   enable_shared_from_this
   (C++11)
   bad_weak_ptr
   (C++11)
   default_delete
   (C++11)
   out_ptr_t
   (C++23)
   inout_ptr_t
   (C++23)
   Low level memory
   management
   operator new
   operator new[]
   operator delete
   operator delete[]
   get_new_handler
   set_new_handler
   launder
   (C++17)
   bad_alloc
   bad_array_new_length
   nothrow_t
   align_val_t
   destroying_delete_t
   new_handler
   nothrow
   Miscellaneous
   pointer_traits
   (C++11)
   to_address
   (C++20)
   addressof
   (C++11)
   align
   (C++11)
   assume_aligned
   (C++20)
   C Library
   malloc
   calloc
   realloc

   aligned_alloc
   (C++17)
   free

   std::unique_ptr
   Member functions
   unique_ptr::unique_ptr
   unique_ptr::~unique_ptr
   unique_ptr::operator=
   Modifiers
   unique_ptr::release
   unique_ptr::reset
   unique_ptr::swap
   Observers
   unique_ptr::get
   unique_ptr::get_deleter
   unique_ptr::operator bool
   unique_ptr::operator*unique_ptr::operator->
   unique_ptr::operator[]
   Non-member functions
   make_uniquemake_unique_for_overwrite
   (C++14)(C++20)
   operator==operator!=operator<operator>operator<=operator>=operator<=>
   (until C++20)(C++20)
   operator<<
   (C++20)
   swap(std::unique_ptr)
   Helper classes
   hash<std::unique_ptr>

   Defined in header <memory>
   template< class T1, class D1, class T2, class D2 >
   bool operator==( const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>&
   y );
   (1) (since C++11)
   (constexpr since C++23)
   template< class T1, class D1, class T2, class D2 >
   bool operator!=( const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>&
   y );
   (2) (since C++11)
   (until C++20)
   template< class T1, class D1, class T2, class D2 >
   bool operator<( const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>&
   y );
   (3) (since C++11)
   template< class T1, class D1, class T2, class D2 >
   bool operator<=( const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>&
   y );
   (4) (since C++11)
   template< class T1, class D1, class T2, class D2 >
   bool operator>( const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>&
   y );
   (5) (since C++11)
   template< class T1, class D1, class T2, class D2 >
   bool operator>=( const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>&
   y );
   (6) (since C++11)
   template< class T1, class D1, class T2, class D2 >

       requires std::three_way_comparable_with<
           typename unique_ptr<T1, D1>::pointer,
           typename unique_ptr<T2, D2>::pointer>
   std::compare_three_way_result_t<typename unique_ptr<T1, D1>::pointer,
                                   typename unique_ptr<T2, D2>::pointer>
       operator<=>( const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>&
   y );
   (7) (since C++20)
   template< class T, class D >
   bool operator==( const unique_ptr<T, D>& x, std::nullptr_t ) noexcept;
   (8) (since C++11)
   (constexpr since C++23)
   template< class T, class D >
   bool operator==( std::nullptr_t, const unique_ptr<T, D>& x ) noexcept;
   (9) (since C++11)
   (until C++20)
   template< class T, class D >
   bool operator!=( const unique_ptr<T, D>& x, std::nullptr_t ) noexcept;
   (10) (since C++11)
   (until C++20)
   template< class T, class D >
   bool operator!=( std::nullptr_t, const unique_ptr<T, D>& x ) noexcept;
   (11) (since C++11)
   (until C++20)
   template< class T, class D >
   bool operator<( const unique_ptr<T, D>& x, std::nullptr_t );
   (12) (since C++11)
   (constexpr since C++23)
   template< class T, class D >
   bool operator<( std::nullptr_t, const unique_ptr<T, D>& y );
   (13) (since C++11)
   (constexpr since C++23)
   template< class T, class D >
   bool operator<=( const unique_ptr<T, D>& x, std::nullptr_t );
   (14) (since C++11)
   (constexpr since C++23)
   template< class T, class D >
   bool operator<=( std::nullptr_t, const unique_ptr<T, D>& y );
   (15) (since C++11)
   (constexpr since C++23)
   template< class T, class D >
   bool operator>( const unique_ptr<T, D>& x, std::nullptr_t );
   (16) (since C++11)
   (constexpr since C++23)
   template< class T, class D >
   bool operator>( std::nullptr_t, const unique_ptr<T, D>& y );
   (17) (since C++11)
   (constexpr since C++23)
   template< class T, class D >
   bool operator>=( const unique_ptr<T, D>& x, std::nullptr_t );
   (18) (since C++11)
   (constexpr since C++23)
   template< class T, class D >
   bool operator>=( std::nullptr_t, const unique_ptr<T, D>& y );
   (19) (since C++11)
   (constexpr since C++23)
   template< class T, class D >

       requires std::three_way_comparable<typename unique_ptr<T,
   D>::pointer>
   std::compare_three_way_result_t<typename unique_ptr<T, D>::pointer>
       operator<=>( const unique_ptr<T, D>& x, std::nullptr_t );
   (20) (since C++20)
   (constexpr since C++23)

   Compares the pointer values of two unique_ptrs, or a unique_ptr and
   nullptr.
   1-7) Compares two unique_ptrs.
   8-20) Compares a unique_ptr and nullptr.

   The != operator is synthesized from operator==.
   (since C++20)

Parameters

   x, y - unique_ptrs to compare

Return value

   1) x.get() == y.get()
   2) x.get() != y.get()
   3) std::less<CT>()(x.get(), y.get()), where CT is
   std::common_type<unique_ptr<T1, D1>::pointer, unique_ptr<T2,
   D2>::pointer>::type.
   4) !(y < x)
   5) y < x
   6) !(x < y)
   7) std::compare_three_way{}(x.get(), y.get())
   8,9) !x
   10,11) (bool)x
   12) std::less<unique_ptr<T,D>::pointer>()(x.get(), nullptr)
   13) std::less<unique_ptr<T,D>::pointer>()(nullptr, y.get())
   14) !(nullptr < x)
   15) !(y < nullptr)
   16) nullptr < x
   17) y < nullptr
   18) !(x < nullptr)
   19) !(nullptr < y)
   20) std::compare_three_way{}(x.get(), static_cast<typename
   unique_ptr<T, D>::pointer>(nullptr))

Example

   Run this code
#include <iostream>
#include <memory>

int main()
{
    std::unique_ptr<int> p1(new int(42));
    std::unique_ptr<int> p2(new int(42));

    std::cout << std::boolalpha
        << "(p1 == p1)       : " << (p1 == p1) << '\n'
        << "(p1 <=> p1) == 0 : " << ((p1 <=> p1) == 0) << '\n' // Since C++20

    // p1 and p2 point to different memory locations, so p1 != p2
        << "(p1 == p2)       : " << (p1 == p2) << '\n'
        << "(p1 < p2)        : " << (p1 < p2) << '\n'
        << "(p1 <=> p2) < 0  : " << ((p1 <=> p2) < 0) << '\n'   // Since C++20
        << "(p1 <=> p2) == 0 : " << ((p1 <=> p2) == 0) << '\n'; // Since C++20
}

   Possible output:
(p1 == p1)       : true
(p1 <=> p1) == 0 : true
(p1 == p2)       : false
(p1 < p2)        : true
(p1 <=> p2) < 0  : true
(p1 <=> p2) == 0 : false

Defect reports

   The following behavior-changing defect reports were applied
   retroactively to previously published C++ standards.
   DR Applied to Behavior as published Correct behavior
   LWG 3426 C++20 operator<=>(unique_ptr, nullptr_t) was ill-formed
   constraints and definition fixed

See also

   get
   returns a pointer to the managed object
   (public member function)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/memory/unique_pt
   r/operator_cmp&oldid=160319"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 8 October 2023, at 07:33.
     * This page has been accessed 79,476 times.
