std::map<Key,T,Compare,Allocator>::erase

   From cppreference.com
   < cpp | container | map


   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Containers library
   Sequence
   array
   (C++11)
   vector
   vector<bool>
   deque
   forward_list
   (C++11)
   list
   Associative
   set
   multiset
   map
   multimap
   Unordered associative
   unordered_set
   (C++11)
   unordered_multiset
   (C++11)
   unordered_map
   (C++11)
   unordered_multimap
   (C++11)
   Adaptors
   stack
   queue
   priority_queue
   flat_set
   (C++23)
   flat_multiset
   (C++23)
   flat_map
   (C++23)
   flat_multimap
   (C++23)
   Views
   span
   (C++20)
   mdspan
   (C++23)
   Iterator invalidation
   Member function table
   Non-member function table

   std::map
   Member functions
   map::map
   map::~map
   map::operator=
   map::get_allocator
   Element access
   map::at
   map::operator[]
   Iterators
   map::beginmap::cbegin
   (C++11)
   map::endmap::cend
   (C++11)
   map::rbeginmap::crbegin
   (C++11)
   map::rendmap::crend
   (C++11)
   Capacity
   map::size
   map::max_size
   map::empty
   Modifiers
   map::clear
   map::insert
   map::erase
   map::swap
   map::extract
   (C++17)
   map::merge
   (C++17)
   map::insert_range
   (C++23)
   map::insert_or_assign
   (C++17)
   map::emplace
   (C++11)
   map::emplace_hint
   (C++11)
   map::try_emplace
   (C++17)
   Lookup
   map::count
   map::find
   map::contains
   (C++20)
   map::equal_range
   map::lower_bound
   map::upper_bound
   Observers
   map::key_comp
   map::value_comp
   Non-member functions
   operator==operator!=operator<operator>operator<=operator>=operator<=>
   (until C++20)(until C++20)(until C++20)(until C++20)(until
   C++20)(C++20)
   std::swap(std::map)
   erase_if(std::map)
   (C++20)
   Deduction guides (C++17)

   iterator erase( iterator pos );
   (1)
   iterator erase( const_iterator pos );
   (2) (since C++11)
   (3)
   iterator erase( iterator first, iterator last );
   (until C++11)
   iterator erase( const_iterator first, const_iterator last );
   (since C++11)
   size_type erase( const Key& key );
   (4)
   template< class K >
   size_type erase( K&& x );
   (5) (since C++23)

   Removes specified elements from the container.
   1,2) Removes the element at pos.
   3) Removes the elements in the range [first, last), which must be a
   valid range in *this.
   4) Removes the element (if one exists) with the key equivalent to key.
   5) Removes all elements with key that compares equivalent to the value
   x. This overload participates in overload resolution only if the
   qualified-id Compare::is_transparent is valid and denotes a type, and
   neither iterator nor const_iterator is implicitly convertible from K.
   It allows calling this function without constructing an instance of
   Key.

   References and iterators to the erased elements are invalidated. Other
   references and iterators are not affected.

   The iterator pos must be valid and dereferenceable. Thus the end()
   iterator (which is valid, but is not dereferenceable) cannot be used as
   a value for pos.

Parameters

   pos - iterator to the element to remove
   first, last - range of elements to remove
   key - key value of the elements to remove
   x - a value of any type that can be transparently compared with a key
   denoting the elements to remove

Return value

   1-3) Iterator following the last removed element.
   4) Number of elements removed (0 or 1).
   5) Number of elements removed.

Exceptions

   1-3) Throws nothing.
   4,5) Any exceptions thrown by the Compare object.

Complexity

   Given an instance c of map:
   1,2) Amortized constant
   3) log(c.size()) + std::distance(first, last)
   4) log(c.size()) + c.count(key)
   5) log(c.size()) + c.count(x)

Notes

               Feature-test macro               Value    Std   Feature
   __cpp_lib_associative_heterogeneous_erasure 202110L (C++23)
   Heterogeneous erasure in associative containers and unordered
   associative containers; overload (5)

Example

   Run this code
#include <map>
#include <iostream>

int main()
{
    std::map<int, std::string> c =
    {
        {1, "one"}, {2, "two"}, {3, "three"},
        {4, "four"}, {5, "five"}, {6, "six"}
    };

    // erase all odd numbers from c
    for (auto it = c.begin(); it != c.end();)
    {
        if (it->first % 2 != 0)
            it = c.erase(it);
        else
            ++it;
    }

    for (auto& p : c)
        std::cout << p.second << ' ';
    std::cout << '\n';
}

   Output:
two four six

Defect reports

   The following behavior-changing defect reports were applied
   retroactively to previously published C++ standards.
   DR Applied to Behavior as published Correct behavior
   LWG 130 C++98 the return type of overloads (1) and (3) was void (it is
   not
   consistent with the erase() requirement on sequence containers)
   corrected to iterator
   LWG 2059 C++11 replacing overload (1) with overload (2) introduced new
   ambiguity added overload (1) back

See also

   clear
   clears the contents
   (public member function)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/container/map/er
   ase&oldid=134934"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 30 October 2021, at 14:48.
     * This page has been accessed 718,323 times.
