std::experimental::make_exceptional_future

   From cppreference.com
   < cpp | experimental

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Experimental
   Technical Specification
   Filesystem library (filesystem TS)
   Library fundamentals (library fundamentals TS)
   Library fundamentals 2 (library fundamentals TS v2)
   Library fundamentals 3 (library fundamentals TS v3)
   Extensions for parallelism (parallelism TS)
   Extensions for parallelism 2 (parallelism TS v2)
   Extensions for concurrency (concurrency TS)
   Extensions for concurrency 2 (concurrency TS v2)
   Concepts (concepts TS)
   Ranges (ranges TS)
   Reflection (reflection TS)
   Mathematical special functions (special functions TR)
   Experimental Non-TS
   Pattern Matching
   Linear Algebra
   std::execution
   Contracts
   2D Graphics

   Extensions for concurrency
   std::future extensions
   experimental::future
   experimental::shared_future
   experimental::when_all
   experimental::when_any
   experimental::make_ready_future
   experimental::make_exceptional_future
   Latches and barriers
   experimental::latch
   experimental::barrier
   experimental::flex_barrier
   Atomic smart pointers
   experimental::atomic_shared_ptr
   experimental::atomic_weak_ptr

   Defined in header <experimental/future>
   template< class T >
   future<T> make_exceptional_future( std::exception_ptr ex );
   (1)                                    (concurrency TS)
   template< class T, class E >
   future<T> make_exceptional_future( E ex );
   (2)                                    (concurrency TS)
   1) Creates a shared state of type T that is immediately ready and
   stores the exception pointer ex, then return a future associated with
   that shared state, as if by promise<T> p; p.set_exception(ex); return
   p.get_future();. The behavior is undefined if ex is null.
   2) Creates a shared state of type T that is immediately ready and
   stores an exception pointer created from ex, then return a future
   associated with that shared state, as if by promise<T> p;
   p.set_exception(std::make_exception_ptr(ex)); return p.get_future();.

Return value

   A future object associated with the shared state that was created.

See also

   make_ready_future
   (concurrency TS)
   produces a future that is ready immediately and holds the given value
   (function template)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/experimental/mak
   e_exceptional_future&oldid=154987"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 17 July 2023, at 03:22.
     * This page has been accessed 15,776 times.
