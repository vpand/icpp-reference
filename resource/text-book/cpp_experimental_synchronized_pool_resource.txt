std::experimental::pmr::synchronized_pool_resource

   From cppreference.com
   < cpp | experimental

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Library fundamentals
   experimental::optional
   experimental::any
   experimental::basic_string_view
   experimental::sample
   experimental::shared_ptr
   experimental::weak_ptr
   experimental::apply
   experimental::invocation_typeexperimental::raw_invocation_type
   experimental::search
   experimental::default_searcherexperimental::make_default_searcher
   experimental::boyer_moore_searcherexperimental::make_boyer_moore_search
   er
   experimental::boyer_moore_horspool_searcherexperimental::make_boyer_moo
   re_horspool_searcher
   Type-erased and polymorphic allocators
   Variable templates for type traits

   Polymorphic allocator library
   polymorphic_allocator
   Convenience aliases for containers using polymorphic_allocator
   Memory resource classes
   memory_resource
   synchronized_pool_resource
   unsynchronized_pool_resource
   monotonic_buffer_resource
   resource_adaptor
   Global memory resources
   new_delete_resource
   null_memory_resource
   get_default_resource
   set_default_resource
   Type-erased allocator support for existing classes
   function
   packaged_task
   promise

   std::experimental::pmr::synchronized_pool_resource
   synchronized_pool_resource::synchronized_pool_resource
   synchronized_pool_resource::~synchronized_pool_resource
   Public member functions
   synchronized_pool_resource::release
   synchronized_pool_resource::upstream_resource
   synchronized_pool_resource::options
   Protected member functions
   synchronized_pool_resource::do_allocate
   synchronized_pool_resource::do_deallocate
   synchronized_pool_resource::do_is_equal

   Defined in header <experimental/memory_resource>
   class synchronized_pool_resource : public memory_resource;
   (library fundamentals TS)

   The class std::experimental::pmr::synchronized_pool_resource is a
   general-purpose memory resource class with the following properties:
     * It owns the allocated memory and frees it on destruction, even if
       deallocate has not been called for some of the allocated blocks.
     * It consists of a collection of pools that serves request for
       different block sizes. Each pool manages a collection of chunks
       that are then divided into blocks of uniform size.
     * Calls to do_allocate are dispatched to the pool serving the
       smallest blocks accommodating the requested size.
     * Exhausting memory in the pool causes the next allocation request
       for that pool to allocate an additional chunk of memory from the
       upstream allocator to replenish the pool. The chunk size obtained
       increases geometrically.
     * Allocations requests that exceed the largest block size are served
       from the upstream allocator directly.
     * The largest block size and maximum chunk size may be tuned by
       passing a std::experimental::pmr::pool_options struct to its
       constructor.

   synchronized_pool_resource may be accessed from multiple threads
   without external synchronization, and may have thread-specific pools to
   reduce synchronization costs. If the memory resource is only accessed
   from one thread, unsynchronized_pool_resource is more efficient.

Member functions

   (constructor)
   constructs a synchronized_pool_resource
   (public member function)
   (destructor)
   [virtual]
   destroys a synchronized_pool_resource, releasing all allocated memory
   (virtual public member function)
   operator=
   [deleted]
   copy assignment operator is deleted. synchronized_pool_resource is not
   copy assignable
   (public member function)

Public member functions

   release
   release all allocated memory
   (public member function)
   upstream_resource
   returns a pointer to the upstream memory resource
   (public member function)
   options
   returns the options that control the pooling behavior of this resource
   (public member function)

Protected member functions

   do_allocate
   [virtual]
   allocate memory
   (virtual protected member function)
   do_deallocate
   [virtual]
   return memory to the pool
   (virtual protected member function)
   do_is_equal
   [virtual]
   compare for equality with another memory_resource
   (virtual protected member function)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/experimental/syn
   chronized_pool_resource&oldid=164611"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 2 December 2023, at 01:36.
     * This page has been accessed 14,368 times.
