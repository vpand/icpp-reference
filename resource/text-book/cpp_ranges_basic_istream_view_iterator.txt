std::ranges::basic_istream_view::iterator

   From cppreference.com
   < cpp | ranges | basic istream view

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Ranges library
   Range access
   begin
   cbegin
   end
   cend
   rbegin
   crbegin
   rend
   crend
   size
   ssize
   data
   cdata
   empty
   Range conversions
   std::from_range_t
   std::from_range
   (C++23)(C++23)
   to
   (C++23)
   Range primitives
   range_size_trange_difference_trange_value_trange_reference_t
   iterator_tconst_iterator_tsentinel_tconst_sentinel_t
   (C++23)(C++23)
   range_const_reference_trange_rvalue_reference_trange_common_reference_t
   (C++23)
   elements_of
   (C++23)
   Dangling iterator handling
   dangling
   borrowed_iterator_t
   borrowed_subrange_t
   Range concepts
   range
   borrowed_range
   sized_range
   constant_range
   (C++23)
   common_range
   view
   viewable_range
   input_range
   output_range
   forward_range
   bidirectional_range
   random_access_range
   contiguous_range
   Views
   view_interface
   subrange
   Range factories
   empty_viewviews::empty
   single_viewviews::single
   iota_viewviews::iota
   repeat_viewviews::repeat
   (C++23)(C++23)
   basic_istream_viewviews::istream
   Range adaptors
   views::all_tviews::all
   ref_view
   owning_view
   as_rvalue_viewviews::as_rvalue
   (C++23)(C++23)
   filter_viewviews::filter
   transform_viewviews::transform
   take_viewviews::take
   take_while_viewviews::take_while
   concat_viewviews::concat
   (C++26)(C++26)
   drop_viewviews::drop
   drop_while_viewviews::drop_while
   join_viewviews::join
   join_with_viewviews::join_with
   (C++23)(C++23)
   lazy_split_viewviews::lazy_split
   split_viewviews::split
   views::counted
   common_viewviews::common
   reverse_viewviews::reverse
   as_const_viewviews::as_const
   (C++23)(C++23)
   elements_viewviews::elements
   keys_viewviews::keys
   values_viewviews::values
   enumerate_viewviews::enumerate
   (C++23)(C++23)
   zip_viewviews::zip
   (C++23)(C++23)
   zip_transform_viewviews::zip_transform
   (C++23)(C++23)
   adjacent_viewviews::adjacent
   (C++23)(C++23)
   views::pairwise
   (C++23)
   adjacent_transform_viewviews::adjacent_transform
   (C++23)(C++23)
   views::pairwise_transform
   (C++23)
   chunk_viewviews::chunk
   (C++23)(C++23)
   slide_viewviews::slide
   (C++23)(C++23)
   chunk_by_viewviews::chunk_by
   (C++23)(C++23)
   stride_viewviews::stride
   (C++23)(C++23)
   cartesian_product_viewviews::cartesian_product
   (C++23)(C++23)
   Range generators
   std::generator
   (C++23)
   Range adaptor objects
   Range adaptor closure objects
   range_adaptor_closure
   (C++23)
   Helper items
   copyable-box
   movable-box
   (until C++23)(C++23)
   simple-view
   non-propagating-cache

   std::ranges::basic_istream_view
   Member functions
   basic_istream_view::basic_istream_view
   basic_istream_view::begin
   basic_istream_view::end
   Iterator
   basic_istream_view::iterator::iterator
   basic_istream_view::iterator::operator=
   basic_istream_view::iterator::operator++
   basic_istream_view::iterator::operator*
   operator==(basic_istream_view::iterator)

   struct /*iterator*/;
   (since C++20)
   (exposition only*)

   The return type of basic_istream_view::begin.

   /*iterator*/ is an input_iterator, but does not satisfy
   LegacyInputIterator, and thus does not work with pre-C++20 algorithms.

Member types

   Member type              Definition
   iterator_concept (C++20) std::input_iterator_tag
   difference_type (C++20)  std::ptrdiff_t
   value_type (C++20)       Val

Member functions

   (constructor)
   (C++20)
   constructs an iterator
   (public member function)
   operator=
   (C++20)
   the copy assignment operator is deleted; /*iterator*/ is move-only
   (public member function)
   operator++
   (C++20)
   advances the iterator
   (public member function)
   operator*
   (C++20)
   returns the current element
   (public member function)

std::ranges::basic_istream_view::iterator::iterator

   constexpr explicit /*iterator*/( basic_istream_view& parent );
   (1)                                                           (since C++20)
   /*iterator*/( const /*iterator*/& ) = delete;
   (2)                                                           (since C++20)
   /*iterator*/( /*iterator*/&& ) = default;
   (3)                                                           (since C++20)
   1) Constructs an iterator from the parent basic_istream_view.
   2) The copy constructor is deleted. The iterator is not copyable.
   3) The move constructor is defaulted. The iterator is movable.

std::ranges::basic_istream_view::iterator::operator=

   /*iterator*/& operator=( const /*iterator*/& ) = delete;
   (1)                                                     (since C++20)
   /*iterator*/& operator=( /*iterator*/&& ) = default;
   (2)                                                     (since C++20)
   1) The copy assignment operator is deleted. The iterator is not
   copyable.
   2) The move assignment operator is defaulted. The iterator is movable.

std::ranges::basic_istream_view::iterator::operator++

   /*iterator*/& operator++();
   (1)                        (since C++20)
   void operator++(int);
   (2)                        (since C++20)

   Reads a value from the underlying stream and stores it into the parent
   basic_istream_view.

Return value

   1) *this
   2) (none)

std::ranges::basic_istream_view::iterator::operator*

   Val& operator*() const;
                          (since C++20)

   Returns a reference to the stored value.

Non-member functions

   operator==
   (C++20)
   compares with a std::default_sentinel_t
   (public member function)

operator==(std::ranges::basic_istream_view::iterator, std::default_sentinel)

   friend bool operator==( const /*iterator*/& x, std::default_sentinel_t
   );
   (since C++20)

   Compares an iterator with std::default_sentinel_t.

   Returns true if *this does not have a parent basic_istream_view, or if
   an error has occurred on the underlying stream.

   This function is not visible to ordinary unqualified or qualified
   lookup, and can only be found by argument-dependent lookup when
   std::ranges::basic_istream_view::iterator is an associated class of the
   arguments.

Defect reports

   The following behavior-changing defect reports were applied
   retroactively to previously published C++ standards.
   DR Applied to Behavior as published Correct behavior
   P2325R3 C++20 default constructor was provided as C++20 iterators
   must be default_initializable removed along with the requirement
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/ranges/basic_ist
   ream_view/iterator&oldid=157830"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 3 September 2023, at 15:27.
     * This page has been accessed 4,621 times.
