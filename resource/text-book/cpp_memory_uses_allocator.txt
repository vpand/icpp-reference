std::uses_allocator

   From cppreference.com
   < cpp | memory

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Utilities library
   Language support
   Type support (basic types, RTTI)
   Library feature-test macros (C++20)
   Dynamic memory management
   Program utilities
   Coroutine support (C++20)
   Variadic functions
   is_constant_evaluated
   (C++20)
   is_within_lifetime
   (C++26)
   initializer_list
   (C++11)
   source_location
   (C++20)
   Debugging support
   is_debugger_present
   (C++26)
   breakpoint_if_debugging
   (C++26)
   breakpoint
   (C++26)
   Three-way comparison
   three_way_comparablethree_way_comparable_with
   (C++20)(C++20)
   strong_ordering
   (C++20)
   weak_ordering
   (C++20)
   partial_ordering
   (C++20)
   common_comparison_category
   (C++20)
   compare_three_way_result
   (C++20)
   compare_three_way
   (C++20)
   strong_order
   (C++20)
   weak_order
   (C++20)
   partial_order
   (C++20)
   compare_strong_order_fallback
   (C++20)
   compare_weak_order_fallback
   (C++20)
   compare_partial_order_fallback
   (C++20)
   is_eqis_ltis_lteq
   (C++20)(C++20)(C++20)
   is_neqis_gtis_gteq
   (C++20)(C++20)(C++20)
   General utilities
   Date and time
   Function objects
   Formatting library (C++20)
   bitset
   hash
   (C++11)
   Relational operators (deprecated in C++20)
   rel_ops::operator!=rel_ops::operator>

   rel_ops::operator<=rel_ops::operator>=
   Integer comparison functions
   cmp_equalcmp_lesscmp_less_than
   (C++20)(C++20)(C++20)
   cmp_not_equalcmp_greatercmp_greater_than
   (C++20)(C++20)(C++20)
   in_range
   (C++20)
   Swap and type operations
   swap
   ranges::swap
   (C++20)
   exchange
   (C++14)
   declval
   (C++11)
   to_underlying
   (C++23)
   forward
   (C++11)
   forward_like
   (C++23)
   move
   (C++11)
   move_if_noexcept
   (C++11)
   as_const
   (C++17)
   Common vocabulary types
   pair
   tuple
   (C++11)
   optional
   (C++17)
   any
   (C++17)
   variant
   (C++17)
   tuple_size
   (C++11)
   tuple_element
   (C++11)
   apply
   (C++17)
   make_from_tuple
   (C++17)
   expected
   (C++23)
   Elementary string conversions
   to_chars
   (C++17)
   from_chars
   (C++17)
   chars_format
   (C++17)
   to_chars_result
   (C++17)
   from_chars_result
   (C++17)

   Dynamic memory management
   Uninitialized memory algorithms
   uninitialized_copy
   uninitialized_fill
   uninitialized_move
   (C++17)
   uninitialized_default_construct
   (C++17)
   uninitialized_value_construct
   (C++17)
   destroy
   (C++17)
   destroy_at
   (C++17)
   voidify
   (C++20)
   uninitialized_copy_n
   (C++11)
   uninitialized_fill_n
   uninitialized_move_n
   (C++17)
   uninitialized_default_construct_n
   (C++17)
   uninitialized_value_construct_n
   (C++17)
   destroy_n
   (C++17)
   construct_at
   (C++20)
   Constrained uninitialized memory algorithms
   ranges::uninitialized_copy
   (C++20)
   ranges::uninitialized_fill
   (C++20)
   ranges::uninitialized_move
   (C++20)
   ranges::construct_at
   (C++20)
   ranges::destroy
   (C++20)
   ranges::destroy_n
   (C++20)
   ranges::destroy_at
   (C++20)
   ranges::uninitialized_copy_n
   (C++20)
   ranges::uninitialized_fill_n
   (C++20)
   ranges::uninitialized_move_n
   (C++20)
   ranges::uninitialized_default_construct
   (C++20)
   ranges::uninitialized_value_construct
   (C++20)
   ranges::uninitialized_default_construct_n
   (C++20)
   ranges::uninitialized_value_construct_n
   (C++20)
   Allocators
   allocator
   allocator_traits
   (C++11)
   allocation_result
   (C++23)
   allocator_arg
   (C++11)
   uses_allocator
   (C++11)
   uses_allocator_construction_args
   (C++20)
   make_obj_using_allocator
   (C++20)
   uninitialized_construct_using_allocator
   (C++20)
   scoped_allocator_adaptor
   (C++11)
   pmr::polymorphic_allocator
   (C++17)
   Memory resources
   pmr::memory_resource
   (C++17)
   pmr::get_default_resource
   (C++17)
   pmr::set_default_resource
   (C++17)
   pmr::new_delete_resource
   (C++17)
   pmr::null_memory_resource
   (C++17)
   pmr::synchronized_pool_resource
   (C++17)
   pmr::unsynchronized_pool_resource
   (C++17)
   pmr::monotonic_buffer_resource
   (C++17)
   pmr::pool_options
   (C++17)
   Garbage collection support
   declare_reachable
   (C++11)(until C++23)
   undeclare_reachable
   (C++11)(until C++23)
   declare_no_pointers
   (C++11)(until C++23)
   undeclare_no_pointers
   (C++11)(until C++23)
   pointer_safety
   (C++11)(until C++23)
   get_pointer_safety
   (C++11)(until C++23)
   Uninitialized storage
   raw_storage_iterator
   (until C++20*)
   get_temporary_buffer
   (until C++20*)
   return_temporary_buffer
   (until C++20*)
   Explicit lifetime management
   start_lifetime_asstart_lifetime_as_array
   (C++23)(C++23)
   Smart pointers
   unique_ptr
   (C++11)
   shared_ptr
   (C++11)
   weak_ptr
   (C++11)
   auto_ptr
   (until C++17*)
   owner_less
   (C++11)
   owner_less<void>
   (C++17)
   owner_hash
   (C++26)
   owner_equal
   (C++26)
   enable_shared_from_this
   (C++11)
   bad_weak_ptr
   (C++11)
   default_delete
   (C++11)
   out_ptr_t
   (C++23)
   inout_ptr_t
   (C++23)
   Low level memory
   management
   operator new
   operator new[]
   operator delete
   operator delete[]
   get_new_handler
   set_new_handler
   launder
   (C++17)
   bad_alloc
   bad_array_new_length
   nothrow_t
   align_val_t
   destroying_delete_t
   new_handler
   nothrow
   Miscellaneous
   pointer_traits
   (C++11)
   to_address
   (C++20)
   addressof
   (C++11)
   align
   (C++11)
   assume_aligned
   (C++20)
   C Library
   malloc
   calloc
   realloc

   aligned_alloc
   (C++17)
   free

   Defined in header <memory>
   template< class T, class Alloc >
   struct uses_allocator;
                                   (since C++11)

   If T has a nested type allocator_type which is convertible from Alloc,
   the member constant value is true. Otherwise value is false.

Helper variable template

   template< class T, class Alloc >
   inline constexpr bool uses_allocator_v = uses_allocator<T,
   Alloc>::value;
                                   (since C++17)

Inherited from std::integral_constant

Member constants

   value
   [static]
   true if T uses allocator Alloc, false otherwise
   (public static member constant)

Member functions

   operator bool
   converts the object to bool, returns value
   (public member function)
   operator()
   (C++14)
   returns value
   (public member function)

Member types

   Type       Definition
   value_type bool
   type       std::integral_constant<bool, value>

Uses-allocator construction

   There are three conventions of passing an allocator alloc to a
   constructor of some type T:
     * If T does not use a compatible allocator (std::uses_allocator_v<T,
       Alloc> is false), then alloc is ignored.
     * Otherwise, std::uses_allocator_v<T, Alloc> is true, and

          + if T uses the leading-allocator convention (is invocable as
            T(std::allocator_arg, alloc, args...)), then uses-allocator
            construction uses this form.
          + if T uses the trailing-allocator convention (is invocable as
            T(args..., alloc)), then uses-allocator construction uses this
            form.
          + Otherwise, the program is ill-formed (this means
            std::uses_allocator_v<T, Alloc> is true, but the type does not
            follow either of the two allowed conventions).

     * As a special case, std::pair is treated as a uses-allocator type
       even though std::uses_allocator is false for pairs (unlike e.g.
       std::tuple): see pair-specific overloads of
       std::pmr::polymorphic_allocator::construct and
       std::scoped_allocator_adaptor::construct(until
       C++20)std::uses_allocator_construction_args(since C++20).

   The utility functions std::make_obj_using_allocator, and
   std::uninitialized_construct_using_allocator may be used to explicitly
   create an object following the above protocol, and
   std::uses_allocator_construction_args can be used to prepare the
   argument list that matches the flavor of uses-allocator construction
   expected by the type.
   (since C++20)

Specializations

   Given a program-defined type T that does not have a nested
   allocator_type, a program can specialize std::uses_allocator to derive
   from std::true_type for T is any of the following requirements is
   satisfied:
     * T has a constructor which takes std::allocator_arg_t as the first
       argument, and Alloc as the second argument.
     * T has a constructor which takes Alloc as the last argument.

   In the above, Alloc is a type that satisfies Allocator or is a pointer
   type convertible to std::experimental::pmr::memory_resource*(library
   fundamentals TS).

   The following specializations are already provided by the standard
   library:
   std::uses_allocator<std::tuple>
   (C++11)
   specializes the std::uses_allocator type trait
   (class template specialization)
   std::uses_allocator<std::queue>
   (C++11)
   specializes the std::uses_allocator type trait
   (class template specialization)
   std::uses_allocator<std::priority_queue>
   (C++11)
   specializes the std::uses_allocator type trait
   (class template specialization)
   std::uses_allocator<std::stack>
   (C++11)
   specializes the std::uses_allocator type trait
   (class template specialization)
   std::uses_allocator<std::flat_map>
   (C++23)
   specializes the std::uses_allocator type trait
   (class template specialization)
   std::uses_allocator<std::flat_set>
   (C++23)
   specializes the std::uses_allocator type trait
   (class template specialization)
   std::uses_allocator<std::flat_multimap>
   (C++23)
   specializes the std::uses_allocator type trait
   (class template specialization)
   std::uses_allocator<std::flat_multiset>
   (C++23)
   specializes the std::uses_allocator type trait
   (class template specialization)
   std::uses_allocator<std::function>
   (C++11) (until C++17)
   specializes the std::uses_allocator type trait
   (class template specialization)
   std::uses_allocator<std::promise>
   (C++11)
   specializes the std::uses_allocator type trait
   (class template specialization)
   std::uses_allocator<std::packaged_task>
   (C++11) (until C++17)
   specializes the std::uses_allocator type trait
   (class template specialization)

Notes

   This type trait is used by std::tuple, std::scoped_allocator_adaptor,
   and std::pmr::polymorphic_allocator. It may also be used by custom
   allocators or wrapper types to determine whether the object or member
   being constructed is itself capable of using an allocator (e.g. is a
   container), in which case an allocator should be passed to its
   constructor.

See also

   allocator_argallocator_arg_t
   (C++11)
   a tag used to select allocator-aware constructors
   (tag)
   uses_allocator_construction_args
   (C++20)
   prepares the argument list matching the flavor of uses-allocator
   construction required by the given type
   (function template)
   make_obj_using_allocator
   (C++20)
   creates an object of the given type by means of uses-allocator
   construction
   (function template)
   uninitialized_construct_using_allocator
   (C++20)
   creates an object of the given type at specified memory location by
   means of uses-allocator construction
   (function template)
   scoped_allocator_adaptor
   (C++11)
   implements multi-level allocator for multi-level containers
   (class template)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/memory/uses_allo
   cator&oldid=170817"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 12 April 2024, at 19:08.
     * This page has been accessed 79,082 times.
