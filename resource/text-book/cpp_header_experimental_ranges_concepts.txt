Experimental library header <experimental/ranges/concepts>

   From cppreference.com
   < cpp | header | experimental

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Standard library headers
   Language support
   <cstddef>
   <cstdlib>
   <version> (C++20)
   <limits>
   <climits>
   <cfloat>
   <cstdint> (C++11)
   <stdfloat> (C++23)
   <new>
   <typeinfo>
   <source_location> (C++20)
   <exception>
   <initializer_list> (C++11)
   <compare> (C++20)
   <coroutine> (C++20)
   <csignal>
   <csetjmp>
   <cstdarg>
   Concepts
   <concepts> (C++20)
   Diagnostics
   <stdexcept>
   <stacktrace> (C++23)
   <cassert>
   <cerrno>
   <system_error> (C++11)
   Memory management
   <memory>
   <memory_resource> (C++17)
   <scoped_allocator> (C++11)
   Metaprogramming
   <type_traits> (C++11)
   <ratio> (C++11)
   General utilities
   <utility>
   <tuple> (C++11)
   <optional> (C++17)
   <variant> (C++17)
   <any> (C++17)
   <debugging> (C++26)
   <expected> (C++23)
   <bitset>
   <functional>
   <typeindex> (C++11)
   <execution> (C++17)
   <charconv> (C++17)
   <format> (C++20)
   <bit> (C++20)
   Strings
   <string_view> (C++17)
   <string>
   <cctype>
   <cwctype>
   <cstring>
   <cwchar>
   <cuchar> (C++11)
   Containers
   <array> (C++11)
   <deque>
   <forward_list> (C++11)
   <list>
   <vector>
   <map>
   <set>
   <unordered_map> (C++11)
   <unordered_set> (C++11)
   <queue>
   <stack>
   <flat_map> (C++23)
   <flat_set> (C++23)
   <span> (C++20)
   <mdspan> (C++23)
   Iterators
   <iterator>
   Ranges
   <ranges> (C++20)
   <generator> (C++23)
   Algorithms
   <algorithm>
   <numeric>
   Numerics
   <cfenv> (C++11)
   <complex>
   <random> (C++11)
   <valarray>
   <cmath>
   <linalg> (C++26)
   <numbers> (C++20)
   Time
   <chrono> (C++11)
   <ctime>
   Localization
   <locale>
   <clocale>
   <codecvt> (C++11/17/26*)
   <text_encoding> (C++26)
   Input/output
   <iosfwd>
   <iostream>
   <ios>
   <streambuf>
   <istream>
   <ostream>
   <iomanip>
   <print> (C++23)
   <sstream>
   <spanstream> (C++23)
   <fstream>
   <syncstream> (C++20)
   <filesystem> (C++17)
   <cstdio>
   <cinttypes> (C++11)
   <strstream> (C++98/26*)
   Regular expressions
   <regex> (C++11)
   Concurrency support
   <stop_token> (C++20)
   <thread> (C++11)
   <atomic> (C++11)
   <rcu> (C++26)
   <stdatomic.h> (C++23)
   <mutex> (C++11)
   <shared_mutex> (C++14)
   <condition_variable> (C++11)
   <semaphore> (C++20)
   <latch> (C++20)
   <barrier> (C++20)
   <future> (C++11)
   <hazard_pointer> (C++26)
   C compatibility
   <cstdbool> (C++11/17/20*)
   <ccomplex> (C++11/17/20*)
   <ctgmath> (C++11/17/20*)
   <cstdalign> (C++11/17/20*)
   <ciso646> (until C++20)

   Experimental library headers
   Execution P2300
   <experimental/execution>
   Filesystem TS
   <experimental/filesystem>
   Parallelism TS (v1, v2)
   experimental/algorithm
   experimental/execution_policy
   experimental/exception_list
   experimental/numeric
   <experimental/simd>
   experimental/task_block
   Library Fundamentals TS (v1, v2, v3)
   experimental/algorithm
   <experimental/any>
   experimental/array
   experimental/chrono
   experimental/deque
   experimental/forward_list
   <experimental/functional>
   experimental/future
   experimental/iterator
   experimental/list
   experimental/map
   experimental/memory
   <experimental/memory_resource>
   experimental/numeric
   <experimental/optional>
   experimental/propagate_const
   experimental/random
   experimental/ratio
   experimental/regex
   experimental/scope
   experimental/set
   experimental/source_location
   experimental/string
   <experimental/string_view>
   experimental/system_error
   experimental/tuple
   experimental/type_traits
   experimental/unordered_map
   experimental/unordered_set
   experimental/utility
   experimental/vector
   Concurrency TS
   experimental/atomic
   experimental/barrier
   experimental/future
   experimental/latch
   Ranges TS
   <experimental/ranges/algorithm>
   <experimental/ranges/concepts>
   <experimental/ranges/functional>
   <experimental/ranges/iterator>
   <experimental/ranges/random>
   <experimental/ranges/tuple>
   <experimental/ranges/type_traits>
   <experimental/ranges/utility>
   Coroutines TS
   experimental/coroutine
   Networking TS
   experimental/buffer
   experimental/executor
   experimental/internet
   experimental/io_context
   <experimental/net>
   experimental/netfwd
   experimental/socket
   experimental/timer
   Reflection TS
   <experimental/reflect>

   This header is part of the ranges library.

Core language concepts

   Defined in namespace std::experimental::ranges
   Same
   specifies that a type is the same as another type
   (concept)
   DerivedFrom
   specifies that a type is derived from another type
   (concept)
   ConvertibleTo
   specifies that a type is implicitly convertible to another type
   (concept)
   CommonReference
   specifies that two types share a common reference type
   (concept)
   Common
   specifies that two types share a common type
   (concept)
   Integral
   specifies that a type is an integral type
   (concept)
   SignedIntegral
   specifies that a type is an integral type that is signed
   (concept)
   UnsignedIntegral
   specifies that a type is an integral type that is not signed
   (concept)
   Assignable
   specifies that a type is assignable from another type
   (concept)
   SwappableSwappableWith
   specifies that a type can be swapped or that two types can be swapped
   with each other
   (concept)

Comparison concepts

   Defined in namespace std::experimental::ranges
   Boolean
   specifies that a type can be used in Boolean contexts
   (concept)
   WeaklyEqualityComparableWith
   specifies that two types can be compared for equality using operators
   == and !=
   (concept)
   EqualityComparableEqualityComparableWith
   specifies that operator == is an equivalence relation
   (concept)
   StrictTotallyOrderedStrictTotallyOrderedWith
   specifies that the comparison operators on the type yield a total order
   (concept)

Object concepts

   Defined in namespace std::experimental::ranges
   Destructible
   specifies that an object of the type can be destroyed
   (concept)
   Constructible
   specifies that a variable of the type can be constructed from or bound
   to a set of argument types
   (concept)
   DefaultConstructible
   specifies that an object of a type can be default constructed
   (concept)
   MoveConstructible
   specifies that an object of a type can be move constructed
   (concept)
   CopyConstructible
   specifies that an object of a type can be copy constructed and move
   constructed
   (concept)
   Movable
   specifies that an object of a type can be moved and swapped
   (concept)
   Copyable
   specifies that an object of a type can be copied, moved, and swapped
   (concept)
   Semiregular
   specifies that an object of a type can be copied, moved, swapped, and
   default constructed
   (concept)
   Regular
   specifies that a type is regular, that is, it is both Semiregular and
   EqualityComparable
   (concept)

Callable concepts

   Defined in namespace std::experimental::ranges
   InvocableRegularInvocable
   specifies that a callable type can be invoked with a given set of
   argument types
   (concept)
   Predicate
   specifies that a callable type is a Boolean predicate
   (concept)
   Relation
   specifies that a callable type is a binary relation
   (concept)
   StrictWeakOrder
   specifies that a Relation imposes a strict weak ordering
   (concept)

Synopsis

namespace std { namespace experimental { namespace ranges { inline namespace v1
{

template <class T, class U>
concept bool Same = /* see definition */;

template <class T, class U>
concept bool DerivedFrom = /* see definition */;

template <class T, class U>
concept bool ConvertibleTo = /* see definition */;

template <class T, class U>
concept bool CommonReference = /* see definition */;

template <class T, class U>
concept bool Common = /* see definition */;

template <class T>
concept bool Integral = /* see definition */;

template <class T>
concept bool SignedIntegral = /* see definition */;

template <class T>
concept bool UnsignedIntegral = /* see definition */;

template <class T, class U>
concept bool Assignable = /* see definition */;

template <class T>
concept bool Swappable = /* see definition */;

template <class T, class U>
concept bool SwappableWith = /* see definition */;

template <class T>
concept bool Destructible = /* see definition */;

template <class T, class... Args>
concept bool Constructible = /* see definition */;

template <class T>
concept bool DefaultConstructible = /* see definition */;

template <class T>
concept bool MoveConstructible = /* see definition */;

template <class T>
concept bool CopyConstructible = /* see definition */;

template <class B>
concept bool Boolean = /* see definition */;

template <class T, class U>
concept bool WeaklyEqualityComparableWith = /* see definition */;

template <class T>
concept bool EqualityComparable = /* see definition */;

template <class T, class U>
concept bool EqualityComparableWith = /* see definition */;

template <class T>
concept bool StrictTotallyOrdered = /* see definition */;

template <class T, class U>
concept bool StrictTotallyOrderedWith = /* see definition */;

template <class T>
concept bool Movable = /* see definition */;

template <class T>
concept bool Copyable = /* see definition */;

template <class T>
concept bool Semiregular = /* see definition */;

template <class T>
concept bool Regular = /* see definition */;

template <class F, class... Args>
concept bool Invocable = /* see definition */;

template <class F, class... Args>
concept bool RegularInvocable = /* see definition */;

template <class F, class... Args>
concept bool Predicate = /* see definition */;

template <class R, class T, class U>
concept bool Relation = /* see definition */;

template <class R, class T, class U>
concept bool StrictWeakOrder = /* see definition */;

}}}}

   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/header/experimen
   tal/ranges/concepts&oldid=112230"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 23 August 2019, at 04:34.
     * This page has been accessed 10,397 times.
