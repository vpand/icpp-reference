std::ranges::ssize

   From cppreference.com
   < cpp | ranges

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Ranges library
   Range access
   begin
   cbegin
   end
   cend
   rbegin
   crbegin
   rend
   crend
   size
   ssize
   data
   cdata
   empty
   Range conversions
   std::from_range_t
   std::from_range
   (C++23)(C++23)
   to
   (C++23)
   Range primitives
   range_size_trange_difference_trange_value_trange_reference_t
   iterator_tconst_iterator_tsentinel_tconst_sentinel_t
   (C++23)(C++23)
   range_const_reference_trange_rvalue_reference_trange_common_reference_t
   (C++23)
   elements_of
   (C++23)
   Dangling iterator handling
   dangling
   borrowed_iterator_t
   borrowed_subrange_t
   Range concepts
   range
   borrowed_range
   sized_range
   constant_range
   (C++23)
   common_range
   view
   viewable_range
   input_range
   output_range
   forward_range
   bidirectional_range
   random_access_range
   contiguous_range
   Views
   view_interface
   subrange
   Range factories
   empty_viewviews::empty
   single_viewviews::single
   iota_viewviews::iota
   repeat_viewviews::repeat
   (C++23)(C++23)
   basic_istream_viewviews::istream
   Range adaptors
   views::all_tviews::all
   ref_view
   owning_view
   as_rvalue_viewviews::as_rvalue
   (C++23)(C++23)
   filter_viewviews::filter
   transform_viewviews::transform
   take_viewviews::take
   take_while_viewviews::take_while
   concat_viewviews::concat
   (C++26)(C++26)
   drop_viewviews::drop
   drop_while_viewviews::drop_while
   join_viewviews::join
   join_with_viewviews::join_with
   (C++23)(C++23)
   lazy_split_viewviews::lazy_split
   split_viewviews::split
   views::counted
   common_viewviews::common
   reverse_viewviews::reverse
   as_const_viewviews::as_const
   (C++23)(C++23)
   elements_viewviews::elements
   keys_viewviews::keys
   values_viewviews::values
   enumerate_viewviews::enumerate
   (C++23)(C++23)
   zip_viewviews::zip
   (C++23)(C++23)
   zip_transform_viewviews::zip_transform
   (C++23)(C++23)
   adjacent_viewviews::adjacent
   (C++23)(C++23)
   views::pairwise
   (C++23)
   adjacent_transform_viewviews::adjacent_transform
   (C++23)(C++23)
   views::pairwise_transform
   (C++23)
   chunk_viewviews::chunk
   (C++23)(C++23)
   slide_viewviews::slide
   (C++23)(C++23)
   chunk_by_viewviews::chunk_by
   (C++23)(C++23)
   stride_viewviews::stride
   (C++23)(C++23)
   cartesian_product_viewviews::cartesian_product
   (C++23)(C++23)
   Range generators
   std::generator
   (C++23)
   Range adaptor objects
   Range adaptor closure objects
   range_adaptor_closure
   (C++23)
   Helper items
   copyable-box
   movable-box
   (until C++23)(C++23)
   simple-view
   non-propagating-cache

   Defined in header <ranges>
   Defined in header <iterator>
   inline namespace /*unspecified*/ {

       inline constexpr /*unspecified*/ ssize = /*unspecified*/;
   }
   (since C++20)
   (customization point object)
   Call signature
   template< class T >

       requires /* see below */
   constexpr /*signed-integer-like*/ ssize( T&& t );
                                     (since C++20)

   Returns the size of a range converted to a signed type.

   If ranges::size(t) is well-formed, a call to ranges::ssize is
   expression-equivalent to static_cast<MadeSigned>(ranges::size(t)),
   where MadeSigned denotes
     * the corresponding signed version of decltype(ranges::size(t)), if
       it is wider than std::ptrdiff_t, or
     * std::ptrdiff_t otherwise.

   If ranges::size(t) is ill-formed, a call to ranges::ssize is also
   ill-formed, which can result in substitution failure when
   ranges::ssize(t) appears in the immediate context of a template
   instantiation.

Customization point objects

   The name ranges::ssize denotes a customization point object, which is a
   const function object of a literal semiregular class type. For
   exposition purposes, the cv-unqualified version of its type is denoted
   as __ssize_fn.

   All instances of __ssize_fn are equal. The effects of invoking
   different instances of type __ssize_fn on the same arguments are
   equivalent, regardless of whether the expression denoting the instance
   is an lvalue or rvalue, and is const-qualified or not (however, a
   volatile-qualified instance is not required to be invocable). Thus,
   ranges::ssize can be copied freely and its copies can be used
   interchangeably.

   Given a set of types Args..., if std::declval<Args>()... meet the
   requirements for arguments to ranges::ssize above, __ssize_fn models
     * std::invocable<__ssize_fn, Args...>,
     * std::invocable<const __ssize_fn, Args...>,
     * std::invocable<__ssize_fn&, Args...>, and
     * std::invocable<const __ssize_fn&, Args...>.

   Otherwise, no function call operator of __ssize_fn participates in
   overload resolution.

Notes

   If ranges::ssize(e) is valid for an expression e, the return type is a
   signed-integer-like type, i.e. an integer type for which
   std::is_signed_v is true, or a signed-integer-class type.

   The width of integer-like types can be detected by
   std::numeric_limits::digits.

Example

   Run this code
#include <array>
#include <iostream>
#include <ranges>
#include <type_traits>

int main()
{
    std::array arr{1, 2, 3, 4, 5};
    auto s = std::ranges::ssize(arr);

    std::cout << "ranges::ssize(arr) = " << s << '\n'
              << "ranges::ssize is "
              << (std::is_signed_v<decltype(s)> ? "signed" : "unsigned")
              << '\n';

    std::cout << "reversed arr: ";

    for (--s; s >= 0; --s)
        std::cout << arr[s] << ' ';

    std::cout << "\n" "s = " << s << '\n';
}

   Output:
ranges::ssize(arr) = 5
ranges::ssize is signed
reversed arr: 5 4 3 2 1
s = -1

Defect reports

   The following behavior-changing defect reports were applied
   retroactively to previously published C++ standards.
   DR Applied to Behavior as published Correct behavior
   LWG 3403 C++20 ranges::size worked for some non-range types but
   ranges::ssize didn't made work

See also

   ranges::size
   (C++20)
   returns an integer equal to the size of a range
   (customization point object)
   ranges::sized_range
   (C++20)
   specifies that a range knows its size in constant time
   (concept)
   ranges::distance
   (C++20)
   returns the distance between an iterator and a sentinel, or between the
   beginning and end of a range
   (niebloid)
   sizessize
   (C++17)(C++20)
   returns the size of a container or array
   (function template)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/ranges/ssize&old
   id=160935"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 19 October 2023, at 01:41.
     * This page has been accessed 17,561 times.
