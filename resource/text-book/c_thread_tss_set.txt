tss_set

   From cppreference.com
   < c | thread

   C
   Language
   Headers
   Type support
   Program utilities
   Variadic function support
   Error handling
   Dynamic memory management
   Strings library
   Algorithms
   Numerics
   Date and time utilities
   Input/output support
   Localization support
   Concurrency support (C11)
   Technical Specifications
   Symbol index

   Concurrency support library
   Threads
   thrd_create
   thrd_equal
   thrd_current

   thrd_sleep
   thrd_yield
   thrd_exit
   thrd_detach
   thrd_join
   thrd_successthrd_timedoutthrd_busythrd_nomemthrd_error

   Atomic operations
   atomic_init
   ATOMIC_VAR_INIT
   (until C23)
   ATOMIC_***_LOCK_FREE
   atomic_is_lock_free
   atomic_store
   atomic_load
   atomic_exchange
   atomic_compare_exchange
   atomic_fetch_add
   atomic_fetch_sub
   atomic_fetch_or
   atomic_fetch_xor
   atomic_fetch_and
   Atomic flags
   atomic_flag
   ATOMIC_FLAG_INIT
   atomic_flag_test_and_set
   atomic_flag_clear
   Memory ordering
   memory_order
   kill_dependency
   atomic_thread_fence
   atomic_signal_fence
   Mutual exclusion
   mtx_init
   mtx_lock
   mtx_timedlock
   mtx_trylock
   call_once
   mtx_unlock
   mtx_destroy
   mtx_plainmtx_recursivemtx_timed
   Condition variables
   cnd_init
   cnd_signal
   cnd_broadcast
   cnd_wait
   cnd_timedwait
   cnd_destroy
   Thread-local storage
   thread_local
   TSS_DTOR_ITERATIONS

   tss_create
   tss_get
   tss_set
   tss_delete

   Defined in header <threads.h>
   int tss_set( tss_t tss_id, void *val );
                                          (since C11)

   Sets the value of the thread-specific storage identified by tss_id for
   the current thread to val. Different threads may set different values
   to the same key.

   The destructor, if available, is not invoked.

Parameters

   tss_id - thread-specific storage key, obtained from tss_create and not
   deleted by tss_delete
   val - value to set thread-specific storage to

Return value

   thrd_success if successful, thrd_error otherwise.

Notes

   The POSIX equivalent of this function is pthread_setspecific.

   Typically TSS is used to store pointers to blocks of dynamically
   allocated memory that have been reserved for use by the calling thread.

   tss_set may be called in the TSS destructor. If the destructor exits
   with non-NULL value in the TSS storage, it will be retried by thrd_exit
   up to TSS_DTOR_ITERATIONS times, after which the storage will be lost.

Example

   This section is incomplete
   Reason: improve, perhaps look for POSIX examples for inspiration
int thread_func(void *arg) {
    tss_t key;
    if (thrd_success == tss_create(&key, free)) {
        tss_set(key, malloc(4)); // stores a pointer on TSS
        // ...
    }
} // calls free() for the pointer stored on TSS

References

     * C17 standard (ISO/IEC 9899:2018):

          + 7.26.6.4 The tss_set function (p: 282-283)

     * C11 standard (ISO/IEC 9899:2011):

          + 7.26.6.4 The tss_set function (p: 387)

See also

   tss_get
   (C11)
   reads from thread-specific storage
   (function)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=c/thread/tss_set&old
   id=138762"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 13 March 2022, at 11:33.
     * This page has been accessed 20,095 times.
