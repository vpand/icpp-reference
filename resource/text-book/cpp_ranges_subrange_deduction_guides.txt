deduction guides for std::ranges::subrange

   From cppreference.com
   < cpp | ranges | subrange

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Ranges library
   Range access
   begin
   cbegin
   end
   cend
   rbegin
   crbegin
   rend
   crend
   size
   ssize
   data
   cdata
   empty
   Range conversions
   std::from_range_t
   std::from_range
   (C++23)(C++23)
   to
   (C++23)
   Range primitives
   range_size_trange_difference_trange_value_trange_reference_t
   iterator_tconst_iterator_tsentinel_tconst_sentinel_t
   (C++23)(C++23)
   range_const_reference_trange_rvalue_reference_trange_common_reference_t
   (C++23)
   elements_of
   (C++23)
   Dangling iterator handling
   dangling
   borrowed_iterator_t
   borrowed_subrange_t
   Range concepts
   range
   borrowed_range
   sized_range
   constant_range
   (C++23)
   common_range
   view
   viewable_range
   input_range
   output_range
   forward_range
   bidirectional_range
   random_access_range
   contiguous_range
   Views
   view_interface
   subrange
   Range factories
   empty_viewviews::empty
   single_viewviews::single
   iota_viewviews::iota
   repeat_viewviews::repeat
   (C++23)(C++23)
   basic_istream_viewviews::istream
   Range adaptors
   views::all_tviews::all
   ref_view
   owning_view
   as_rvalue_viewviews::as_rvalue
   (C++23)(C++23)
   filter_viewviews::filter
   transform_viewviews::transform
   take_viewviews::take
   take_while_viewviews::take_while
   concat_viewviews::concat
   (C++26)(C++26)
   drop_viewviews::drop
   drop_while_viewviews::drop_while
   join_viewviews::join
   join_with_viewviews::join_with
   (C++23)(C++23)
   lazy_split_viewviews::lazy_split
   split_viewviews::split
   views::counted
   common_viewviews::common
   reverse_viewviews::reverse
   as_const_viewviews::as_const
   (C++23)(C++23)
   elements_viewviews::elements
   keys_viewviews::keys
   values_viewviews::values
   enumerate_viewviews::enumerate
   (C++23)(C++23)
   zip_viewviews::zip
   (C++23)(C++23)
   zip_transform_viewviews::zip_transform
   (C++23)(C++23)
   adjacent_viewviews::adjacent
   (C++23)(C++23)
   views::pairwise
   (C++23)
   adjacent_transform_viewviews::adjacent_transform
   (C++23)(C++23)
   views::pairwise_transform
   (C++23)
   chunk_viewviews::chunk
   (C++23)(C++23)
   slide_viewviews::slide
   (C++23)(C++23)
   chunk_by_viewviews::chunk_by
   (C++23)(C++23)
   stride_viewviews::stride
   (C++23)(C++23)
   cartesian_product_viewviews::cartesian_product
   (C++23)(C++23)
   Range generators
   std::generator
   (C++23)
   Range adaptor objects
   Range adaptor closure objects
   range_adaptor_closure
   (C++23)
   Helper items
   copyable-box
   movable-box
   (until C++23)(C++23)
   simple-view
   non-propagating-cache

   std::ranges::subrange
   Member functions
   subrange::subrange
   subrange::operator PairLike
   Observers
   subrange::begin
   subrange::end
   subrange::empty
   subrange::size
   Iterator operations
   subrange::advance
   subrange::next
   subrange::prev
   Deduction guides
   Non-member functions
   get(std::ranges::subrange)
   Helper types
   subrange_kind
   tuple_size<std::ranges::subrange>
   tuple_element<std::ranges::subrange>

   Defined in header <ranges>
   template< std::input_or_output_iterator I, std::sentinel_for<I> S >
   subrange(I, S) -> subrange<I, S>;
   (1) (since C++20)
   template< std::input_or_output_iterator I, std::sentinel_for<I> S >

   subrange(I, S, /*make-unsigned-like-t*/<std::iter_difference_t<I>>) ->
       subrange<I, S, ranges::subrange_kind::sized>;
   (2) (since C++20)
   template< ranges::borrowed_range<R> >

   subrange(R&&) ->
       subrange<ranges::iterator_t<R>, ranges::sentinel_t<R>,
                (ranges::sized_range<R> ||
                 std::sized_sentinel_for<ranges::sentinel_t<R>,
                 ranges::iterator_t<R>>) ?
                ranges::subrange_kind::sized :
   ranges::subrange_kind::unsized>;
   (3) (since C++20)
   template< ranges::borrowed_range<R> >

   subrange(R&&, /*make-unsigned-like-t*/<ranges::range_difference_t<R>>)
   ->
       subrange<ranges::iterator_t<R>, ranges::sentinel_t<R>,
                ranges::subrange_kind::sized>;
   (4) (since C++20)

   These deduction guides are provided for std::ranges::subrange.
   1) Deduces the template arguments from the type of iterator and
   sentinel. The subrange is sized if std::sized_sentinel_for<S, I> is
   satisfied, as determined by the default template argument.
   2) Deduces the template arguments from the type of iterator and
   sentinel, while the size of range is specified. The subrange is always
   sized.
   3) Deduces the template arguments from the type of range. The subrange
   is sized if the size can be obtained from the range or its iterator and
   sentinel.
   4) Deduces the template arguments from the type of range, while the
   size of range is specified. The subrange is always sized.

   The exposition-only alias template make-unsigned-like-t maps each
   integer-like type to its corresponding unsigned version.

Notes

   While constructing the subrange object,
     * for (1,2), the behavior is undefined if the iterator-sentinel pair
       does not denote a valid range,
     * for (2,4), the behavior is undefined if the given size is not equal
       to the size of the range.

Example

   This section is incomplete
   Reason: no example

Defect reports

   The following behavior-changing defect reports were applied
   retroactively to previously published C++ standards.
   DR Applied to Behavior as published Correct behavior
   LWG 3404 C++20 meaningless deduction guides from pair-like types were
   provided removed
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/ranges/subrange/
   deduction_guides&oldid=133774"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 19 September 2021, at 02:59.
     * This page has been accessed 5,258 times.
