ungetc

   From cppreference.com
   < c | io

   C
   Language
   Headers
   Type support
   Program utilities
   Variadic function support
   Error handling
   Dynamic memory management
   Strings library
   Algorithms
   Numerics
   Date and time utilities
   Input/output support
   Localization support
   Concurrency support (C11)
   Technical Specifications
   Symbol index

   File input/output
   Types and objects
   FILE
   fpos_t

   stdinstdoutstderr
   Functions
   File access
   fopenfopen_s
   (C11)
   freopenfreopen_s
   (C11)
   fwide
   (C95)
   setbuf
   setvbuf
   fclose
   fflush
   Direct input/output
   fread
   fwrite
   Unformatted input/output
   fgetc
   fgets
   fputc
   fputs
   getchar
   getsgets_s
   (until C11)(C11)
   putchar
   puts
   ungetc
   fgetwcgetwc
   (C95)(C95)
   fgetws
   (C95)
   fputwcputwc
   (C95)(C95)
   fputws
   (C95)
   getwchar
   (C95)
   putwchar
   (C95)
   ungetwc
   (C95)
   Formatted input
   scanffscanfsscanfscanf_sfscanf_ssscanf_s
   (C11)(C11)(C11)
   wscanffwscanfswscanfwscanf_sfwscanf_sswscanf_s
   (C95)(C95)(C95)(C11)(C11)(C11)
   vscanfvfscanfvsscanfvscanf_svfscanf_svsscanf_s
   (C99)(C99)(C99)(C11)(C11)(C11)
   vwscanfvfwscanfvswscanfvwscanf_svfwscanf_svswscanf_s
   (C99)(C99)(C99)(C11)(C11)(C11)
   Formatted output
   printffprintfsprintfsnprintfprintf_sfprintf_ssprintf_ssnprintf_s
   (C99)(C11)(C11)(C11)(C11)
   wprintffwprintfswprintfwprintf_sfwprintf_sswprintf_ssnwprintf_s
   (C95)(C95)(C95)(C11)(C11)(C11)(C11)
   vprintfvfprintfvsprintfvsnprintfvprintf_svfprintf_svsprintf_svsnprintf_
   s
   (C99)(C11)(C11)(C11)(C11)
   vwprintfvfwprintfvswprintfvwprintf_svfwprintf_svswprintf_svsnwprintf_s
   (C95)(C95)(C95)(C11)(C11)(C11)(C11)
   File positioning
   ftell
   fgetpos
   fseek
   fsetpos
   rewind
   Error handling
   clearerr
   feof
   ferror
   perror
   Operations on files
   remove
   rename
   tmpfiletmpfile_s
   (C11)
   tmpnamtmpnam_s
   (C11)

   Defined in header <stdio.h>
   int ungetc( int ch, FILE *stream );

   If ch does not equal EOF, pushes the character ch (reinterpreted as
   unsigned char) into the input buffer associated with the stream stream
   in such a manner that subsequent read operation from stream will
   retrieve that character. The external device associated with the stream
   is not modified.

   Stream repositioning operations fseek, fsetpos, and rewind discard the
   effects of ungetc.

   If ungetc is called more than once without an intervening read or
   repositioning, it may fail (in other words, a pushback buffer of size 1
   is guaranteed, but any larger buffer is implementation-defined). If
   multiple successful ungetc were performed, read operations retrieve the
   pushed-back characters in reverse order of ungetc.

   If ch equals EOF, the operation fails and the stream is not affected.

   A successful call to ungetc clears the end of file status flag feof.

   A successful call to ungetc on a binary stream decrements the stream
   position indicator by one (the behavior is indeterminate if the stream
   position indicator was zero).

   A successful call to ungetc on a text stream modifies the stream
   position indicator in unspecified manner but guarantees that after all
   pushed-back characters are retrieved with a read operation, the stream
   position indicator is equal to its value before ungetc.

Parameters

   ch     - character to be pushed into the input stream buffer
   stream - file stream to put the character back to

Return value

   On success ch is returned.

   On failure EOF is returned and the given stream remains unchanged.

Notes

   The size of the pushback buffer varies in practice from 4k (Linux,
   MacOS) to as little as 4 (Solaris) or the guaranteed minimum 1 (HPUX,
   AIX).

   The apparent size of the pushback buffer may be larger if the character
   that is pushed back equals the character existing at that location in
   the external character sequence (the implementation may simply
   decrement the read file position indicator and avoid maintaining a
   pushback buffer).

Example

   demonstrates the original purpose of ungetc: implementation of scanf
   Run this code
#include <ctype.h>
#include <stdio.h>

void demo_scanf(const char* fmt, FILE* s)
{
    while (*fmt != '\0') {
        if (*fmt == '%') {
            int c;
            switch (*++fmt) {
                case 'u':
                    while (isspace(c=getc(s))) {}
                    unsigned int num = 0;
                    while (isdigit(c)) {
                        num = num*10 + c-'0';
                        c = getc(s);
                    }
                    printf("%%u scanned %u\n", num);
                    ungetc(c, s);
                    break;
                case 'c':
                    c = getc(s);
                    printf("%%c scanned '%c'\n", c);
                    break;
            }
        } else {
            ++fmt;
        }
    }
}

int main(void)
{
    FILE* f = fopen("input.txt", "w+");
    if (f != NULL) {
        fputs("123x", f);
        rewind(f);
        demo_scanf("%u%c", f);
        fclose(f);
    }
    return 0;
}

   Output:
%u scanned 123
%c scanned 'x'

References

     * C17 standard (ISO/IEC 9899:2018):

          + 7.21.7.10 The ungetc function (p: 243)

     * C11 standard (ISO/IEC 9899:2011):

          + 7.21.7.10 The ungetc function (p: 334)

     * C99 standard (ISO/IEC 9899:1999):

          + 7.19.7.11 The ungetc function (p: 300)

     * C89/C90 standard (ISO/IEC 9899:1990):

          + 4.9.7.11 The ungetc function

See also

   fgetcgetc
   gets a character from a file stream
   (function)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=c/io/ungetc&oldid=14
   1276"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 23 July 2022, at 15:17.
     * This page has been accessed 44,210 times.
