operator==(std::common_iterator)

   From cppreference.com
   < cpp | iterator | common iterator

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Iterator library
   Iterator concepts
   indirectly_readable
   (C++20)
   indirectly_writable
   (C++20)
   weakly_incrementable
   (C++20)
   incrementable
   (C++20)
   input_or_output_iterator
   (C++20)
   sentinel_for
   (C++20)
   sized_sentinel_for
   (C++20)
   input_iterator
   (C++20)
   output_iterator
   (C++20)
   forward_iterator
   (C++20)
   bidirectional_iterator
   (C++20)
   random_access_iterator
   (C++20)
   contiguous_iterator
   (C++20)
   Iterator primitives
   input_iterator_tagoutput_iterator_tagforward_iterator_tagbidirectional_
   iterator_tagrandom_access_iterator_tagcontiguous_iterator_tag
   (C++20)
   iter_value_titer_difference_titer_reference_titer_const_reference_titer
   _rvalue_reference_titer_common_reference_t
   (C++20)(C++20)(C++20)(C++23)(C++20)(C++20)
   iterator
   (deprecated in C++17)
   iterator_traits
   incrementable_traits
   (C++20)
   indirectly_readable_traits
   (C++20)
   Algorithm concepts and utilities
   Indirect callable concepts
   indirectly_unary_invocableindirectly_regular_unary_invocable
   (C++20)(C++20)
   indirect_unary_predicate
   (C++20)
   indirect_binary_predicate
   (C++20)
   indirect_equivalence_relation
   (C++20)
   indirect_strict_weak_order
   (C++20)
   Common algorithm requirements
   indirectly_movable
   (C++20)
   indirectly_movable_storable
   (C++20)
   indirectly_copyable
   (C++20)
   indirectly_copyable_storable
   (C++20)
   indirectly_swappable
   (C++20)
   indirectly_comparable
   (C++20)
   permutable
   (C++20)
   mergeable
   (C++20)
   sortable
   (C++20)
   Utilities
   indirect_result_t
   (C++20)
   projected
   (C++20)
   projected_value_t
   (C++26)
   Iterator adaptors
   reverse_iterator
   make_reverse_iterator
   (C++14)
   move_iterator
   (C++11)
   make_move_iterator
   (C++11)
   default_sentinel_tdefault_sentinel
   (C++20)(C++20)
   unreachable_sentinel_tunreachable_sentinel
   (C++20)(C++20)
   front_insert_iterator
   back_insert_iterator
   inserter
   insert_iterator
   front_inserter
   back_inserter
   move_sentinel
   (C++20)
   common_iterator
   (C++20)
   counted_iterator
   (C++20)
   basic_const_iterator
   (C++23)
   const_iterator
   (C++23)
   const_sentinel
   (C++23)
   make_const_iterator
   (C++23)
   make_const_sentinel
   (C++23)
   Stream iterators
   istream_iterator

   ostream_iterator
   istreambuf_iterator
   ostreambuf_iterator
   Iterator customization points
   ranges::iter_move
   (C++20)
   ranges::iter_swap
   (C++20)
   Iterator operations
   advance
   distance
   prev
   (C++11)
   next
   (C++11)
   ranges::advance
   (C++20)
   ranges::distance
   (C++20)
   ranges::prev
   (C++20)
   ranges::next
   (C++20)
   Range access
   begincbegin
   (C++11)(C++14)
   rbegincrbegin
   (C++14)(C++14)
   endcend
   (C++11)(C++14)
   rendcrend
   (C++14)(C++14)
   sizessize
   (C++17)(C++20)
   empty
   (C++17)
   data
   (C++17)

   std::common_iterator
   Member functions
   common_iterator::common_iterator
   (C++20)
   common_iterator::operator=
   (C++20)
   common_iterator::operator*common_iterator::operator->
   (C++20)(C++20)
   common_iterator::operator++common_iterator::operator++(int)
   (C++20)(C++20)
   Non-member functions
   operator==
   (C++20)
   operator-
   (C++20)
   iter_move
   (C++20)
   iter_swap
   (C++20)
   Helper classes
   incrementable_traits
   (C++20)
   iterator_traits
   (C++20)

   template <class I2, std::sentinel_for<I> S2>

       requires std::sentinel_for<S, I2>
   friend constexpr bool operator==( const common_iterator& x,
                                     const std::common_iterator<I2, S2>& y
   );
   (1)                                         (since C++20)
   template <class I2, std::sentinel_for<I> S2>

       requires std::sentinel_for<S, I2> &&
   std::equality_comparable_with<I, I2>
   friend constexpr bool operator==( const common_iterator& x,
                                     const std::common_iterator<I2, S2>& y
   );
   (2)                                         (since C++20)

   Compares the iterators and/or sentinels held by underlying std::variant
   member objects var. Two incomparable iterators or two sentinels are
   considered equal.

   The behavior is undefined if either x or y is in an invalid state, i.e.
   x.var.valueless_by_exception() || y.var.valueless_by_exception() is
   equal to true.

   Let i be x.var.index() and j be y.var.index().
   1) If i == j (i.e. both x and y hold iterators or both hold sentinels),
   returns true, otherwise returns std::get<i>(x.var) ==
   std::get<j>(y.var).
   2) If i == 1 && j == 1 (i.e. both x and y hold sentinels), returns
   true, otherwise returns std::get<i>(x.var) == std::get<j>(y.var).

   The != operator is synthesized from operator==.

   These function templates are not visible to ordinary unqualified or
   qualified lookup, and can only be found by argument-dependent lookup
   when std::common_iterator<I> is an associated class of the arguments.

Parameters

   x, y - iterator adaptors to compare

Return value

   true if underlying iterators and/or sentinels are equal.

Example

   Run this code
#include <cassert>
#include <iterator>

int main()
{
    int a[]{0, 1, 2, 3};

    using CI = std::common_iterator<
                   std::counted_iterator<int*>,
                   std::default_sentinel_t
                   >;

    CI i1{std::counted_iterator{a + 0, 2}};
    CI i2{std::counted_iterator{a + 1, 2}};
    CI i3{std::counted_iterator{a + 0, 3}};
    CI i4{std::counted_iterator{a + 0, 0}};
    CI s1{std::default_sentinel};
    CI s2{std::default_sentinel};

    assert((i1 == i2) == true);
    assert((i1 == i3) == false);
    assert((i2 == i3) == false);
    assert((s1 == s2) == true);
    assert((i1 == s1) == false);
    assert((i4 == s1) == true);
}

Defect reports

   The following behavior-changing defect reports were applied
   retroactively to previously published C++ standards.
   DR Applied to Behavior as published Correct behavior
   LWG 3574 C++20 variant was fully constexpr (P2231R1) but
   common_iterator was not also made constexpr

See also

   operator-
   (C++20)
   computes the distance between two iterator adaptors
   (function template)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/common_
   iterator/operator_cmp&oldid=159362"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 18 September 2023, at 12:03.
     * This page has been accessed 4,243 times.
