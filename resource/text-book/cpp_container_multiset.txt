std::multiset

   From cppreference.com
   < cpp | container

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Containers library
   Sequence
   array
   (C++11)
   vector
   vector<bool>
   deque
   forward_list
   (C++11)
   list
   Associative
   set
   multiset
   map
   multimap
   Unordered associative
   unordered_set
   (C++11)
   unordered_multiset
   (C++11)
   unordered_map
   (C++11)
   unordered_multimap
   (C++11)
   Adaptors
   stack
   queue
   priority_queue
   flat_set
   (C++23)
   flat_multiset
   (C++23)
   flat_map
   (C++23)
   flat_multimap
   (C++23)
   Views
   span
   (C++20)
   mdspan
   (C++23)
   Iterator invalidation
   Member function table
   Non-member function table

   std::multiset
   Member functions
   multiset::multiset
   multiset::~multiset
   multiset::operator=
   multiset::get_allocator
   Iterators
   multiset::beginmultiset::cbegin
   (C++11)
   multiset::endmultiset::cend
   (C++11)
   multiset::rbeginmultiset::crbegin
   (C++11)
   multiset::rendmultiset::crend
   (C++11)
   Capacity
   multiset::size
   multiset::max_size
   multiset::empty
   Modifiers
   multiset::clear
   multiset::erase
   multiset::swap
   multiset::extract
   (C++17)
   multiset::merge
   (C++17)
   multiset::insert
   multiset::insert_range
   (C++23)
   multiset::emplace
   (C++11)
   multiset::emplace_hint
   (C++11)
   Lookup
   multiset::count
   multiset::find
   multiset::contains
   (C++20)
   multiset::equal_range
   multiset::lower_bound
   multiset::upper_bound
   Observers
   multiset::key_comp
   multiset::value_comp
   Non-member functions
   operator==operator!=operator<operator>operator<=operator>=operator<=>
   (until C++20)(until C++20)(until C++20)(until C++20)(until
   C++20)(C++20)
   std::swap(std::multiset)
   erase_if(std::multiset)
   (C++20)
   Deduction guides(C++17)

   Defined in header <set>
   template<

       class Key,
       class Compare = std::less<Key>,
       class Allocator = std::allocator<Key>
   > class multiset;
   (1)
   namespace pmr {

       template<
           class Key,
           class Compare = std::less<Key>
       > using multiset = std::multiset<Key, Compare,
   std::pmr::polymorphic_allocator<Key>>;
   }
   (2)                    (since C++17)

   std::multiset is an associative container that contains a sorted set of
   objects of type Key. Unlike set, multiple keys with equivalent values
   are allowed. Sorting is done using the key comparison function Compare.
   Search, insertion, and removal operations have logarithmic complexity.

   Everywhere the standard library uses the Compare requirements,
   equivalence is determined by using the equivalence relation as
   described on Compare. In imprecise terms, two objects a and b are
   considered equivalent if neither compares less than the other: !comp(a,
   b) && !comp(b, a).

   The order of the elements that compare equivalent is the order of
   insertion and does not change.
   (since C++11)

   std::multiset meets the requirements of Container,
   AllocatorAwareContainer, AssociativeContainer and ReversibleContainer.

Template parameters

   This section is incomplete
   Reason: Add descriptions of the template parameters.

Member types

   Member type Definition
   key_type Key
   value_type Key
   size_type Unsigned integer type (usually std::size_t)
   difference_type Signed integer type (usually std::ptrdiff_t)
   key_compare Compare
   value_compare Compare
   allocator_type Allocator
   reference value_type&
   const_reference const value_type&
   pointer
   Allocator::pointer                        (until C++11)
   std::allocator_traits<Allocator>::pointer (since C++11)
   const_pointer
   Allocator::const_pointer                        (until C++11)
   std::allocator_traits<Allocator>::const_pointer (since C++11)
   iterator Constant LegacyBidirectionalIterator to value_type
   const_iterator LegacyBidirectionalIterator to const value_type
   reverse_iterator std::reverse_iterator<iterator>
   const_reverse_iterator std::reverse_iterator<const_iterator>
   node_type (since C++17) a specialization of node handle representing a
   container node

Member functions

   (constructor)
   constructs the multiset
   (public member function)
   (destructor)
   destructs the multiset
   (public member function)
   operator=
   assigns values to the container
   (public member function)
   get_allocator
   returns the associated allocator
   (public member function)

Iterators

   begincbegin
   (C++11)
   returns an iterator to the beginning
   (public member function)
   endcend
   (C++11)
   returns an iterator to the end
   (public member function)
   rbegincrbegin
   (C++11)
   returns a reverse iterator to the beginning
   (public member function)
   rendcrend
   (C++11)
   returns a reverse iterator to the end
   (public member function)

Capacity

   empty
   checks whether the container is empty
   (public member function)
   size
   returns the number of elements
   (public member function)
   max_size
   returns the maximum possible number of elements
   (public member function)

Modifiers

   clear
   clears the contents
   (public member function)
   insert
   inserts elements or nodes(since C++17)
   (public member function)
   insert_range
   (C++23)
   inserts a range of elements
   (public member function)
   emplace
   (C++11)
   constructs element in-place
   (public member function)
   emplace_hint
   (C++11)
   constructs elements in-place using a hint
   (public member function)
   erase
   erases elements
   (public member function)
   swap
   swaps the contents
   (public member function)
   extract
   (C++17)
   extracts nodes from the container
   (public member function)
   merge
   (C++17)
   splices nodes from another container
   (public member function)

Lookup

   count
   returns the number of elements matching specific key
   (public member function)
   find
   finds element with specific key
   (public member function)
   contains
   (C++20)
   checks if the container contains element with specific key
   (public member function)
   equal_range
   returns range of elements matching a specific key
   (public member function)
   lower_bound
   returns an iterator to the first element not less than the given key
   (public member function)
   upper_bound
   returns an iterator to the first element greater than the given key
   (public member function)

Observers

   key_comp
   returns the function that compares keys
   (public member function)
   value_comp
   returns the function that compares keys in objects of type value_type
   (public member function)

Non-member functions

   operator==operator!=operator<operator<=operator>operator>=operator<=>
   (removed in C++20)(removed in C++20)(removed in C++20)(removed in
   C++20)(removed in C++20)(C++20)
   lexicographically compares the values of two multisets
   (function template)
   std::swap(std::multiset)
   specializes the std::swap algorithm
   (function template)
   erase_if(std::multiset)
   (C++20)
   erases all elements satisfying specific criteria
   (function template)

Deduction guides

   (since C++17)

Notes

   The member types iterator and const_iterator may be aliases to the same
   type. This means defining a pair of function overloads using the two
   types as parameter types may violate the One Definition Rule. Since
   iterator is convertible to const_iterator, a single function with a
   const_iterator as parameter type will work instead.
   Feature-test macro Value Std Feature
   __cpp_lib_containers_ranges 202202L (C++23) Ranges construction and
   insertion for containers

Example

   This section is incomplete
   Reason: no example

Defect reports

   The following behavior-changing defect reports were applied
   retroactively to previously published C++ standards.
   DR Applied to Behavior as published Correct behavior
   LWG 103 C++98 iterator allows modification of keys iterator made
   constant
   LWG 230 C++98 Key was not required to be CopyConstructible
   (a key of type Key might not be able to be constructed) Key is also
   required to
   be CopyConstructible
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/container/multis
   et&oldid=169690"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 9 February 2024, at 01:09.
     * This page has been accessed 569,918 times.
