std::from_range, std::from_range_t

   From cppreference.com
   < cpp | ranges

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Ranges library
   Range access
   begin
   cbegin
   end
   cend
   rbegin
   crbegin
   rend
   crend
   size
   ssize
   data
   cdata
   empty
   Range conversions
   std::from_range_t
   std::from_range
   (C++23)(C++23)
   to
   (C++23)
   Range primitives
   range_size_trange_difference_trange_value_trange_reference_t
   iterator_tconst_iterator_tsentinel_tconst_sentinel_t
   (C++23)(C++23)
   range_const_reference_trange_rvalue_reference_trange_common_reference_t
   (C++23)
   elements_of
   (C++23)
   Dangling iterator handling
   dangling
   borrowed_iterator_t
   borrowed_subrange_t
   Range concepts
   range
   borrowed_range
   sized_range
   constant_range
   (C++23)
   common_range
   view
   viewable_range
   input_range
   output_range
   forward_range
   bidirectional_range
   random_access_range
   contiguous_range
   Views
   view_interface
   subrange
   Range factories
   empty_viewviews::empty
   single_viewviews::single
   iota_viewviews::iota
   repeat_viewviews::repeat
   (C++23)(C++23)
   basic_istream_viewviews::istream
   Range adaptors
   views::all_tviews::all
   ref_view
   owning_view
   as_rvalue_viewviews::as_rvalue
   (C++23)(C++23)
   filter_viewviews::filter
   transform_viewviews::transform
   take_viewviews::take
   take_while_viewviews::take_while
   concat_viewviews::concat
   (C++26)(C++26)
   drop_viewviews::drop
   drop_while_viewviews::drop_while
   join_viewviews::join
   join_with_viewviews::join_with
   (C++23)(C++23)
   lazy_split_viewviews::lazy_split
   split_viewviews::split
   views::counted
   common_viewviews::common
   reverse_viewviews::reverse
   as_const_viewviews::as_const
   (C++23)(C++23)
   elements_viewviews::elements
   keys_viewviews::keys
   values_viewviews::values
   enumerate_viewviews::enumerate
   (C++23)(C++23)
   zip_viewviews::zip
   (C++23)(C++23)
   zip_transform_viewviews::zip_transform
   (C++23)(C++23)
   adjacent_viewviews::adjacent
   (C++23)(C++23)
   views::pairwise
   (C++23)
   adjacent_transform_viewviews::adjacent_transform
   (C++23)(C++23)
   views::pairwise_transform
   (C++23)
   chunk_viewviews::chunk
   (C++23)(C++23)
   slide_viewviews::slide
   (C++23)(C++23)
   chunk_by_viewviews::chunk_by
   (C++23)(C++23)
   stride_viewviews::stride
   (C++23)(C++23)
   cartesian_product_viewviews::cartesian_product
   (C++23)(C++23)
   Range generators
   std::generator
   (C++23)
   Range adaptor objects
   Range adaptor closure objects
   range_adaptor_closure
   (C++23)
   Helper items
   copyable-box
   movable-box
   (until C++23)(C++23)
   simple-view
   non-propagating-cache

   Defined in header <ranges>
   struct from_range_t { explicit from_range_t() = default; };
                                                              (since C++23)
   inline constexpr std::from_range_t from_range {};
                                                              (since C++23)

   std::from_range is a disambiguation tag that can be passed to the
   constructors of the suitable containers to indicate that the contained
   member is range constructed.

   The corresponding type std::from_range_t can be used in the
   constructor's parameter list to match the intended tag.

Standard library

   The following standard library types use std::from_range_t type in
   their constructors:

Containers library

   (constructor)
   (C++23)
   constructs the vector from a range
   (public member function of std::vector<T,Allocator>)
   (constructor)
   (C++23)
   constructs the deque from a range
   (public member function of std::deque<T,Allocator>)
   (constructor)
   (C++23)
   constructs the forward_list from a range
   (public member function of std::forward_list<T,Allocator>)
   (constructor)
   (C++23)
   constructs the list from a range
   (public member function of std::list<T,Allocator>)
   (constructor)
   (C++23)
   constructs the set from a range
   (public member function of std::set<Key,Compare,Allocator>)
   (constructor)
   (C++23)
   constructs the map from a range
   (public member function of std::map<Key,T,Compare,Allocator>)
   (constructor)
   (C++23)
   constructs the multiset from a range
   (public member function of std::multiset<Key,Compare,Allocator>)
   (constructor)
   (C++23)
   constructs the multimap from a range
   (public member function of std::multimap<Key,T,Compare,Allocator>)
   (constructor)
   (C++23)
   constructs the unordered_set from a range
   (public member function of
   std::unordered_set<Key,Hash,KeyEqual,Allocator>)
   (constructor)
   (C++23)
   constructs the unordered_map from a range
   (public member function of
   std::unordered_map<Key,T,Hash,KeyEqual,Allocator>)
   (constructor)
   (C++23)
   constructs the unordered_multiset from a range
   (public member function of
   std::unordered_multiset<Key,Hash,KeyEqual,Allocator>)
   (constructor)
   (C++23)
   constructs the unordered_multimap from a range
   (public member function of
   std::unordered_multimap<Key,T,Hash,KeyEqual,Allocator>)
   (constructor)
   (C++23)
   constructs the priority_queue from a range
   (public member function of std::priority_queue<T,Container,Compare>)
   (constructor)
   (C++23)
   constructs the queue from a range
   (public member function of std::queue<T,Container>)
   (constructor)
   (C++23)
   constructs the stack from a range
   (public member function of std::stack<T,Container>)
   (constructor)
   (C++23)
   constructs the flat_set from a range
   (public member function of std::flat_set<Key,Compare,KeyContainer>)
   (constructor)
   (C++23)
   constructs the flat_map from a range
   (public member function of
   std::flat_map<Key,T,Compare,KeyContainer,MappedContainer>)
   (constructor)
   (C++23)
   constructs the flat_multiset from a range
   (public member function of
   std::flat_multiset<Key,Compare,KeyContainer>)
   (constructor)
   (C++23)
   constructs the flat_multimap from a range
   (public member function of
   std::flat_multimap<Key,T,Compare,KeyContainer,MappedContainer>)

Strings library

   (constructor)
   (C++23)
   constructs the basic_string from a range
   (public member function of std::basic_string<CharT,Traits,Allocator>)

Notes

   Feature-test macro Value Std Feature
   __cpp_lib_containers_ranges 202202L (C++23) Tagged constructors to
   construct from container compatible range

Example

   Run this code
#include <cassert>
#include <string>

int main()
{
#ifdef __cpp_lib_containers_ranges
    auto const range = {0x43, 43, 43};
    std::string str{std::from_range, range}; // uses tagged constructor
    assert(str == "C++");
#endif
}

See also

   in_placein_place_typein_place_indexin_place_tin_place_type_tin_place_in
   dex_t
   (C++17)
   in-place construction tag
   (tag)
   sorted_equivalentsorted_equivalent_t
   (C++23)
   indicates that elements of a range are sorted (uniqueness is not
   required)
   (tag)
   sorted_uniquesorted_unique_t
   (C++23)
   indicates that elements of a range are sorted and unique
   (tag)
   ranges::to
   (C++23)
   constructs a new non-view object from an input range
   (function template)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/ranges/from_rang
   e&oldid=171754"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 14 May 2024, at 19:13.
     * This page has been accessed 8,748 times.
