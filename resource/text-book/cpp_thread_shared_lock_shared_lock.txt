std::shared_lock<Mutex>::shared_lock

   From cppreference.com
   < cpp | thread | shared lock

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Concurrency support library
   Threads
   thread
   (C++11)
   jthread
   (C++20)
   stop_token
   (C++20)
   stop_source
   (C++20)
   stop_callback
   (C++20)
   hardware_destructive_interference_sizehardware_constructive_interferenc
   e_size
   (C++17)(C++17)
   this_thread namespace
   get_id
   (C++11)
   yield
   (C++11)
   sleep_for
   (C++11)
   sleep_until
   (C++11)
   Mutual exclusion
   mutex
   (C++11)
   recursive_mutex
   (C++11)
   shared_mutex
   (C++17)
   timed_mutex
   (C++11)
   recursive_timed_mutex
   (C++11)
   shared_timed_mutex
   (C++14)
   Generic lock management
   lock_guard
   (C++11)
   scoped_lock
   (C++17)
   unique_lock
   (C++11)
   shared_lock
   (C++14)
   defer_lock_ttry_to_lock_tadopt_lock_t
   (C++11)(C++11)(C++11)
   lock
   (C++11)
   try_lock
   (C++11)
   defer_locktry_to_lockadopt_lock
   (C++11)(C++11)(C++11)
   once_flag
   (C++11)
   call_once
   (C++11)
   Condition variables
   condition_variable
   (C++11)
   condition_variable_any
   (C++11)
   notify_all_at_thread_exit
   (C++11)
   cv_status
   (C++11)
   Semaphores
   counting_semaphorebinary_semaphore
   (C++20)(C++20)
   Latches and Barriers
   latch
   (C++20)
   barrier
   (C++20)
   Futures
   promise
   (C++11)
   future
   (C++11)
   shared_future
   (C++11)
   packaged_task
   (C++11)
   async
   (C++11)
   launch
   (C++11)
   future_status
   (C++11)
   future_error
   (C++11)
   future_category
   (C++11)
   future_errc
   (C++11)
   Safe Reclamation
   rcu_obj_base
   (C++26)
   rcu_domain
   (C++26)
   rcu_default_domain
   (C++26)
   rcu_synchronize
   (C++26)
   rcu_barrier
   (C++26)
   rcu_retire
   (C++26)
   Hazard Pointers
   hazard_pointer_obj_base
   (C++26)
   hazard_pointer
   (C++26)
   make_hazard_pointer
   (C++26)
   Atomic types
   atomic
   (C++11)
   atomic_ref
   (C++20)
   atomic_flag
   (C++11)
   Initialization of atomic types
   atomic_init
   (C++11)(deprecated in C++20)
   ATOMIC_VAR_INIT
   (C++11)(deprecated in C++20)
   ATOMIC_FLAG_INIT
   (C++11)
   Memory ordering
   memory_order
   (C++11)
   kill_dependency
   (C++11)
   atomic_thread_fence
   (C++11)
   atomic_signal_fence
   (C++11)
   Free functions for atomic operations
   atomic_storeatomic_store_explicit
   (C++11)(C++11)
   atomic_loadatomic_load_explicit
   (C++11)(C++11)
   atomic_exchangeatomic_exchange_explicit
   (C++11)(C++11)
   atomic_compare_exchange_weakatomic_compare_exchange_weak_explicitatomic
   _compare_exchange_strongatomic_compare_exchange_strong_explicit
   (C++11)(C++11)(C++11)(C++11)
   atomic_fetch_addatomic_fetch_add_explicit
   (C++11)(C++11)
   atomic_fetch_subatomic_fetch_sub_explicit
   (C++11)(C++11)
   atomic_fetch_andatomic_fetch_and_explicit
   (C++11)(C++11)
   atomic_fetch_oratomic_fetch_or_explicit
   (C++11)(C++11)
   atomic_fetch_xoratomic_fetch_xor_explicit
   (C++11)(C++11)
   atomic_fetch_maxatomic_fetch_max_explicit
   (C++26)(C++26)
   atomic_fetch_minatomic_fetch_min_explicit
   (C++26)(C++26)
   atomic_is_lock_free
   (C++11)
   atomic_waitatomic_wait_explicit
   (C++20)(C++20)
   atomic_notify_one
   (C++20)
   atomic_notify_all
   (C++20)
   Free functions for atomic flags
   atomic_flag_test_and_setatomic_flag_test_and_set_explicit
   (C++11)(C++11)
   atomic_flag_clearatomic_flag_clear_explicit
   (C++11)(C++11)
   atomic_flag_testatomic_flag_test_explicit
   (C++20)(C++20)
   atomic_flag_waitatomic_flag_wait_explicit
   (C++20)(C++20)
   atomic_flag_notify_one
   (C++20)
   atomic_flag_notify_all
   (C++20)

   std::shared_lock
   Member functions
   shared_lock::shared_lock
   shared_lock::~shared_lock
   shared_lock::operator=
   Shared locking
   shared_lock::lock
   shared_lock::try_lock
   shared_lock::try_lock_for
   shared_lock::try_lock_until
   shared_lock::unlock
   Modifiers
   shared_lock::swap
   shared_lock::release
   Observers
   shared_lock::mutex
   shared_lock::owns_lock
   shared_lock::operator bool
   Non-member functions
   swap(std::shared_lock)

   shared_lock() noexcept;
   (1)                                                        (since C++14)
   shared_lock( shared_lock&& other ) noexcept;
   (2)                                                        (since C++14)
   explicit shared_lock( mutex_type& m );
   (3)                                                        (since C++14)
   shared_lock( mutex_type& m, std::defer_lock_t t ) noexcept;
   (4)                                                        (since C++14)
   shared_lock( mutex_type& m, std::try_to_lock_t t );
   (5)                                                        (since C++14)
   shared_lock( mutex_type& m, std::adopt_lock_t t );
   (6)                                                        (since C++14)
   template< class Rep, class Period >

   shared_lock( mutex_type& m,
                const std::chrono::duration<Rep,Period>& timeout_duration
   );
   (7)                                                        (since C++14)
   template< class Clock, class Duration >

   shared_lock( mutex_type& m,
                const std::chrono::time_point<Clock,Duration>&
   timeout_time );
   (8)                                                        (since C++14)

   Constructs a shared_lock, optionally locking the supplied mutex.
   1) Constructs a shared_lock with no associated mutex.
   2) Move constructor. Initializes the shared_lock with the contents of
   other. Leaves other with no associated mutex.
   3-8) Constructs a shared_lock with m as the associated mutex.
   Additionally:
   3) Locks the associated mutex in shared mode by calling
   m.lock_shared().
   4) Does not lock the associated mutex.
   5) Tries to lock the associated mutex in shared mode without blocking
   by calling m.try_lock_shared().
   6) Assumes the calling thread already holds a shared lock (i.e., a lock
   acquired by lock_shared, try_lock_shared, try_lock_shared_for, or
   try_lock_shared_until) on m. The behavior is undefined if not so.
   7) Tries to lock the associated mutex in shared mode by calling
   m.try_lock_shared_for(timeout_duration), which blocks until specified
   timeout_duration has elapsed or the lock is acquired, whichever comes
   first. May block for longer than timeout_duration. The behavior is
   undefined if Mutex does not meet the SharedTimedLockable requirements.
   8) Tries to lock the associated mutex in shared mode by calling
   m.try_lock_shared_until(timeout_time), which blocks until specified
   timeout_time has been reached or the lock is acquired, whichever comes
   first. May block for longer than until timeout_time has been reached.
   The behavior is undefined if Mutex does not meet the
   SharedTimedLockable requirements.

Parameters

   other - another shared_lock to initialize the state with
   m - mutex to associate with the lock and optionally acquire ownership
   of
   t - tag parameter used to select constructors with different locking
   strategies
   timeout_duration - maximum duration to block for
   timeout_time - maximum time point to block until

Example

   Run this code
#include <chrono>
#include <iostream>
#include <shared_mutex>
#include <syncstream>
#include <thread>

std::shared_timed_mutex m;
int i = 10;

void read_shared_var(int id)
{
     // both the threads get access to the integer i
     std::shared_lock<std::shared_timed_mutex> slk(m);
     const int ii = i; // reads global i

     std::osyncstream(std::cout) << '#' << id << " read i as " << ii << "...\n";
     std::this_thread::sleep_for(std::chrono::milliseconds(10));
     std::osyncstream(std::cout) << '#' << id << " woke up..." << std::endl;
}

int main()
{
     std::thread r1{read_shared_var, 1};
     std::thread r2{read_shared_var, 2};

     r1.join();
     r2.join();
}

   Possible output:
#2 read i as 10...
#1 read i as 10...
#2 woke up...
#1 woke up...

   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/thread/shared_lo
   ck/shared_lock&oldid=161226"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 23 October 2023, at 10:58.
     * This page has been accessed 70,651 times.
