std::memset

   From cppreference.com
   < cpp | string | byte

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Strings library
   Null-terminated strings
   Byte strings
   Multibyte strings
   Wide strings
   Classes
   basic_string
   basic_string_view
   (C++17)
   char_traits

   Null-terminated byte strings
   Functions
   Character manipulation
   isalnum
   isalpha
   islower
   isupper
   isdigit
   isxdigit
   isblank
   (C++11)
   iscntrl
   isgraph
   isspace
   isprint
   ispunct
   tolower
   toupper
   Conversions to numeric formats
   atof
   atoiatolatoll
   (C++11)
   strtolstrtoll
   (C++11)
   strtoulstrtoull
   (C++11)
   strtofstrtodstrtold
   (C++11)(C++11)
   strtoimaxstrtouimax
   (C++11)(C++11)
   String manipulation
   strcpy
   strncpy
   strxfrm
   strcat
   strncat
   String examination
   strlen
   strcmp
   strncmp
   strcoll
   strchr
   strrchr
   strspn
   strcspn
   strpbrk
   strstr
   strtok
   Memory manipulation
   memchr
   memcmp
   memset
   memcpy
   memmove
   Miscellaneous
   strerror

   Defined in header <cstring>
   void* memset( void* dest, int ch, std::size_t count );

   Copies the value static_cast<unsigned char>(ch) into each of the first
   count characters of the object pointed to by dest. If the object is a
   potentially-overlapping subobject or is not TriviallyCopyable (e.g.,
   scalar, C-compatible struct, or an array of trivially copyable type),
   the behavior is undefined. If count is greater than the size of the
   object pointed to by dest, the behavior is undefined.

Parameters

   dest  - pointer to the object to fill
   ch    - fill byte
   count - number of bytes to fill

Return value

   dest

Notes

   std::memset may be optimized away (under the as-if rules) if the object
   modified by this function is not accessed again for the rest of its
   lifetime (e.g., gcc bug 8537). For that reason, this function cannot be
   used to scrub memory (e.g., to fill an array that stored a password
   with zeroes).

   Solutions for that include std::fill with volatile pointers, (C23)
   memset_explicit(), (C11) memset_s, FreeBSD explicit_bzero or Microsoft
   SecureZeroMemory.

Example

   Run this code
#include <bitset>
#include <climits>
#include <cstring>
#include <iostream>

int main()
{
    int a[4];
    using bits = std::bitset<sizeof(int) * CHAR_BIT>;
    std::memset(a, 0b1111'0000'0011, sizeof a);
    for (int ai : a)
        std::cout << bits(ai) << '\n';
}

   Output:
00000011000000110000001100000011
00000011000000110000001100000011
00000011000000110000001100000011
00000011000000110000001100000011

See also

   memcpy
   copies one buffer to another
   (function)
   memmove
   moves one buffer to another
   (function)
   wmemset
   copies the given wide character to every position in a wide character
   array
   (function)
   fill
   copy-assigns the given value to every element in a range
   (function template)
   fill_n
   copy-assigns the given value to N elements in a range
   (function template)
   is_trivially_copyable
   (C++11)
   checks if a type is trivially copyable
   (class template)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/string/byte/mems
   et&oldid=152827"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 5 June 2023, at 10:31.
     * This page has been accessed 764,553 times.
