std::list<T,Allocator>::insert_range

   From cppreference.com
   < cpp | container | list


   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Containers library
   Sequence
   array
   (C++11)
   vector
   vector<bool>
   deque
   forward_list
   (C++11)
   list
   Associative
   set
   multiset
   map
   multimap
   Unordered associative
   unordered_set
   (C++11)
   unordered_multiset
   (C++11)
   unordered_map
   (C++11)
   unordered_multimap
   (C++11)
   Adaptors
   stack
   queue
   priority_queue
   flat_set
   (C++23)
   flat_multiset
   (C++23)
   flat_map
   (C++23)
   flat_multimap
   (C++23)
   Views
   span
   (C++20)
   mdspan
   (C++23)
   Iterator invalidation
   Member function table
   Non-member function table

   std::list
   Member functions
   list::list
   list::~list
   list::operator=
   list::assign
   list::assign_range
   (C++23)
   list::get_allocator
   Element access
   list::front
   list::back
   Iterators
   list::beginlist::cbegin
   (C++11)
   list::endlist::cend
   (C++11)
   list::rbeginlist::crbegin
   (C++11)
   list::rendlist::crend
   (C++11)
   Capacity
   list::size
   list::empty
   list::max_size
   Modifiers
   list::clear
   list::insert
   list::insert_range
   (C++23)
   list::emplace
   (C++11)
   list::erase
   list::push_front
   list::emplace_front
   (C++11)
   list::prepend_range
   (C++23)
   list::pop_front
   list::push_back
   list::emplace_back
   (C++11)
   list::append_range
   (C++23)
   list::pop_back
   list::resize
   list::swap
   Operations
   list::merge
   list::splice
   list::removelist::remove_if
   list::reverse
   list::unique
   list::sort
   Non-member functions
   operator==operator!=operator<operator>operator<=operator>=operator<=>
   (until C++20)(until C++20)(until C++20)(until C++20)(until
   C++20)(C++20)
   swap(std::list)
   erase(std::list)erase_if(std::list)
   (C++20)(C++20)
   Deduction guides(C++17)

   template< container-compatible-range<T> R >
   iterator insert_range( const_iterator pos, R&& rg );
                                              (since C++23)

   Inserts, in non-reversing order, copies of elements in rg before pos.

   No iterators or references are invalidated.

   Each iterator in the range rg is dereferenced exactly once.

   The behavior is undefined if rg overlaps with the container.

Parameters

   pos - iterator before which the content will be inserted (pos may be
   the end() iterator)
   rg - a container compatible range, that is, an input_range whose
   elements are convertible to T
   Type requirements
   -
   T must be EmplaceConstructible into list from *ranges::begin(rg).
   Otherwise, the behavior is undefined.

Return value

   An iterator that points at the copy of the first element inserted into
   list or at pos if rg is empty.

Notes

   Feature-test macro Value Std Feature
   __cpp_lib_containers_ranges 202202L (C++23) Ranges-aware construction
   and insertion

Example

   Run this code
#include <algorithm>
#include <cassert>
#include <iterator>
#include <list>
#include <vector>

int main()
{
    auto container = std::list{1, 2, 3, 4};
    auto pos = std::next(container.begin(), 2);
    assert(*pos == 3);
    const auto rg = std::vector{-1, -2, -3};

#ifdef __cpp_lib_containers_ranges
    container.insert_range(pos, rg);
#else
    container.insert(pos, rg.cbegin(), rg.cend());
#endif
    assert(std::ranges::equal(container, std::list{1, 2, -1, -2, -3, 3, 4}));
}

See also

   insert
   inserts elements
   (public member function)
   prepend_range
   (C++23)
   adds a range of elements to the beginning
   (public member function)
   append_range
   (C++23)
   adds a range of elements to the end
   (public member function)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/container/list/i
   nsert_range&oldid=155603"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 27 July 2023, at 16:14.
     * This page has been accessed 3,661 times.
