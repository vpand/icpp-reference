std::ranges::sized_range, std::ranges::disable_sized_range

   From cppreference.com
   < cpp | ranges

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Ranges library
   Range access
   begin
   cbegin
   end
   cend
   rbegin
   crbegin
   rend
   crend
   size
   ssize
   data
   cdata
   empty
   Range conversions
   std::from_range_t
   std::from_range
   (C++23)(C++23)
   to
   (C++23)
   Range primitives
   range_size_trange_difference_trange_value_trange_reference_t
   iterator_tconst_iterator_tsentinel_tconst_sentinel_t
   (C++23)(C++23)
   range_const_reference_trange_rvalue_reference_trange_common_reference_t
   (C++23)
   elements_of
   (C++23)
   Dangling iterator handling
   dangling
   borrowed_iterator_t
   borrowed_subrange_t
   Range concepts
   range
   borrowed_range
   sized_range
   constant_range
   (C++23)
   common_range
   view
   viewable_range
   input_range
   output_range
   forward_range
   bidirectional_range
   random_access_range
   contiguous_range
   Views
   view_interface
   subrange
   Range factories
   empty_viewviews::empty
   single_viewviews::single
   iota_viewviews::iota
   repeat_viewviews::repeat
   (C++23)(C++23)
   basic_istream_viewviews::istream
   Range adaptors
   views::all_tviews::all
   ref_view
   owning_view
   as_rvalue_viewviews::as_rvalue
   (C++23)(C++23)
   filter_viewviews::filter
   transform_viewviews::transform
   take_viewviews::take
   take_while_viewviews::take_while
   concat_viewviews::concat
   (C++26)(C++26)
   drop_viewviews::drop
   drop_while_viewviews::drop_while
   join_viewviews::join
   join_with_viewviews::join_with
   (C++23)(C++23)
   lazy_split_viewviews::lazy_split
   split_viewviews::split
   views::counted
   common_viewviews::common
   reverse_viewviews::reverse
   as_const_viewviews::as_const
   (C++23)(C++23)
   elements_viewviews::elements
   keys_viewviews::keys
   values_viewviews::values
   enumerate_viewviews::enumerate
   (C++23)(C++23)
   zip_viewviews::zip
   (C++23)(C++23)
   zip_transform_viewviews::zip_transform
   (C++23)(C++23)
   adjacent_viewviews::adjacent
   (C++23)(C++23)
   views::pairwise
   (C++23)
   adjacent_transform_viewviews::adjacent_transform
   (C++23)(C++23)
   views::pairwise_transform
   (C++23)
   chunk_viewviews::chunk
   (C++23)(C++23)
   slide_viewviews::slide
   (C++23)(C++23)
   chunk_by_viewviews::chunk_by
   (C++23)(C++23)
   stride_viewviews::stride
   (C++23)(C++23)
   cartesian_product_viewviews::cartesian_product
   (C++23)(C++23)
   Range generators
   std::generator
   (C++23)
   Range adaptor objects
   Range adaptor closure objects
   range_adaptor_closure
   (C++23)
   Helper items
   copyable-box
   movable-box
   (until C++23)(C++23)
   simple-view
   non-propagating-cache

   Defined in header <ranges>
   template< class T >

   concept sized_range = ranges::range<T> &&
       requires(T& t) {
           ranges::size(t);
       };
   (1)                       (since C++20)
   template< class >
   inline constexpr bool disable_sized_range = false;
   (2)                       (since C++20)
   1) The sized_range concept specifies the requirements of a range type
   that knows its size in constant time with the size function.
   2) disable_sized_range exists to allow use of range types that provide
   a size function (either as a member or as a non-member) but do not in
   fact model sized_range. Users may specialize disable_sized_range for
   cv-unqualified program-defined types. Such specializations shall be
   usable in constant expressions and have type const bool.

Semantic requirements

   1) Given an lvalue t of type std::remove_reference_t<T>, T models
   sized_range only if
     * ranges::size(t)

          + has amortized constant-time complexity,
          + does not alter the value of t in a manner observable to
            equality-preserving expressions, and
          + is equal to ranges::distance(ranges::begin(t),
            ranges::end(t)), and

     * if ranges::iterator_t<T> models forward_iterator, ranges::size(t)
       is well-defined regardless of the evaluation of ranges::begin(t)
       (in other words, a single-pass sized range may support a call to
       size only before the first call to begin, but a forward range must
       support size at all times).

Notes

   disable_sized_range cannot be used to opt-out a range whose iterator
   and sentinel satisfy sized_sentinel_for;
   std::disable_sized_sentinel_for must be used instead.

   disable_sized_range cannot be specialized for array types or reference
   types.

Example

   Run this code
#include <forward_list>
#include <list>
#include <ranges>

static_assert
(
    std::ranges::sized_range<std::list<int>> and
    not std::ranges::sized_range<std::forward_list<int>>
);

int main() {}

See also

   ranges::random_access_range
   (C++20)
   specifies a range whose iterator type satisfies random_access_iterator
   (concept)
   ranges::contiguous_range
   (C++20)
   specifies a range whose iterator type satisfies contiguous_iterator
   (concept)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/ranges/sized_ran
   ge&oldid=160933"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 19 October 2023, at 00:57.
     * This page has been accessed 31,885 times.
