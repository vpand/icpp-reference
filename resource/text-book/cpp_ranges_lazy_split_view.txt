std::ranges::views::lazy_split, std::ranges::lazy_split_view

   From cppreference.com
   < cpp | ranges

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Ranges library
   Range access
   begin
   cbegin
   end
   cend
   rbegin
   crbegin
   rend
   crend
   size
   ssize
   data
   cdata
   empty
   Range conversions
   std::from_range_t
   std::from_range
   (C++23)(C++23)
   to
   (C++23)
   Range primitives
   range_size_trange_difference_trange_value_trange_reference_t
   iterator_tconst_iterator_tsentinel_tconst_sentinel_t
   (C++23)(C++23)
   range_const_reference_trange_rvalue_reference_trange_common_reference_t
   (C++23)
   elements_of
   (C++23)
   Dangling iterator handling
   dangling
   borrowed_iterator_t
   borrowed_subrange_t
   Range concepts
   range
   borrowed_range
   sized_range
   constant_range
   (C++23)
   common_range
   view
   viewable_range
   input_range
   output_range
   forward_range
   bidirectional_range
   random_access_range
   contiguous_range
   Views
   view_interface
   subrange
   Range factories
   empty_viewviews::empty
   single_viewviews::single
   iota_viewviews::iota
   repeat_viewviews::repeat
   (C++23)(C++23)
   basic_istream_viewviews::istream
   Range adaptors
   views::all_tviews::all
   ref_view
   owning_view
   as_rvalue_viewviews::as_rvalue
   (C++23)(C++23)
   filter_viewviews::filter
   transform_viewviews::transform
   take_viewviews::take
   take_while_viewviews::take_while
   concat_viewviews::concat
   (C++26)(C++26)
   drop_viewviews::drop
   drop_while_viewviews::drop_while
   join_viewviews::join
   join_with_viewviews::join_with
   (C++23)(C++23)
   lazy_split_viewviews::lazy_split
   split_viewviews::split
   views::counted
   common_viewviews::common
   reverse_viewviews::reverse
   as_const_viewviews::as_const
   (C++23)(C++23)
   elements_viewviews::elements
   keys_viewviews::keys
   values_viewviews::values
   enumerate_viewviews::enumerate
   (C++23)(C++23)
   zip_viewviews::zip
   (C++23)(C++23)
   zip_transform_viewviews::zip_transform
   (C++23)(C++23)
   adjacent_viewviews::adjacent
   (C++23)(C++23)
   views::pairwise
   (C++23)
   adjacent_transform_viewviews::adjacent_transform
   (C++23)(C++23)
   views::pairwise_transform
   (C++23)
   chunk_viewviews::chunk
   (C++23)(C++23)
   slide_viewviews::slide
   (C++23)(C++23)
   chunk_by_viewviews::chunk_by
   (C++23)(C++23)
   stride_viewviews::stride
   (C++23)(C++23)
   cartesian_product_viewviews::cartesian_product
   (C++23)(C++23)
   Range generators
   std::generator
   (C++23)
   Range adaptor objects
   Range adaptor closure objects
   range_adaptor_closure
   (C++23)
   Helper items
   copyable-box
   movable-box
   (until C++23)(C++23)
   simple-view
   non-propagating-cache

   std::ranges::lazy_split_view
   Member functions
   lazy_split_view::lazy_split_view
   lazy_split_view::base
   lazy_split_view::begin
   lazy_split_view::end
   Nested classes
   lazy_split_view::outer_iterator
   lazy_split_view::outer_iterator::value_type
   lazy_split_view::inner_iterator
   Deduction guides

   Defined in header <ranges>
   template< ranges::input_range V, ranges::forward_range Pattern >

   requires ranges::view<V> &&
            ranges::view<Pattern> &&
            std::indirectly_comparable<ranges::iterator_t<V>,
                                       ranges::iterator_t<Pattern>,
                                       ranges::equal_to> &&
            (ranges::forward_range<V> || /*tiny-range*/<Pattern>)
   class lazy_split_view
       : public ranges::view_interface<lazy_split_view<V, Pattern>>
   (1) (since C++20)
   namespace views {

       inline constexpr /* unspecified */ lazy_split = /* unspecified */;
   }
   (2) (since C++20)
   Call signature
   template< ranges::viewable_range R, class Pattern >

       requires /* see below */
   constexpr ranges::view auto lazy_split( R&& r, Pattern&& pattern );
   (since C++20)
   template< class Pattern >
   constexpr /* range adaptor closure */ lazy_split( Pattern&& pattern );
   (since C++20)
   Helper concepts
   template< class R >

   concept /*tiny-range*/ =
       ranges::sized_range<R> &&
       requires { /* is-statically-constexpr-sized */<R>; } &&
       (std::remove_reference_t<R>::size() <= 1);
   (3) (exposition only*)
   1) lazy_split_view takes a view and a delimiter, and splits the view
   into subranges on the delimiter.

   Two major scenarios are supported:
     * The view is an input_range, the delimiter is a single element
       (wrapped in a single_view).
     * The view is a forward_range, the delimiter is a view of elements.

   2) A RangeAdaptorObject. The expression views::lazy_split(e, f) is
   expression-equivalent to lazy_split_view(e, f).
   3) The exposition-only concept /*tiny-range*/<Pattern> is satisfied if
   Pattern satisfies sized_range, Pattern::size() is a constant expression
   and suitable as a template non-type argument, and the value of
   Pattern::size() is less than or equal to 1. Notably, empty_view and
   single_view satisfy this concept.

   lazy_split_view models the concepts forward_range and input_range when
   the underlying view V models respective concepts, and models
   common_range when V models both forward_range and common_range.

   The inner range (ranges::range_reference_t<lazy_split_view>) models the
   concepts forward_range and input_range when the underlying view V
   models respective concepts. It does not model common_range, and cannot
   be used with algorithms that expect a bidirectional_range or higher.

Data members

   Member name Definition
   base_ (private) The underlying view of type V.
   (exposition-only member object*)
   pattern_ (private) The pattern that is used as a delimiter to split the
   underlying view.
   (exposition-only member object*)
   current_ (private)
   (optional) An optional-like caching object of type
   /*non-propagating-cache*/<ranges::iterator_t<V>>. Caches the result of
   calls to begin(). Present only if V does not satisfy forward_range.
   (exposition-only member object*)

Member functions

   (constructor)
   (C++20)
   constructs a lazy_split_view
   (public member function)
   base
   (C++20)
   returns a copy of the underlying (adapted) view
   (public member function)
   begin
   (C++20)
   returns an iterator to the beginning
   (public member function)
   end
   (C++20)
   returns an iterator or a sentinel to the end
   (public member function)

Inherited from std::ranges::view_interface

   empty
   (C++20)
   returns whether the derived view is empty. Provided if it satisfies
   sized_range or forward_range.
   (public member function of std::ranges::view_interface<D>)
   cbegin
   (C++23)
   returns a constant iterator to the beginning of the range.
   (public member function of std::ranges::view_interface<D>)
   cend
   (C++23)
   returns a sentinel for the constant iterator of the range.
   (public member function of std::ranges::view_interface<D>)
   operator bool
   (C++20)
   returns whether the derived view is not empty. Provided if
   ranges::empty is applicable to it.
   (public member function of std::ranges::view_interface<D>)
   front
   (C++20)
   returns the first element in the derived view. Provided if it satisfies
   forward_range.
   (public member function of std::ranges::view_interface<D>)

Nested classes

   outer_iterator
   (C++20)
   the iterator type
   (exposition-only member class template*)
   inner_iterator
   (C++20)
   the iterator type of the inner range
   (exposition-only member class template*)

Deduction guides

Notes

   The name lazy_split_view is introduced by the post-C++20 defect report
   P2210R2. It has the same lazy mechanism as that of the old split_view
   before change.

Example

   Run this code
#include <algorithm>
#include <iostream>
#include <ranges>
#include <string_view>

auto print = [](auto const& view)
{
    // `view` is of std::views::lazy_split_view::__outer_iterator::value_type

    for (std::cout << "{ "; const auto element : view)
        std::cout << element << ' ';
    std::cout << "} ";
};

int main()
{
    constexpr static auto source = {0, 1, 0, 2, 3, 0, 4, 5, 6, 0, 7, 8, 9};
    constexpr int delimiter{0};
    constexpr std::ranges::lazy_split_view outer_view{source, delimiter};
    std::cout << "splits[" << std::ranges::distance(outer_view) << "]:  ";
    for (auto const& inner_view: outer_view)
        print(inner_view);

    constexpr std::string_view hello{"Hello C++ 20 !"};
    std::cout << "\n" "substrings: ";
    std::ranges::for_each(hello | std::views::lazy_split(' '), print);

    constexpr std::string_view text{"Hello-+-C++-+-20-+-!"};
    constexpr std::string_view delim{"-+-"};
    std::cout << "\n" "substrings: ";
    std::ranges::for_each(text | std::views::lazy_split(delim), print);
}

   Output:
splits[5]:  { } { 1 } { 2 3 } { 4 5 6 } { 7 8 9 }
substrings: { H e l l o } { C + + } { 2 0 } { ! }
substrings: { H e l l o } { C + + } { 2 0 } { ! }

Defect reports

   The following behavior-changing defect reports were applied
   retroactively to previously published C++ standards.
   DR Applied to Behavior as published Correct behavior
   P2210R2 C++20 the old split_view was too lazy to be easily used moves
   its functionality to lazy_split_view

See also

   ranges::split_viewviews::split
   (C++20)
   a view over the subranges obtained from splitting another view using a
   delimiter
   (class template) (range adaptor object)
   ranges::join_viewviews::join
   (C++20)
   a view consisting of the sequence obtained from flattening a view of
   ranges
   (class template) (range adaptor object)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/ranges/lazy_spli
   t_view&oldid=157810"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 3 September 2023, at 14:44.
     * This page has been accessed 24,206 times.
