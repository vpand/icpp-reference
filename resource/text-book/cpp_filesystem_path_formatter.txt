std::formatter<std::filesystem::path>

   From cppreference.com
   < cpp | filesystem | path

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Filesystem library
   Classes
   filesystem::path
   filesystem::filesystem_error
   filesystem::directory_entry
   filesystem::directory_iterator
   filesystem::recursive_directory_iterator

   filesystem::file_status
   filesystem::space_info
   filesystem::file_type
   filesystem::perms
   filesystem::perm_options
   filesystem::copy_options
   filesystem::directory_options
   filesystem::file_time_type
   Functions
   filesystem::absolute
   filesystem::canonicalfilesystem::weakly_canonical
   filesystem::relativefilesystem::proximate
   filesystem::copy
   filesystem::copy_file
   filesystem::copy_symlink
   filesystem::create_directory
   filesystem::create_directories
   filesystem::create_hard_link
   filesystem::create_symlink
   filesystem::create_directory_symlink
   filesystem::current_path
   filesystem::exists
   filesystem::equivalent
   filesystem::file_size
   filesystem::hard_link_count
   filesystem::last_write_time
   filesystem::permissions
   filesystem::read_symlink
   filesystem::remove
   filesystem::remove_all
   filesystem::rename
   filesystem::resize_file
   filesystem::space
   filesystem::status
   filesystem::symlink_status
   filesystem::temp_directory_path
   File types
   filesystem::is_block_file
   filesystem::is_character_file
   filesystem::is_directory
   filesystem::is_empty
   filesystem::status_known
   filesystem::is_fifo
   filesystem::is_other
   filesystem::is_regular_file
   filesystem::is_socket
   filesystem::is_symlink

   std::filesystem::path
   Constants
   path::native_formatpath::generic_formatpath::auto_format
   Member functions
   path::path
   path::~path
   path::operator=
   path::assign
   path::appendpath::operator/=
   path::concatpath::operator+=
   path::clear
   path::make_preferred
   path::remove_filename
   path::replace_filename
   path::replace_extension

   path::swap
   path::compare
   path::beginpath::end
   path::c_strpath::nativepath::operator string_type
   path::stringpath::u8stringpath::u16stringpath::u32stringpath::wstring
   path::generic_stringpath::generic_u8stringpath::generic_u16stringpath::
   generic_u32stringpath::generic_wstring
   path::lexically_normalpath::lexically_relativepath::lexically_proximate
   Path decomposition
   path::root_name
   path::root_directory
   path::root_path
   path::relative_path
   path::parent_path
   path::filename
   path::stem
   path::extension
   path::empty
   path::has_root_pathpath::has_root_namepath::has_root_directorypath::has
   _relative_pathpath::has_parent_pathpath::has_filenamepath::has_stempath
   ::has_extension
   path::is_absolutepath::is_relative
   Non-member functions
   operator==operator!=operator<operator<=operator>operator>=operator<=>
   (until C++20)(until C++20)(until C++20)(until C++20)(until
   C++20)(C++20)
   operator/
   operator<<operator>>
   swap(std::filesystem::path)
   hash_value
   u8path
   Helper Classes
   hash<std::filesystem::path>
   formatter<std::filesystem::path>
   (C++26)

   Defined in header <filesystem>
   template< class CharT >
   struct formatter<std::filesystem::path, CharT>;
                                 (since C++26)

   The template specialization of std::formatter for the
   std::filesystem::path class allows users to convert a pathname to its
   textual representation using formatting functions. This specialization
   is debug-enabled.

Format specification

   The syntax of format specifications path-format-spec is:
   fill-and-align¿(optional) width¿(optional) ?(optional) g(optional)

   fill-and-align and width have the same meaning as in standard format
   specification.

   The ? option is used to format the pathname as an escaped string.

   The g option is used to specify that the pathname is in generic-format
   representation.

Member functions

   set_debug_format
   enables to format the pathname as an escaped string
   (public member function)
   parse
   parses the format specifier as specified by path-format-spec
   (public member function)
   format
   writes the formatted output as specified by path-format-spec
   (public member function)

std::formatter<std::filesystem::path>::set_debug_format

   constexpr void set_debug_format();

   Allows the current object to format pathname as an escaped string.

std::formatter<std::filesystem::path>::parse

   constexpr auto parse( std::basic_format_parse_context<CharT>& ctx )
       -> std::basic_format_parse_context<CharT>::iterator;

   Parses the format specifiers as a path-format-spec and stores the
   parsed specifiers in the current object.

   Returns an iterator past the end of the path-format-spec.

std::formatter<std::filesystem::path>::format

   template< class FormatContext >

   auto format( const std::filesystem::path& p, FormatContext& ctx ) const
       -> FormatContext::iterator;

   Let s be p.generic<std::filesystem::path::value_type>() if the g option
   is used, otherwise p.native(). Writes s into ctx.out() as specified by
   path-format-spec.

   For character transcoding of the pathname:
     * The pathname is transcoded from the native encoding for wide
       character strings to UTF-8 with maximal subparts of ill-formed
       subsequences substituted with U+FFFD REPLACEMENT CHARACTER if
          + std::is_same_v<CharT, char> is true,
          + std::is_same_v<typename path::value_type, wchar_t> is true,
            and
          + ordinary literal encoding is UTF-8.
     * Otherwise, no transcoding is performed if std::is_same_v<typename
       path::value_type, CharT> is true.
     * Otherwise, transcoding is implementation-defined.

   Returns an iterator past the end of the output range.

Notes

   Feature-test macro Value Std Feature
   __cpp_lib_format_path 202403L (C++26) formatting support for
   std::filesystem::path

Example

   This section is incomplete
   Reason: no example

See also

   formatter
   (C++20)
   defines formatting rules for a given type
   (class template)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/filesystem/path/
   formatter&oldid=170986"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 17 April 2024, at 05:53.
     * This page has been accessed 715 times.
