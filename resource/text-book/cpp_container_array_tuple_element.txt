std::tuple_element<std::array>

   From cppreference.com
   < cpp | container | array

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Containers library
   Sequence
   array
   (C++11)
   vector
   vector<bool>
   deque
   forward_list
   (C++11)
   list
   Associative
   set
   multiset
   map
   multimap
   Unordered associative
   unordered_set
   (C++11)
   unordered_multiset
   (C++11)
   unordered_map
   (C++11)
   unordered_multimap
   (C++11)
   Adaptors
   stack
   queue
   priority_queue
   flat_set
   (C++23)
   flat_multiset
   (C++23)
   flat_map
   (C++23)
   flat_multimap
   (C++23)
   Views
   span
   (C++20)
   mdspan
   (C++23)
   Iterator invalidation
   Member function table
   Non-member function table

   std::array
   Member types
   Member functions
   Element access
   array::at
   array::operator[]
   array::front
   array::back
   array::data
   Iterators
   array::beginarray::cbegin
   array::endarray::cend
   array::rbeginarray::crbegin
   array::rendarray::crend
   Capacity
   array::empty
   array::size
   array::max_size
   Operations
   array::fill
   array::swap
   Non-member functions
   get(std::array)
   (C++11)
   swap(std::array)
   (C++11)
   to_array
   (C++20)
   operator==operator!=operator<operator>operator<=operator>=operator<=>
   (C++11)(C++11)(until C++20)(C++11)(until C++20)(C++11)(until
   C++20)(C++11)(until C++20)(C++11)(until C++20)(C++20)
   Helper classes
   tuple_size<std::array>
   (C++11)
   tuple_element<std::array>
   (C++11)
   Deduction guides (C++17)

   Defined in header <array>
   template< std::size_t I, class T, std::size_t N >
   struct tuple_element< I, std::array<T, N> >;
                                                    (since C++11)

   Provides compile-time indexed access to the type of the elements of the
   array using tuple-like interface.

Member types

   Member type Definition
   type        the type of elements of the array

Possible implementation

template<std::size_t I, class T>
struct tuple_element;

template<std::size_t I, class T, std::size_t N>
struct tuple_element<I, std::array<T,N>>
{
    using type = T;
};

Example

   Run this code
#include <array>
#include <tuple>
#include <type_traits>

int main()
{
    // define array and get the type of the element at position 0
    std::array<int, 10> data{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
    using T = std::tuple_element<0, decltype(data)>::type; // int
    static_assert(std::is_same_v<T, int>);

    const auto const_data = data;
    using CT = std::tuple_element<0, decltype(const_data)>::type; // const int

    // the result of tuple_element depends on the cv-qualification of the tuple-
like type
    static_assert(!std::is_same_v<T, CT>);
    static_assert(std::is_same_v<CT, const int>);
}

See also

   Structured binding (C++17) binds the specified names to sub-objects or
   tuple elements of the initializer
   std::tuple_element<std::tuple>
   (C++11)
   obtains the type of the specified element
   (class template specialization)
   std::tuple_element<std::pair>
   (C++11)
   obtains the type of the elements of pair
   (class template specialization)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/container/array/
   tuple_element&oldid=165130"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 6 December 2023, at 14:47.
     * This page has been accessed 46,167 times.
