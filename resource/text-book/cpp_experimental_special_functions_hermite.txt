std::hermite, std::hermitef, std::hermitel

   From cppreference.com
   < cpp | experimental | special functions

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Experimental
   Technical Specification
   Filesystem library (filesystem TS)
   Library fundamentals (library fundamentals TS)
   Library fundamentals 2 (library fundamentals TS v2)
   Library fundamentals 3 (library fundamentals TS v3)
   Extensions for parallelism (parallelism TS)
   Extensions for parallelism 2 (parallelism TS v2)
   Extensions for concurrency (concurrency TS)
   Extensions for concurrency 2 (concurrency TS v2)
   Concepts (concepts TS)
   Ranges (ranges TS)
   Reflection (reflection TS)
   Mathematical special functions (special functions TR)
   Experimental Non-TS
   Pattern Matching
   Linear Algebra
   std::execution
   Contracts
   2D Graphics

   Mathematical special functions
   assoc_laguerreassoc_laguerrefassoc_laguerrel
   assoc_legendreassoc_legendrefassoc_legendrel
   betabetafbetal
   comp_ellint_1comp_ellint_1fcomp_ellint_1l
   comp_ellint_2comp_ellint_2fcomp_ellint_2l
   comp_ellint_3comp_ellint_3fcomp_ellint_3l
   cyl_bessel_icyl_bessel_ifcyl_bessel_il
   cyl_bessel_jcyl_bessel_jfcyl_bessel_jl
   cyl_bessel_kcyl_bessel_kfcyl_bessel_kl
   cyl_neumanncyl_neumannfcyl_neumannl
   ellint_1ellint_1fellint_1l
   ellint_2ellint_2fellint_2l
   ellint_3ellint_3fellint_3l
   expintexpintfexpintl
   hermitehermitefhermitel
   laguerrelaguerreflaguerrel
   legendrelegendreflegendrel
   riemann_zetariemann_zetafriemann_zetal
   sph_besselsph_besselfsph_bessell
   sph_legendresph_legendrefsph_legendrel
   sph_neumannsph_neumannfsph_neumannl

   double      hermite( unsigned int n, double x );

   double      hermite( unsigned int n, float x );
   double      hermite( unsigned int n, long double x );
   float       hermitef( unsigned int n, float x );
   long double hermitel( unsigned int n, long double x );
   (1)
   double      hermite( unsigned int n, IntegralType x );
   (2)
   1) Computes the (physicist's) Hermite polynomials of the degree n and
   argument x.
   2) A set of overloads or a function template accepting an argument of
   any integral type. Equivalent to (1) after casting the argument to
   double.

   As all special functions, hermite is only guaranteed to be available in
   <cmath> if __STDCPP_MATH_SPEC_FUNCS__ is defined by the implementation
   to a value at least 201003L and if the user defines
   __STDCPP_WANT_MATH_SPEC_FUNCS__ before including any standard library
   headers.

Parameters

   n - the degree of the polynomial
   x - the argument, a value of a floating-point or integral type

Return value

   If no errors occur, value of the order-nHermite polynomial of x, that
   is (-1)n
   e^x2
   dn
   dxn
   e^-x2
   , is returned.

Error handling

   Errors may be reported as specified in math_errhandling.
     * If the argument is NaN, NaN is returned and domain error is not
       reported.
     * If n is greater or equal than 128, the behavior is
       implementation-defined.

Notes

   Implementations that do not support TR 29124 but support TR 19768,
   provide this function in the header tr1/cmath and namespace std::tr1.

   An implementation of this function is also available in boost.math.

   The Hermite polynomials are the polynomial solutions of the equation
   u,,
   - 2xu,
   = -2nu.

   The first few are:
     * hermite(0, x) = 1.
     * hermite(1, x) = 2x.
     * hermite(2, x) = 4x2
       - 2.
     * hermite(3, x) = 8x3
       - 12x.
     * hermite(4, x) = 16x4
       - 48x2
       + 12.

Example

   (works as shown with gcc 6.0)
   Run this code
#define __STDCPP_WANT_MATH_SPEC_FUNCS__ 1
#include <cmath>
#include <iostream>

double H3(double x)
{
    return 8 * std::pow(x, 3) - 12 * x;
}

double H4(double x)
{
    return 16 * std::pow(x, 4) - 48 * x * x + 12;
}

int main()
{
    // spot-checks
    std::cout << std::hermite(3, 10) << '=' << H3(10) << '\n'
              << std::hermite(4, 10) << '=' << H4(10) << '\n';
}

   Output:
7880=7880
155212=155212

See also

   laguerrelaguerreflaguerrel
   Laguerre polynomials
   (function)
   legendrelegendreflegendrel
   Legendre polynomials
   (function)

External links

   Weisstein, Eric W. ""Hermite Polynomial." From MathWorld--A Wolfram Web
   Resource.
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/experimental/spe
   cial_functions/hermite&oldid=158799"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 11 September 2023, at 11:41.
     * This page has been accessed 12,851 times.
