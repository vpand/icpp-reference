std::expected<T,E>::expected

   From cppreference.com
   < cpp | utility | expected

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Utilities library
   Language support
   Type support (basic types, RTTI)
   Library feature-test macros (C++20)
   Dynamic memory management
   Program utilities
   Coroutine support (C++20)
   Variadic functions
   is_constant_evaluated
   (C++20)
   is_within_lifetime
   (C++26)
   initializer_list
   (C++11)
   source_location
   (C++20)
   Debugging support
   is_debugger_present
   (C++26)
   breakpoint_if_debugging
   (C++26)
   breakpoint
   (C++26)
   Three-way comparison
   three_way_comparablethree_way_comparable_with
   (C++20)(C++20)
   strong_ordering
   (C++20)
   weak_ordering
   (C++20)
   partial_ordering
   (C++20)
   common_comparison_category
   (C++20)
   compare_three_way_result
   (C++20)
   compare_three_way
   (C++20)
   strong_order
   (C++20)
   weak_order
   (C++20)
   partial_order
   (C++20)
   compare_strong_order_fallback
   (C++20)
   compare_weak_order_fallback
   (C++20)
   compare_partial_order_fallback
   (C++20)
   is_eqis_ltis_lteq
   (C++20)(C++20)(C++20)
   is_neqis_gtis_gteq
   (C++20)(C++20)(C++20)
   General utilities
   Date and time
   Function objects
   Formatting library (C++20)
   bitset
   hash
   (C++11)
   Relational operators (deprecated in C++20)
   rel_ops::operator!=rel_ops::operator>

   rel_ops::operator<=rel_ops::operator>=
   Integer comparison functions
   cmp_equalcmp_lesscmp_less_than
   (C++20)(C++20)(C++20)
   cmp_not_equalcmp_greatercmp_greater_than
   (C++20)(C++20)(C++20)
   in_range
   (C++20)
   Swap and type operations
   swap
   ranges::swap
   (C++20)
   exchange
   (C++14)
   declval
   (C++11)
   to_underlying
   (C++23)
   forward
   (C++11)
   forward_like
   (C++23)
   move
   (C++11)
   move_if_noexcept
   (C++11)
   as_const
   (C++17)
   Common vocabulary types
   pair
   tuple
   (C++11)
   optional
   (C++17)
   any
   (C++17)
   variant
   (C++17)
   tuple_size
   (C++11)
   tuple_element
   (C++11)
   apply
   (C++17)
   make_from_tuple
   (C++17)
   expected
   (C++23)
   Elementary string conversions
   to_chars
   (C++17)
   from_chars
   (C++17)
   chars_format
   (C++17)
   to_chars_result
   (C++17)
   from_chars_result
   (C++17)

   std::expected
   Member functions
   expected::expected
   expected::~expected
   expected::operator=
   Observers
   expected::operator->expected::operator*
   expected::operator boolexpected::has_value
   expected::value
   expected::error
   expected::value_or
   Monadic operations
   expected::and_then
   expected::or_else
   expected::transform
   expected::transform_error
   Modifiers
   expected::emplace
   expected::swap
   Non-member functions
   operator==
   swap(std::expected)
   Helper classes
   unexpected
   bad_expected_access
   unexpect_tunexpect

   constexpr expected();
   (1) (since C++23)
   constexpr expected( const expected& other );
   (2) (since C++23)
   constexpr expected( expected&& other ) noexcept(/* see below */);
   (3) (since C++23)
   template< class U, class G >
   constexpr explicit(/* see below */) expected( const expected<U, G>&
   other );
   (4) (since C++23)
   template< class U, class G >
   constexpr explicit(/* see below */) expected( expected<U, G>&& other );
   (5) (since C++23)
   template< class U = T >
   constexpr explicit(!std::is_convertible_v<U, T>) expected( U&& v );
   (6) (since C++23)
   (T is not cv void)
   template< class G >

   constexpr explicit(!std::is_convertible_v<const G&, E>)
       expected( const std::unexpected<G>& e );
   (7) (since C++23)
   template< class G >

   constexpr explicit(!std::is_convertible_v<G, E>)
       expected( std::unexpected<G>&& e );
   (8) (since C++23)
   template< class... Args >
   constexpr explicit expected( std::in_place_t, Args&&... args );
   (9) (since C++23)
   (T is not cv void)
   template< class U, class... Args >

   constexpr explicit expected( std::in_place_t,
                                std::initializer_list<U> il, Args&&...
   args );
   (10) (since C++23)
   (T is not cv void)
   constexpr explicit expected( std::in_place_t ) noexcept;
   (11) (since C++23)
   (T is cv void)
   template< class... Args >
   constexpr explicit expected( std::unexpect_t, Args&&... args );
   (12) (since C++23)
   template< class U, class... Args >

   constexpr explicit expected( std::unexpect_t,
                                std::initializer_list<U> il, Args&&...
   args );
   (13) (since C++23)

   Constructs a new expected object.
   1) Default constructor. If T is not (possibly cv-qualified) void,
   constructs an object that contains an expected value, which is
   value-initialized.
   After construction, has_value() returns true.
   This overload participates in overload resolution only if T is
   (possibly cv-qualified) void or std::is_default_constructible_v<T> is
   true.
   2) Copy constructor. If other.has_value() is false, the new object
   contains an unexpected value, which is direct-initialized from
   other.error(). Otherwise, if T is not (possibly cv-qualified) void, the
   new object contains an expected value, which is direct-initialized from
   *other.
   After construction, has_value() is equal to other.has_value().
   This constructor is defined as deleted unless
     * either T is (possibly cv-qualified) void, or
       std::is_copy_constructible_v<T> is true, and
     * std::is_copy_constructible_v<E> is true.

   This constructor is trivial if
     * either T is (possibly cv-qualified) void, or
       std::is_trivially_copy_constructible_v<T> is true, and
     * std::is_trivially_copy_constructible_v<E> is true.

   3) Move constructor. If other.has_value() is false, the new object
   contains an unexpected value, which is direct-initialized from
   std::move(other.error()). Otherwise, if T is not (possibly
   cv-qualified) void, the new object contains an expected value, which is
   direct-initialized from std::move(*other).
   After construction, has_value() is equal to other.has_value().
   This constructor participates in overload resolution only if
     * either T is (possibly cv-qualified) void, or
       std::is_move_constructible_v<T> is true, and
     * std::is_move_constructible_v<E> is true.

   This constructor is trivial if
     * std::is_trivially_move_constructible_v<T> is true, and
     * std::is_trivially_move_constructible_v<E> is true.

   4,5) Let
     * UF be std::add_lvalue_reference_t<const U> for (4) and U for (5),
       and
     * GF be const G& for (4) and G for (5).

   If other.has_value() is false, the new object contains an unexpected
   value, which is direct-initialized from
   std::forward<GF>(other.error()). Otherwise, if T is not (possibly
   cv-qualified) void, the new object contains an expected value, which is
   direct-initialized from std::forward<UF>(*other).
   After construction, has_value() is equal to other.has_value().
   Each of these constructors does not participate in overload resolution
   unless the following conditions are met respectively:
     * Either
          + T is (possibly cv-qualified) void, and std::is_void_v<U> is
            true, or
          + std::is_constructible_v<T, UF> is true.
     * std::is_constructible_v<E, GF> is true.
     * If T is not (possibly cv-qualified) bool, T is not constructible or
       convertible from any expression of type (possibly const)
       std::expected<U, G>, i.e., the following 8 values are all false:
          + std::is_constructible_v<T, std::expected<U, G>&
          + std::is_constructible_v<T, std::expected<U, G>
          + std::is_constructible_v<T, const std::expected<U, G>&
          + std::is_constructible_v<T, const std::expected<U, G>
          + std::is_convertible_v<std::expected<U, G>&, T>
          + std::is_convertible_v<std::expected<U, G>, T>
          + std::is_convertible_v<const std::expected<U, G>&, T>
          + std::is_convertible_v<const std::expected<U, G>, T>
     * std::unexpected<E> is not constructible from any expression of type
       (possibly const) std::expected<U, G>, i.e., the following 4 values
       are all false:
          + std::is_constructible_v<std::unexpected<E>, std::expected<U,
            G>&
          + std::is_constructible_v<std::unexpected<E>, std::expected<U,
            G>
          + std::is_constructible_v<std::unexpected<E>, const
            std::expected<U, G>&
          + std::is_constructible_v<std::unexpected<E>, const
            std::expected<U, G>

   These constructors are explicit if std::is_convertible_v<UF, T> or
   std::is_convertible_v<GF, E> is false.
   6) Constructs an object that contains an expected value, initialized as
   if direct-initializing (but not direct-list-initializing) an object of
   type T with the expression std::forward<U>(v).
   After construction, has_value() returns true.
   This constructor does not participate in overload resolution unless the
   following conditions are met:
     * T is not (possibly cv-qualified) void.
     * std::is_same_v<std::remove_cvref_t<U>, std::in_place_t> is false.
     * std::is_same_v<expected, std::remove_cvref_t<U>> is false.
     * std::is_constructible_v<T, U> is true.
     * std::remove_cvref_t<U> is not a specialization of std::unexpected.
     * If T is (possibly cv-qualified) bool, std::remove_cvref_t<U> is not
       a specialization of std::expected.

   7,8) Let GF be const G& for (7) and G for (8). Constructs an object
   that contains an unexpected value, which is direct-initialized from
   std::forward<GF>(e.error()).
   After construction, has_value() returns false.
   These overloads participate in overload resolution only if
   std::is_constructible_v<E, GF> is true.
   9) Constructs an object that contains an expected value, which is
   direct-initialized from the arguments std::forward<Args>(args)....
   After construction, has_value() returns true.
   This overload participates in overload resolution only if
   std::is_constructible_v<T, Args...> is true.
   10) Constructs an object that contains an expected value, which is
   direct-initialized from the arguments il, std::forward<Args>(args)....
   After construction, has_value() returns true.
   This overload participates in overload resolution only if
   std::is_constructible_v<T, std::initializer_list<U>&, Args...> is true.
   11) Constructs an object such that after construction, has_value()
   returns true.
   12) Constructs an object that contains an unexpected value, which is
   direct-initialized from the arguments std::forward<Args>(args)....
   After construction, has_value() returns false.
   This overload participates in overload resolution only if
   std::is_constructible_v<E, Args...> is true.
   13) Constructs an object that contains an unexpected value, which is
   direct-initialized from the arguments il, std::forward<Args>(args)....
   After construction, has_value() returns false.
   This overload participates in overload resolution only if
   std::is_constructible_v<E, std::initializer_list<U>&, Args...> is true.

Parameters

   other   - another expected object whose contained value is copied
   e       - std::unexpected object whose contained value is copied
   v       - value with which to initialize the contained value
   args... - arguments with which to initialize the contained value
   il      - initializer list with which to initialize the contained value

Exceptions

   1) Throws any exception thrown by the constructor of T.
   If T is (possibly cv-qualified) void,
   noexcept specification:
   noexcept

   2) Throws any exception thrown by the constructor of T or E.
   3) If T is (possibly cv-qualified) void,
   noexcept specification:
   noexcept(std::is_nothrow_move_constructible_v<E>)
   Otherwise,
   noexcept specification:
   noexcept(std::is_nothrow_move_constructible_v<T>
       && std::is_nothrow_move_constructible_v<E>)
   4,5) Throws any exception thrown by the constructor of T or E.
   6) Throws any exception thrown by the constructor of T.
   7,8) Throws any exception thrown by the constructor of E.
   9,10) Throws any exception thrown by the constructor of T.
   12,13) Throws any exception thrown by the constructor of E.

Example

   This section is incomplete
   Reason: no example

See also

   unexpected
   (C++23)
   represented as an unexpected value
   (class template)
   in_placein_place_typein_place_indexin_place_tin_place_type_tin_place_in
   dex_t
   (C++17)
   in-place construction tag
   (tag)
   unexpectunexpect_t
   (C++23)
   in-place construction tag for unexpected value in expected
   (tag)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/utility/expected
   /expected&oldid=169885"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 20 February 2024, at 08:23.
     * This page has been accessed 24,436 times.
