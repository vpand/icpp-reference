std::move_iterator<Iter>::move_iterator

   From cppreference.com
   < cpp | iterator | move iterator


   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Iterator library
   Iterator concepts
   indirectly_readable
   (C++20)
   indirectly_writable
   (C++20)
   weakly_incrementable
   (C++20)
   incrementable
   (C++20)
   input_or_output_iterator
   (C++20)
   sentinel_for
   (C++20)
   sized_sentinel_for
   (C++20)
   input_iterator
   (C++20)
   output_iterator
   (C++20)
   forward_iterator
   (C++20)
   bidirectional_iterator
   (C++20)
   random_access_iterator
   (C++20)
   contiguous_iterator
   (C++20)
   Iterator primitives
   input_iterator_tagoutput_iterator_tagforward_iterator_tagbidirectional_
   iterator_tagrandom_access_iterator_tagcontiguous_iterator_tag
   (C++20)
   iter_value_titer_difference_titer_reference_titer_const_reference_titer
   _rvalue_reference_titer_common_reference_t
   (C++20)(C++20)(C++20)(C++23)(C++20)(C++20)
   iterator
   (deprecated in C++17)
   iterator_traits
   incrementable_traits
   (C++20)
   indirectly_readable_traits
   (C++20)
   Algorithm concepts and utilities
   Indirect callable concepts
   indirectly_unary_invocableindirectly_regular_unary_invocable
   (C++20)(C++20)
   indirect_unary_predicate
   (C++20)
   indirect_binary_predicate
   (C++20)
   indirect_equivalence_relation
   (C++20)
   indirect_strict_weak_order
   (C++20)
   Common algorithm requirements
   indirectly_movable
   (C++20)
   indirectly_movable_storable
   (C++20)
   indirectly_copyable
   (C++20)
   indirectly_copyable_storable
   (C++20)
   indirectly_swappable
   (C++20)
   indirectly_comparable
   (C++20)
   permutable
   (C++20)
   mergeable
   (C++20)
   sortable
   (C++20)
   Utilities
   indirect_result_t
   (C++20)
   projected
   (C++20)
   projected_value_t
   (C++26)
   Iterator adaptors
   reverse_iterator
   make_reverse_iterator
   (C++14)
   move_iterator
   (C++11)
   make_move_iterator
   (C++11)
   default_sentinel_tdefault_sentinel
   (C++20)(C++20)
   unreachable_sentinel_tunreachable_sentinel
   (C++20)(C++20)
   front_insert_iterator
   back_insert_iterator
   inserter
   insert_iterator
   front_inserter
   back_inserter
   move_sentinel
   (C++20)
   common_iterator
   (C++20)
   counted_iterator
   (C++20)
   basic_const_iterator
   (C++23)
   const_iterator
   (C++23)
   const_sentinel
   (C++23)
   make_const_iterator
   (C++23)
   make_const_sentinel
   (C++23)
   Stream iterators
   istream_iterator

   ostream_iterator
   istreambuf_iterator
   ostreambuf_iterator
   Iterator customization points
   ranges::iter_move
   (C++20)
   ranges::iter_swap
   (C++20)
   Iterator operations
   advance
   distance
   prev
   (C++11)
   next
   (C++11)
   ranges::advance
   (C++20)
   ranges::distance
   (C++20)
   ranges::prev
   (C++20)
   ranges::next
   (C++20)
   Range access
   begincbegin
   (C++11)(C++14)
   rbegincrbegin
   (C++14)(C++14)
   endcend
   (C++11)(C++14)
   rendcrend
   (C++14)(C++14)
   sizessize
   (C++17)(C++20)
   empty
   (C++17)
   data
   (C++17)

   std::move_iterator
   Member functions
   move_iterator::move_iterator
   move_iterator::operator=
   move_iterator::base
   move_iterator::operator*move_iterator::operator->
   move_iterator::operator[]
   move_iterator::operator++move_iterator::operator+move_iterator::operato
   r+=move_iterator::operator--move_iterator::operator-move_iterator::oper
   ator-=
   Non-member functions
   operator==operator!=operator<operator<=operator>operator>=operator<=>
   (until C++20)(C++20)
   operator==(move_sentinel)
   (C++20)
   operator+
   operator-
   operator-(move_sentinel)
   (C++20)
   iter_move
   (C++20)
   iter_swap
   (C++20)
   make_move_iterator
   (C++11)

                                                       (1)
   move_iterator();
                                                           (until C++17)
   constexpr move_iterator();
                                                           (since C++17)
                                                       (2)
   explicit move_iterator( iterator_type x );
                                                           (until C++17)
   constexpr explicit move_iterator( iterator_type x );
                                                           (since C++17)
                                                       (3)
   template< class U >
   move_iterator( const move_iterator<U>& other );
                                                           (until C++17)
   template< class U >
   constexpr move_iterator( const move_iterator<U>& other );
                                                           (since C++17)

   Constructs a new iterator adaptor.
   1) Default constructor. The underlying iterator is value-initialized.
   Operations on the resulting iterator have defined behavior if and only
   if the corresponding operations on a value-initialized Iter also have
   defined behavior.
   2) The underlying iterator is initialized with x(until
   C++20)std::move(x)(since C++20).
   3) The underlying iterator is initialized with that of other. The
   behavior is undefined if U is not convertible to Iter(until C++20)This
   overload participates in overload resolution only if U is not the same
   type as Iter and std::convertible_to<const U&, Iter> is modeled(since
   C++20).

Parameters

   x     - iterator to adapt
   other - iterator adaptor to copy

Example

   This section is incomplete
   Reason: no example

Defect reports

   The following behavior-changing defect reports were applied
   retroactively to previously published C++ standards.
   DR Applied to Behavior as published Correct behavior
   LWG 3435 C++20 the converting constructor from another move_iterator
   was not constrained constrained

See also

   operator=
   (C++11)
   assigns another iterator adaptor
   (public member function)
   make_move_iterator
   (C++11)
   creates a std::move_iterator of type inferred from the argument
   (function template)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/move_it
   erator/move_iterator&oldid=124787"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 5 December 2020, at 21:18.
     * This page has been accessed 15,913 times.
