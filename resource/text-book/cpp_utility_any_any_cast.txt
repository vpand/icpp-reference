std::any_cast

   From cppreference.com
   < cpp | utility | any

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Utilities library
   Language support
   Type support (basic types, RTTI)
   Library feature-test macros (C++20)
   Dynamic memory management
   Program utilities
   Coroutine support (C++20)
   Variadic functions
   is_constant_evaluated
   (C++20)
   is_within_lifetime
   (C++26)
   initializer_list
   (C++11)
   source_location
   (C++20)
   Debugging support
   is_debugger_present
   (C++26)
   breakpoint_if_debugging
   (C++26)
   breakpoint
   (C++26)
   Three-way comparison
   three_way_comparablethree_way_comparable_with
   (C++20)(C++20)
   strong_ordering
   (C++20)
   weak_ordering
   (C++20)
   partial_ordering
   (C++20)
   common_comparison_category
   (C++20)
   compare_three_way_result
   (C++20)
   compare_three_way
   (C++20)
   strong_order
   (C++20)
   weak_order
   (C++20)
   partial_order
   (C++20)
   compare_strong_order_fallback
   (C++20)
   compare_weak_order_fallback
   (C++20)
   compare_partial_order_fallback
   (C++20)
   is_eqis_ltis_lteq
   (C++20)(C++20)(C++20)
   is_neqis_gtis_gteq
   (C++20)(C++20)(C++20)
   General utilities
   Date and time
   Function objects
   Formatting library (C++20)
   bitset
   hash
   (C++11)
   Relational operators (deprecated in C++20)
   rel_ops::operator!=rel_ops::operator>

   rel_ops::operator<=rel_ops::operator>=
   Integer comparison functions
   cmp_equalcmp_lesscmp_less_than
   (C++20)(C++20)(C++20)
   cmp_not_equalcmp_greatercmp_greater_than
   (C++20)(C++20)(C++20)
   in_range
   (C++20)
   Swap and type operations
   swap
   ranges::swap
   (C++20)
   exchange
   (C++14)
   declval
   (C++11)
   to_underlying
   (C++23)
   forward
   (C++11)
   forward_like
   (C++23)
   move
   (C++11)
   move_if_noexcept
   (C++11)
   as_const
   (C++17)
   Common vocabulary types
   pair
   tuple
   (C++11)
   optional
   (C++17)
   any
   (C++17)
   variant
   (C++17)
   tuple_size
   (C++11)
   tuple_element
   (C++11)
   apply
   (C++17)
   make_from_tuple
   (C++17)
   expected
   (C++23)
   Elementary string conversions
   to_chars
   (C++17)
   from_chars
   (C++17)
   chars_format
   (C++17)
   to_chars_result
   (C++17)
   from_chars_result
   (C++17)

   std::any
   Member functions
   any::any
   any::~any
   any::operator=
   Modifiers
   any::emplace
   any::reset
   any::swap
   Observers
   any::has_value
   any::type
   Non-member functions
   swap(std::any)
   any_cast
   make_any
   Helper classes
   bad_any_cast

   Defined in header <any>
   template< class T >
   T any_cast( const any& operand );
   (1)                    (since C++17)
   template< class T >
   T any_cast( any& operand );
   (2)                    (since C++17)
   template< class T >
   T any_cast( any&& operand );
   (3)                    (since C++17)
   template< class T >
   const T* any_cast( const any* operand ) noexcept;
   (4)                    (since C++17)
   template< class T >
   T* any_cast( any* operand ) noexcept;
   (5)                    (since C++17)

   Performs type-safe access to the contained object.

   Let U be std::remove_cv_t<std::remove_reference_t<T>>.
   1) The program is ill-formed if std::is_constructible_v<T, const U&> is
   false.
   2) The program is ill-formed if std::is_constructible_v<T, U&> is
   false.
   3) The program is ill-formed if std::is_constructible_v<T, U> is false.
   4,5) The program is ill-formed if std::is_void_v<T> is true.

Parameters

   operand - target any object

Return value

   1,2) Returns static_cast<T>(*std::any_cast<U>(&operand)).
   3) Returns static_cast<T>(std::move(*std::any_cast<U>(&operand))).
   4,5) If operand is not a null pointer, and the typeid of the requested
   T matches that of the contents of operand, a pointer to the value
   contained by operand, otherwise a null pointer.

Exceptions

   1-3) Throws std::bad_any_cast if the typeid of the requested T does not
   match that of the contents of operand.

Example

   Run this code
#include <any>
#include <iostream>
#include <string>
#include <type_traits>
#include <utility>

int main()
{
    // Simple example
    auto a1 = std::any(12);
    std::cout << "1) a1 is int: " << std::any_cast<int>(a1) << '\n';

    try
    {
        auto s = std::any_cast<std::string>(a1); // throws
    }
    catch (const std::bad_any_cast& e)
    {
        std::cout << "2) " << e.what() << '\n';
    }

    // Pointer example
    if (int* i = std::any_cast<int>(&a1))
        std::cout << "3) a1 is int: " << *i << '\n';
    else if (std::string* s = std::any_cast<std::string>(&a1))
        std::cout << "3) a1 is std::string: " << *s << '\n';
    else
        std::cout << "3) a1 is another type or unset\n";

    // Advanced example
    a1 = std::string("hello");
    auto& ra = std::any_cast<std::string&>(a1); //< reference
    ra[1] = 'o';

    std::cout << "4) a1 is string: "
              << std::any_cast<std::string const&>(a1) << '\n'; //< const refere
nce

    auto s1 = std::any_cast<std::string&&>(std::move(a1)); //< rvalue reference
    // Note: "s1" is a move-constructed std::string:
    static_assert(std::is_same_v<decltype(s1), std::string>);

    // Note: the std::string in "a1" is left in valid but unspecified state
    std::cout << "5) a1.size(): "
              << std::any_cast<std::string>(&a1)->size() //< pointer
              << '\n'
              << "6) s1: " << s1 << '\n';
}

   Possible output:
1) a1 is int: 12
2) bad any_cast
3) a1 is int: 12
4) a1 is string: hollo
5) a1.size(): 0
6) s1: hollo

Defect reports

   The following behavior-changing defect reports were applied
   retroactively to previously published C++ standards.
   DR Applied to Behavior as published Correct behavior
   LWG 3305 C++17 the behavior of overloads (4,5) was unclear if T is void
   the program ill-formed in this case
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/utility/any/any_
   cast&oldid=169540"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 3 February 2024, at 19:44.
     * This page has been accessed 179,200 times.
