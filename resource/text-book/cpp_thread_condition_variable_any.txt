std::condition_variable_any

   From cppreference.com
   < cpp | thread

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Concurrency support library
   Threads
   thread
   (C++11)
   jthread
   (C++20)
   stop_token
   (C++20)
   stop_source
   (C++20)
   stop_callback
   (C++20)
   hardware_destructive_interference_sizehardware_constructive_interferenc
   e_size
   (C++17)(C++17)
   this_thread namespace
   get_id
   (C++11)
   yield
   (C++11)
   sleep_for
   (C++11)
   sleep_until
   (C++11)
   Mutual exclusion
   mutex
   (C++11)
   recursive_mutex
   (C++11)
   shared_mutex
   (C++17)
   timed_mutex
   (C++11)
   recursive_timed_mutex
   (C++11)
   shared_timed_mutex
   (C++14)
   Generic lock management
   lock_guard
   (C++11)
   scoped_lock
   (C++17)
   unique_lock
   (C++11)
   shared_lock
   (C++14)
   defer_lock_ttry_to_lock_tadopt_lock_t
   (C++11)(C++11)(C++11)
   lock
   (C++11)
   try_lock
   (C++11)
   defer_locktry_to_lockadopt_lock
   (C++11)(C++11)(C++11)
   once_flag
   (C++11)
   call_once
   (C++11)
   Condition variables
   condition_variable
   (C++11)
   condition_variable_any
   (C++11)
   notify_all_at_thread_exit
   (C++11)
   cv_status
   (C++11)
   Semaphores
   counting_semaphorebinary_semaphore
   (C++20)(C++20)
   Latches and Barriers
   latch
   (C++20)
   barrier
   (C++20)
   Futures
   promise
   (C++11)
   future
   (C++11)
   shared_future
   (C++11)
   packaged_task
   (C++11)
   async
   (C++11)
   launch
   (C++11)
   future_status
   (C++11)
   future_error
   (C++11)
   future_category
   (C++11)
   future_errc
   (C++11)
   Safe Reclamation
   rcu_obj_base
   (C++26)
   rcu_domain
   (C++26)
   rcu_default_domain
   (C++26)
   rcu_synchronize
   (C++26)
   rcu_barrier
   (C++26)
   rcu_retire
   (C++26)
   Hazard Pointers
   hazard_pointer_obj_base
   (C++26)
   hazard_pointer
   (C++26)
   make_hazard_pointer
   (C++26)
   Atomic types
   atomic
   (C++11)
   atomic_ref
   (C++20)
   atomic_flag
   (C++11)
   Initialization of atomic types
   atomic_init
   (C++11)(deprecated in C++20)
   ATOMIC_VAR_INIT
   (C++11)(deprecated in C++20)
   ATOMIC_FLAG_INIT
   (C++11)
   Memory ordering
   memory_order
   (C++11)
   kill_dependency
   (C++11)
   atomic_thread_fence
   (C++11)
   atomic_signal_fence
   (C++11)
   Free functions for atomic operations
   atomic_storeatomic_store_explicit
   (C++11)(C++11)
   atomic_loadatomic_load_explicit
   (C++11)(C++11)
   atomic_exchangeatomic_exchange_explicit
   (C++11)(C++11)
   atomic_compare_exchange_weakatomic_compare_exchange_weak_explicitatomic
   _compare_exchange_strongatomic_compare_exchange_strong_explicit
   (C++11)(C++11)(C++11)(C++11)
   atomic_fetch_addatomic_fetch_add_explicit
   (C++11)(C++11)
   atomic_fetch_subatomic_fetch_sub_explicit
   (C++11)(C++11)
   atomic_fetch_andatomic_fetch_and_explicit
   (C++11)(C++11)
   atomic_fetch_oratomic_fetch_or_explicit
   (C++11)(C++11)
   atomic_fetch_xoratomic_fetch_xor_explicit
   (C++11)(C++11)
   atomic_fetch_maxatomic_fetch_max_explicit
   (C++26)(C++26)
   atomic_fetch_minatomic_fetch_min_explicit
   (C++26)(C++26)
   atomic_is_lock_free
   (C++11)
   atomic_waitatomic_wait_explicit
   (C++20)(C++20)
   atomic_notify_one
   (C++20)
   atomic_notify_all
   (C++20)
   Free functions for atomic flags
   atomic_flag_test_and_setatomic_flag_test_and_set_explicit
   (C++11)(C++11)
   atomic_flag_clearatomic_flag_clear_explicit
   (C++11)(C++11)
   atomic_flag_testatomic_flag_test_explicit
   (C++20)(C++20)
   atomic_flag_waitatomic_flag_wait_explicit
   (C++20)(C++20)
   atomic_flag_notify_one
   (C++20)
   atomic_flag_notify_all
   (C++20)

   std::condition_variable_any
   Member functions
   condition_variable_any::condition_variable_any
   condition_variable_any::~condition_variable_any
   Notification
   condition_variable_any::notify_one
   condition_variable_any::notify_all
   Waiting
   condition_variable_any::wait
   condition_variable_any::wait_for
   condition_variable_any::wait_until

   Defined in header <condition_variable>
   class condition_variable_any;
                                         (since C++11)

   The condition_variable_any class is a generalization of
   std::condition_variable. Whereas std::condition_variable works only on
   std::unique_lock<std::mutex>, condition_variable_any can operate on any
   lock that meets the BasicLockable requirements.

   See std::condition_variable for the description of the semantics of
   condition variables.

   The class std::condition_variable_any is a StandardLayoutType. It is
   not CopyConstructible, MoveConstructible, CopyAssignable, or
   MoveAssignable.

   If the lock is std::unique_lock<std::mutex>, std::condition_variable
   may provide better performance.

Member functions

   (constructor)
   constructs the object
   (public member function)
   (destructor)
   destructs the object
   (public member function)
   operator=
   [deleted]
   not copy-assignable
   (public member function)

Notification

   notify_one
   notifies one waiting thread
   (public member function)
   notify_all
   notifies all waiting threads
   (public member function)

Waiting

   wait
   blocks the current thread until the condition variable is awakened
   (public member function)
   wait_for
   blocks the current thread until the condition variable is awakened or
   after the specified timeout duration
   (public member function)
   wait_until
   blocks the current thread until the condition variable is awakened or
   until specified time point has been reached
   (public member function)

Notes

   std::condition_variable_any can be used with std::shared_lock in order
   to wait on a std::shared_mutex in shared ownership mode.

   A possible use for std::condition_variable_any with custom Lockable
   types is to provide convenient interruptible waits: the custom lock
   operation would both lock the associated mutex as expected, and also
   perform the necessary setup to notify this condition variable when the
   interrupting signal is received.^[1]

See also

   condition_variable
   (C++11)
   provides a condition variable associated with a std::unique_lock
   (class)

External links

    1. ^| Anthony Williams (2012, 1st ed./ 2019, 2nd ed.), "C++
       Concurrency in Action", 9.2.4 "Interrupting a wait on
       std::condition_variable_any".

   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/thread/condition
   _variable_any&oldid=170074"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 5 March 2024, at 22:58.
     * This page has been accessed 156,418 times.
