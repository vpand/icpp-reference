std::flat_multimap<Key,T,Compare,KeyContainer,MappedContainer>::rbegin,
std::flat_multimap<Key,T,Compare,KeyContainer,MappedContainer>::crbegin

   From cppreference.com
   < cpp | container | flat multimap


   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Containers library
   Sequence
   array
   (C++11)
   vector
   vector<bool>
   deque
   forward_list
   (C++11)
   list
   Associative
   set
   multiset
   map
   multimap
   Unordered associative
   unordered_set
   (C++11)
   unordered_multiset
   (C++11)
   unordered_map
   (C++11)
   unordered_multimap
   (C++11)
   Adaptors
   stack
   queue
   priority_queue
   flat_set
   (C++23)
   flat_multiset
   (C++23)
   flat_map
   (C++23)
   flat_multimap
   (C++23)
   Views
   span
   (C++20)
   mdspan
   (C++23)
   Iterator invalidation
   Member function table
   Non-member function table

   std::flat_multimap
   Member types
   Member functions
   flat_multimap::flat_multimap

   flat_multimap::operator=
   Iterators
   flat_multimap::beginflat_multimap::cbegin
   flat_multimap::endflat_multimap::cend
   flat_multimap::rbeginflat_multimap::crbegin
   flat_multimap::rendflat_multimap::crend
   Capacity
   flat_multimap::size
   flat_multimap::max_size
   flat_multimap::empty
   Modifiers
   flat_multimap::clear
   flat_multimap::erase
   flat_multimap::swap
   flat_multimap::extract
   flat_multimap::replace
   flat_multimap::insert
   flat_multimap::insert_range
   flat_multimap::emplace
   flat_multimap::emplace_hint
   Lookup
   flat_multimap::count
   flat_multimap::find
   flat_multimap::contains
   flat_multimap::equal_range
   flat_multimap::lower_bound
   flat_multimap::upper_bound
   Observers
   flat_multimap::key_comp
   flat_multimap::keys
   flat_multimap::value_comp
   flat_multimap::values
   Non-member functions
   operator==operator<=>
   (C++23)(C++23)
   swap(std::flat_multimap)
   (C++23)
   erase_if(std::flat_multimap)
   (C++23)
   Helper classes
   uses_allocator<std::flat_multimap>
   (C++23)
   Tags
   sorted_equivalent
   (C++23)
   sorted_equivalent_t
   (C++23)
   Deduction guides

   reverse_iterator rbegin() noexcept;
   (1)                                             (since C++23)
   const_reverse_iterator rbegin() const noexcept;
   (2)                                             (since C++23)
   const_reverse_iterator crbegin() const noexcept;
   (3)                                             (since C++23)

   Returns a reverse iterator to the first element of the reversed
   flat_multimap. It corresponds to the last element of the non-reversed
   flat_multimap. If the flat_multimap is empty, the returned iterator is
   equal to rend().

   range-rbegin-rend.svg

Parameters

   (none)

Return value

   Reverse iterator to the first element.

Complexity

   Constant.

Notes

   The underlying iterator of the returned reverse iterator is the end
   iterator. Hence the returned iterator is invalidated if and when the
   end iterator is invalidated.

Example

   Run this code
#include <algorithm>
#include <iostream>
#include <string>
#include <flat_map>

int main()
{
    std::flat_multimap<std::string, int> map
    {
        {"FB", 1},
        {":S", 5},
        {".S", 3},
        {"?S", 7},
        {"?S", 8},
        {".S", 4},
        {":S", 6},
        {"FB", 2}
    };

    std::cout << "Print out in reverse order using const reverse iterators:\n";
    std::for_each(map.crbegin(), map.crend(),
        [](std::pair<const std::string, int> const& e)
        {
            std::cout << "{ \"" << e.first << "\", " << e.second << " };\n";
        });

    map.rbegin()->second = 42; // OK: non-const value is modifiable
//  map.crbegin()->second = 42; // Error: cannot modify the const value
}

   Possible output:
Print out in reverse order using const reverse iterators:
{ "?S", 8 };
{ "?S", 7 };
{ ":S", 6 };
{ ":S", 5 };
{ ".S", 4 };
{ ".S", 3 };
{ "FB", 2 };
{ "FB", 1 };

See also

   rendcrend
   returns a reverse iterator to the end
   (public member function)
   rbegincrbegin
   (C++14)
   returns a reverse iterator to the beginning of a container or array
   (function template)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/container/flat_m
   ultimap/rbegin&oldid=168835"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 21 January 2024, at 14:58.
     * This page has been accessed 675 times.
