std::unordered_map<Key,T,Hash,KeyEqual,Allocator>::at

   From cppreference.com
   < cpp | container | unordered map


   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Containers library
   Sequence
   array
   (C++11)
   vector
   vector<bool>
   deque
   forward_list
   (C++11)
   list
   Associative
   set
   multiset
   map
   multimap
   Unordered associative
   unordered_set
   (C++11)
   unordered_multiset
   (C++11)
   unordered_map
   (C++11)
   unordered_multimap
   (C++11)
   Adaptors
   stack
   queue
   priority_queue
   flat_set
   (C++23)
   flat_multiset
   (C++23)
   flat_map
   (C++23)
   flat_multimap
   (C++23)
   Views
   span
   (C++20)
   mdspan
   (C++23)
   Iterator invalidation
   Member function table
   Non-member function table

   std::unordered_map
   Member types
   Member functions
   unordered_map::unordered_map
   unordered_map::~unordered_map
   unordered_map::operator=
   unordered_map::get_allocator
   Iterators
   unordered_map::beginunordered_map::cbegin
   unordered_map::endunordered_map::cend
   Capacity
   unordered_map::size
   unordered_map::max_size
   unordered_map::empty
   Modifiers
   unordered_map::clear
   unordered_map::erase
   unordered_map::swap
   unordered_map::extract
   (C++17)
   unordered_map::merge
   (C++17)
   unordered_map::insert
   unordered_map::insert_range
   (C++23)
   unordered_map::insert_or_assign
   (C++17)
   unordered_map::emplace
   unordered_map::emplace_hint
   unordered_map::try_emplace
   (C++17)
   Lookup
   unordered_map::at
   unordered_map::operator[]
   unordered_map::count
   unordered_map::find
   unordered_map::contains
   (C++20)
   unordered_map::equal_range
   Bucket interface
   unordered_map::begin(size_type)unordered_map::cbegin(size_type)
   unordered_map::end(size_type)unordered_map::cend(size_type)
   unordered_map::bucket_count
   unordered_map::max_bucket_count
   unordered_map::bucket_size
   unordered_map::bucket
   Hash policy
   unordered_map::load_factor
   unordered_map::max_load_factor

   unordered_map::rehash
   unordered_map::reserve
   Observers
   unordered_map::hash_function
   unordered_map::key_eq
   Non-member functions
   operator==operator!=
   (C++11)(C++11)(until C++20)
   std::swap(std::unordered_map)
   (C++11)
   erase_if(std::unordered_map)
   (C++20)
   Deduction guides(C++17)

   T& at( const Key& key );
   (1)                                 (since C++11)
   const T& at( const Key& key ) const;
   (2)                                 (since C++11)
   template< class K >
   T& at( const K& x );
   (3)                                 (since C++26)
   template< class K >
   const T& at( const K& x ) const;
   (4)                                 (since C++26)

   Returns a reference to the mapped value of the element with specified
   key. If no such element exists, an exception of type std::out_of_range
   is thrown.
   1,2) The key is equivalent to key.
   3,4) The key compares equivalent to the value x. The reference to the
   mapped value is obtained as if by expression this->find(x)->second.
   The expression this->find(x) must be well-formed and have well-defined
   behavior, otherwise the behavior is undefined.
   These overloads participate in overload resolution only if
   Hash::is_transparent and KeyEqual::is_transparent are valid and each
   denotes a type. This assumes that such Hash is callable with both K and
   Key type, and that the KeyEqual is transparent, which, together, allows
   calling this function without constructing an instance of Key.

Parameters

   key - the key of the element to find
   x   - a value of any type that can be transparently compared with a key

Return value

   A reference to the mapped value of the requested element.

Exceptions

   1,2) std::out_of_range if the container does not have an element with
   the specified key.
   3,4) std::out_of_range if the container does not have the specified
   element, that is, if find(x) == end() is true.

Complexity

   Average case: constant, worst case: linear in size.

Notes

                Feature-test macro                Value    Std   Feature
   __cpp_lib_associative_heterogeneous_insertion 202311L (C++26)
   Heterogeneous overloads for the remaining member functions in ordered
   and unordered associative containers. (3,4)

Example

   This section is incomplete
   Reason: no example

See also

   operator[]
   access or insert specified element
   (public member function)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/container/unorde
   red_map/at&oldid=131156"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 5 July 2021, at 05:25.
     * This page has been accessed 345,715 times.
