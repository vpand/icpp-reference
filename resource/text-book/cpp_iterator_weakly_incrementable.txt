std::weakly_incrementable

   From cppreference.com
   < cpp | iterator

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Iterator library
   Iterator concepts
   indirectly_readable
   (C++20)
   indirectly_writable
   (C++20)
   weakly_incrementable
   (C++20)
   incrementable
   (C++20)
   input_or_output_iterator
   (C++20)
   sentinel_for
   (C++20)
   sized_sentinel_for
   (C++20)
   input_iterator
   (C++20)
   output_iterator
   (C++20)
   forward_iterator
   (C++20)
   bidirectional_iterator
   (C++20)
   random_access_iterator
   (C++20)
   contiguous_iterator
   (C++20)
   Iterator primitives
   input_iterator_tagoutput_iterator_tagforward_iterator_tagbidirectional_
   iterator_tagrandom_access_iterator_tagcontiguous_iterator_tag
   (C++20)
   iter_value_titer_difference_titer_reference_titer_const_reference_titer
   _rvalue_reference_titer_common_reference_t
   (C++20)(C++20)(C++20)(C++23)(C++20)(C++20)
   iterator
   (deprecated in C++17)
   iterator_traits
   incrementable_traits
   (C++20)
   indirectly_readable_traits
   (C++20)
   Algorithm concepts and utilities
   Indirect callable concepts
   indirectly_unary_invocableindirectly_regular_unary_invocable
   (C++20)(C++20)
   indirect_unary_predicate
   (C++20)
   indirect_binary_predicate
   (C++20)
   indirect_equivalence_relation
   (C++20)
   indirect_strict_weak_order
   (C++20)
   Common algorithm requirements
   indirectly_movable
   (C++20)
   indirectly_movable_storable
   (C++20)
   indirectly_copyable
   (C++20)
   indirectly_copyable_storable
   (C++20)
   indirectly_swappable
   (C++20)
   indirectly_comparable
   (C++20)
   permutable
   (C++20)
   mergeable
   (C++20)
   sortable
   (C++20)
   Utilities
   indirect_result_t
   (C++20)
   projected
   (C++20)
   projected_value_t
   (C++26)
   Iterator adaptors
   reverse_iterator
   make_reverse_iterator
   (C++14)
   move_iterator
   (C++11)
   make_move_iterator
   (C++11)
   default_sentinel_tdefault_sentinel
   (C++20)(C++20)
   unreachable_sentinel_tunreachable_sentinel
   (C++20)(C++20)
   front_insert_iterator
   back_insert_iterator
   inserter
   insert_iterator
   front_inserter
   back_inserter
   move_sentinel
   (C++20)
   common_iterator
   (C++20)
   counted_iterator
   (C++20)
   basic_const_iterator
   (C++23)
   const_iterator
   (C++23)
   const_sentinel
   (C++23)
   make_const_iterator
   (C++23)
   make_const_sentinel
   (C++23)
   Stream iterators
   istream_iterator

   ostream_iterator
   istreambuf_iterator
   ostreambuf_iterator
   Iterator customization points
   ranges::iter_move
   (C++20)
   ranges::iter_swap
   (C++20)
   Iterator operations
   advance
   distance
   prev
   (C++11)
   next
   (C++11)
   ranges::advance
   (C++20)
   ranges::distance
   (C++20)
   ranges::prev
   (C++20)
   ranges::next
   (C++20)
   Range access
   begincbegin
   (C++11)(C++14)
   rbegincrbegin
   (C++14)(C++14)
   endcend
   (C++11)(C++14)
   rendcrend
   (C++14)(C++14)
   sizessize
   (C++17)(C++20)
   empty
   (C++17)
   data
   (C++17)

   Defined in header <iterator>
   template< class I >

       concept weakly_incrementable =
           std::movable<I> &&
           requires(I i) {
               typename std::iter_difference_t<I>;
               requires
   /*is-signed-integer-like*/<std::iter_difference_t<I>>;
               { ++i } -> std::same_as<I&>; // not required to be
   equality-preserving
               i++;                         // not required to be
   equality-preserving
           };
                               (since C++20)

   where /*is-signed-integer-like*/<I> is true if and only if I is a
   signed-integer-like type (see below).

   This concept specifies requirements on types that can be incremented
   with the pre- and post-increment operators, but those increment
   operations are not necessarily equality-preserving, and the type itself
   is not required to be std::equality_comparable.

   For std::weakly_incrementable types, a == b does not imply that ++a ==
   ++b. Algorithms on weakly incrementable types must be single-pass
   algorithms. These algorithms can be used with istreams as the source of
   the input data through std::istream_iterator.

Semantic requirements

   I models std::weakly_incrementable only if, for an object i of type I:
     * The expressions ++i and i++ have the same domain,
     * If i is incrementable, then both ++i and i++ advance i, and
     * If i is incrementable, then std::addressof(++i) ==
       std::addressof(i).

Integer-like types

   An integer-like type is an (possibly cv-qualified) integer type (except
   for cv bool) or an implementation-provided (not user-provided) type
   that behaves like an integer type, including all operators, implicit
   conversions, and std::numeric_limits specializations. If an
   integer-like type represents only non-negative values, it is
   unsigned-integer-like, otherwise it is signed-integer-like.

Defect reports

   The following behavior-changing defect reports were applied
   retroactively to previously published C++ standards.
   DR Applied to Behavior as published Correct behavior
   LWG 3467 C++20 bool was considered as an integer-like type excluded
   P2325R3 C++20 default_initializable was required not required

See also

   incrementable
   (C++20)
   specifies that the increment operation on a weakly_incrementable type
   is equality-preserving and that the type is equality_comparable
   (concept)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/weakly_
   incrementable&oldid=160511"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 10 October 2023, at 23:19.
     * This page has been accessed 39,229 times.
