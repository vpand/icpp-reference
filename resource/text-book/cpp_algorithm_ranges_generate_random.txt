std::ranges::generate_random

   From cppreference.com
   < cpp | algorithm | ranges

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Algorithm library
   Constrained algorithms and algorithms on ranges (C++20)
   Constrained algorithms, e.g. ranges::copy, ranges::sort, ...
   Execution policies (C++17)
   is_execution_policy
   (C++17)
   execution::seqexecution::parexecution::par_unseqexecution::unseq
   (C++17)    (C++17)(C++17)(C++20)
   execution::sequenced_policyexecution::parallel_policyexecution::paralle
   l_unsequenced_policyexecution::parallel_unsequenced
   (C++17)(C++17)(C++17)(C++20)
   Non-modifying sequence operations
   Batch operations
   for_each
   for_each_n
   (C++17)
   Search operations
   all_ofany_ofnone_of
   (C++11)                (C++11)(C++11)
   countcount_if
   mismatch
   equal
   findfind_iffind_if_not
   (C++11)
   find_end
   find_first_of
   adjacent_find
   search
   search_n
   Modifying sequence operations
   Copy operations
   copycopy_if
   (C++11)
   copy_backward
   copy_n
   (C++11)
   move
   (C++11)
   move_backward
   (C++11)
   Swap operations
   swap
   iter_swap
   swap_ranges
   Transformation operations
   replacereplace_if
   transform
   replace_copyreplace_copy_if
   Generation operations
   fill
   fill_n
   generate
   generate_n
   Removing operations
   removeremove_if
   unique
   remove_copyremove_copy_if
   unique_copy
   Order-changing operations
   reverse
   reverse_copy
   rotate
   rotate_copy
   random_shuffleshuffle
   (until C++17)(C++11)
   shift_leftshift_right
   (C++20)(C++20)
   Sampling operations
   sample
   (C++17)
   Sorting and related operations
   Partitioning operations
   partition
   partition_copy
   (C++11)
   stable_partition
   is_partitioned
   (C++11)
   partition_point
   (C++11)
   Sorting operations
   sort
   stable_sort
   partial_sort
   partial_sort_copy
   is_sorted
   (C++11)
   is_sorted_until
   (C++11)
   nth_element
   Binary search operations
   (on partitioned ranges)
   lower_bound
   upper_bound
   equal_range
   binary_search
   Set operations (on sorted ranges)
   includes
   set_union
   set_intersection
   set_difference
   set_symmetric_difference
   Merge operations (on sorted ranges)
   merge
   inplace_merge
   Heap operations
   push_heap
   pop_heap
   make_heap
   sort_heap
   is_heap
   (C++11)
   is_heap_until
   (C++11)
   Minimum/maximum operations
   max
   min
   minmax
   (C++11)
   clamp
   (C++17)
   max_element
   min_element
   minmax_element
   (C++11)
   Lexicographical comparison operations
   lexicographical_compare
   lexicographical_compare_three_way
   (C++20)
   Permutation operations
   next_permutation
   prev_permutation
   is_permutation
   (C++11)
   C library
   qsort
   bsearch
   Numeric operations
   iota
   (C++11)
   inner_product
   adjacent_difference

   accumulate
   reduce
   (C++17)
   transform_reduce
   (C++17)
   partial_sum
   inclusive_scan
   (C++17)
   exclusive_scan
   (C++17)
   transform_inclusive_scan
   (C++17)
   transform_exclusive_scan
   (C++17)
   Operations on uninitialized memory
   uninitialized_copy
   uninitialized_move
   (C++17)
   uninitialized_fill
   uninitialized_copy_n
   (C++11)
   uninitialized_move_n
   (C++17)
   uninitialized_fill_n
   destroy
   (C++17)
   destroy_n
   (C++17)
   destroy_at
   (C++17)
   construct_at
   (C++20)
   uninitialized_default_construct
   (C++17)
   uninitialized_value_construct
   (C++17)
   uninitialized_default_construct_n
   (C++17)
   uninitialized_value_construct_n
   (C++17)

   Constrained algorithms
   All names in this menu belong to namespace std::ranges
   Non-modifying sequence operations
   all_ofany_ofnone_of
   for_each
   for_each_n

   countcount_if
   adjacent_find
   mismatch
   equal
   lexicographical_compare

   containscontains_subrange
   (C++23)(C++23)
   findfind_iffind_if_not
   find_lastfind_last_iffind_last_if_not
   (C++23)(C++23)(C++23)
   find_end
   find_first_of
   search
   search_n
   starts_with
   (C++23)
   ends_with
   (C++23)
   Modifying sequence operations
   copycopy_if
   copy_n
   copy_backward

   move
   move_backward
   shift_leftshift_right
   (C++23)(C++23)
   fill
   fill_n
   generate
   generate_n

   transform
   swap_ranges

   shuffle
   sample
   removeremove_if
   replacereplace_if
   reverse
   rotate
   remove_copyremove_copy_if

   unique
   replace_copyreplace_copy_if
   reverse_copy
   rotate_copy
   unique_copy
   Partitioning operations
   is_partitioned

   partition_point

   partition

   partition_copy

   stable_partition
   Sorting operations
   is_sorted
   is_sorted_until

   sort
   stable_sort

   partial_sort

   nth_element
   partial_sort_copy
   Binary search operations (on sorted ranges)
   lower_bound

   upper_bound

   binary_search

   equal_range
   Set operations (on sorted ranges)
   merge
   inplace_merge

   set_difference
   set_intersection

   set_union

   includes
   set_symmetric_difference
   Heap operations
   is_heap
   is_heap_until

   make_heap

   sort_heap
   push_heap
   pop_heap
   Minimum/maximum operations
   max
   max_element

   min
   min_element

   minmax
   minmax_element

   clamp
   Permutation operations
   is_permutation

   next_permutation

   prev_permutation
   Fold operations
   fold_left
   (C++23)
   fold_left_first
   (C++23)
   fold_right
   (C++23)
   fold_right_last
   (C++23)
   fold_left_with_iter
   (C++23)
   fold_left_first_with_iter
   (C++23)
   Numeric operations
   iota
   (C++23)
   Random number generation
   generate_random
   (C++26)
   Operations on uninitialized storage
   construct_at

   destroy
   destroy_n
   destroy_at
   uninitialized_copy

   uninitialized_move
   uninitialized_fill
   uninitialized_copy_n

   uninitialized_move_n
   uninitialized_fill_n
   uninitialized_default_construct
   uninitialized_default_construct_n
   uninitialized_value_construct
   uninitialized_value_construct_n
   Return types
   in_fun_result
   in_in_result
   in_found_result

   in_out_result
   in_in_out_result

   in_out_out_result

   min_max_result
   out_value_result
   (C++23)
   in_value_result
   (C++23)

   Defined in header <random>
   Call signature
   template< class R, class G >

       requires ranges::output_range<R, std::invoke_result_t<G&>> &&
                std::uniform_random_bit_generator<std::remove_cvref_t<G>>
   constexpr ranges::borrowed_iterator_t<R>
       generate_random( R&& r, G&& g );
   (1) (since C++26)
   template< class G, std::output_iterator<std::invoke_result_t<G&>> O,

             std::sentinel_for<O> S >
       requires std::uniform_random_bit_generator<std::remove_cvref_t<G>>
   constexpr O
       generate_random( O first, S last, G&& g );
   (2) (since C++26)
   template< class R, class G, class D >

       requires ranges::output_range<R, std::invoke_result_t<D&, G&>> &&
                std::invocable<D&, G&> &&
                std::uniform_random_bit_generator<std::remove_cvref_t<G>>
   constexpr ranges::borrowed_iterator_t<R>
       generate_random( R&& r, G&& g, D&& d );
   (3) (since C++26)
   template< class G, class D,
   std::output_iterator<std::invoke_result_t<D&, G&>> O,

             std::sentinel_for<O> S >
       requires std::invocable<D&, G&> &&
                std::uniform_random_bit_generator<std::remove_cvref_t<G>>
   constexpr O
       generate_random( O first, S last, G&& g, D&& d );
   (4) (since C++26)

   Attempts to generate random numbers with the generate_random member
   function of the random number generator or the distribution, which is
   expected to be more efficient. Falls back to element-wise generation if
   no generate_random member function is available.

   Let fallback operation be calling ranges::generate(std::forward<R>(r),
   std::ref(g)) or ranges::generate(std::forward<R>(r), [&d, &g] { return
   std::invoke(d, g); }) for (1) or (3) respectively.
   1) Calls g.generate_random(std::forward<R>(r)) if this expression is
   well-formed.
   Otherwise, let I be std::invoke_result_t<G&>. If R models sized_range,
   fills r with ranges::size(r) values of I by performing an unspecified
   number of invocations of the form g() or g.generate_random(s), if such
   an expression is well-formed for a value N and an object s of type
   std::span<I, N>.
   Otherwise, performs the fallback operation.
   3) Calls d.generate_random(std::forward<R>(r), g) if this expression is
   well-formed.
   Otherwise, let I be std::invoke_result_t<D&, G&>. If R models
   sized_range, fills r with ranges::size(r) values of type I by
   performing an unspecified number of invocations of the form
   std::invoke(d, g) or d.generate_random(s, g), if such an expression is
   well-formed for a value N and an object s of type std::span<I, N>.
   Otherwise, performs the fallback operation.
   2,4) Equivalent to (1,3) respectively, where r is obtained from
   ranges::subrange<O, S>(std::move(first), last).

   If the effects of (1) or (3) are not equivalent to those of the
   corresponding fallback operation, the behavior is undefined.

   The value of N can differ between invocations. Implementations may
   select smaller values for shorter ranges.

   The function-like entities described on this page are niebloids, that
   is:
     * Explicit template argument lists cannot be specified when calling
       any of them.
     * None of them are visible to argument-dependent lookup.
     * When any of them are found by normal unqualified lookup as the name
       to the left of the function-call operator, argument-dependent
       lookup is inhibited.

   In practice, they may be implemented as function objects, or with
   special compiler extensions.

Parameters

   first, last - iterator-sentinel pair that denotes the range to which
   random numbers are written
   r - range to which random numbers are written
   g - uniform random bit generator
   d - random number distribution object

Notes

   At the time of the standardization of std::ranges::generate_random,
   there is no random number generator or distribution in the standard
   library that provides a generate_random member function.

   std::ranges::generate_random can be more efficient when used with a
   user-defined random number generator that wraps an underlying
   vectorized API.
          Feature-test macro         Value    Std   Feature
   __cpp_lib_ranges_generate_random 202403L (C++26)
   std::ranges::generate_random

Example

   Run this code
#include <algorithm>
#include <iomanip>
#include <iostream>
#include <random>

int main()
{
    std::default_random_engine eng;
    std::default_random_engine::result_type rs[16]{};
    std::ranges::generate_random(rs, eng);

    std::cout << std::left;
    for (int i{}; auto n : rs)
        std::cout << std::setw(11) << n << (++i % 4 ? ' ' : '\n');
}

   Possible output:
16807       282475249   1622650073  984943658
1144108930  470211272   101027544   1457850878
1458777923  2007237709  823564440   1115438165
1784484492  74243042    114807987   1137522503

See also

   ranges::generate
   (C++20)
   saves the result of a function in a range
   (niebloid)
   uniform_random_bit_generator
   (C++20)
   specifies that a type qualifies as a uniform random bit generator
   (concept)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/algorithm/ranges
   /generate_random&oldid=171186"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 23 April 2024, at 08:58.
     * This page has been accessed 1,000 times.
