std::linear_congruential_engine

   From cppreference.com
   < cpp | numeric | random

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Numerics library
   Common mathematical functions
   Mathematical special functions (C++17)
   Mathematical constants (C++20)
   Basic linear algebra algorithms (C++26)
   Floating-point environment (C++11)
   Complex numbers
   Numeric arrays
   Pseudo-random number generation
   Factor operations
   gcd
   (C++17)
   lcm
   (C++17)
   Interpolations
   midpoint
   (C++20)
   lerp
   (C++20)
   Saturation arithmetic
   add_sat
   (C++26)
   sub_sat
   (C++26)
   saturate_cast
   (C++26)
   mul_sat
   (C++26)
   div_sat
   (C++26)
   Generic numeric operations
   iota
   (C++11)
   ranges::iota
   (C++23)
   accumulate
   inner_product
   adjacent_difference
   partial_sum
   reduce
   (C++17)
   transform_reduce
   (C++17)
   inclusive_scan
   (C++17)
   exclusive_scan
   (C++17)
   transform_inclusive_scan
   (C++17)
   transform_exclusive_scan
   (C++17)
   Bit operations
   has_single_bit
   (C++20)
   bit_cast
   (C++20)
   bit_ceil
   (C++20)
   bit_floor
   (C++20)
   bit_width
   (C++20)
   rotl
   (C++20)
   rotr
   (C++20)
   popcount
   (C++20)
   countl_zero
   (C++20)
   countl_one
   (C++20)
   countr_zero
   (C++20)
   countr_one
   (C++20)
   byteswap
   (C++23)
   endian
   (C++20)

   Pseudo-random number generation
   Uniform random bit generators
   uniform_random_bit_generator
   (C++20)
   Random number engines
   linear_congruential_engine
   (C++11)
   mersenne_twister_engine
   (C++11)
   subtract_with_carry_engine
   (C++11)
   Random number engine adaptors
   discard_block_engine
   (C++11)
   independent_bits_engine
   (C++11)
   shuffle_order_engine
   (C++11)
   Predefined random number generators
   Non-deterministic random numbers
   random_device
   (C++11)
   Random number distributions
   Uniform distributions
   uniform_int_distribution
   (C++11)
   uniform_real_distribution
   (C++11)
   generate_canonical
   (C++11)
   Bernoulli distributions
   bernoulli_distribution
   (C++11)
   binomial_distribution
   (C++11)
   negative_binomial_distribution
   (C++11)
   geometric_distribution
   (C++11)
   Poisson distributions
   poisson_distribution
   (C++11)
   exponential_distribution
   (C++11)
   gamma_distribution
   (C++11)
   weibull_distribution
   (C++11)
   extreme_value_distribution
   (C++11)
   Normal distributions
   normal_distribution
   (C++11)
   lognormal_distribution
   (C++11)
   chi_squared_distribution
   (C++11)
   cauchy_distribution
   (C++11)
   fisher_f_distribution
   (C++11)
   student_t_distribution
   (C++11)
   Sampling distributions
   discrete_distribution
   (C++11)
   piecewise_constant_distribution
   (C++11)
   piecewise_linear_distribution
   (C++11)
   Utilities
   generate_canonical
   (C++11)
   seed_seq
   (C++11)
   Random number algorithms
   ranges::generate_random
   (C++26)
   C random library
   rand
   srand
   RAND_MAX

   std::linear_congruential_engine
   Member functions
   linear_congruential_engine::linear_congruential_engine
   (C++11)
   linear_congruential_engine::seed
   (C++11)
   Generation
   linear_congruential_engine::operator()
   (C++11)
   linear_congruential_engine::discard
   (C++11)
   Characteristics
   linear_congruential_engine::min
   (C++11)
   linear_congruential_engine::max
   (C++11)
   Non-member functions
   operator==operator!=
   (C++11)(C++11)(until C++20)
   operator<<operator>>
   (C++11)(C++11)

   Defined in header <random>
   template<

       class UIntType,
       UIntType a,
       UIntType c,
       UIntType m
   > class linear_congruential_engine;
                             (since C++11)

   linear_congruential_engine is a random number engine based on Linear
   congruential generator (LCG).

Template parameters

   UIntType - The result type generated by the generator. The effect is
   undefined if this is not one of unsigned short, unsigned int, unsigned
   long, or unsigned long long.
   a - the multiplier term
   c - the increment term
   m - the modulus term

   When m is not zero, if a >= m or c >= m is true, the program is
   ill-formed.

Generator properties

   The size of the states of linear_congruential_engine is 1, each of them
   consists of a single integer.

   The actual modulus \(m_0\)m
   0 is defined as follows:
     * If m is not zero, \(m_0\)m
       0 is m.
     * If m is zero, \(m_0\)m
       0 is the value of std::numeric_limits<result_type>::max() plus 1
       (which means \(m_0\)m
       0 need not be representable as result_type).

   The transition algorithm of linear_congruential_engine is \(TA(x_i) =
   (a \cdot x_i + c)\mod m_0\)TA(x
   i) = (a·x
   i+c) mod m
   0.

   The generation algorithm of linear_congruential_engine is \(GA(x_i) =
   (a \cdot x_i + c)\mod m_0\)GA(x
   i) = (a·x
   i+c) mod m
   0.

   The pseudo-random number generated with the current state is also the
   successor state.

Predefined specializations

   The following specializations define the random number engine with two
   commonly used parameter sets:
   Defined in header <random>
   Type                 Definition
   minstd_rand0 (C++11)
   std::linear_congruential_engine<std::uint_fast32_t,
                                   16807, 0, 2147483647>

   Discovered in 1969 by Lewis, Goodman and Miller, adopted as "Minimal
   standard" in 1988 by Park and Miller
   minstd_rand (C++11)

   std::linear_congruential_engine<std::uint_fast32_t,
                                   48271, 0, 2147483647>
   Newer "Minimum standard", recommended by Park, Miller, and Stockmeyer
   in 1993

Nested types

   Type        Definition
   result_type UIntType

Data members

   constexpr UIntType multiplier
   [static]
   a
   (public static member constant)
   constexpr UIntType increment
   [static]
   c
   (public static member constant)
   constexpr UIntType modulus
   [static]
   m
   (public static member constant)
   constexpr UIntType default_seed
   [static]
   1u
   (public static member constant)

Member functions

Construction and Seeding

   (constructor)
   (C++11)
   constructs the engine
   (public member function)
   seed
   (C++11)
   sets the current state of the engine
   (public member function)

Generation

   operator()
   (C++11)
   advances the engine's state and returns the generated value
   (public member function)
   discard
   (C++11)
   advances the engine's state by a specified amount
   (public member function)

Characteristics

   min
   [static] (C++11)
   gets the smallest possible value in the output range
   (public static member function)
   max
   [static] (C++11)
   gets the largest possible value in the output range
   (public static member function)

Non-member functions

   operator==operator!=
   (C++11)(C++11)(removed in C++20)
   compares the internal states of two pseudo-random number engines
   (function)
   operator<<operator>>
   (C++11)
   performs stream input and output on pseudo-random number engine
   (function template)

Example

   This section is incomplete
   Reason: no example
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/numeric/random/l
   inear_congruential_engine&oldid=169656"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 8 February 2024, at 00:17.
     * This page has been accessed 127,707 times.
