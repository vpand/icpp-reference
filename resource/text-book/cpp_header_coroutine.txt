Standard library header <coroutine> (C++20)

   From cppreference.com
   < cpp | header

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Standard library headers
   Language support
   <cstddef>
   <cstdlib>
   <version> (C++20)
   <limits>
   <climits>
   <cfloat>
   <cstdint> (C++11)
   <stdfloat> (C++23)
   <new>
   <typeinfo>
   <source_location> (C++20)
   <exception>
   <initializer_list> (C++11)
   <compare> (C++20)
   <coroutine> (C++20)
   <csignal>
   <csetjmp>
   <cstdarg>
   Concepts
   <concepts> (C++20)
   Diagnostics
   <stdexcept>
   <stacktrace> (C++23)
   <cassert>
   <cerrno>
   <system_error> (C++11)
   Memory management
   <memory>
   <memory_resource> (C++17)
   <scoped_allocator> (C++11)
   Metaprogramming
   <type_traits> (C++11)
   <ratio> (C++11)
   General utilities
   <utility>
   <tuple> (C++11)
   <optional> (C++17)
   <variant> (C++17)
   <any> (C++17)
   <debugging> (C++26)
   <expected> (C++23)
   <bitset>
   <functional>
   <typeindex> (C++11)
   <execution> (C++17)
   <charconv> (C++17)
   <format> (C++20)
   <bit> (C++20)
   Strings
   <string_view> (C++17)
   <string>
   <cctype>
   <cwctype>
   <cstring>
   <cwchar>
   <cuchar> (C++11)
   Containers
   <array> (C++11)
   <deque>
   <forward_list> (C++11)
   <list>
   <vector>
   <map>
   <set>
   <unordered_map> (C++11)
   <unordered_set> (C++11)
   <queue>
   <stack>
   <flat_map> (C++23)
   <flat_set> (C++23)
   <span> (C++20)
   <mdspan> (C++23)
   Iterators
   <iterator>
   Ranges
   <ranges> (C++20)
   <generator> (C++23)
   Algorithms
   <algorithm>
   <numeric>
   Numerics
   <cfenv> (C++11)
   <complex>
   <random> (C++11)
   <valarray>
   <cmath>
   <linalg> (C++26)
   <numbers> (C++20)
   Time
   <chrono> (C++11)
   <ctime>
   Localization
   <locale>
   <clocale>
   <codecvt> (C++11/17/26*)
   <text_encoding> (C++26)
   Input/output
   <iosfwd>
   <iostream>
   <ios>
   <streambuf>
   <istream>
   <ostream>
   <iomanip>
   <print> (C++23)
   <sstream>
   <spanstream> (C++23)
   <fstream>
   <syncstream> (C++20)
   <filesystem> (C++17)
   <cstdio>
   <cinttypes> (C++11)
   <strstream> (C++98/26*)
   Regular expressions
   <regex> (C++11)
   Concurrency support
   <stop_token> (C++20)
   <thread> (C++11)
   <atomic> (C++11)
   <rcu> (C++26)
   <stdatomic.h> (C++23)
   <mutex> (C++11)
   <shared_mutex> (C++14)
   <condition_variable> (C++11)
   <semaphore> (C++20)
   <latch> (C++20)
   <barrier> (C++20)
   <future> (C++11)
   <hazard_pointer> (C++26)
   C compatibility
   <cstdbool> (C++11/17/20*)
   <ccomplex> (C++11/17/20*)
   <ctgmath> (C++11/17/20*)
   <cstdalign> (C++11/17/20*)
   <ciso646> (until C++20)

   This header is part of the coroutine support library.

Includes

   <compare>
   (C++20)
   Three-way comparison operator support

Classes

   coroutine_traits
   (C++20)
   trait type for discovering coroutine promise types
   (class template)
   coroutine_handle
   (C++20)
   used to refer to a suspended or executing coroutine
   (class template)
   std::hash<std::coroutine_handle>
   (C++20)
   hash support for std::coroutine_handle
   (class template specialization)

No-op Coroutines

   noop_coroutine_promise
   (C++20)
   used for coroutines with no observable effects
   (class)
   noop_coroutine_handle
   (C++20)
   std::coroutine_handle<std::noop_coroutine_promise>, intended to refer
   to a no-op coroutine
   (typedef)

Trivial Awaitables

   suspend_never
   (C++20)
   indicates that an await-expression should never suspend
   (class)
   suspend_always
   (C++20)
   indicates that an await-expression should always suspend
   (class)

Functions

   operator==operator<=>
   (C++20)
   compares two coroutine_handle objects
   (function)

No-op Coroutines

   noop_coroutine
   (C++20)
   creates a coroutine handle that has no observable effects when resumed
   or destroyed
   (function)

Synopsis

#include <compare>

namespace std {
  // coroutine traits
  template<class R, class... ArgTypes>
    struct coroutine_traits;

  // coroutine handle
  template<class Promise = void>
    struct coroutine_handle;

  // comparison operators
  constexpr bool operator==(coroutine_handle<> x, coroutine_handle<> y) noexcept
;
  constexpr strong_ordering operator<=>(coroutine_handle<> x,
                                        coroutine_handle<> y) noexcept;

  // hash support
  template<class T> struct hash;
  template<class P> struct hash<coroutine_handle<P>>;

  // no-op coroutines
  struct noop_coroutine_promise;

  template<> struct coroutine_handle<noop_coroutine_promise>;
  using noop_coroutine_handle = coroutine_handle<noop_coroutine_promise>;

  noop_coroutine_handle noop_coroutine() noexcept;

  // trivial awaitables
  struct suspend_never;
  struct suspend_always;
}

Class template std::coroutine_handle

namespace std {
  template<>
  struct coroutine_handle<void>
  {
    // construct/reset
    constexpr coroutine_handle() noexcept;
    constexpr coroutine_handle(nullptr_t) noexcept;
    coroutine_handle& operator=(nullptr_t) noexcept;

    // export/import
    constexpr void* address() const noexcept;
    static constexpr coroutine_handle from_address(void* addr);

    // observers
    constexpr explicit operator bool() const noexcept;
    bool done() const;

    // resumption
    void operator()() const;
    void resume() const;
    void destroy() const;

  private:
    void* ptr;  // exposition only
  };

  template<class Promise>
  struct coroutine_handle
  {
    // construct/reset
    constexpr coroutine_handle() noexcept;
    constexpr coroutine_handle(nullptr_t) noexcept;
    static coroutine_handle from_promise(Promise&);
    coroutine_handle& operator=(nullptr_t) noexcept;

    // export/import
    constexpr void* address() const noexcept;
    static constexpr coroutine_handle from_address(void* addr);

    // conversion
    constexpr operator coroutine_handle<>() const noexcept;

    // observers
    constexpr explicit operator bool() const noexcept;
    bool done() const;

    // resumption
    void operator()() const;
    void resume() const;
    void destroy() const;

    // promise access
    Promise& promise() const;

  private:
    void* ptr;  // exposition only
  };
}

Class std::noop_coroutine_promise

namespace std {
  struct noop_coroutine_promise {};
}

Class std::coroutine_handle<std::noop_coroutine_promise>

namespace std {
  template<>
  struct coroutine_handle<noop_coroutine_promise>
  {
    // conversion
    constexpr operator coroutine_handle<>() const noexcept;

    // observers
    constexpr explicit operator bool() const noexcept;
    constexpr bool done() const noexcept;

    // resumption
    constexpr void operator()() const noexcept;
    constexpr void resume() const noexcept;
    constexpr void destroy() const noexcept;

    // promise access
    noop_coroutine_promise& promise() const noexcept;

    // address
    constexpr void* address() const noexcept;
  private:
    coroutine_handle(/* unspecified */);
    void* ptr; // exposition only
  };
}

Class std::suspend_never

namespace std {
  struct suspend_never {
    constexpr bool await_ready() const noexcept { return true; }
    constexpr void await_suspend(coroutine_handle<>) const noexcept {}
    constexpr void await_resume() const noexcept {}
  };
}

Class std::suspend_always

namespace std {
  struct suspend_always {
    constexpr bool await_ready() const noexcept { return false; }
    constexpr void await_suspend(coroutine_handle<>) const noexcept {}
    constexpr void await_resume() const noexcept {}
  };
}

   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/header/coroutine
   &oldid=163984"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 27 November 2023, at 08:17.
     * This page has been accessed 52,982 times.
