std::unique_copy

   From cppreference.com
   < cpp | algorithm

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Algorithm library
   Constrained algorithms and algorithms on ranges (C++20)
   Constrained algorithms, e.g. ranges::copy, ranges::sort, ...
   Execution policies (C++17)
   is_execution_policy
   (C++17)
   execution::seqexecution::parexecution::par_unseqexecution::unseq
   (C++17)    (C++17)(C++17)(C++20)
   execution::sequenced_policyexecution::parallel_policyexecution::paralle
   l_unsequenced_policyexecution::parallel_unsequenced
   (C++17)(C++17)(C++17)(C++20)
   Non-modifying sequence operations
   Batch operations
   for_each
   for_each_n
   (C++17)
   Search operations
   all_ofany_ofnone_of
   (C++11)                (C++11)(C++11)
   countcount_if
   mismatch
   equal
   findfind_iffind_if_not
   (C++11)
   find_end
   find_first_of
   adjacent_find
   search
   search_n
   Modifying sequence operations
   Copy operations
   copycopy_if
   (C++11)
   copy_backward
   copy_n
   (C++11)
   move
   (C++11)
   move_backward
   (C++11)
   Swap operations
   swap
   iter_swap
   swap_ranges
   Transformation operations
   replacereplace_if
   transform
   replace_copyreplace_copy_if
   Generation operations
   fill
   fill_n
   generate
   generate_n
   Removing operations
   removeremove_if
   unique
   remove_copyremove_copy_if
   unique_copy
   Order-changing operations
   reverse
   reverse_copy
   rotate
   rotate_copy
   random_shuffleshuffle
   (until C++17)(C++11)
   shift_leftshift_right
   (C++20)(C++20)
   Sampling operations
   sample
   (C++17)
   Sorting and related operations
   Partitioning operations
   partition
   partition_copy
   (C++11)
   stable_partition
   is_partitioned
   (C++11)
   partition_point
   (C++11)
   Sorting operations
   sort
   stable_sort
   partial_sort
   partial_sort_copy
   is_sorted
   (C++11)
   is_sorted_until
   (C++11)
   nth_element
   Binary search operations
   (on partitioned ranges)
   lower_bound
   upper_bound
   equal_range
   binary_search
   Set operations (on sorted ranges)
   includes
   set_union
   set_intersection
   set_difference
   set_symmetric_difference
   Merge operations (on sorted ranges)
   merge
   inplace_merge
   Heap operations
   push_heap
   pop_heap
   make_heap
   sort_heap
   is_heap
   (C++11)
   is_heap_until
   (C++11)
   Minimum/maximum operations
   max
   min
   minmax
   (C++11)
   clamp
   (C++17)
   max_element
   min_element
   minmax_element
   (C++11)
   Lexicographical comparison operations
   lexicographical_compare
   lexicographical_compare_three_way
   (C++20)
   Permutation operations
   next_permutation
   prev_permutation
   is_permutation
   (C++11)
   C library
   qsort
   bsearch
   Numeric operations
   iota
   (C++11)
   inner_product
   adjacent_difference

   accumulate
   reduce
   (C++17)
   transform_reduce
   (C++17)
   partial_sum
   inclusive_scan
   (C++17)
   exclusive_scan
   (C++17)
   transform_inclusive_scan
   (C++17)
   transform_exclusive_scan
   (C++17)
   Operations on uninitialized memory
   uninitialized_copy
   uninitialized_move
   (C++17)
   uninitialized_fill
   uninitialized_copy_n
   (C++11)
   uninitialized_move_n
   (C++17)
   uninitialized_fill_n
   destroy
   (C++17)
   destroy_n
   (C++17)
   destroy_at
   (C++17)
   construct_at
   (C++20)
   uninitialized_default_construct
   (C++17)
   uninitialized_value_construct
   (C++17)
   uninitialized_default_construct_n
   (C++17)
   uninitialized_value_construct_n
   (C++17)

   Defined in header <algorithm>
   template< class InputIt, class OutputIt >
   OutputIt unique_copy( InputIt first, InputIt last, OutputIt d_first );
   (1) (constexpr since C++20)
   template< class ExecutionPolicy, class ForwardIt1, class ForwardIt2 >

   ForwardIt2 unique_copy( ExecutionPolicy&& policy, ForwardIt1 first,
                           ForwardIt1 last, ForwardIt2 d_first );
   (2) (since C++17)
   template< class InputIt, class OutputIt, class BinaryPred >

   OutputIt unique_copy( InputIt first, InputIt last,
                         OutputIt d_first, BinaryPred p );
   (3) (constexpr since C++20)
   template< class ExecutionPolicy, class ForwardIt1,

             class ForwardIt2, class BinaryPred >
   ForwardIt2 unique_copy( ExecutionPolicy&& policy,
                           ForwardIt1 first, ForwardIt1 last,
                           ForwardIt2 d_first, BinaryPred p );
   (4) (since C++17)

   Copies the elements from the range [first, last), to another range
   beginning at d_first in such a way that there are no consecutive equal
   elements. Only the first element of each group of equal elements is
   copied.
   1) Elements are compared using operator==.
   If operator== does not establish an equivalence relation, the behavior
   is undefined.
   3) Elements are compared using the given binary predicate p.
   If p does not establish an equivalence relation, the behavior is
   undefined.
   2,4) Same as (1,3), but executed according to policy.
   These overloads participate in overload resolution only if

   std::is_execution_policy_v<std::decay_t<ExecutionPolicy>> is true.
   (until C++20)

   std::is_execution_policy_v<std::remove_cvref_t<ExecutionPolicy>> is
   true.
   (since C++20)

   If *d_first = *first is invalid(until C++20)*first is not writable to
   d_first(since C++20), the program is ill-formed.

   If source and destination ranges overlap, the behavior is undefined.

   Given T as the value type of InputIt, if overload (1) or (3) does not
   satisfy all of the following conditions, the behavior is undefined:
     * InputIt meets the requirements of LegacyForwardIterator.

   (until C++20)
     * InputIt models forward_iterator.

   (since C++20)
     * T is both CopyConstructible and CopyAssignable.
     * All following conditions are satisfied:

          + OutputIt meets the requirements of LegacyForwardIterator.
          + The value type of OutputIt is also T.
          + T is CopyAssignable.

Parameters

   first, last - the range of elements to process
   d_first - the beginning of the destination range
   policy - the execution policy to use. See execution policy for details.
   p - binary predicate which returns true if the elements should be
   treated as equal.

   The signature of the predicate function should be equivalent to the
   following:

    bool pred(const Type1 &a, const Type2 &b);

   While the signature does not need to have const &, the function must
   not modify the objects passed to it and must be able to accept all
   values of type (possibly const) Type1 and Type2 regardless of value
   category (thus, Type1 & is not allowed, nor is Type1 unless for Type1 a
   move is equivalent to a copy(since C++11)).
   The types Type1 and Type2 must be such that an object of type InputIt
   can be dereferenced and then implicitly converted to both of them.
   Type requirements
   -
   InputIt must meet the requirements of LegacyInputIterator.
   -
   OutputIt must meet the requirements of LegacyOutputIterator.
   -
   ForwardIt1, ForwardIt2 must meet the requirements of
   LegacyForwardIterator.

Return value

   Output iterator to the element past the last written element.

Complexity

   Given \(\scriptsize N\)N as std::distance(first, last):
   1,2) Exactly \(\scriptsize max(0,N-1)\)max(0,N-1) comparisons using
   operator==.
   3,4) Exactly \(\scriptsize max(0,N-1)\)max(0,N-1) applications of the
   predicate p.

   For overloads (2,4), there may be a performance cost if the value type
   of ForwardIt1 is not both CopyConstructible and CopyAssignable.

Exceptions

   The overloads with a template parameter named ExecutionPolicy report
   errors as follows:
     * If execution of a function invoked as part of the algorithm throws
       an exception and ExecutionPolicy is one of the standard policies,
       std::terminate is called. For any other ExecutionPolicy, the
       behavior is implementation-defined.
     * If the algorithm fails to allocate memory, std::bad_alloc is
       thrown.

Possible implementation

   See also the implementations in libstdc++ and libc++.

Notes

   If InputIt satisfies LegacyForwardIterator, this function rereads the
   input in order to detect duplicates.

   Otherwise, if OutputIt satisfies LegacyForwardIterator, and the value
   type of InputIt is the same as that of OutputIt, this function compare
   *d_first to *first.

   Otherwise, this function compares *first to a local element copy.

Example

   Run this code
#include <algorithm>
#include <iostream>
#include <iterator>
#include <string>

int main()
{
    std::string s1 {"A string with mmmany letters!"};
    std::cout << "Before: " << s1 << '\n';

    std::string s2;
    std::unique_copy(s1.begin(), s1.end(), std::back_inserter(s2),
                     [](char c1, char c2) { return c1 == 'm' && 'm' == c2; });

    std::cout << "After:  " << s2 << '\n';
}

   Output:
Before: A string with mmmany letters!
After:  A string with many letters!

Defect reports

   The following behavior-changing defect reports were applied
   retroactively to previously published C++ standards.
   DR Applied to Behavior as published Correct behavior
   LWG 239 C++98 the predicate was applied std::distance(first, last)
   times applied one time fewer
   (for non-empty ranges)
   LWG 241 C++98 the value type of InputIt was not required to be
   CopyConstructible conditionally required
   LWG 538 C++98 the value type of InputIt was not required to be
   CopyAssignable conditionally required
   LWG 2439 C++98 the value type of InputIt was not required to be
   CopyConstructible if OutputIt is a LegacyForwardIterator conditionally
   required

See also

   adjacent_find
   finds the first two adjacent items that are equal (or satisfy a given
   predicate)
   (function template)
   unique
   removes consecutive duplicate elements in a range
   (function template)
   copycopy_if
   (C++11)
   copies a range of elements to a new location
   (function template)
   ranges::unique_copy
   (C++20)
   creates a copy of some range of elements that contains no consecutive
   duplicates
   (niebloid)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/algorithm/unique
   _copy&oldid=171251"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 24 April 2024, at 06:09.
     * This page has been accessed 95,269 times.
