std::experimental::atomic_weak_ptr<T>::load

   From cppreference.com
   < cpp | experimental | atomic weak ptr

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Experimental
   Technical Specification
   Filesystem library (filesystem TS)
   Library fundamentals (library fundamentals TS)
   Library fundamentals 2 (library fundamentals TS v2)
   Library fundamentals 3 (library fundamentals TS v3)
   Extensions for parallelism (parallelism TS)
   Extensions for parallelism 2 (parallelism TS v2)
   Extensions for concurrency (concurrency TS)
   Extensions for concurrency 2 (concurrency TS v2)
   Concepts (concepts TS)
   Ranges (ranges TS)
   Reflection (reflection TS)
   Mathematical special functions (special functions TR)
   Experimental Non-TS
   Pattern Matching
   Linear Algebra
   std::execution
   Contracts
   2D Graphics

   Extensions for concurrency
   std::future extensions
   experimental::future
   experimental::shared_future
   experimental::when_all
   experimental::when_any
   experimental::make_ready_future
   experimental::make_exceptional_future
   Latches and barriers
   experimental::latch
   experimental::barrier
   experimental::flex_barrier
   Atomic smart pointers
   experimental::atomic_shared_ptr
   experimental::atomic_weak_ptr

   std::experimental::atomic_weak_ptr
   atomic_weak_ptr::atomic_weak_ptr
   atomic_weak_ptr::operator=
   atomic_weak_ptr::is_lock_free
   atomic_weak_ptr::store
   atomic_weak_ptr::load
   atomic_weak_ptr::operator weak_ptr<T>
   atomic_weak_ptr::exchange
   atomic_weak_ptr::compare_exchange_weakatomic_weak_ptr::compare_exchange
   _strong

   weak_ptr<T> load( std::memory_order order = std::memory_order_seq_cst )
   const noexcept;

   Atomically loads and returns the current value of the atomic_weak_ptr.
   Memory is affected according to the value of order.

   order must be one of std::memory_order_relaxed,
   std::memory_order_consume, std::memory_order_acquire or
   std::memory_order_seq_cst. Otherwise the behavior is undefined.

Parameters

   order - memory order constraints to enforce

Remarks

   All associated use_count increments are guaranteed to be performed as
   part of the atomic operation.

Return value

   The current value of the atomic_weak_ptr.

See also

   operator weak_ptr<T>
   loads a value from an atomic object
   (public member function)
   std::atomic_is_lock_free(std::shared_ptr)std::atomic_load(std::shared_p
   tr)std::atomic_load_explicit(std::shared_ptr)std::atomic_store(std::sha
   red_ptr)std::atomic_store_explicit(std::shared_ptr)std::atomic_exchange
   (std::shared_ptr)std::atomic_exchange_explicit(std::shared_ptr)std::ato
   mic_compare_exchange_weak(std::shared_ptr)std::atomic_compare_exchange_
   strong(std::shared_ptr)std::atomic_compare_exchange_weak_explicit(std::
   shared_ptr)std::atomic_compare_exchange_strong_explicit(std::shared_ptr
   )
   (deprecated in C++20)(removed in C++26)
   specializes atomic operations for std::shared_ptr
   (function template)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/experimental/ato
   mic_weak_ptr/load&oldid=93166"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 11 May 2017, at 13:33.
     * This page has been accessed 7,905 times.
