deduction guides for std::vector

   From cppreference.com
   < cpp | container | vector


   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Containers library
   Sequence
   array
   (C++11)
   vector
   vector<bool>
   deque
   forward_list
   (C++11)
   list
   Associative
   set
   multiset
   map
   multimap
   Unordered associative
   unordered_set
   (C++11)
   unordered_multiset
   (C++11)
   unordered_map
   (C++11)
   unordered_multimap
   (C++11)
   Adaptors
   stack
   queue
   priority_queue
   flat_set
   (C++23)
   flat_multiset
   (C++23)
   flat_map
   (C++23)
   flat_multimap
   (C++23)
   Views
   span
   (C++20)
   mdspan
   (C++23)
   Iterator invalidation
   Member function table
   Non-member function table

   std::vector
   Member types
   Member functions
   vector::vector
   vector::~vector
   vector::operator=
   vector::assign
   vector::assign_range
   (C++23)
   vector::get_allocator
   Element access
   vector::at
   vector::operator[]
   vector::front
   vector::back
   vector::data
   Iterators
   vector::beginvector::cbegin
   (C++11)
   vector::endvector::cend
   (C++11)
   vector::rbeginvector::crbegin
   (C++11)
   vector::rendvector::crend
   (C++11)
   Capacity
   vector::empty
   vector::size
   vector::max_size
   vector::reserve
   vector::capacity
   vector::shrink_to_fit
   (DR*)
   Modifiers
   vector::clear
   vector::insert
   vector::emplace
   (C++11)
   vector::insert_range
   (C++23)
   vector::erase
   vector::push_back
   vector::emplace_back
   (C++11)
   vector::append_range
   (C++23)
   vector::pop_back
   vector::resize
   vector::swap
   Non-member functions
   operator==operator!=operator<operator>operator<=operator>=operator<=>
   (until C++20)(until C++20)(until C++20)(until C++20)(until
   C++20)(C++20)
   swap(std::vector)
   erase(std::vector)erase_if(std::vector)
   (C++20)(C++20)
   Deduction guides(C++17)

   Defined in header <vector>
   template< class InputIt,

             class Alloc = std::allocator<
                 typename std::iterator_traits<InputIt>::value_type> >
   vector( InputIt, InputIt, Alloc = Alloc() )
       -> vector<typename std::iterator_traits<InputIt>::value_type,
   Alloc>;
   (1)                             (since C++17)
   template< ranges::input_range R,

             class Alloc = std::allocator<ranges::range_value_t<R>> >
   vector( std::from_range_t, R&&, Alloc = Alloc() )
       -> vector<ranges::range_value_t<R>, Alloc>;
   (2)                             (since C++23)
   1) This deduction guide is provided for vector to allow deduction from
   an iterator range. This overload participates in overload resolution
   only if InputIt satisfies LegacyInputIterator and Alloc satisfies
   Allocator.
   2) This deduction guide is provided for vector to allow deduction from
   a std::from_range_t tag and an input_range.

   Note: the extent to which the library determines that a type does not
   satisfy LegacyInputIterator is unspecified, except that as a minimum
   integral types do not qualify as input iterators. Likewise, the extent
   to which it determines that a type does not satisfy Allocator is
   unspecified, except that as a minimum the member type Alloc::value_type
   must exist and the expression
   std::declval<Alloc&>().allocate(std::size_t{}) must be well-formed when
   treated as an unevaluated operand.

Notes

   Feature-test macro Value Std Feature
   __cpp_lib_containers_ranges 202202L (C++23) Ranges-aware construction
   and insertion; overload (2)

Example

   Run this code
#include <vector>

int main()
{
    std::vector<int> v = {1, 2, 3, 4};

    // uses explicit deduction guide to deduce std::vector<int>
    std::vector x(v.begin(), v.end());

    // deduces std::vector<std::vector<int>::iterator>
    // first phase of overload resolution for list-initialization selects the ca
ndidate
    // synthesized from the initializer-list constructor; second phase is not pe
rformed
    // and deduction guide has no effect
    std::vector y{v.begin(), v.end()};
}

   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/container/vector
   /deduction_guides&oldid=138283"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 18 February 2022, at 22:24.
     * This page has been accessed 53,038 times.
