std::normal_distribution

   From cppreference.com
   < cpp | numeric | random

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Numerics library
   Common mathematical functions
   Mathematical special functions (C++17)
   Mathematical constants (C++20)
   Basic linear algebra algorithms (C++26)
   Floating-point environment (C++11)
   Complex numbers
   Numeric arrays
   Pseudo-random number generation
   Factor operations
   gcd
   (C++17)
   lcm
   (C++17)
   Interpolations
   midpoint
   (C++20)
   lerp
   (C++20)
   Saturation arithmetic
   add_sat
   (C++26)
   sub_sat
   (C++26)
   saturate_cast
   (C++26)
   mul_sat
   (C++26)
   div_sat
   (C++26)
   Generic numeric operations
   iota
   (C++11)
   ranges::iota
   (C++23)
   accumulate
   inner_product
   adjacent_difference
   partial_sum
   reduce
   (C++17)
   transform_reduce
   (C++17)
   inclusive_scan
   (C++17)
   exclusive_scan
   (C++17)
   transform_inclusive_scan
   (C++17)
   transform_exclusive_scan
   (C++17)
   Bit operations
   has_single_bit
   (C++20)
   bit_cast
   (C++20)
   bit_ceil
   (C++20)
   bit_floor
   (C++20)
   bit_width
   (C++20)
   rotl
   (C++20)
   rotr
   (C++20)
   popcount
   (C++20)
   countl_zero
   (C++20)
   countl_one
   (C++20)
   countr_zero
   (C++20)
   countr_one
   (C++20)
   byteswap
   (C++23)
   endian
   (C++20)

   Pseudo-random number generation
   Uniform random bit generators
   uniform_random_bit_generator
   (C++20)
   Random number engines
   linear_congruential_engine
   (C++11)
   mersenne_twister_engine
   (C++11)
   subtract_with_carry_engine
   (C++11)
   Random number engine adaptors
   discard_block_engine
   (C++11)
   independent_bits_engine
   (C++11)
   shuffle_order_engine
   (C++11)
   Predefined random number generators
   Non-deterministic random numbers
   random_device
   (C++11)
   Random number distributions
   Uniform distributions
   uniform_int_distribution
   (C++11)
   uniform_real_distribution
   (C++11)
   generate_canonical
   (C++11)
   Bernoulli distributions
   bernoulli_distribution
   (C++11)
   binomial_distribution
   (C++11)
   negative_binomial_distribution
   (C++11)
   geometric_distribution
   (C++11)
   Poisson distributions
   poisson_distribution
   (C++11)
   exponential_distribution
   (C++11)
   gamma_distribution
   (C++11)
   weibull_distribution
   (C++11)
   extreme_value_distribution
   (C++11)
   Normal distributions
   normal_distribution
   (C++11)
   lognormal_distribution
   (C++11)
   chi_squared_distribution
   (C++11)
   cauchy_distribution
   (C++11)
   fisher_f_distribution
   (C++11)
   student_t_distribution
   (C++11)
   Sampling distributions
   discrete_distribution
   (C++11)
   piecewise_constant_distribution
   (C++11)
   piecewise_linear_distribution
   (C++11)
   Utilities
   generate_canonical
   (C++11)
   seed_seq
   (C++11)
   Random number algorithms
   ranges::generate_random
   (C++26)
   C random library
   rand
   srand
   RAND_MAX

   std::normal_distribution
   Member functions
   normal_distribution::normal_distribution
   (C++11)
   normal_distribution::reset
   (C++11)
   Generation
   normal_distribution::operator()
   (C++11)
   Characteristics
   normal_distribution::meannormal_distribution::stddev
   (C++11)(C++11)
   normal_distribution::param
   (C++11)
   normal_distribution::min
   (C++11)
   normal_distribution::max
   (C++11)
   Non-member functions
   operator==operator!=
   (C++11)(C++11)(until C++20)
   operator<<operator>>
   (C++11)(C++11)

   Defined in header <random>
   template< class RealType = double >
   class normal_distribution;
                                      (since C++11)

   Generates random numbers according to the Normal (or Gaussian) random
   number distribution. It is defined as:

          \(\small{f(x;\mu,\sigma)}=\frac{1}{\sigma\sqrt{2\pi}
          }\exp{(-\frac{1}{2}{(\frac{x-\mu}{\sigma})}^2)}\)f(x; µ,s) =

          1
          s SQRT 2p

          exp

          -1
          2

          x-µ
          s

           2
          

   Here \(\small\mu\)µ is the Mean and \(\small\sigma\)s is the Standard
   deviation (stddev).

   std::normal_distribution satisfies all requirements of
   RandomNumberDistribution.

Template parameters

   RealType - The result type generated by the generator. The effect is
   undefined if this is not one of float, double, or long double.

Member types

   Member type Definition
   result_type (C++11) RealType
   param_type (C++11) the type of the parameter set, see
   RandomNumberDistribution.

Member functions

   (constructor)
   (C++11)
   constructs new distribution
   (public member function)
   reset
   (C++11)
   resets the internal state of the distribution
   (public member function)

Generation

   operator()
   (C++11)
   generates the next random number in the distribution
   (public member function)

Characteristics

   meanstddev
   (C++11)
   returns the distribution parameters
   (public member function)
   param
   (C++11)
   gets or sets the distribution parameter object
   (public member function)
   min
   (C++11)
   returns the minimum potentially generated value
   (public member function)
   max
   (C++11)
   returns the maximum potentially generated value
   (public member function)

Non-member functions

   operator==operator!=
   (C++11)(C++11)(removed in C++20)
   compares two distribution objects
   (function)
   operator<<operator>>
   (C++11)
   performs stream input and output on pseudo-random number distribution
   (function template)

Example

   Run this code
#include <cmath>
#include <iomanip>
#include <iostream>
#include <map>
#include <random>
#include <string>

int main()
{
    std::random_device rd{};
    std::mt19937 gen{rd()};

    // values near the mean are the most likely
    // standard deviation affects the dispersion of generated values from the me
an
    std::normal_distribution d{5.0, 2.0};

    // draw a sample from the normal distribution and round it to an integer
    auto random_int = [&d, &gen]{ return std::round(d(gen)); };

    std::map<int, int> hist{};
    for (int n = 0; n != 10000; ++n)
        ++hist[random_int()];

    for (auto [x, y] : hist)
        std::cout << std::setw(2) << x << ' ' << std::string(y / 200, '*') << '\
n';
}

   Possible output:
-2
-1
 0
 1 *
 2 ***
 3 ******
 4 ********
 5 **********
 6 ********
 7 *****
 8 ***
 9 *
10
11
12

External links

   1.  Weisstein, Eric W. "Normal Distribution." From MathWorld -- A
   Wolfram Web Resource.
   2.  Normal distribution -- From Wikipedia.
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/numeric/random/n
   ormal_distribution&oldid=160840"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 17 October 2023, at 11:41.
     * This page has been accessed 391,730 times.
