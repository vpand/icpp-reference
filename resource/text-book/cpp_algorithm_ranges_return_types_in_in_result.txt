std::ranges::in_in_result

   From cppreference.com
   < cpp | algorithm | ranges

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Constrained algorithms
   All names in this menu belong to namespace std::ranges
   Non-modifying sequence operations
   all_ofany_ofnone_of
   for_each
   for_each_n

   countcount_if
   adjacent_find
   mismatch
   equal
   lexicographical_compare

   containscontains_subrange
   (C++23)(C++23)
   findfind_iffind_if_not
   find_lastfind_last_iffind_last_if_not
   (C++23)(C++23)(C++23)
   find_end
   find_first_of
   search
   search_n
   starts_with
   (C++23)
   ends_with
   (C++23)
   Modifying sequence operations
   copycopy_if
   copy_n
   copy_backward

   move
   move_backward
   shift_leftshift_right
   (C++23)(C++23)
   fill
   fill_n
   generate
   generate_n

   transform
   swap_ranges

   shuffle
   sample
   removeremove_if
   replacereplace_if
   reverse
   rotate
   remove_copyremove_copy_if

   unique
   replace_copyreplace_copy_if
   reverse_copy
   rotate_copy
   unique_copy
   Partitioning operations
   is_partitioned

   partition_point

   partition

   partition_copy

   stable_partition
   Sorting operations
   is_sorted
   is_sorted_until

   sort
   stable_sort

   partial_sort

   nth_element
   partial_sort_copy
   Binary search operations (on sorted ranges)
   lower_bound

   upper_bound

   binary_search

   equal_range
   Set operations (on sorted ranges)
   merge
   inplace_merge

   set_difference
   set_intersection

   set_union

   includes
   set_symmetric_difference
   Heap operations
   is_heap
   is_heap_until

   make_heap

   sort_heap
   push_heap
   pop_heap
   Minimum/maximum operations
   max
   max_element

   min
   min_element

   minmax
   minmax_element

   clamp
   Permutation operations
   is_permutation

   next_permutation

   prev_permutation
   Fold operations
   fold_left
   (C++23)
   fold_left_first
   (C++23)
   fold_right
   (C++23)
   fold_right_last
   (C++23)
   fold_left_with_iter
   (C++23)
   fold_left_first_with_iter
   (C++23)
   Numeric operations
   iota
   (C++23)
   Random number generation
   generate_random
   (C++26)
   Operations on uninitialized storage
   construct_at

   destroy
   destroy_n
   destroy_at
   uninitialized_copy

   uninitialized_move
   uninitialized_fill
   uninitialized_copy_n

   uninitialized_move_n
   uninitialized_fill_n
   uninitialized_default_construct
   uninitialized_default_construct_n
   uninitialized_value_construct
   uninitialized_value_construct_n
   Return types
   in_fun_result
   in_in_result
   in_found_result

   in_out_result
   in_in_out_result

   in_out_out_result

   min_max_result
   out_value_result
   (C++23)
   in_value_result
   (C++23)

   Return types of constrained algorithms
   Return types
   ranges::in_found_result
   ranges::in_fun_result
   ranges::in_in_out_result
   ranges::in_in_result
   ranges::in_out_out_result
   ranges::in_out_result
   ranges::in_value_result
   (C++23)
   ranges::min_max_result
   ranges::out_value_result
   (C++23)

   Defined in header <algorithm>
   template< class I1, class I2 >
   struct in_in_result;
                                 (since C++20)

   ranges::in_in_result is a class template that provides a way to store
   two iterators as a single unit.

   This class template has no base classes or declared members other than
   those shown below. Thus it is suitable for use with structured
   bindings.

   All special member functions of this class template are implicitly
   declared, which makes specializations be aggregate classes, and
   propagate triviality, potentially-throwing-ness, and constexpr-ness of
   corresponding operations on data members.

Template parameters

   I1, I2 - the types of the iterators that the ranges::in_in_result
   stores.

Data members

   Member name                                             Definition
   in1
   a value (that is supposed to be an iterator) of type I1.
   (public member object)
   in2
   a value (that is supposed to be an iterator) of type I2.
   (public member object)

   All these members are declared with [[no_unique_address]] attribute.

Member functions

std::ranges::in_in_result::operator in_in_result<II1, II2>

   template<class II1, class II2>

   requires std::convertible_to<const I1&, II1> &&
   std::convertible_to<const I2&, II2>
   constexpr operator in_in_result<II1, II2>() const &;
   (1)
   template<class II1, class II2>

   requires std::convertible_to<I1, II1> && std::convertible_to<I2, II2>
   constexpr operator in_in_result<II1, II2>() &&;
   (2)

   Converts *this to the result by constructing every data member of the
   result from the corresponding member of *this.
   1) Equivalent to return {in1, in2};.
   2) Equivalent to return {std::move(in1), std::move(in2)};.

Standard library

   The following standard library functions use ranges::in_in_result as
   the return type:

Algorithm functions

   ranges::mismatch
   (C++20)
   finds the first position where two ranges differ
   (niebloid)
   ranges::swap_ranges
   (C++20)
   swaps two ranges of elements
   (niebloid)

Synopsis

namespace std::ranges
{
    template<class I1, class I2>
    struct in_in_result
    {
        [[no_unique_address]] I1 in1;
        [[no_unique_address]] I2 in2;

        template<class II1, class II2>
        requires std::convertible_to<const I1&, II1> && std::convertible_to<cons
t I2&, II2>
        constexpr operator in_in_result<II1, II2>() const &
        {
            return {in1, in2};
        }

        template<class II1, class II2>
        requires std::convertible_to<I1, II1> && std::convertible_to<I2, II2>
        constexpr operator in_in_result<II1, II2>() &&
        {
            return {std::move(in1), std::move(in2)};
        }
    };
}

Notes

   Each standard library algorithm that uses this family of return types
   declares a new alias type, e.g. using merge_result =
   in_in_out_result<I1, I2, O>;.

   The names for such aliases are formed by adding the suffix "_result" to
   the algorithm's name. So, the return type of std::ranges::merge can be
   named as std::ranges::merge_result.

   Unlike std::pair and std::tuple, this class template has data members
   of meaningful names.

Example

   Run this code
#include <algorithm>
#include <iostream>
#include <ranges>

int main()
{
    constexpr static auto in1 = {1, 2, 3, 4};
    constexpr static auto in2 = {1, 2, 4, 5};

    constexpr auto result {std::ranges::mismatch(in1, in2)};

    static_assert(2 == std::ranges::distance(in1.begin(), result.in1));
    static_assert(2 == std::ranges::distance(in2.begin(), result.in2));
}

See also

   pair
   implements binary tuple, i.e. a pair of values
   (class template)
   tuple
   (C++11)
   implements fixed size container, which holds elements of possibly
   different types
   (class template)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/algorithm/ranges
   /return_types/in_in_result&oldid=170868"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 13 April 2024, at 02:59.
     * This page has been accessed 9,364 times.
