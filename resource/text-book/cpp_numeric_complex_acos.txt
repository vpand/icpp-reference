std::acos(std::complex)

   From cppreference.com
   < cpp | numeric | complex

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Numerics library
   Common mathematical functions
   Mathematical special functions (C++17)
   Mathematical constants (C++20)
   Basic linear algebra algorithms (C++26)
   Floating-point environment (C++11)
   Complex numbers
   Numeric arrays
   Pseudo-random number generation
   Factor operations
   gcd
   (C++17)
   lcm
   (C++17)
   Interpolations
   midpoint
   (C++20)
   lerp
   (C++20)
   Saturation arithmetic
   add_sat
   (C++26)
   sub_sat
   (C++26)
   saturate_cast
   (C++26)
   mul_sat
   (C++26)
   div_sat
   (C++26)
   Generic numeric operations
   iota
   (C++11)
   ranges::iota
   (C++23)
   accumulate
   inner_product
   adjacent_difference
   partial_sum
   reduce
   (C++17)
   transform_reduce
   (C++17)
   inclusive_scan
   (C++17)
   exclusive_scan
   (C++17)
   transform_inclusive_scan
   (C++17)
   transform_exclusive_scan
   (C++17)
   Bit operations
   has_single_bit
   (C++20)
   bit_cast
   (C++20)
   bit_ceil
   (C++20)
   bit_floor
   (C++20)
   bit_width
   (C++20)
   rotl
   (C++20)
   rotr
   (C++20)
   popcount
   (C++20)
   countl_zero
   (C++20)
   countl_one
   (C++20)
   countr_zero
   (C++20)
   countr_one
   (C++20)
   byteswap
   (C++23)
   endian
   (C++20)

   std::complex
   Member functions
   complex::complex
   complex::operator=
   complex::real
   complex::imag
   complex::operator+=complex::operator-=complex::operator*=complex::opera
   tor/=
   Non-member functions
   operator+operator-
   operator+operator-operator*operator/
   operator==operator!=
   (until C++20)
   operator<<operator>>
   get(std::complex)
   (C++26)
   real
   imag
   abs
   arg
   norm
   conj
   proj
   (C++11)
   polar
   operator""ioperator""ifoperator""il
   (C++14)(C++14)(C++14)
   Exponential functions
   log

   log10

   exp
   Power functions
   pow

   sqrt
   Trigonometric functions
   sin

   cos
   tan
   asin
   (C++11)
   acos
   (C++11)
   atan
   (C++11)
   Hyperbolic functions
   sinh

   cosh
   tanh
   asinh
   (C++11)
   acosh
   (C++11)
   atanh
   (C++11)
   Helper types
   tuple_size<std::complex>
   (C++26)
   tuple_element<std::complex>
   (C++26)

   Defined in header <complex>
   template< class T >
   complex<T> acos( const complex<T>& z );
                              (since C++11)

   Computes complex arc cosine of a complex value z. Branch cuts exist
   outside the interval [-1, +1] along the real axis.

Parameters

   z - complex value

Return value

   If no errors occur, complex arc cosine of z is returned, in the range
   of a strip unbounded along the imaginary axis and in the interval [0,
   +p] along the real axis.

Error handling and special values

   Errors are reported consistent with math_errhandling.

   If the implementation supports IEEE floating-point arithmetic,
     * std::acos(std::conj(z)) == std::conj(std::acos(z))
     * If z is (±0,+0), the result is (p/2,-0)
     * If z is (±0,NaN), the result is (p/2,NaN)
     * If z is (x,+infty) (for any finite x), the result is (p/2,-infty)
     * If z is (x,NaN) (for any nonzero finite x), the result is (NaN,NaN)
       and FE_INVALID may be raised.
     * If z is (-infty,y) (for any positive finite y), the result is
       (p,-infty)
     * If z is (+infty,y) (for any positive finite y), the result is
       (+0,-infty)
     * If z is (-infty,+infty), the result is (3p/4,-infty)
     * If z is (+infty,+infty), the result is (p/4,-infty)
     * If z is (±infty,NaN), the result is (NaN,±infty) (the sign of the
       imaginary part is unspecified)
     * If z is (NaN,y) (for any finite y), the result is (NaN,NaN) and
       FE_INVALID may be raised
     * If z is (NaN,+infty), the result is (NaN,-infty)
     * If z is (NaN,NaN), the result is (NaN,NaN)

Notes

   Inverse cosine (or arc cosine) is a multivalued function and requires a
   branch cut on the complex plane. The branch cut is conventionally
   placed at the line segments (-infty,-1) and (1,infty) of the real axis.
   The mathematical definition of the principal value of arc cosine is
   acos z =
   1
   2
   p + iln(iz + SQRT 1-z2
   ).

   For any z, acos(z) = p - acos(-z).

Example

   Run this code
#include <cmath>
#include <complex>
#include <iostream>

int main()
{
    std::cout << std::fixed;
    std::complex<double> z1(-2.0, 0.0);
    std::cout << "acos" << z1 << " = " << std::acos(z1) << '\n';

    std::complex<double> z2(-2.0, -0.0);
    std::cout << "acos" << z2 << " (the other side of the cut) = "
              << std::acos(z2) << '\n';

    // for any z, acos(z) = pi - acos(-z)
    const double pi = std::acos(-1);
    std::complex<double> z3 = pi - std::acos(z2);
    std::cout << "cos(pi - acos" << z2 << ") = " << std::cos(z3) << '\n';
}

   Output:
acos(-2.000000,0.000000) = (3.141593,-1.316958)
acos(-2.000000,-0.000000) (the other side of the cut) = (3.141593,1.316958)
cos(pi - acos(-2.000000,-0.000000)) = (2.000000,0.000000)

See also

   asin(std::complex)
   (C++11)
   computes arc sine of a complex number (\({\small\arcsin{z}}\)arcsin(z))
   (function template)
   atan(std::complex)
   (C++11)
   computes arc tangent of a complex number
   (\({\small\arctan{z}}\)arctan(z))
   (function template)
   cos(std::complex)
   computes cosine of a complex number (\({\small\cos{z}}\)cos(z))
   (function template)
   acosacosfacosl
   (C++11)(C++11)
   computes arc cosine (\({\small\arccos{x}}\)arccos(x))
   (function)
   acos(std::valarray)
   applies the function std::acos to each element of valarray
   (function template)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/numeric/complex/
   acos&oldid=150794"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 20 April 2023, at 13:36.
     * This page has been accessed 25,829 times.
