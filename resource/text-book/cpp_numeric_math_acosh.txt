std::acosh, std::acoshf, std::acoshl

   From cppreference.com
   < cpp | numeric | math

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Numerics library
   Common mathematical functions
   Mathematical special functions (C++17)
   Mathematical constants (C++20)
   Basic linear algebra algorithms (C++26)
   Floating-point environment (C++11)
   Complex numbers
   Numeric arrays
   Pseudo-random number generation
   Factor operations
   gcd
   (C++17)
   lcm
   (C++17)
   Interpolations
   midpoint
   (C++20)
   lerp
   (C++20)
   Saturation arithmetic
   add_sat
   (C++26)
   sub_sat
   (C++26)
   saturate_cast
   (C++26)
   mul_sat
   (C++26)
   div_sat
   (C++26)
   Generic numeric operations
   iota
   (C++11)
   ranges::iota
   (C++23)
   accumulate
   inner_product
   adjacent_difference
   partial_sum
   reduce
   (C++17)
   transform_reduce
   (C++17)
   inclusive_scan
   (C++17)
   exclusive_scan
   (C++17)
   transform_inclusive_scan
   (C++17)
   transform_exclusive_scan
   (C++17)
   Bit operations
   has_single_bit
   (C++20)
   bit_cast
   (C++20)
   bit_ceil
   (C++20)
   bit_floor
   (C++20)
   bit_width
   (C++20)
   rotl
   (C++20)
   rotr
   (C++20)
   popcount
   (C++20)
   countl_zero
   (C++20)
   countl_one
   (C++20)
   countr_zero
   (C++20)
   countr_one
   (C++20)
   byteswap
   (C++23)
   endian
   (C++20)

   Common mathematical functions
   Functions
   Basic operations
   abs(int)labsllabsimaxabs
   (C++11)
   abs(float)fabs
   divldivlldivimaxdiv
   (C++11)
   fmod
   remainder
   (C++11)
   remquo
   (C++11)
   fma
   (C++11)
   fmax
   (C++11)
   fmin
   (C++11)
   fdim
   (C++11)
   nannanfnanl
   (C++11)(C++11)(C++11)
   Exponential functions
   exp
   exp2
   (C++11)
   expm1
   (C++11)
   log
   log10
   log1p
   (C++11)
   log2
   (C++11)
   Power functions
   sqrt
   cbrt
   (C++11)
   hypot
   (C++11)
   pow
   Trigonometric and hyperbolic functions
   sin
   cos
   tan
   asin
   acos
   atan
   atan2
   sinh
   cosh
   tanh
   asinh
   (C++11)
   acosh
   (C++11)
   atanh
   (C++11)
   Error and gamma functions
   erf
   (C++11)
   erfc
   (C++11)
   lgamma
   (C++11)
   tgamma
   (C++11)
   Nearest integer floating point operations
   ceil
   floor
   roundlroundllround
   (C++11)(C++11)(C++11)
   trunc
   (C++11)
   nearbyint
   (C++11)
   rintlrintllrint
   (C++11)(C++11)(C++11)
   Floating point manipulation functions
   ldexp
   scalbnscalbln
   (C++11)(C++11)
   ilogb
   (C++11)
   logb
   (C++11)
   frexp
   modf
   nextafternexttoward
   (C++11)(C++11)
   copysign
   (C++11)
   Classification/Comparison
   fpclassify
   (C++11)
   isfinite
   (C++11)
   isinf
   (C++11)
   isnan
   (C++11)
   isnormal
   (C++11)
   signbit
   (C++11)
   isgreater
   (C++11)
   isgreaterequal
   (C++11)
   isless
   (C++11)
   islessequal
   (C++11)
   islessgreater
   (C++11)
   isunordered
   (C++11)
   Macro constants
   HUGE_VALFHUGE_VALHUGE_VALL
   (C++11)(C++11)
   INFINITY
   (C++11)
   NAN
   (C++11)
   math_errhandlingMATH_ERRNOMATH_ERREXCEPT
   (C++11)
   FP_NORMALFP_SUBNORMALFP_ZEROFP_INFINITEFP_NAN
   (C++11)(C++11)(C++11)(C++11)(C++11)

   Defined in header <cmath>
   (1)
   float       acosh ( float num );

   double      acosh ( double num );
   long double acosh ( long double num );
   (until C++23)
   /* floating-point-type */
               acosh ( /* floating-point-type */ num );
   (since C++23)
   (constexpr since C++26)
   float       acoshf( float num );
   (2) (since C++11)
   (constexpr since C++26)
   long double acoshl( long double num );
   (3) (since C++11)
   (constexpr since C++26)
   Additional overloads (since C++11)
   Defined in header <cmath>
   template< class Integer >
   double      acosh ( Integer num );
   (A) (constexpr since C++26)
   1-3) Computes the inverse hyperbolic cosine of num. The library
   provides overloads of std::acosh for all cv-unqualified floating-point
   types as the type of the parameter.(since C++23)
   A) Additional overloads are provided for all integer types, which are
   treated as double.
   (since C++11)

Parameters

   num - floating-point or integer value

Return value

   If no errors occur, the inverse hyperbolic cosine of num (cosh-1
   (num), or arcosh(num)) on the interval [0, +infty], is returned.

   If a domain error occurs, an implementation-defined value is returned
   (NaN where supported).

Error handling

   Errors are reported as specified in math_errhandling.

   If the argument is less than 1, a domain error occurs.

   If the implementation supports IEEE floating-point arithmetic (IEC
   60559),
     * if the argument is less than 1, FE_INVALID is raised an NaN is
       returned.
     * if the argument is 1, +0 is returned.
     * if the argument is +infty, +infty is returned.
     * if the argument is NaN, NaN is returned.

Notes

   Although the C standard (to which C++ refers for this function) names
   this function "arc hyperbolic cosine", the inverse functions of the
   hyperbolic functions are the area functions. Their argument is the area
   of a hyperbolic sector, not an arc. The correct name is "inverse
   hyperbolic cosine" (used by POSIX) or "area hyperbolic cosine".

   The additional overloads are not required to be provided exactly as
   (A). They only need to be sufficient to ensure that for their argument
   num of integer type, std::acosh(num) has the same effect as
   std::acosh(static_cast<double>(num)).

Examples

   Run this code
#include <cerrno>
#include <cfenv>
#include <cfloat>
#include <cmath>
#include <cstring>
#include <iostream>

// #pragma STDC FENV_ACCESS ON

int main()
{
    std::cout << "acosh(1) = " << std::acosh(1) << '\n'
              << "acosh(10) = " << std::acosh(10) << '\n'
              << "acosh(DBL_MAX) = " << std::acosh(DBL_MAX) << '\n'
              << "acosh(Inf) = " << std::acosh(INFINITY) << '\n';

    // error handling
    errno = 0;
    std::feclearexcept(FE_ALL_EXCEPT);

    std::cout << "acosh(0.5) = " << std::acosh(0.5) << '\n';

    if (errno == EDOM)
        std::cout << "    errno == EDOM: " << std::strerror(errno) << '\n';
    if (std::fetestexcept(FE_INVALID))
        std::cout << "    FE_INVALID raised\n";
}

   Possible output:
acosh(1) = 0
acosh(10) = 2.99322
acosh(DBL_MAX) = 710.476
acosh(Inf) = inf
acosh(0.5) = -nan
    errno == EDOM: Numerical argument out of domain
    FE_INVALID raised

See also

   asinhasinhfasinhl
   (C++11)(C++11)(C++11)
   computes the inverse hyperbolic sine
   (\({\small\operatorname{arsinh}{x}}\)arsinh(x))
   (function)
   atanhatanhfatanhl
   (C++11)(C++11)(C++11)
   computes the inverse hyperbolic tangent
   (\({\small\operatorname{artanh}{x}}\)artanh(x))
   (function)
   coshcoshfcoshl
   (C++11)(C++11)
   computes hyperbolic cosine (\({\small\cosh{x}}\)cosh(x))
   (function)
   acosh(std::complex)
   (C++11)
   computes area hyperbolic cosine of a complex number
   (\({\small\operatorname{arcosh}{z}}\)arcosh(z))
   (function template)

External links

     Weisstein, Eric W. "Inverse Hyperbolic Cosine." From MathWorld -- A
   Wolfram Web Resource.
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/numeric/math/aco
   sh&oldid=159039"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 14 September 2023, at 08:58.
     * This page has been accessed 28,723 times.
