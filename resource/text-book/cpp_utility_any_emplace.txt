std::any::emplace

   From cppreference.com
   < cpp | utility | any

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Utilities library
   Language support
   Type support (basic types, RTTI)
   Library feature-test macros (C++20)
   Dynamic memory management
   Program utilities
   Coroutine support (C++20)
   Variadic functions
   is_constant_evaluated
   (C++20)
   is_within_lifetime
   (C++26)
   initializer_list
   (C++11)
   source_location
   (C++20)
   Debugging support
   is_debugger_present
   (C++26)
   breakpoint_if_debugging
   (C++26)
   breakpoint
   (C++26)
   Three-way comparison
   three_way_comparablethree_way_comparable_with
   (C++20)(C++20)
   strong_ordering
   (C++20)
   weak_ordering
   (C++20)
   partial_ordering
   (C++20)
   common_comparison_category
   (C++20)
   compare_three_way_result
   (C++20)
   compare_three_way
   (C++20)
   strong_order
   (C++20)
   weak_order
   (C++20)
   partial_order
   (C++20)
   compare_strong_order_fallback
   (C++20)
   compare_weak_order_fallback
   (C++20)
   compare_partial_order_fallback
   (C++20)
   is_eqis_ltis_lteq
   (C++20)(C++20)(C++20)
   is_neqis_gtis_gteq
   (C++20)(C++20)(C++20)
   General utilities
   Date and time
   Function objects
   Formatting library (C++20)
   bitset
   hash
   (C++11)
   Relational operators (deprecated in C++20)
   rel_ops::operator!=rel_ops::operator>

   rel_ops::operator<=rel_ops::operator>=
   Integer comparison functions
   cmp_equalcmp_lesscmp_less_than
   (C++20)(C++20)(C++20)
   cmp_not_equalcmp_greatercmp_greater_than
   (C++20)(C++20)(C++20)
   in_range
   (C++20)
   Swap and type operations
   swap
   ranges::swap
   (C++20)
   exchange
   (C++14)
   declval
   (C++11)
   to_underlying
   (C++23)
   forward
   (C++11)
   forward_like
   (C++23)
   move
   (C++11)
   move_if_noexcept
   (C++11)
   as_const
   (C++17)
   Common vocabulary types
   pair
   tuple
   (C++11)
   optional
   (C++17)
   any
   (C++17)
   variant
   (C++17)
   tuple_size
   (C++11)
   tuple_element
   (C++11)
   apply
   (C++17)
   make_from_tuple
   (C++17)
   expected
   (C++23)
   Elementary string conversions
   to_chars
   (C++17)
   from_chars
   (C++17)
   chars_format
   (C++17)
   to_chars_result
   (C++17)
   from_chars_result
   (C++17)

   std::any
   Member functions
   any::any
   any::~any
   any::operator=
   Modifiers
   any::emplace
   any::reset
   any::swap
   Observers
   any::has_value
   any::type
   Non-member functions
   swap(std::any)
   any_cast
   make_any
   Helper classes
   bad_any_cast

   template< class ValueType, class... Args >
   std::decay_t<ValueType>& emplace( Args&&... args );
   (1)                                                (since C++17)
   template< class ValueType, class U, class... Args >
   std::decay_t<ValueType>& emplace( std::initializer_list<U> il,
   Args&&... args );
   (2)                                                (since C++17)

   Changes the contained object to one of type std::decay_t<ValueType>
   constructed from the arguments.

   First destroys the current contained object (if any) by reset(), then:
   1) constructs an object of type std::decay_t<ValueType>,
   direct-non-list-initialized from std::forward<Args>(args)..., as the
   contained object.
     * This overload participates in overload resolution only if
       std::is_constructible_v<std::decay_t<ValueType>, Args...> and
       std::is_copy_constructible_v<std::decay_t<ValueType>> are both
       true.

   2) constructs an object of type std::decay_t<ValueType>,
   direct-non-list-initialized from il, std::forward<Args>(args)..., as
   the contained object.
     * This overload participates in overload resolution only if
       std::is_constructible_v<std::decay_t<ValueType>,
       std::initializer_list<U>&, Args...> and
       std::is_copy_constructible_v<std::decay_t<ValueType>> are both
       true.

Template parameters

   ValueType - contained value type
   Type requirements
   -
   std::decay_t<ValueType> must meet the requirements of
   CopyConstructible.

Return value

   A reference to the new contained object.

Exceptions

   Throws any exception thrown by T's constructor. If an exception is
   thrown, the previously contained object (if any) has been destroyed,
   and *this does not contain a value.

Example

   Run this code
#include <algorithm>
#include <any>
#include <iostream>
#include <string>
#include <vector>

class Star
{
    std::string name;
    int id;

public:
    Star(std::string name, int id) : name{name}, id{id}
    {
        std::cout << "Star::Star(string, int)\n";
    }

    void print() const
    {
        std::cout << "Star{\"" << name << "\" : " << id << "};\n";
    }
};

int main()
{
    std::any celestial;
    // (1) emplace(Args&&... args);
    celestial.emplace<Star>("Procyon", 2943);
    const auto* star = std::any_cast<Star>(&celestial);
    star->print();

    std::any av;
    // (2) emplace(std::initializer_list<U> il, Args&&... args);
    av.emplace<std::vector<char>>({'C', '+', '+', '1', '7'} /* no args */);
    std::cout << av.type().name() << '\n';
    const auto* va = std::any_cast<std::vector<char>>(&av);
    std::for_each(va->cbegin(), va->cend(), [](char const& c) { std::cout << c;
});
    std::cout << '\n';
}

   Possible output:
Star::Star(string, int)
Star{"Procyon" : 2943};
St6vectorIcSaIcEE
C++17

See also

   (constructor)
   constructs an any object
   (public member function)
   reset
   destroys contained object
   (public member function)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/utility/any/empl
   ace&oldid=160596"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 12 October 2023, at 08:46.
     * This page has been accessed 32,220 times.
