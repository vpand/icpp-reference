std::mbtowc

   From cppreference.com
   < cpp | string | multibyte

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Strings library
   Null-terminated strings
   Byte strings
   Multibyte strings
   Wide strings
   Classes
   basic_string
   basic_string_view
   (C++17)
   char_traits

   Null-terminated multibyte strings
   Wide/multibyte conversions
   mbsinit
   mbtowc
   mbstowcs
   btowc
   mbrtowc
   mbsrtowcs
   mbrtoc8
   (C++20)
   mbrtoc16
   (C++11)
   mbrtoc32
   (C++11)
   mblen
   wctomb
   wcstombs
   wctob
   wcrtomb
   wcsrtombs
   c8rtomb
   (C++20)
   c16rtomb
   (C++11)
   c32rtomb
   (C++11)
   mbrlen
   Types
   mbstate_t

   Defined in header <cstdlib>
   int mbtowc( wchar_t* pwc, const char* s, std::size_t n );

   Converts a multibyte character whose first byte is pointed to by s to a
   wide character, written to *pwc if pwc is not null.

   If s is a null pointer, resets the global conversion state and
   determines whether shift sequences are used.

Parameters

   s   - pointer to the multibyte character
   n   - limit on the number of bytes in s that can be examined
   pwc - pointer to the wide character for output

Return value

   If s is not a null pointer, returns the number of bytes that are
   contained in the multibyte character or -1 if the first bytes pointed
   to by s do not form a valid multibyte character or 0 if s is pointing
   at the null character '\0'.

   If s is a null pointer, resets its internal conversion state to
   represent the initial shift state and returns 0 if the current
   multibyte encoding is not state-dependent (does not use shift
   sequences) or a non-zero value if the current multibyte encoding is
   state-dependent (uses shift sequences).

Notes

   Each call to mbtowc updates the internal global conversion state (a
   static object of type std::mbstate_t, only known to this function). If
   the multibyte encoding uses shift states, care must be taken to avoid
   backtracking or multiple scans. In any case, multiple threads should
   not call mbtowc without synchronization: std::mbrtowc may be used
   instead.

Example

   Run this code
#include <clocale>
#include <cstdlib>
#include <cstring>
#include <iostream>

int print_mb(const char* ptr)
{
    std::mbtowc(nullptr, 0, 0); // reset the conversion state
    const char* end = ptr + std::strlen(ptr);
    int ret{};
    for (wchar_t wc; (ret = std::mbtowc(&wc, ptr, end - ptr)) > 0; ptr += ret)
        std::wcout << wc;
    std::wcout << '\n';
    return ret;
}

int main()
{
    std::setlocale(LC_ALL, "en_US.utf8");
    // UTF-8 narrow multibyte encoding
    const char* str = "z\u00df\u6c34\U0001d10b"; // or "zߴ"
                      // or "\x7a\xc3\x9f\xe6\xb0\xb4\xf0\x9d\x84\x8b";
    print_mb(str);
}

   Output:
zߴ

See also

   mbrtowc
   converts the next multibyte character to wide character, given state
   (function)
   mblen
   returns the number of bytes in the next multibyte character
   (function)
   do_in
   [virtual]
   converts a string from ExternT to InternT, such as when reading from
   file
   (virtual protected member function of
   std::codecvt<InternT,ExternT,StateT>)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/string/multibyte
   /mbtowc&oldid=172131"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 29 May 2024, at 11:34.
     * This page has been accessed 38,913 times.
