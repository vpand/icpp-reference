C++ attribute: no_unique_address (since C++20)

   From cppreference.com
   < cpp | language | attributes

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   C++ language
   General topics
   Preprocessor
   Comments
   Keywords
   Escape sequences
   Flow control
   Conditional execution statements
   if
   switch
   Iteration statements (loops)
   for
   range-for (C++11)
   while
   do-while
   Jump statements
   continue - break
   goto - return
   Functions
   Function declaration
   Lambda function expression
   inline specifier
   Dynamic exception specifications (until C++17*)
   noexcept specifier (C++11)
   Exceptions
   throw-expression
   try block
   handler
   Namespaces
   Namespace declaration
   Namespace aliases
   Types
   Fundamental types
   Enumeration types
   Function types
   Class/struct types
   Union types
   Specifiers
   const/volatile
   decltype (C++11)
   auto (C++11)
   constexpr (C++11)
   consteval (C++20)
   constinit (C++20)
   Storage duration specifiers
   Initialization
   Default-initialization
   Value-initialization
   Zero-initialization
   Copy-initialization
   Direct-initialization
   Aggregate initialization
   List-initialization (C++11)
   Constant initialization
   Reference initialization
   Expressions
   Value categories
   Order of evaluation
   Operators
   Operator precedence
   Alternative representations
   Literals
   Boolean - Integer - Floating-point
   Character - String - nullptr (C++11)
   User-defined (C++11)
   Utilities
   Attributes (C++11)
   Types
   typedef declaration
   Type alias declaration (C++11)
   Casts
   Implicit conversions
   static_cast
   const_cast
   Explicit conversions
   dynamic_cast
   reinterpret_cast
   Memory allocation
   new expression
   delete expression
   Classes
   Class declaration
   Constructors
   this pointer
   Access specifiers
   friend specifier
   Class-specific function properties
   Virtual function
   override specifier (C++11)
   final specifier (C++11)
   explicit (C++11)
   static
   Special member functions
   Default constructor
   Copy constructor
   Move constructor (C++11)
   Copy assignment
   Move assignment (C++11)
   Destructor
   Templates
   Class template
   Function template
   Template specialization
   Parameter packs (C++11)
   Miscellaneous
   Inline assembly
   History of C++

   Declarations
   Overview
   Declaration syntax
   decl-specifier-seq
   Declarator
   Conflicting declarations
   Specifiers
   typedef
   inline
   virtual function specifier
   explicit function specifier
   friend
   constexpr
   (C++11)
   consteval
   (C++20)
   constinit
   (C++20)
   Storage class specifiers
   Translation-unit-local (C++20)
   class/struct
   union
   enum
   decltype
   (C++11)
   auto
   (C++11)
   alignas
   (C++11)
   constvolatile
   Pack indexing specifier (C++26)
   Elaborated type specifier
   Attributes (C++11)
   Declarators
   Reference
   Pointer
   Array
   Block declarations
   Simple-declaration
   ->Structured binding declaration (C++17)
   Alias declaration (C++11)
   Namespace alias definition
   using declaration
   using directive
   static_assert declaration (C++11)
   asm declaration
   Opaque enum declaration (C++11)
   Other declarations
   Namespace definition
   Function declaration
   Class template declaration
   Function template declaration
   Explicit template instantiation (C++11)
   Explicit template specialization
   Linkage specification
   Attribute declaration (C++11)
   Empty declaration

   Attributes
   assume
   (C++23)
   carries_dependency
   (C++11)
   deprecated
   (C++14)
   fallthrough
   (C++17)
   indeterminate
   (C++26)
   likely
   (C++20)
   maybe_unused
   (C++17)
   no_unique_address
   (C++20)
   nodiscard
   (C++17)
   noreturn
   (C++11)
   optimize_for_synchronized
   (TM TS)
   unlikely
   (C++20)

   Allows this data member to be overlapped with other non-static data
   members or base class subobjects of its class.

Syntax

   [[no_unique_address]]

Explanation

   Applies to the name being declared in the declaration of a non-static
   data member that's not a bit-field.

   Makes this member subobject potentially-overlapping, i.e., allows this
   member to be overlapped with other non-static data members or base
   class subobjects of its class. This means that if the member has an
   empty class type (e.g. stateless allocator), the compiler may optimise
   it to occupy no space, just like if it were an empty base. If the
   member is not empty, any tail padding in it may be also reused to store
   other data members.

Notes

   [[no_unique_address]] is ignored by MSVC even in C++20 mode; instead,
   [[msvc::no_unique_address]] is provided.

Example

   Run this code
#include <iostream>

struct Empty {}; // empty class

struct X
{
    int i;
    Empty e;
};

struct Y
{
    int i;
    [[no_unique_address]] Empty e;
};

struct Z
{
    char c;
    [[no_unique_address]] Empty e1, e2;
};

struct W
{
    char c[2];
    [[no_unique_address]] Empty e1, e2;
};

int main()
{
    // the size of any object of empty class type is at least 1
    static_assert(sizeof(Empty) >= 1);

    // at least one more byte is needed to give e a unique address
    static_assert(sizeof(X) >= sizeof(int) + 1);

    // empty member optimized out
    std::cout << "sizeof(Y) == sizeof(int) is " << std::boolalpha
              << (sizeof(Y) == sizeof(int)) << '\n';

    // e1 and e2 cannot share the same address because they have the
    // same type, even though they are marked with [[no_unique_address]].
    // However, either may share address with c.
    static_assert(sizeof(Z) >= 2);

    // e1 and e2 cannot have the same address, but one of them can share with
    // c[0] and the other with c[1]
    std::cout << "sizeof(W) == 2 is " << (sizeof(W) == 2) << '\n';
}

   Possible output:
sizeof(Y) == sizeof(int) is true
sizeof(W) == 2 is true

   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/language/attribu
   tes/no_unique_address&oldid=151941"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 20 May 2023, at 08:26.
     * This page has been accessed 98,826 times.
