std::swap(std::unordered_multimap)

   From cppreference.com
   < cpp | container | unordered multimap


   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Containers library
   Sequence
   array
   (C++11)
   vector
   vector<bool>
   deque
   forward_list
   (C++11)
   list
   Associative
   set
   multiset
   map
   multimap
   Unordered associative
   unordered_set
   (C++11)
   unordered_multiset
   (C++11)
   unordered_map
   (C++11)
   unordered_multimap
   (C++11)
   Adaptors
   stack
   queue
   priority_queue
   flat_set
   (C++23)
   flat_multiset
   (C++23)
   flat_map
   (C++23)
   flat_multimap
   (C++23)
   Views
   span
   (C++20)
   mdspan
   (C++23)
   Iterator invalidation
   Member function table
   Non-member function table

   std::unordered_multimap
   Member types
   Member functions
   unordered_multimap::unordered_multimap
   unordered_multimap::~unordered_multimap

   unordered_multimap::operator=
   unordered_multimap::get_allocator
   Iterators
   unordered_multimap::beginunordered_multimap::cbegin
   unordered_multimap::endunordered_multimap::cend
   Capacity
   unordered_multimap::size
   unordered_multimap::max_size
   unordered_multimap::empty
   Modifiers
   unordered_multimap::clear
   unordered_multimap::insert
   unordered_multimap::insert_range
   (C++23)
   unordered_multimap::emplace
   unordered_multimap::emplace_hint
   unordered_multimap::erase
   unordered_multimap::swap
   unordered_multimap::extract
   (C++17)
   unordered_multimap::merge
   (C++17)
   Lookup
   unordered_multimap::count
   unordered_multimap::find
   unordered_multimap::contains
   (C++20)
   unordered_multimap::equal_range
   Bucket interface
   unordered_multimap::begin(size_type)unordered_multimap::cbegin(size_typ
   e)
   unordered_multimap::end(size_type)unordered_multimap::cend(size_type)
   unordered_multimap::bucket_count
   unordered_multimap::max_bucket_count
   unordered_multimap::bucket_size
   unordered_multimap::bucket
   Hash policy
   unordered_multimap::load_factor
   unordered_multimap::max_load_factor
   unordered_multimap::rehash
   unordered_multimap::reserve
   Observers
   unordered_multimap::hash_function
   unordered_multimap::key_eq
   Non-member functions
   operator==operator!=
   (C++11)(C++11)(until C++20)
   std::swap(std::unordered_multimap)
   (C++11)
   erase_if(std::unordered_multimap)
   (C++20)
   Deduction guides (C++17)

   Defined in header <unordered_map>
   template< class Key, class T, class Hash, class KeyEqual, class Alloc >

   void swap( std::unordered_multimap<Key, T, Hash, KeyEqual, Alloc>& lhs,
              std::unordered_multimap<Key, T, Hash, KeyEqual, Alloc>& rhs
   );
   (since C++11)
   (until C++17)
   template< class Key, class T, class Hash, class KeyEqual, class Alloc >

   void swap( std::unordered_multimap<Key, T, Hash, KeyEqual, Alloc>& lhs,
              std::unordered_multimap<Key, T, Hash, KeyEqual, Alloc>& rhs
   )
                  noexcept(/* see below */);
   (since C++17)

   Specializes the std::swap algorithm for std::unordered_multimap. Swaps
   the contents of lhs and rhs. Calls lhs.swap(rhs).

Parameters

   lhs, rhs - containers whose contents to swap

Return value

   (none)

Complexity

   Constant.

Exceptions

   noexcept specification:
   noexcept(noexcept(lhs.swap(rhs)))
   (since C++17)

Example

   Run this code
#include <algorithm>
#include <iostream>
#include <unordered_map>

int main()
{
    std::unordered_multimap<int, char> alice{{1, 'a'}, {2, 'b'}, {3, 'c'}};
    std::unordered_multimap<int, char> bob{{7, 'Z'}, {8, 'Y'}, {9, 'X'}, {10, 'W
'}};

    auto print = [](std::pair<const int, char>& n)
    {
        std::cout << ' ' << n.first << ':' << n.second;
    };

    // Print state before swap
    std::cout << "Alice:";
    std::for_each(alice.begin(), alice.end(), print);
    std::cout << "\n" "Bob  :";
    std::for_each(bob.begin(), bob.end(), print);
    std::cout << '\n';

    std::cout << "-- SWAP\n";
    std::swap(alice, bob);

    // Print state after swap
    std::cout << "Alice:";
    std::for_each(alice.begin(), alice.end(), print);
    std::cout << "\n" "Bob  :";
    std::for_each(bob.begin(), bob.end(), print);
    std::cout << '\n';
}

   Possible output:
Alice: 1:a 2:b 3:c
Bob  : 7:Z 8:Y 9:X 10:W
-- SWAP
Alice: 7:Z 8:Y 9:X 10:W
Bob  : 1:a 2:b 3:c

See also

   swap
   swaps the contents
   (public member function)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/container/unorde
   red_multimap/swap2&oldid=136085"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 4 December 2021, at 11:57.
     * This page has been accessed 18,915 times.
