std::reverse_iterator<Iter>::operator++,+,+=,--,-,-=

   From cppreference.com
   < cpp | iterator | reverse iterator


   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Iterator library
   Iterator concepts
   indirectly_readable
   (C++20)
   indirectly_writable
   (C++20)
   weakly_incrementable
   (C++20)
   incrementable
   (C++20)
   input_or_output_iterator
   (C++20)
   sentinel_for
   (C++20)
   sized_sentinel_for
   (C++20)
   input_iterator
   (C++20)
   output_iterator
   (C++20)
   forward_iterator
   (C++20)
   bidirectional_iterator
   (C++20)
   random_access_iterator
   (C++20)
   contiguous_iterator
   (C++20)
   Iterator primitives
   input_iterator_tagoutput_iterator_tagforward_iterator_tagbidirectional_
   iterator_tagrandom_access_iterator_tagcontiguous_iterator_tag
   (C++20)
   iter_value_titer_difference_titer_reference_titer_const_reference_titer
   _rvalue_reference_titer_common_reference_t
   (C++20)(C++20)(C++20)(C++23)(C++20)(C++20)
   iterator
   (deprecated in C++17)
   iterator_traits
   incrementable_traits
   (C++20)
   indirectly_readable_traits
   (C++20)
   Algorithm concepts and utilities
   Indirect callable concepts
   indirectly_unary_invocableindirectly_regular_unary_invocable
   (C++20)(C++20)
   indirect_unary_predicate
   (C++20)
   indirect_binary_predicate
   (C++20)
   indirect_equivalence_relation
   (C++20)
   indirect_strict_weak_order
   (C++20)
   Common algorithm requirements
   indirectly_movable
   (C++20)
   indirectly_movable_storable
   (C++20)
   indirectly_copyable
   (C++20)
   indirectly_copyable_storable
   (C++20)
   indirectly_swappable
   (C++20)
   indirectly_comparable
   (C++20)
   permutable
   (C++20)
   mergeable
   (C++20)
   sortable
   (C++20)
   Utilities
   indirect_result_t
   (C++20)
   projected
   (C++20)
   projected_value_t
   (C++26)
   Iterator adaptors
   reverse_iterator
   make_reverse_iterator
   (C++14)
   move_iterator
   (C++11)
   make_move_iterator
   (C++11)
   default_sentinel_tdefault_sentinel
   (C++20)(C++20)
   unreachable_sentinel_tunreachable_sentinel
   (C++20)(C++20)
   front_insert_iterator
   back_insert_iterator
   inserter
   insert_iterator
   front_inserter
   back_inserter
   move_sentinel
   (C++20)
   common_iterator
   (C++20)
   counted_iterator
   (C++20)
   basic_const_iterator
   (C++23)
   const_iterator
   (C++23)
   const_sentinel
   (C++23)
   make_const_iterator
   (C++23)
   make_const_sentinel
   (C++23)
   Stream iterators
   istream_iterator

   ostream_iterator
   istreambuf_iterator
   ostreambuf_iterator
   Iterator customization points
   ranges::iter_move
   (C++20)
   ranges::iter_swap
   (C++20)
   Iterator operations
   advance
   distance
   prev
   (C++11)
   next
   (C++11)
   ranges::advance
   (C++20)
   ranges::distance
   (C++20)
   ranges::prev
   (C++20)
   ranges::next
   (C++20)
   Range access
   begincbegin
   (C++11)(C++14)
   rbegincrbegin
   (C++14)(C++14)
   endcend
   (C++11)(C++14)
   rendcrend
   (C++14)(C++14)
   sizessize
   (C++17)(C++20)
   empty
   (C++17)
   data
   (C++17)

   std::reverse_iterator
   Member functions
   reverse_iterator::reverse_iterator
   reverse_iterator::operator=
   reverse_iterator::base
   reverse_iterator::operator*reverse_iterator::operator->
   reverse_iterator::operator[]
   reverse_iterator::operator++reverse_iterator::operator+reverse_iterator
   ::operator+=reverse_iterator::operator--reverse_iterator::operator-reve
   rse_iterator::operator-=
   Non-member functions
   operator==operator!=operator<operator<=operator>operator>=operator<=>
   (C++20)
   operator+
   operator-
   iter_move
   (C++20)
   iter_swap
   (C++20)
   make_reverse_iterator
   (C++14)

   (1)
   reverse_iterator& operator++();
   (until C++17)
   constexpr reverse_iterator& operator++();
   (since C++17)
   (2)
   reverse_iterator& operator--();
   (until C++17)
   constexpr reverse_iterator& operator--();
   (since C++17)
   (3)
   reverse_iterator operator++( int );
   (until C++17)
   constexpr reverse_iterator operator++( int );
   (since C++17)
   (4)
   reverse_iterator operator--( int );
   (until C++17)
   constexpr reverse_iterator operator--( int );
   (since C++17)
   (5)
   reverse_iterator operator+( difference_type n ) const;
   (until C++17)
   constexpr reverse_iterator operator+( difference_type n ) const;
   (since C++17)
   (6)
   reverse_iterator operator-( difference_type n ) const;
   (until C++17)
   constexpr reverse_iterator operator-( difference_type n ) const;
   (since C++17)
   (7)
   reverse_iterator& operator+=( difference_type n );
   (until C++17)
   constexpr reverse_iterator& operator+=( difference_type n );
   (since C++17)
   (8)
   reverse_iterator& operator-=( difference_type n );
   (until C++17)
   constexpr reverse_iterator& operator-=( difference_type n );
   (since C++17)

   Increments or decrements the iterator. Inverse operations are applied
   to the underlying operator because of the reverse order.
   1,2) Pre-increments or pre-decrements by one respectively.
   3,4) Post-increments or post-decrements by one respectively.
   5,6) Returns an iterator which is advanced by n or -n positions
   respectively.
   7,8) Advances the iterator by n or -n positions respectively.

Parameters

   n - position relative to current location

Return value

   1,2) *this
   3,4) A copy of *this that was made before the change.
   5,6) reverse_iterator(base()-n) or reverse_iterator(base()+n)
   respectively.
   7,8) *this

Example

   Run this code
#include <iostream>
#include <iterator>
#include <list>
#include <vector>

int main()
{
    std::vector v{0, 1, 2, 3, 4};
    auto rv = std::reverse_iterator{v.rbegin()};
    std::cout << *(++rv) << ' '; // 3
    std::cout << *(--rv) << ' '; // 4
    std::cout << *(rv + 3) << ' '; // 1
    rv += 3;
    std::cout << rv[0] << ' '; // 1
    rv -= 3;
    std::cout << rv[0] << '\n'; // 4

    std::list l{5, 6, 7, 8};
    auto rl = std::reverse_iterator{l.rbegin()};
    std::cout << *(++rl) << ' '; // OK: 3
    std::cout << *(--rl) << '\n'; // OK: 4
    // The following statements raise compilation error because the
    // underlying iterator does not model the random access iterator:
//  *(rl + 3) = 13;
//  rl += 3;
//  rl -= 3;
}

   Output:
3 4 1 1 4
7 8

See also

   operator+
   advances the iterator
   (function template)
   operator-
   computes the distance between two iterator adaptors
   (function template)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/reverse
   _iterator/operator_arith&oldid=124801"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 5 December 2020, at 22:36.
     * This page has been accessed 44,930 times.
