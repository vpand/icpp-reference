std::chrono::nonexistent_local_time

   From cppreference.com
   < cpp | chrono

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Utilities library
   Language support
   Type support (basic types, RTTI)
   Library feature-test macros (C++20)
   Dynamic memory management
   Program utilities
   Coroutine support (C++20)
   Variadic functions
   is_constant_evaluated
   (C++20)
   is_within_lifetime
   (C++26)
   initializer_list
   (C++11)
   source_location
   (C++20)
   Debugging support
   is_debugger_present
   (C++26)
   breakpoint_if_debugging
   (C++26)
   breakpoint
   (C++26)
   Three-way comparison
   three_way_comparablethree_way_comparable_with
   (C++20)(C++20)
   strong_ordering
   (C++20)
   weak_ordering
   (C++20)
   partial_ordering
   (C++20)
   common_comparison_category
   (C++20)
   compare_three_way_result
   (C++20)
   compare_three_way
   (C++20)
   strong_order
   (C++20)
   weak_order
   (C++20)
   partial_order
   (C++20)
   compare_strong_order_fallback
   (C++20)
   compare_weak_order_fallback
   (C++20)
   compare_partial_order_fallback
   (C++20)
   is_eqis_ltis_lteq
   (C++20)(C++20)(C++20)
   is_neqis_gtis_gteq
   (C++20)(C++20)(C++20)
   General utilities
   Date and time
   Function objects
   Formatting library (C++20)
   bitset
   hash
   (C++11)
   Relational operators (deprecated in C++20)
   rel_ops::operator!=rel_ops::operator>

   rel_ops::operator<=rel_ops::operator>=
   Integer comparison functions
   cmp_equalcmp_lesscmp_less_than
   (C++20)(C++20)(C++20)
   cmp_not_equalcmp_greatercmp_greater_than
   (C++20)(C++20)(C++20)
   in_range
   (C++20)
   Swap and type operations
   swap
   ranges::swap
   (C++20)
   exchange
   (C++14)
   declval
   (C++11)
   to_underlying
   (C++23)
   forward
   (C++11)
   forward_like
   (C++23)
   move
   (C++11)
   move_if_noexcept
   (C++11)
   as_const
   (C++17)
   Common vocabulary types
   pair
   tuple
   (C++11)
   optional
   (C++17)
   any
   (C++17)
   variant
   (C++17)
   tuple_size
   (C++11)
   tuple_element
   (C++11)
   apply
   (C++17)
   make_from_tuple
   (C++17)
   expected
   (C++23)
   Elementary string conversions
   to_chars
   (C++17)
   from_chars
   (C++17)
   chars_format
   (C++17)
   to_chars_result
   (C++17)
   from_chars_result
   (C++17)

   Date and time utilities
   Time point
   time_point
   (C++11)
   clock_time_conversion
   (C++20)
   clock_cast
   (C++20)
   Duration
   duration
   (C++11)
   Clocks
   system_clock
   (C++11)
   steady_clock
   (C++11)
   high_resolution_clock
   (C++11)
   is_clock
   (C++20)
   utc_clock
   (C++20)
   tai_clock
   (C++20)
   gps_clock
   (C++20)
   file_clock
   (C++20)
   local_t
   (C++20)
   Time of day
   is_amis_pm
   (C++20)(C++20)
   make12make24
   (C++20)(C++20)
   hh_mm_ss
   (C++20)
   Calendars
   day
   (C++20)
   month
   (C++20)
   year
   (C++20)
   weekday
   (C++20)
   operator/
   (C++20)
   year_month_day
   (C++20)
   year_month_day_last
   (C++20)
   year_month_weekday
   (C++20)
   year_month_weekday_last
   (C++20)
   weekday_indexed
   (C++20)
   weekday_last
   (C++20)
   month_day
   (C++20)
   month_day_last
   (C++20)
   month_weekday
   (C++20)
   month_weekday_last
   (C++20)
   year_month
   (C++20)
   last_speclast
   (C++20)(C++20)
   Time zones
   tzdb
   (C++20)
   tzdb_list
   (C++20)
   get_tzdbget_tzdb_listreload_tzdbremote_version
   (C++20)(C++20)(C++20)(C++20)
   sys_info
   (C++20)
   local_info
   (C++20)
   nonexistent_local_time
   (C++20)
   ambiguous_local_time
   (C++20)
   locate_zone
   (C++20)
   current_zone
   (C++20)
   time_zone
   (C++20)
   choose
   (C++20)
   zoned_traits
   (C++20)
   zoned_time
   (C++20)
   time_zone_link
   (C++20)
   leap_second
   (C++20)
   leap_second_info
   (C++20)
   get_leap_second_info
   (C++20)
   chrono I/O
   parse
   (C++20)
   C-style date and time

   Defined in header <chrono>
   class nonexistent_local_time;
                                (since C++20)

   Defines a type of object to be thrown as exception to report that an
   attempt was made to convert a nonexistent std::chrono::local_time to a
   std::chrono::sys_time without specifying a std::chrono::choose (such as
   choose::earliest or choose::latest).

   This exception is thrown by std::chrono::time_zone::to_sys and
   functions that call it (such as the constructors of
   std::chrono::zoned_time that take a std::chrono::local_time).
   std-chrono-nonexistent local time-inheritance.svg

   Inheritance diagram

Member functions

   (constructor)
   constructs the exception object
   (public member function)
   operator=
   replaces the exception object
   (public member function)
   what
   returns the explanatory string
   (public member function)

std::chrono::nonexistent_local_time::nonexistent_local_time

   template< class Duration >

   nonexistent_local_time( const std::chrono::local_time<Duration>& tp,
                           const std::chrono::local_info& i );
   (1) (since C++20)
   nonexistent_local_time( const nonexistent_local_time& other ) noexcept;
   (2) (since C++20)

   Constructs the exception object.
   1) The explanatory string returned by what() is equivalent to that
   produced by os.str() after the following code:
std::ostringstream os;
os << tp << " is in a gap between\n"
   << std::chrono::local_seconds(i.first.end.time_since_epoch()) + i.first.offse
t
   << ' ' << i.first.abbrev << " and\n"
   << std::chrono::local_seconds(i.second.begin.time_since_epoch()) + i.second.o
ffset
   << ' ' << i.second.abbrev
   << " which are both equivalent to\n"
   << i.first.end << " UTC";

   The behavior is undefined if i.result !=
   std::chrono::local_info::nonexistent.
   2) Copy constructor. If *this and other both have dynamic type
   std::chrono::nonexistent_local_time then std::strcmp(what(),
   other.what()) == 0.

Parameters

   tp - the time point for which conversion was attempted
   i - a std::chrono::local_info describing the result of the conversion
   attempt
   other - another nonexistent_local_time to copy

Exceptions

   May throw std::bad_alloc

Notes

   Because copying a standard library class derived from std::exception is
   not permitted to throw exceptions, this message is typically stored
   internally as a separately-allocated reference-counted string.

std::chrono::nonexistent_locale_time::operator=

   nonexistent_locale_time& operator=( const nonexistent_locale_time&
   other ) noexcept;
                                                                   (since C++20)

   Assigns the contents with those of other. If *this and other both have
   dynamic type std::chrono::nonexistent_locale_time then
   std::strcmp(what(), other.what()) == 0 after assignment.

Parameters

   other - another exception object to assign with

Return value

   *this

std::chrono::nonexistent_locale_time::what

   virtual const char* what() const noexcept;
                                             (since C++20)

   Returns the explanatory string.

Parameters

   (none)

Return value

   Pointer to a null-terminated string with explanatory information. The
   string is suitable for conversion and display as a std::wstring. The
   pointer is guaranteed to be valid at least until the exception object
   from which it is obtained is destroyed, or until a non-const member
   function (e.g. copy assignment operator) on the exception object is
   called.

Notes

   Implementations are allowed but not required to override what().

Inherited from std::runtime_error

Inherited from std::exception

Member functions

   (destructor)
   [virtual]
   destroys the exception object
   (virtual public member function of std::exception)
   what
   [virtual]
   returns an explanatory string
   (virtual public member function of std::exception)

See also

   ambiguous_local_time
   (C++20)
   exception thrown to report that a local time is ambiguous
   (class)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/chrono/nonexiste
   nt_local_time&oldid=160401"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 9 October 2023, at 11:28.
     * This page has been accessed 17,031 times.
