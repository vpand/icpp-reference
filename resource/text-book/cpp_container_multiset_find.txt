std::multiset<Key,Compare,Allocator>::find

   From cppreference.com
   < cpp | container | multiset


   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Containers library
   Sequence
   array
   (C++11)
   vector
   vector<bool>
   deque
   forward_list
   (C++11)
   list
   Associative
   set
   multiset
   map
   multimap
   Unordered associative
   unordered_set
   (C++11)
   unordered_multiset
   (C++11)
   unordered_map
   (C++11)
   unordered_multimap
   (C++11)
   Adaptors
   stack
   queue
   priority_queue
   flat_set
   (C++23)
   flat_multiset
   (C++23)
   flat_map
   (C++23)
   flat_multimap
   (C++23)
   Views
   span
   (C++20)
   mdspan
   (C++23)
   Iterator invalidation
   Member function table
   Non-member function table

   std::multiset
   Member functions
   multiset::multiset
   multiset::~multiset
   multiset::operator=
   multiset::get_allocator
   Iterators
   multiset::beginmultiset::cbegin
   (C++11)
   multiset::endmultiset::cend
   (C++11)
   multiset::rbeginmultiset::crbegin
   (C++11)
   multiset::rendmultiset::crend
   (C++11)
   Capacity
   multiset::size
   multiset::max_size
   multiset::empty
   Modifiers
   multiset::clear
   multiset::erase
   multiset::swap
   multiset::extract
   (C++17)
   multiset::merge
   (C++17)
   multiset::insert
   multiset::insert_range
   (C++23)
   multiset::emplace
   (C++11)
   multiset::emplace_hint
   (C++11)
   Lookup
   multiset::count
   multiset::find
   multiset::contains
   (C++20)
   multiset::equal_range
   multiset::lower_bound
   multiset::upper_bound
   Observers
   multiset::key_comp
   multiset::value_comp
   Non-member functions
   operator==operator!=operator<operator>operator<=operator>=operator<=>
   (until C++20)(until C++20)(until C++20)(until C++20)(until
   C++20)(C++20)
   std::swap(std::multiset)
   erase_if(std::multiset)
   (C++20)
   Deduction guides(C++17)

   iterator find( const Key& key );
   (1)
   const_iterator find( const Key& key ) const;
   (2)
   template< class K >
   iterator find( const K& x );
   (3)                                         (since C++14)
   template< class K >
   const_iterator find( const K& x ) const;
   (4)                                         (since C++14)
   1,2) Finds an element with key equivalent to key. If there are several
   elements with the requested key in the container, any of them may be
   returned.
   3,4) Finds an element with key that compares equivalent to the value x.
   This overload participates in overload resolution only if the
   qualified-id Compare::is_transparent is valid and denotes a type. It
   allows calling this function without constructing an instance of Key.

Parameters

   key - key value of the element to search for
   x   - a value of any type that can be transparently compared with a key

Return value

   An iterator to the requested element. If no such element is found,
   past-the-end (see end()) iterator is returned.

Complexity

   Logarithmic in the size of the container.

Notes

   Feature-test macro Value Std Feature
   __cpp_lib_generic_associative_lookup 201304L (C++14) Heterogeneous
   comparison lookup in associative containers; overloads (3,4)

Example

   Run this code
#include <iostream>
#include <set>

struct LightKey
{
    int x;
};

struct FatKey
{
    int x;
    int data[1000]; // a heavy blob
};

// As detailed above, the container must use std::less<> (or other transparent
// Comparator) to access these overloads. This includes standard overloads,
// such as comparison between std::string and std::string_view.
bool operator<(const FatKey& fk, const LightKey& lk) { return fk.x < lk.x; }
bool operator<(const LightKey& lk, const FatKey& fk) { return lk.x < fk.x; }
bool operator<(const FatKey& fk1, const FatKey& fk2) { return fk1.x < fk2.x; }

int main()
{
    // Simple comparison demo.
    std::multiset<int> example{1, 2, 3, 4};

    if (auto search = example.find(2); search != example.end())
        std::cout << "Found " << (*search) << '\n';
    else
        std::cout << "Not found\n";

    // Transparent comparison demo.
    std::multiset<FatKey, std::less<>> example2{{1, {}}, {2, {}}, {3, {}}, {4, {
}}};

    LightKey lk = {2};
    if (auto search = example2.find(lk); search != example2.end())
        std::cout << "Found " << search->x << '\n';
    else
        std::cout << "Not found\n";
}

   Output:
Found 2
Found 2

See also

   count
   returns the number of elements matching specific key
   (public member function)
   equal_range
   returns range of elements matching a specific key
   (public member function)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/container/multis
   et/find&oldid=135951"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 29 November 2021, at 20:33.
     * This page has been accessed 63,189 times.
