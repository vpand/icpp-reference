std::barrier

   From cppreference.com
   < cpp | thread

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Concurrency support library
   Threads
   thread
   (C++11)
   jthread
   (C++20)
   stop_token
   (C++20)
   stop_source
   (C++20)
   stop_callback
   (C++20)
   hardware_destructive_interference_sizehardware_constructive_interferenc
   e_size
   (C++17)(C++17)
   this_thread namespace
   get_id
   (C++11)
   yield
   (C++11)
   sleep_for
   (C++11)
   sleep_until
   (C++11)
   Mutual exclusion
   mutex
   (C++11)
   recursive_mutex
   (C++11)
   shared_mutex
   (C++17)
   timed_mutex
   (C++11)
   recursive_timed_mutex
   (C++11)
   shared_timed_mutex
   (C++14)
   Generic lock management
   lock_guard
   (C++11)
   scoped_lock
   (C++17)
   unique_lock
   (C++11)
   shared_lock
   (C++14)
   defer_lock_ttry_to_lock_tadopt_lock_t
   (C++11)(C++11)(C++11)
   lock
   (C++11)
   try_lock
   (C++11)
   defer_locktry_to_lockadopt_lock
   (C++11)(C++11)(C++11)
   once_flag
   (C++11)
   call_once
   (C++11)
   Condition variables
   condition_variable
   (C++11)
   condition_variable_any
   (C++11)
   notify_all_at_thread_exit
   (C++11)
   cv_status
   (C++11)
   Semaphores
   counting_semaphorebinary_semaphore
   (C++20)(C++20)
   Latches and Barriers
   latch
   (C++20)
   barrier
   (C++20)
   Futures
   promise
   (C++11)
   future
   (C++11)
   shared_future
   (C++11)
   packaged_task
   (C++11)
   async
   (C++11)
   launch
   (C++11)
   future_status
   (C++11)
   future_error
   (C++11)
   future_category
   (C++11)
   future_errc
   (C++11)
   Safe Reclamation
   rcu_obj_base
   (C++26)
   rcu_domain
   (C++26)
   rcu_default_domain
   (C++26)
   rcu_synchronize
   (C++26)
   rcu_barrier
   (C++26)
   rcu_retire
   (C++26)
   Hazard Pointers
   hazard_pointer_obj_base
   (C++26)
   hazard_pointer
   (C++26)
   make_hazard_pointer
   (C++26)
   Atomic types
   atomic
   (C++11)
   atomic_ref
   (C++20)
   atomic_flag
   (C++11)
   Initialization of atomic types
   atomic_init
   (C++11)(deprecated in C++20)
   ATOMIC_VAR_INIT
   (C++11)(deprecated in C++20)
   ATOMIC_FLAG_INIT
   (C++11)
   Memory ordering
   memory_order
   (C++11)
   kill_dependency
   (C++11)
   atomic_thread_fence
   (C++11)
   atomic_signal_fence
   (C++11)
   Free functions for atomic operations
   atomic_storeatomic_store_explicit
   (C++11)(C++11)
   atomic_loadatomic_load_explicit
   (C++11)(C++11)
   atomic_exchangeatomic_exchange_explicit
   (C++11)(C++11)
   atomic_compare_exchange_weakatomic_compare_exchange_weak_explicitatomic
   _compare_exchange_strongatomic_compare_exchange_strong_explicit
   (C++11)(C++11)(C++11)(C++11)
   atomic_fetch_addatomic_fetch_add_explicit
   (C++11)(C++11)
   atomic_fetch_subatomic_fetch_sub_explicit
   (C++11)(C++11)
   atomic_fetch_andatomic_fetch_and_explicit
   (C++11)(C++11)
   atomic_fetch_oratomic_fetch_or_explicit
   (C++11)(C++11)
   atomic_fetch_xoratomic_fetch_xor_explicit
   (C++11)(C++11)
   atomic_fetch_maxatomic_fetch_max_explicit
   (C++26)(C++26)
   atomic_fetch_minatomic_fetch_min_explicit
   (C++26)(C++26)
   atomic_is_lock_free
   (C++11)
   atomic_waitatomic_wait_explicit
   (C++20)(C++20)
   atomic_notify_one
   (C++20)
   atomic_notify_all
   (C++20)
   Free functions for atomic flags
   atomic_flag_test_and_setatomic_flag_test_and_set_explicit
   (C++11)(C++11)
   atomic_flag_clearatomic_flag_clear_explicit
   (C++11)(C++11)
   atomic_flag_testatomic_flag_test_explicit
   (C++20)(C++20)
   atomic_flag_waitatomic_flag_wait_explicit
   (C++20)(C++20)
   atomic_flag_notify_one
   (C++20)
   atomic_flag_notify_all
   (C++20)

   std::barrier
   Member functions
   barrier::barrier
   barrier::~barrier
   barrier::arrive
   barrier::wait
   barrier::arrive_and_wait
   barrier::arrive_and_drop
   Constants
   barrier::max

   Defined in header <barrier>
   template< class CompletionFunction = /* see below */ >
   class barrier;
                                                         (since C++20)

   The class template std::barrier provides a thread-coordination
   mechanism that blocks a group of threads of known size until all
   threads in that group have reached the barrier. Unlike std::latch,
   barriers are reusable: once a group of arriving threads are unblocked,
   the barrier can be reused. Unlike std::latch, barriers execute a
   possibly empty callable before unblocking threads.

   A barrier object's lifetime consists of one or more phases. Each phase
   defines a phase synchronization point where waiting threads block.
   Threads can arrive at the barrier, but defer waiting on the phase
   synchronization point by calling arrive. Such threads can later block
   on the phase synchronization point by calling wait.

   A barrier phase consists of the following steps:
    1. The expected count is decremented by each call to arrive or
       arrive_and_drop.
    2. When the expected count reaches zero, the phase completion step is
       run, meaning that the completion is invoked, and all threads
       blocked on the phase synchronization point are unblocked. The end
       of the completion step strongly happens-before all calls that were
       unblocked by the completion step return.
       Exactly once after the expected count reaches zero, a thread
       executes the completion step during its call to arrive,
       arrive_and_drop, or wait, except that it is implementation-defined
       whether the step executes if no thread calls wait.
    3. When the completion step finishes, the expected count is reset to
       the value specified at construction less the number of calls to
       arrive_and_drop since, and the next barrier phase begins.

   Concurrent invocations of the member functions of barrier, except for
   the destructor, do not introduce data races.

Template parameters

   CompletionFunction - a function object type
   -
   CompletionFunction must meet the requirements of MoveConstructible and
   Destructible. std::is_nothrow_invocable_v<CompletionFunction&> must be
   true.

   The default template argument of CompletionFunction is an unspecified
   function object type that additionally meets the requirements of
   DefaultConstructible. Calling an lvalue of it with no arguments has no
   effects.

Member objects

   Name Definition
   completion (private) A completion function object of type
   CompletionFunction which is called on every phase completion step.
   (exposition-only member object*)

Member types

   Name Definition
   arrival_token an unspecified object type meeting requirements of
   MoveConstructible, MoveAssignable and Destructible

Member functions

   (constructor)
   constructs a barrier
   (public member function)
   (destructor)
   destroys the barrier
   (public member function)
   operator=
   [deleted]
   barrier is not assignable
   (public member function)
   arrive
   arrives at barrier and decrements the expected count
   (public member function)
   wait
   blocks at the phase synchronization point until its phase completion
   step is run
   (public member function)
   arrive_and_wait
   arrives at barrier and decrements the expected count by one, then
   blocks until current phase completes
   (public member function)
   arrive_and_drop
   decrements both the initial expected count for subsequent phases and
   the expected count for current phase by one
   (public member function)

Constants

   max
   [static]
   the maximum value of expected count supported by the implementation
   (public static member function)

Notes

   Feature-test macro Value Std Feature
   __cpp_lib_barrier 201907L (C++20) std::barrier
   202302L (C++20)
   (DR) Relaxed guarantees for phase completion

Example

   Run this code
#include <barrier>
#include <iostream>
#include <string>
#include <syncstream>
#include <thread>
#include <vector>

int main()
{
    const auto workers = {"Anil", "Busara", "Carl"};

    auto on_completion = []() noexcept
    {
        // locking not needed here
        static auto phase =
            "... done\n"
            "Cleaning up...\n";
        std::cout << phase;
        phase = "... done\n";
    };

    std::barrier sync_point(std::ssize(workers), on_completion);

    auto work = [&](std::string name)
    {
        std::string product = "  " + name + " worked\n";
        std::osyncstream(std::cout) << product;  // ok, op<< call is atomic
        sync_point.arrive_and_wait();

        product = "  " + name + " cleaned\n";
        std::osyncstream(std::cout) << product;
        sync_point.arrive_and_wait();
    };

    std::cout << "Starting...\n";
    std::vector<std::jthread> threads;
    threads.reserve(std::size(workers));
    for (auto const& worker : workers)
        threads.emplace_back(work, worker);
}

   Possible output:
Starting...
  Anil worked
  Carl worked
  Busara worked
... done
Cleaning up...
  Busara cleaned
  Carl cleaned
  Anil cleaned
... done

Defect reports

   The following behavior-changing defect reports were applied
   retroactively to previously published C++ standards.
   DR Applied to Behavior as published Correct behavior
   P2588R3 C++20 old phase completion guarantees might prevent hardware
   acceleration relaxed

See also

   latch
   (C++20)
   single-use thread barrier
   (class)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/thread/barrier&o
   ldid=171901"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 20 May 2024, at 21:31.
     * This page has been accessed 145,493 times.
