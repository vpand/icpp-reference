operator-(ranges::zip_view::sentinel)

   From cppreference.com
   < cpp | ranges | zip view | sentinel

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Ranges library
   Range access
   begin
   cbegin
   end
   cend
   rbegin
   crbegin
   rend
   crend
   size
   ssize
   data
   cdata
   empty
   Range conversions
   std::from_range_t
   std::from_range
   (C++23)(C++23)
   to
   (C++23)
   Range primitives
   range_size_trange_difference_trange_value_trange_reference_t
   iterator_tconst_iterator_tsentinel_tconst_sentinel_t
   (C++23)(C++23)
   range_const_reference_trange_rvalue_reference_trange_common_reference_t
   (C++23)
   elements_of
   (C++23)
   Dangling iterator handling
   dangling
   borrowed_iterator_t
   borrowed_subrange_t
   Range concepts
   range
   borrowed_range
   sized_range
   constant_range
   (C++23)
   common_range
   view
   viewable_range
   input_range
   output_range
   forward_range
   bidirectional_range
   random_access_range
   contiguous_range
   Views
   view_interface
   subrange
   Range factories
   empty_viewviews::empty
   single_viewviews::single
   iota_viewviews::iota
   repeat_viewviews::repeat
   (C++23)(C++23)
   basic_istream_viewviews::istream
   Range adaptors
   views::all_tviews::all
   ref_view
   owning_view
   as_rvalue_viewviews::as_rvalue
   (C++23)(C++23)
   filter_viewviews::filter
   transform_viewviews::transform
   take_viewviews::take
   take_while_viewviews::take_while
   concat_viewviews::concat
   (C++26)(C++26)
   drop_viewviews::drop
   drop_while_viewviews::drop_while
   join_viewviews::join
   join_with_viewviews::join_with
   (C++23)(C++23)
   lazy_split_viewviews::lazy_split
   split_viewviews::split
   views::counted
   common_viewviews::common
   reverse_viewviews::reverse
   as_const_viewviews::as_const
   (C++23)(C++23)
   elements_viewviews::elements
   keys_viewviews::keys
   values_viewviews::values
   enumerate_viewviews::enumerate
   (C++23)(C++23)
   zip_viewviews::zip
   (C++23)(C++23)
   zip_transform_viewviews::zip_transform
   (C++23)(C++23)
   adjacent_viewviews::adjacent
   (C++23)(C++23)
   views::pairwise
   (C++23)
   adjacent_transform_viewviews::adjacent_transform
   (C++23)(C++23)
   views::pairwise_transform
   (C++23)
   chunk_viewviews::chunk
   (C++23)(C++23)
   slide_viewviews::slide
   (C++23)(C++23)
   chunk_by_viewviews::chunk_by
   (C++23)(C++23)
   stride_viewviews::stride
   (C++23)(C++23)
   cartesian_product_viewviews::cartesian_product
   (C++23)(C++23)
   Range generators
   std::generator
   (C++23)
   Range adaptor objects
   Range adaptor closure objects
   range_adaptor_closure
   (C++23)
   Helper items
   copyable-box
   movable-box
   (until C++23)(C++23)
   simple-view
   non-propagating-cache

   std::ranges::zip_view
   Member functions
   zip_view::zip_view
   zip_view::begin
   zip_view::end
   zip_view::size
   Deduction guides
   Iterator
   Member functions
   zip_view::iterator::iterator
   zip_view::iterator::operator*
   zip_view::iterator::operator[]
   zip_view::iterator::operator++
   zip_view::iterator::operator++(int)
   zip_view::iterator::operator--
   zip_view::iterator::operator--(int)
   zip_view::iterator::operator+=
   zip_view::iterator::operator-=
   Non-member functions
   operator==(zip_view::iterator)
   operator<(zip_view::iterator)
   operator>(zip_view::iterator)
   operator<=(zip_view::iterator)
   operator>=(zip_view::iterator)
   operator<=>(zip_view::iterator)
   operator+(zip_view::iterator)
   operator-(zip_view::iterator)
   iter_move(zip_view::iterator)
   iter_swap(zip_view::iterator)
   Sentinel
   Member functions
   zip_view::sentinel::sentinel
   Non-member functions
   operator==(zip_view::iterator,zip_view::sentinel)
   operator-(zip_view::iterator,zip_view::sentinel)

   template< bool OtherConst >

     requires (std::sized_sentinel_for<
                 ranges::sentinel_t</*maybe-const*/<Const, Views>>,
                 ranges::iterator_t</*maybe-const*/<OtherConst, Views>>>
   && ...)
   friend constexpr

   std::common_type_t<ranges::range_difference_t</*maybe-const*/<OtherCons
   t, Views>>...>
         operator-( const iterator<OtherConst>& x, const sentinel& y );
   (1)                        (since C++23)
   template< bool OtherConst >

     requires (std::sized_sentinel_for<
                 ranges::sentinel_t</*maybe-const*/<Const, Views>>,
                 ranges::iterator_t</*maybe-const*/<OtherConst, Views>>>
   && ...)
   friend constexpr

   std::common_type_t<ranges::range_difference_t</*maybe-const*/<OtherCons
   t, Views>>...>
       operator-( const sentinel& y, const iterator<OtherConst>& x );
   (2)                        (since C++23)

   Computes the minimal distance between the underlying tuple of iterators
   of x and the underlying tuple of sentinels of y.

   These functions are not visible to ordinary unqualified or qualified
   lookup, and can only be found by argument-dependent lookup when
   zip_view::sentinel<Const> is an associated class of the arguments.

Parameters

   x - an iterator
   y - a sentinel

Return value

   Let current_ denote the underlying tuple of iterators of x, and end_
   denote the underlying tuple of sentinels of y.

   Let DIST(x, y, i) be a distance calculated by expression equivalent to
   std::get<i>(x.current_) - std::get<i>(y.end_) for some integer i.
   1) the value with the smallest absolute value among DIST(x, y, i) of
   all i in range 0 <= i < sizeof...(Views)
   2) -(x - y).

Example

   Run this code
#include <cassert>
#include <ranges>
#include <vector>
#include <deque>
#include <list>

int main() {
    auto x = std::vector{1, 2, 3, 4};
    auto y = std::deque{'a', 'b', 'c'};
    auto z = {1.1, 2.2};
    auto w = std::list{1, 2, 3};

    auto p = std::views::zip(x, y, z);
    assert(p.begin() - p.end() == +2);
    assert(p.end() - p.begin() == -2);

    [[maybe_unused]]
    auto q = std::views::zip(x, y, w);

    // The following code fires a compile-time error because std::list::iterator
    // does not support operator- that is needed to calculate the distance:
    // auto e = q.begin() - q.end();
}

   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/ranges/zip_view/
   sentinel/operator-&oldid=141683"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 2 August 2022, at 14:39.
     * This page has been accessed 3,735 times.
