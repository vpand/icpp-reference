std::common_iterator<I,S>::operator++

   From cppreference.com
   < cpp | iterator | common iterator

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Iterator library
   Iterator concepts
   indirectly_readable
   (C++20)
   indirectly_writable
   (C++20)
   weakly_incrementable
   (C++20)
   incrementable
   (C++20)
   input_or_output_iterator
   (C++20)
   sentinel_for
   (C++20)
   sized_sentinel_for
   (C++20)
   input_iterator
   (C++20)
   output_iterator
   (C++20)
   forward_iterator
   (C++20)
   bidirectional_iterator
   (C++20)
   random_access_iterator
   (C++20)
   contiguous_iterator
   (C++20)
   Iterator primitives
   input_iterator_tagoutput_iterator_tagforward_iterator_tagbidirectional_
   iterator_tagrandom_access_iterator_tagcontiguous_iterator_tag
   (C++20)
   iter_value_titer_difference_titer_reference_titer_const_reference_titer
   _rvalue_reference_titer_common_reference_t
   (C++20)(C++20)(C++20)(C++23)(C++20)(C++20)
   iterator
   (deprecated in C++17)
   iterator_traits
   incrementable_traits
   (C++20)
   indirectly_readable_traits
   (C++20)
   Algorithm concepts and utilities
   Indirect callable concepts
   indirectly_unary_invocableindirectly_regular_unary_invocable
   (C++20)(C++20)
   indirect_unary_predicate
   (C++20)
   indirect_binary_predicate
   (C++20)
   indirect_equivalence_relation
   (C++20)
   indirect_strict_weak_order
   (C++20)
   Common algorithm requirements
   indirectly_movable
   (C++20)
   indirectly_movable_storable
   (C++20)
   indirectly_copyable
   (C++20)
   indirectly_copyable_storable
   (C++20)
   indirectly_swappable
   (C++20)
   indirectly_comparable
   (C++20)
   permutable
   (C++20)
   mergeable
   (C++20)
   sortable
   (C++20)
   Utilities
   indirect_result_t
   (C++20)
   projected
   (C++20)
   projected_value_t
   (C++26)
   Iterator adaptors
   reverse_iterator
   make_reverse_iterator
   (C++14)
   move_iterator
   (C++11)
   make_move_iterator
   (C++11)
   default_sentinel_tdefault_sentinel
   (C++20)(C++20)
   unreachable_sentinel_tunreachable_sentinel
   (C++20)(C++20)
   front_insert_iterator
   back_insert_iterator
   inserter
   insert_iterator
   front_inserter
   back_inserter
   move_sentinel
   (C++20)
   common_iterator
   (C++20)
   counted_iterator
   (C++20)
   basic_const_iterator
   (C++23)
   const_iterator
   (C++23)
   const_sentinel
   (C++23)
   make_const_iterator
   (C++23)
   make_const_sentinel
   (C++23)
   Stream iterators
   istream_iterator

   ostream_iterator
   istreambuf_iterator
   ostreambuf_iterator
   Iterator customization points
   ranges::iter_move
   (C++20)
   ranges::iter_swap
   (C++20)
   Iterator operations
   advance
   distance
   prev
   (C++11)
   next
   (C++11)
   ranges::advance
   (C++20)
   ranges::distance
   (C++20)
   ranges::prev
   (C++20)
   ranges::next
   (C++20)
   Range access
   begincbegin
   (C++11)(C++14)
   rbegincrbegin
   (C++14)(C++14)
   endcend
   (C++11)(C++14)
   rendcrend
   (C++14)(C++14)
   sizessize
   (C++17)(C++20)
   empty
   (C++17)
   data
   (C++17)

   std::common_iterator
   Member functions
   common_iterator::common_iterator
   (C++20)
   common_iterator::operator=
   (C++20)
   common_iterator::operator*common_iterator::operator->
   (C++20)(C++20)
   common_iterator::operator++common_iterator::operator++(int)
   (C++20)(C++20)
   Non-member functions
   operator==
   (C++20)
   operator-
   (C++20)
   iter_move
   (C++20)
   iter_swap
   (C++20)
   Helper classes
   incrementable_traits
   (C++20)
   iterator_traits
   (C++20)

   constexpr common_iterator& operator++();
   (1)                                        (since C++20)
   constexpr decltype(auto) operator++( int );
   (2)                                        (since C++20)
   Helper types
   class /*postfix_proxy*/ {

       std::iter_value_t<I> keep_;
       constexpr postfix_proxy(std::iter_reference_t<I>&& x)
           : keep_(std::forward<std::iter_reference_t<I>>(x)) {}
   public:
       constexpr const std::iter_value_t<I>& operator*() const noexcept {
           return keep_;
       }
   };
   (3)                                        (exposition only*)

   Increments the underlying iterator.

   The behavior is undefined if the underlying std::variant member object
   var does not hold an object of type I, i.e.
   std::holds_alternative<I>(var) is equal to false.

   Let it denote the iterator of type I held by var, that is
   std::get<I>(var).
   1) Pre-increments by one. Equivalent to ++it; return *this;.
   2) Post-increments by one:
     * Equivalent to: auto tmp = *this; ++*this; return tmp;, if I models
       forward_iterator.
     * Equivalent to: return it++;, if the variable definition auto&& ref
       = *it++; is well-formed, or either

          + std::indirectly_readable<I> or
          + std::constructible_from<std::iter_value_t<I>,
            std::iter_reference_t<I>> or
          + std::move_constructible<std::iter_value_t<I>>

                is false.

     * Equivalent to: postfix_proxy p(**this); ++*this; return p;
       otherwise, where postfix_proxy is an exposition only helper type
       (3).

Parameters

   (none)

Return value

   1) *this
   2) A copy of *this that was made before the change, or a result of
   post-increment of the underlying iterator, or a proxy keeping the value
   of the current element, as described above.

Example

   Run this code
#include <algorithm>
#include <initializer_list>
#include <iostream>
#include <iterator>

int main()
{
    const auto il = {1, 2, 3, 4, 5, 6};

    using CI = std::common_iterator<
                   std::counted_iterator<std::initializer_list<int>::iterator>,
                   std::default_sentinel_t
                   >;

    CI first{std::counted_iterator{std::begin(il), std::ssize(il) - 2}};

    for (; first != std::default_sentinel; ++first)
        std::cout << *first << ' ';
    std::cout << '\n';
}

   Output:
1 2 3 4

Defect reports

   The following behavior-changing defect reports were applied
   retroactively to previously published C++ standards.
   DR Applied to Behavior as published Correct behavior
   P2259R1 C++20 post increment might discard its result in more
   situations a proxy class is used to keep the result
   LWG 3546 C++20 initialization of the proxy object was sometimes
   ill-formed situation and definition adjusted
   LWG 3574 C++20 variant was fully constexpr (P2231R1) but
   common_iterator was not also made constexpr
   LWG 3595 C++20 functions of the proxy type lacked constexpr and
   noexcept added

See also

   operator-
   computes the distance between two iterator adaptors
   (function template)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/common_
   iterator/operator_arith&oldid=159811"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 29 September 2023, at 05:37.
     * This page has been accessed 4,481 times.
