std::swap(std::pair)

   From cppreference.com
   < cpp | utility | pair

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Utilities library
   Language support
   Type support (basic types, RTTI)
   Library feature-test macros (C++20)
   Dynamic memory management
   Program utilities
   Coroutine support (C++20)
   Variadic functions
   is_constant_evaluated
   (C++20)
   is_within_lifetime
   (C++26)
   initializer_list
   (C++11)
   source_location
   (C++20)
   Debugging support
   is_debugger_present
   (C++26)
   breakpoint_if_debugging
   (C++26)
   breakpoint
   (C++26)
   Three-way comparison
   three_way_comparablethree_way_comparable_with
   (C++20)(C++20)
   strong_ordering
   (C++20)
   weak_ordering
   (C++20)
   partial_ordering
   (C++20)
   common_comparison_category
   (C++20)
   compare_three_way_result
   (C++20)
   compare_three_way
   (C++20)
   strong_order
   (C++20)
   weak_order
   (C++20)
   partial_order
   (C++20)
   compare_strong_order_fallback
   (C++20)
   compare_weak_order_fallback
   (C++20)
   compare_partial_order_fallback
   (C++20)
   is_eqis_ltis_lteq
   (C++20)(C++20)(C++20)
   is_neqis_gtis_gteq
   (C++20)(C++20)(C++20)
   General utilities
   Date and time
   Function objects
   Formatting library (C++20)
   bitset
   hash
   (C++11)
   Relational operators (deprecated in C++20)
   rel_ops::operator!=rel_ops::operator>

   rel_ops::operator<=rel_ops::operator>=
   Integer comparison functions
   cmp_equalcmp_lesscmp_less_than
   (C++20)(C++20)(C++20)
   cmp_not_equalcmp_greatercmp_greater_than
   (C++20)(C++20)(C++20)
   in_range
   (C++20)
   Swap and type operations
   swap
   ranges::swap
   (C++20)
   exchange
   (C++14)
   declval
   (C++11)
   to_underlying
   (C++23)
   forward
   (C++11)
   forward_like
   (C++23)
   move
   (C++11)
   move_if_noexcept
   (C++11)
   as_const
   (C++17)
   Common vocabulary types
   pair
   tuple
   (C++11)
   optional
   (C++17)
   any
   (C++17)
   variant
   (C++17)
   tuple_size
   (C++11)
   tuple_element
   (C++11)
   apply
   (C++17)
   make_from_tuple
   (C++17)
   expected
   (C++23)
   Elementary string conversions
   to_chars
   (C++17)
   from_chars
   (C++17)
   chars_format
   (C++17)
   to_chars_result
   (C++17)
   from_chars_result
   (C++17)

   std::pair
   Member functions
   pair::pair
   pair::operator=
   pair::swap
   (C++11)
   Non-member functions
   make_pair
   operator==operator!=operator<operator<=operator>operator>=operator<=>
   (until C++20)(until C++20)(until C++20)(until C++20)(until
   C++20)(C++20)
   swap(std::pair)
   (C++11)
   get(std::pair)
   (C++11)
   Helper classes
   tuple_size<std::pair>
   (C++11)
   tuple_element<std::pair>
   (C++11)
   basic_common_reference<std::pair>
   (C++23)
   common_type<std::pair>
   (C++23)
   formatter<std::pair>
   (C++23)
   piecewise_construct_t
   (C++11)
   Deduction guides(C++17)

   Defined in header <utility>
                                 (1)
   template< class T1, class T2 >

   void swap( std::pair<T1,T2>& x, std::pair<T1,T2>& y )
       noexcept(/* see below */);
   (since C++11)
   (until C++20)
   template< class T1, class T2 >

   constexpr void swap( std::pair<T1,T2>& x, std::pair<T1,T2>& y )
       noexcept(/* see below */);
                                               (since C++20)
   template< class T1, class T2 >

   constexpr void swap( const std::pair<T1,T2>& x, const std::pair<T1,T2>&
   y )
       noexcept(/* see below */);
   (2)                           (since C++23)

   Swaps the contents of x and y. Equivalent to x.swap(y).
   1) This overload participates in overload resolution only if
   std::is_swappable_v<first_type> && std::is_swappable_v<second_type> is
   true.
   2) This overload participates in overload resolution only if
   std::is_swappable_v<const first_type> && std::is_swappable_v<const
   second_type> is true.
   (since C++17)

Parameters

   x, y - pairs whose contents to swap

Return value

   (none)

Exceptions

   noexcept specification:
   noexcept(noexcept(x.swap(y)))

Example

   Run this code
#include <iostream>
#include <utility>

int main()
{
    auto p1 = std::make_pair(10, 3.14);
    auto p2 = std::pair(12, 1.23); // CTAD, since C++17

    auto print_p1_p2 = [&](auto msg) {
        std::cout << msg
                  << "p1 = {" << std::get<0>(p1)
                  << ", "     << std::get<1>(p1) << "}, "
                  << "p2 = {" << std::get<0>(p2)
                  << ", "     << std::get<1>(p2) << "}\n";
    };

    print_p1_p2("Before p1.swap(p2): ");
    p1.swap(p2);
    print_p1_p2("After  p1.swap(p2): ");
    std::swap(p1, p2);
    print_p1_p2("After swap(p1, p2): ");
}

   Output:
Before p1.swap(p2): p1 = {10, 3.14}, p2 = {12, 1.23}
After  p1.swap(p2): p1 = {12, 1.23}, p2 = {10, 3.14}
After swap(p1, p2): p1 = {10, 3.14}, p2 = {12, 1.23}

See also

   swap
   swaps the values of two objects
   (function template)
   std::swap(std::tuple)
   (C++11)
   specializes the std::swap algorithm
   (function template)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/utility/pair/swa
   p2&oldid=146140"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 4 January 2023, at 16:55.
     * This page has been accessed 48,837 times.
