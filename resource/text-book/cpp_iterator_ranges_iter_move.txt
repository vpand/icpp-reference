std::ranges::iter_move

   From cppreference.com
   < cpp | iterator

   C++
   Compiler support
   Freestanding and hosted
   Language
   Standard library
   Standard library headers
   Named requirements
   Feature test macros (C++20)
   Language support library
   Concepts library (C++20)
   Metaprogramming library (C++11)
   Diagnostics library
   General utilities library
   Strings library
   Containers library
   Iterators library
   Ranges library (C++20)
   Algorithms library
   Numerics library
   Localizations library
   Input/output library
   Filesystem library (C++17)
   Regular expressions library (C++11)
   Concurrency support library (C++11)
   Technical specifications
   Symbols index
   External libraries

   Iterator library
   Iterator concepts
   indirectly_readable
   (C++20)
   indirectly_writable
   (C++20)
   weakly_incrementable
   (C++20)
   incrementable
   (C++20)
   input_or_output_iterator
   (C++20)
   sentinel_for
   (C++20)
   sized_sentinel_for
   (C++20)
   input_iterator
   (C++20)
   output_iterator
   (C++20)
   forward_iterator
   (C++20)
   bidirectional_iterator
   (C++20)
   random_access_iterator
   (C++20)
   contiguous_iterator
   (C++20)
   Iterator primitives
   input_iterator_tagoutput_iterator_tagforward_iterator_tagbidirectional_
   iterator_tagrandom_access_iterator_tagcontiguous_iterator_tag
   (C++20)
   iter_value_titer_difference_titer_reference_titer_const_reference_titer
   _rvalue_reference_titer_common_reference_t
   (C++20)(C++20)(C++20)(C++23)(C++20)(C++20)
   iterator
   (deprecated in C++17)
   iterator_traits
   incrementable_traits
   (C++20)
   indirectly_readable_traits
   (C++20)
   Algorithm concepts and utilities
   Indirect callable concepts
   indirectly_unary_invocableindirectly_regular_unary_invocable
   (C++20)(C++20)
   indirect_unary_predicate
   (C++20)
   indirect_binary_predicate
   (C++20)
   indirect_equivalence_relation
   (C++20)
   indirect_strict_weak_order
   (C++20)
   Common algorithm requirements
   indirectly_movable
   (C++20)
   indirectly_movable_storable
   (C++20)
   indirectly_copyable
   (C++20)
   indirectly_copyable_storable
   (C++20)
   indirectly_swappable
   (C++20)
   indirectly_comparable
   (C++20)
   permutable
   (C++20)
   mergeable
   (C++20)
   sortable
   (C++20)
   Utilities
   indirect_result_t
   (C++20)
   projected
   (C++20)
   projected_value_t
   (C++26)
   Iterator adaptors
   reverse_iterator
   make_reverse_iterator
   (C++14)
   move_iterator
   (C++11)
   make_move_iterator
   (C++11)
   default_sentinel_tdefault_sentinel
   (C++20)(C++20)
   unreachable_sentinel_tunreachable_sentinel
   (C++20)(C++20)
   front_insert_iterator
   back_insert_iterator
   inserter
   insert_iterator
   front_inserter
   back_inserter
   move_sentinel
   (C++20)
   common_iterator
   (C++20)
   counted_iterator
   (C++20)
   basic_const_iterator
   (C++23)
   const_iterator
   (C++23)
   const_sentinel
   (C++23)
   make_const_iterator
   (C++23)
   make_const_sentinel
   (C++23)
   Stream iterators
   istream_iterator

   ostream_iterator
   istreambuf_iterator
   ostreambuf_iterator
   Iterator customization points
   ranges::iter_move
   (C++20)
   ranges::iter_swap
   (C++20)
   Iterator operations
   advance
   distance
   prev
   (C++11)
   next
   (C++11)
   ranges::advance
   (C++20)
   ranges::distance
   (C++20)
   ranges::prev
   (C++20)
   ranges::next
   (C++20)
   Range access
   begincbegin
   (C++11)(C++14)
   rbegincrbegin
   (C++14)(C++14)
   endcend
   (C++11)(C++14)
   rendcrend
   (C++14)(C++14)
   sizessize
   (C++17)(C++20)
   empty
   (C++17)
   data
   (C++17)

   Defined in header <iterator>
   inline namespace /* unspecified */ {

       inline constexpr /* unspecified */ iter_move = /* unspecified */;
   }
   (since C++20)
   (customization point object)
   Call signature
   template< class T >

       requires /* see below */
   constexpr decltype(auto) iter_move( T&& t ) noexcept(/* see below */);
                                       (since C++20)

   Obtains an rvalue reference or a prvalue temporary from a given
   iterator.

   A ranges::iter_move(t) is expression-equivalent to:
    1. iter_move(t), if t has a class or enumeration type and the
       expression is well-formed when treated as an unevaluated operand,
       where the overload resolution of iter_move is performed only with
       the candidates found by argument-dependent lookup.
    2. Otherwise, std::move(*t) if *t is well-formed and is an lvalue.
    3. Otherwise, *t if *t is well-formed and is an rvalue.

   In all other cases, a call to ranges::iter_move is ill-formed, which
   can result in substitution failure when ranges::iter_move(e) appears in
   the immediate context of a template instantiation.

   If ranges::iter_move(e) is not equal to *e, the program is ill-formed,
   no diagnostic required.

Customization point objects

   The name ranges::iter_move denotes a customization point object, which
   is a const function object of a literal semiregular class type. For
   exposition purposes, the cv-unqualified version of its type is denoted
   as __iter_move_fn.

   All instances of __iter_move_fn are equal. The effects of invoking
   different instances of type __iter_move_fn on the same arguments are
   equivalent, regardless of whether the expression denoting the instance
   is an lvalue or rvalue, and is const-qualified or not (however, a
   volatile-qualified instance is not required to be invocable). Thus,
   ranges::iter_move can be copied freely and its copies can be used
   interchangeably.

   Given a set of types Args..., if std::declval<Args>()... meet the
   requirements for arguments to ranges::iter_move above, __iter_move_fn
   models
     * std::invocable<__iter_move_fn, Args...>,
     * std::invocable<const __iter_move_fn, Args...>,
     * std::invocable<__iter_move_fn&, Args...>, and
     * std::invocable<const __iter_move_fn&, Args...>.

   Otherwise, no function call operator of __iter_move_fn participates in
   overload resolution.

Example

   This section is incomplete
   Reason: no example

See also

   iter_move
   (C++20)
   casts the result of dereferencing the adjusted underlying iterator to
   its associated rvalue reference type
   (function)
   iter_move
   (C++20)
   casts the result of dereferencing the underlying iterator to its
   associated rvalue reference type
   (function)
   Retrieved from
   "https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/ranges/
   iter_move&oldid=151410"

Navigation

     * Online version
     * Offline version retrieved 2024-06-10 08:17.

     * This page was last modified on 6 May 2023, at 00:21.
     * This page has been accessed 16,098 times.
